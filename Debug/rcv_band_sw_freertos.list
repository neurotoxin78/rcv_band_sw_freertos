
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001015c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ce4  080102fc  080102fc  000202fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fe0  08012fe0  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08012fe0  08012fe0  00022fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fe8  08012fe8  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fe8  08012fe8  00022fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fec  08012fec  00022fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08012ff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bc3c  200001d0  080131c0  000301d0  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  2001be0c  080131c0  0003be0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a43b  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000636c  00000000  00000000  0005a63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  000609a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee0  00000000  00000000  00062b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f390  00000000  00000000  00064a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d7ec  00000000  00000000  00083db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6752  00000000  00000000  000b159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157cee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009074  00000000  00000000  00157d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102e4 	.word	0x080102e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	080102e4 	.word	0x080102e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 ffbe 	bl	8001518 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 ffb5 	bl	8001518 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 ffac 	bl	8001518 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fee0 	bl	800139e <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 fed1 	bl	800139e <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 fec2 	bl	800139e <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 feb3 	bl	800139e <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	080102fc 	.word	0x080102fc
 8000650:	08010304 	.word	0x08010304
 8000654:	0801030c 	.word	0x0801030c
 8000658:	08010310 	.word	0x08010310

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f000 fe8e 	bl	800139e <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f000 fe70 	bl	800139e <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00f fa70 	bl	800fc08 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 fe2c 	bl	800139e <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00f fa5b 	bl	800fc08 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 fe17 	bl	800139e <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	08010314 	.word	0x08010314
 8000784:	200001ec 	.word	0x200001ec
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	08010320 	.word	0x08010320
 8000798:	2000000c 	.word	0x2000000c

0800079c <blk_pwm_setvalue>:

void blk_pwm_setvalue(uint16_t value)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  USR_TIM_PWM_OpenTim5Ch2();
 80007a6:	f001 fa37 	bl	8001c18 <USR_TIM_PWM_OpenTim5Ch2>
	  USR_TIM_PWM_SetCompare(value * 10);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fa38 	bl	8001c2c <USR_TIM_PWM_SetCompare>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setBacklight>:

void setBacklight(uint8_t percent) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	uint16_t d = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e013      	b.n	8000804 <setBacklight+0x40>
		blk_pwm_setvalue(i);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffdc 	bl	800079c <blk_pwm_setvalue>
		for (d = 0; d <=60000; d++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <setBacklight+0x2c>
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d9f7      	bls.n	80007ea <setBacklight+0x26>
		{

		}
		d = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29b      	uxth	r3, r3
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9e6      	bls.n	80007dc <setBacklight+0x18>
	}
	i=0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getRunTimeCounterValue+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000025c 	.word	0x2000025c

08000840 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MX_FREERTOS_Init+0x28>)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_FREERTOS_Init+0x2c>)
 800085a:	f00b fde7 	bl	800c42c <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <MX_FREERTOS_Init+0x30>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <MX_FREERTOS_Init+0x34>)
 8000866:	2100      	movs	r1, #0
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_FREERTOS_Init+0x38>)
 800086a:	f00b fddf 	bl	800c42c <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <MX_FREERTOS_Init+0x3c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08012e74 	.word	0x08012e74
 800087c:	08000891 	.word	0x08000891
 8000880:	20000200 	.word	0x20000200
 8000884:	08012e98 	.word	0x08012e98
 8000888:	080008ed 	.word	0x080008ed
 800088c:	20000204 	.word	0x20000204

08000890 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000898:	f00e fb20 	bl	800eedc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <StartDefaultTask+0x4c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <StartDefaultTask+0x50>)
 80008a4:	460b      	mov	r3, r1
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	440b      	add	r3, r1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	3304      	adds	r3, #4
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <StartDefaultTask+0x54>)
 80008b6:	601a      	str	r2, [r3, #0]
	  si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <StartDefaultTask+0x54>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f009 fcd4 	bl	800a26c <si5351_SetupCLK0>
	  si5351_EnableOutputs(1 << 0);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f009 fcf2 	bl	800a2ae <si5351_EnableOutputs>
	/* Timer*/
	  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
	  //HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <StartDefaultTask+0x58>)
 80008d0:	f001 fe32 	bl	8002538 <HAL_GPIO_TogglePin>
		osDelay(250);
 80008d4:	20fa      	movs	r0, #250	; 0xfa
 80008d6:	f00b fe3b 	bl	800c550 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008da:	e7f6      	b.n	80008ca <StartDefaultTask+0x3a>
 80008dc:	20000266 	.word	0x20000266
 80008e0:	20000054 	.word	0x20000054
 80008e4:	20000260 	.word	0x20000260
 80008e8:	40020800 	.word	0x40020800

080008ec <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
	uint8_t buttonNumber = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	76fb      	strb	r3, [r7, #27]
	/*  */
	const uint32_t max_freq = band[current_band].maxFreq;
 80008fc:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <StartEncoderTask+0x1a0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	4a63      	ldr	r2, [pc, #396]	; (8000a90 <StartEncoderTask+0x1a4>)
 8000904:	460b      	mov	r3, r1
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	440b      	add	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	3308      	adds	r3, #8
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	617b      	str	r3, [r7, #20]
	const uint32_t min_freq = band[current_band].minFreq;
 8000914:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <StartEncoderTask+0x1a0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4a5d      	ldr	r2, [pc, #372]	; (8000a90 <StartEncoderTask+0x1a4>)
 800091c:	460b      	mov	r3, r1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	440b      	add	r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	3304      	adds	r3, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	613b      	str	r3, [r7, #16]
	current_freq = min_freq;
 800092c:	4a59      	ldr	r2, [pc, #356]	; (8000a94 <StartEncoderTask+0x1a8>)
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 8000932:	f7ff fe27 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 8000936:	4b55      	ldr	r3, [pc, #340]	; (8000a8c <StartEncoderTask+0x1a0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <StartEncoderTask+0x1a4>)
 800093e:	460b      	mov	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	440b      	add	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe86 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 8000950:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b51      	ldr	r3, [pc, #324]	; (8000a9c <StartEncoderTask+0x1b0>)
 8000958:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe9b 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <StartEncoderTask+0x1a8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff feb4 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 800096c:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <StartEncoderTask+0x1b4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	60fb      	str	r3, [r7, #12]
		uint16_t step_value = step[current_step].step;
 8000974:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	4a48      	ldr	r2, [pc, #288]	; (8000a9c <StartEncoderTask+0x1b0>)
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	4413      	add	r3, r2
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	817b      	strh	r3, [r7, #10]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3b01      	subs	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	0fda      	lsrs	r2, r3, #31
 800098a:	4413      	add	r3, r2
 800098c:	105b      	asrs	r3, r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000994:	337f      	adds	r3, #127	; 0x7f
 8000996:	60fb      	str	r3, [r7, #12]

		if (currCounter != prevCounter) {
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	429a      	cmp	r2, r3
 800099e:	d044      	beq.n	8000a2a <StartEncoderTask+0x13e>
			if (currCounter > prevCounter) {
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dd1d      	ble.n	80009e4 <StartEncoderTask+0xf8>
				if (current_freq != min_freq) {
 80009a8:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d006      	beq.n	80009c0 <StartEncoderTask+0xd4>
					current_freq -= step_value;
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	897b      	ldrh	r3, [r7, #10]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e002      	b.n	80009c6 <StartEncoderTask+0xda>
				} else {
					current_freq = max_freq;
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2101      	movs	r1, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f009 fc4d 	bl	800a26c <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe7c 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009dc:	2005      	movs	r0, #5
 80009de:	f00b fdb7 	bl	800c550 <osDelay>
 80009e2:	e020      	b.n	8000a26 <StartEncoderTask+0x13a>
			} else if (currCounter < prevCounter) {
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	da1c      	bge.n	8000a26 <StartEncoderTask+0x13a>
				if (current_freq != max_freq) {
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d006      	beq.n	8000a04 <StartEncoderTask+0x118>
					current_freq += step_value;
 80009f6:	897a      	ldrh	r2, [r7, #10]
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <StartEncoderTask+0x1a8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <StartEncoderTask+0x1a8>)
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e002      	b.n	8000a0a <StartEncoderTask+0x11e>
				} else {
					current_freq = min_freq;
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <StartEncoderTask+0x1a8>)
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <StartEncoderTask+0x1a8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f009 fc2b 	bl	800a26c <si5351_SetupCLK0>
				displayFrequency(current_freq);
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <StartEncoderTask+0x1a8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe5a 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000a20:	2005      	movs	r0, #5
 8000a22:	f00b fd95 	bl	800c550 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8000a2a:	7efb      	ldrb	r3, [r7, #27]
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <StartEncoderTask+0x1b8>)
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d025      	beq.n	8000a82 <StartEncoderTask+0x196>
			buttonPressed[buttonNumber] = 0;
 8000a36:	7efb      	ldrb	r3, [r7, #27]
 8000a38:	4a1a      	ldr	r2, [pc, #104]	; (8000aa4 <StartEncoderTask+0x1b8>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	54d1      	strb	r1, [r2, r3]
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			if (current_step != lastStep)
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2306      	movs	r3, #6
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d00f      	beq.n	8000a6a <StartEncoderTask+0x17e>
			{
				current_step++;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000a54:	801a      	strh	r2, [r3, #0]
				displayStep(step[current_step].name);
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <StartEncoderTask+0x1b0>)
 8000a5e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe18 	bl	8000698 <displayStep>
 8000a68:	e00b      	b.n	8000a82 <StartEncoderTask+0x196>
			} else
			{
				current_step = 0;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	801a      	strh	r2, [r3, #0]
				displayStep(step[current_step].name);
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <StartEncoderTask+0x1ac>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <StartEncoderTask+0x1b0>)
 8000a78:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe0b 	bl	8000698 <displayStep>
			}
		}
		osDelay(5);
 8000a82:	2005      	movs	r0, #5
 8000a84:	f00b fd64 	bl	800c550 <osDelay>
	for (;;) {
 8000a88:	e770      	b.n	800096c <StartEncoderTask+0x80>
 8000a8a:	bf00      	nop
 8000a8c:	20000266 	.word	0x20000266
 8000a90:	20000054 	.word	0x20000054
 8000a94:	20000260 	.word	0x20000260
 8000a98:	20000264 	.word	0x20000264
 8000a9c:	2000001c 	.word	0x2000001c
 8000aa0:	20000338 	.word	0x20000338
 8000aa4:	20000328 	.word	0x20000328

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a3a      	ldr	r2, [pc, #232]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a33      	ldr	r2, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_GPIO_Init+0x108>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b36:	f001 fccd 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	211c      	movs	r1, #28
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b40:	f001 fcc8 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b5e:	f001 fa1f 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000b62:	231c      	movs	r3, #28
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b7a:	f001 fa11 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	480a      	ldr	r0, [pc, #40]	; (8000bbc <MX_GPIO_Init+0x114>)
 8000b94:	f001 fa04 	bl	8001fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2105      	movs	r1, #5
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	f001 f9bb 	bl	8001f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ba2:	2006      	movs	r0, #6
 8000ba4:	f001 f9e4 	bl	8001f70 <HAL_NVIC_EnableIRQ>

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_I2C2_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_I2C2_Init+0x58>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_I2C2_Init+0x50>)
 8000bfe:	f001 fcdb 	bl	80025b8 <HAL_I2C_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 f93d 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000208 	.word	0x20000208
 8000c14:	40005800 	.word	0x40005800
 8000c18:	000186a0 	.word	0x000186a0

08000c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <HAL_I2C_MspInit+0xa4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d13c      	bne.n	8000cb8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_I2C_MspInit+0xa8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <HAL_I2C_MspInit+0xa8>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_I2C_MspInit+0xa8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <HAL_I2C_MspInit+0xac>)
 8000c78:	f001 f992 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <HAL_I2C_MspInit+0xac>)
 8000c98:	f001 f982 	bl	8001fa0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0xa8>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_I2C_MspInit+0xa8>)
 8000ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_I2C_MspInit+0xa8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40005800 	.word	0x40005800
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000cd2:	f000 fad3 	bl	800127c <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000cd6:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000cda:	f000 fca1 	bl	8001620 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <Display_Init+0x5c>)
 8000ce0:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <Display_Init+0x60>)
 8000cf4:	210a      	movs	r1, #10
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	f000 fb51 	bl	800139e <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <Display_Init+0x64>)
 8000cfe:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000d02:	9202      	str	r2, [sp, #8]
 8000d04:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	9200      	str	r2, [sp, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <Display_Init+0x68>)
 8000d12:	2123      	movs	r1, #35	; 0x23
 8000d14:	2022      	movs	r0, #34	; 0x22
 8000d16:	f000 fb42 	bl	800139e <ST7735_WriteString>
    HAL_Delay(3000);
 8000d1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d1e:	f001 f809 	bl	8001d34 <HAL_Delay>
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000014 	.word	0x20000014
 8000d2c:	08010380 	.word	0x08010380
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	0801038c 	.word	0x0801038c

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 ffb8 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f828 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f7ff feb0 	bl	8000aa8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d48:	f000 f934 	bl	8000fb4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000d4c:	f000 fdc8 	bl	80018e0 <MX_TIM3_Init>
  MX_RTC_Init();
 8000d50:	f000 f8aa 	bl	8000ea8 <MX_RTC_Init>
  MX_TIM5_Init();
 8000d54:	f000 fe18 	bl	8001988 <MX_TIM5_Init>
  MX_I2C2_Init();
 8000d58:	f7ff ff32 	bl	8000bc0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //MX_USB_DEVICE_Init();
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d5c:	213c      	movs	r1, #60	; 0x3c
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <main+0x54>)
 8000d60:	f006 f93e 	bl	8006fe0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000d64:	2104      	movs	r1, #4
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <main+0x58>)
 8000d68:	f005 fe74 	bl	8006a54 <HAL_TIM_PWM_Start>

  /* Display */
  setBacklight(100);
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	f7ff fd29 	bl	80007c4 <setBacklight>
  Display_Init();
 8000d72:	f7ff ffab 	bl	8000ccc <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f009 f892 	bl	8009ea0 <si5351_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d7c:	f00b fb0c 	bl	800c398 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d80:	f7ff fd66 	bl	8000850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d84:	f00b fb2c 	bl	800c3e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <main+0x50>
 8000d8a:	bf00      	nop
 8000d8c:	20000338 	.word	0x20000338
 8000d90:	20000380 	.word	0x20000380

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f00e fdce 	bl	800f944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000df0:	2305      	movs	r3, #5
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e08:	2319      	movs	r3, #25
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e0c:	23c0      	movs	r3, #192	; 0xc0
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fc71 	bl	8004704 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e28:	f000 f82d 	bl	8000e86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2103      	movs	r1, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 ff83 	bl	8004d54 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e54:	f000 f817 	bl	8000e86 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d101      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7a:	f000 ff3b 	bl	8001cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8a:	b672      	cpsid	i
}
 8000e8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <Error_Handler+0x8>

08000e90 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_RTC_Init+0xac>)
 8000ec2:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <MX_RTC_Init+0xb0>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <MX_RTC_Init+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_RTC_Init+0xac>)
 8000ece:	227f      	movs	r2, #127	; 0x7f
 8000ed0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_RTC_Init+0xac>)
 8000ed4:	22ff      	movs	r2, #255	; 0xff
 8000ed6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_RTC_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_RTC_Init+0xac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_RTC_Init+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eea:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_RTC_Init+0xac>)
 8000eec:	f004 fbee 	bl	80056cc <HAL_RTC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000ef6:	f7ff ffc6 	bl	8000e86 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <MX_RTC_Init+0xac>)
 8000f16:	f004 fcb1 	bl	800587c <HAL_RTC_SetTime>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f7ff ffb1 	bl	8000e86 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000f24:	2305      	movs	r3, #5
 8000f26:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000f30:	2316      	movs	r3, #22
 8000f32:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_RTC_Init+0xac>)
 8000f3c:	f004 fde6 	bl	8005b0c <HAL_RTC_SetDate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f46:	f7ff ff9e 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000268 	.word	0x20000268
 8000f58:	40002800 	.word	0x40002800

08000f5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_RTC_MspInit+0x50>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d111      	bne.n	8000fa4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f80:	2302      	movs	r3, #2
 8000f82:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f88:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 f986 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f9a:	f7ff ff74 	bl	8000e86 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_RTC_MspInit+0x54>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40002800 	.word	0x40002800
 8000fb0:	42470e3c 	.word	0x42470e3c

08000fb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <MX_SPI1_Init+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_SPI1_Init+0x64>)
 8001000:	220a      	movs	r2, #10
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_SPI1_Init+0x64>)
 8001006:	f004 ff4b 	bl	8005ea0 <HAL_SPI_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001010:	f7ff ff39 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000288 	.word	0x20000288
 800101c:	40013000 	.word	0x40013000

08001020 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_SPI_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12b      	bne.n	800109a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_SPI_MspInit+0x88>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_SPI_MspInit+0x88>)
 800104c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_SPI_MspInit+0x88>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_SPI_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_SPI_MspInit+0x88>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_SPI_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800108a:	2305      	movs	r3, #5
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_SPI_MspInit+0x8c>)
 8001096:	f000 ff83 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40013000 	.word	0x40013000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000

080010b0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2110      	movs	r1, #16
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <ST7735_Select+0x14>)
 80010ba:	f001 fa0b 	bl	80024d4 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020000 	.word	0x40020000

080010c8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2110      	movs	r1, #16
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <ST7735_Unselect+0x14>)
 80010d2:	f001 f9ff 	bl	80024d4 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020000 	.word	0x40020000

080010e0 <ST7735_Reset>:

static void ST7735_Reset() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <ST7735_Reset+0x24>)
 80010ea:	f001 f9f3 	bl	80024d4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f000 fe20 	bl	8001d34 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2108      	movs	r1, #8
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <ST7735_Reset+0x24>)
 80010fa:	f001 f9eb 	bl	80024d4 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2104      	movs	r1, #4
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <ST7735_WriteCommand+0x2c>)
 8001118:	f001 f9dc 	bl	80024d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800111c:	1df9      	adds	r1, r7, #7
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	2201      	movs	r2, #1
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <ST7735_WriteCommand+0x30>)
 8001126:	f005 f857 	bl	80061d8 <HAL_SPI_Transmit>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020000 	.word	0x40020000
 8001138:	20000288 	.word	0x20000288

0800113c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2104      	movs	r1, #4
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <ST7735_WriteData+0x2c>)
 800114c:	f001 f9c2 	bl	80024d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <ST7735_WriteData+0x30>)
 800115c:	f005 f83c 	bl	80061d8 <HAL_SPI_Transmit>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40020000 	.word	0x40020000
 800116c:	20000288 	.word	0x20000288

08001170 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001182:	e034      	b.n	80011ee <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffb9 	bl	8001108 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80011aa:	7abb      	ldrb	r3, [r7, #10]
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80011b2:	7abb      	ldrb	r3, [r7, #10]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80011b8:	7abb      	ldrb	r3, [r7, #10]
 80011ba:	4619      	mov	r1, r3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffbd 	bl	800113c <ST7735_WriteData>
            addr += numArgs;
 80011c2:	7abb      	ldrb	r3, [r7, #10]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00e      	beq.n	80011ee <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d102      	bne.n	80011e6 <ST7735_ExecuteCommandList+0x76>
 80011e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80011e6:	89bb      	ldrh	r3, [r7, #12]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fda3 	bl	8001d34 <HAL_Delay>
    while(numCommands--) {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	73fa      	strb	r2, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1c5      	bne.n	8001184 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	4604      	mov	r4, r0
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4623      	mov	r3, r4
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4603      	mov	r3, r0
 8001216:	71bb      	strb	r3, [r7, #6]
 8001218:	460b      	mov	r3, r1
 800121a:	717b      	strb	r3, [r7, #5]
 800121c:	4613      	mov	r3, r2
 800121e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001220:	202a      	movs	r0, #42	; 0x2a
 8001222:	f7ff ff71 	bl	8001108 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001226:	2300      	movs	r3, #0
 8001228:	733b      	strb	r3, [r7, #12]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	3301      	adds	r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	737b      	strb	r3, [r7, #13]
 8001232:	2300      	movs	r3, #0
 8001234:	73bb      	strb	r3, [r7, #14]
 8001236:	797b      	ldrb	r3, [r7, #5]
 8001238:	3301      	adds	r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2104      	movs	r1, #4
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff79 	bl	800113c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800124a:	202b      	movs	r0, #43	; 0x2b
 800124c:	f7ff ff5c 	bl	8001108 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	331a      	adds	r3, #26
 8001254:	b2db      	uxtb	r3, r3
 8001256:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001258:	793b      	ldrb	r3, [r7, #4]
 800125a:	331a      	adds	r3, #26
 800125c:	b2db      	uxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff68 	bl	800113c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800126c:	202c      	movs	r0, #44	; 0x2c
 800126e:	f7ff ff4b 	bl	8001108 <ST7735_WriteCommand>
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
	...

0800127c <ST7735_Init>:

void ST7735_Init() {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001280:	f7ff ff16 	bl	80010b0 <ST7735_Select>
    ST7735_Reset();
 8001284:	f7ff ff2c 	bl	80010e0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001288:	4806      	ldr	r0, [pc, #24]	; (80012a4 <ST7735_Init+0x28>)
 800128a:	f7ff ff71 	bl	8001170 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <ST7735_Init+0x2c>)
 8001290:	f7ff ff6e 	bl	8001170 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <ST7735_Init+0x30>)
 8001296:	f7ff ff6b 	bl	8001170 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800129a:	f7ff ff15 	bl	80010c8 <ST7735_Unselect>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08012ebc 	.word	0x08012ebc
 80012a8:	08012ef8 	.word	0x08012ef8
 80012ac:	08012f08 	.word	0x08012f08

080012b0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012b0:	b082      	sub	sp, #8
 80012b2:	b590      	push	{r4, r7, lr}
 80012b4:	b089      	sub	sp, #36	; 0x24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	460b      	mov	r3, r1
 80012c0:	80bb      	strh	r3, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	b2d9      	uxtb	r1, r3
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012d6:	4413      	add	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3b01      	subs	r3, #1
 80012dc:	b2dc      	uxtb	r4, r3
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012e6:	4413      	add	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4622      	mov	r2, r4
 80012f0:	f7ff ff87 	bl	8001202 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	e043      	b.n	8001382 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	3b20      	subs	r3, #32
 8001300:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4619      	mov	r1, r3
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	440b      	add	r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e029      	b.n	8001370 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00e      	beq.n	800134a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800132c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	743b      	strb	r3, [r7, #16]
 8001336:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001338:	b2db      	uxtb	r3, r3
 800133a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2102      	movs	r1, #2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fefa 	bl	800113c <ST7735_WriteData>
 8001348:	e00f      	b.n	800136a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800134a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	733b      	strb	r3, [r7, #12]
 8001356:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800135a:	b2db      	uxtb	r3, r3
 800135c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2102      	movs	r1, #2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fee9 	bl	800113c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	3301      	adds	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001374:	461a      	mov	r2, r3
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4293      	cmp	r3, r2
 800137a:	d3cf      	bcc.n	800131c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3301      	adds	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001386:	461a      	mov	r2, r3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	4293      	cmp	r3, r2
 800138c:	d3b5      	bcc.n	80012fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3724      	adds	r7, #36	; 0x24
 8001394:	46bd      	mov	sp, r7
 8001396:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800139a:	b002      	add	sp, #8
 800139c:	4770      	bx	lr

0800139e <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800139e:	b082      	sub	sp, #8
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	603a      	str	r2, [r7, #0]
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80013b2:	f7ff fe7d 	bl	80010b0 <ST7735_Select>

    while(*str) {
 80013b6:	e02d      	b.n	8001414 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	7d3a      	ldrb	r2, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	2b9f      	cmp	r3, #159	; 0x9f
 80013c0:	dd13      	ble.n	80013ea <ST7735_WriteString+0x4c>
            x = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013c6:	7d7b      	ldrb	r3, [r7, #21]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	7d7a      	ldrb	r2, [r7, #21]
 80013d4:	4413      	add	r3, r2
 80013d6:	2b4f      	cmp	r3, #79	; 0x4f
 80013d8:	dc21      	bgt.n	800141e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d103      	bne.n	80013ea <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
                continue;
 80013e8:	e014      	b.n	8001414 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	88b9      	ldrh	r1, [r7, #4]
 80013f0:	88f8      	ldrh	r0, [r7, #6]
 80013f2:	8c3b      	ldrh	r3, [r7, #32]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	8bbb      	ldrh	r3, [r7, #28]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f7ff ff56 	bl	80012b0 <ST7735_WriteChar>
        x += font.width;
 8001404:	7d3b      	ldrb	r3, [r7, #20]
 8001406:	b29a      	uxth	r2, r3
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4413      	add	r3, r2
 800140c:	80fb      	strh	r3, [r7, #6]
        str++;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1cd      	bne.n	80013b8 <ST7735_WriteString+0x1a>
 800141c:	e000      	b.n	8001420 <ST7735_WriteString+0x82>
                break;
 800141e:	bf00      	nop
    }

    ST7735_Unselect();
 8001420:	f7ff fe52 	bl	80010c8 <ST7735_Unselect>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800142e:	b002      	add	sp, #8
 8001430:	4770      	bx	lr
	...

08001434 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	4611      	mov	r1, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4623      	mov	r3, r4
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	4603      	mov	r3, r0
 8001448:	80bb      	strh	r3, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	807b      	strh	r3, [r7, #2]
 800144e:	4613      	mov	r3, r2
 8001450:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2b9f      	cmp	r3, #159	; 0x9f
 8001456:	d857      	bhi.n	8001508 <ST7735_FillRectangle+0xd4>
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	2b4f      	cmp	r3, #79	; 0x4f
 800145c:	d854      	bhi.n	8001508 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	4413      	add	r3, r2
 8001464:	2ba0      	cmp	r3, #160	; 0xa0
 8001466:	dd03      	ble.n	8001470 <ST7735_FillRectangle+0x3c>
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800146e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001470:	88ba      	ldrh	r2, [r7, #4]
 8001472:	883b      	ldrh	r3, [r7, #0]
 8001474:	4413      	add	r3, r2
 8001476:	2b50      	cmp	r3, #80	; 0x50
 8001478:	dd03      	ble.n	8001482 <ST7735_FillRectangle+0x4e>
 800147a:	88bb      	ldrh	r3, [r7, #4]
 800147c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001480:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001482:	f7ff fe15 	bl	80010b0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2d8      	uxtb	r0, r3
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	b2d9      	uxtb	r1, r3
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3b01      	subs	r3, #1
 800149c:	b2dc      	uxtb	r4, r3
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	883b      	ldrh	r3, [r7, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4622      	mov	r2, r4
 80014b0:	f7ff fea7 	bl	8001202 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014b4:	8c3b      	ldrh	r3, [r7, #32]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	733b      	strb	r3, [r7, #12]
 80014be:	8c3b      	ldrh	r3, [r7, #32]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2104      	movs	r1, #4
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <ST7735_FillRectangle+0xdc>)
 80014ca:	f001 f803 	bl	80024d4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014ce:	883b      	ldrh	r3, [r7, #0]
 80014d0:	80bb      	strh	r3, [r7, #4]
 80014d2:	e013      	b.n	80014fc <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	e00a      	b.n	80014f0 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014da:	f107 010c 	add.w	r1, r7, #12
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	2202      	movs	r2, #2
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <ST7735_FillRectangle+0xe0>)
 80014e6:	f004 fe77 	bl	80061d8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f1      	bne.n	80014da <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	80bb      	strh	r3, [r7, #4]
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1e8      	bne.n	80014d4 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001502:	f7ff fde1 	bl	80010c8 <ST7735_Unselect>
 8001506:	e000      	b.n	800150a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001508:	bf00      	nop
}
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	40020000 	.word	0x40020000
 8001514:	20000288 	.word	0x20000288

08001518 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	80fb      	strh	r3, [r7, #6]
 800152a:	4603      	mov	r3, r0
 800152c:	80bb      	strh	r3, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]
 8001532:	4613      	mov	r3, r2
 8001534:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	2b9f      	cmp	r3, #159	; 0x9f
 800153a:	d869      	bhi.n	8001610 <ST7735_FillRectangleFast+0xf8>
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	2b4f      	cmp	r3, #79	; 0x4f
 8001540:	d866      	bhi.n	8001610 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001542:	88fa      	ldrh	r2, [r7, #6]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4413      	add	r3, r2
 8001548:	2ba0      	cmp	r3, #160	; 0xa0
 800154a:	dd03      	ble.n	8001554 <ST7735_FillRectangleFast+0x3c>
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001552:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	883b      	ldrh	r3, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	2b50      	cmp	r3, #80	; 0x50
 800155c:	dd03      	ble.n	8001566 <ST7735_FillRectangleFast+0x4e>
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001564:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001566:	f7ff fda3 	bl	80010b0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2d8      	uxtb	r0, r3
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b2dc      	uxtb	r4, r3
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	883b      	ldrh	r3, [r7, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4413      	add	r3, r2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4622      	mov	r2, r4
 8001594:	f7ff fe35 	bl	8001202 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001598:	8c3b      	ldrh	r3, [r7, #32]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	723b      	strb	r3, [r7, #8]
 80015a2:	8c3b      	ldrh	r3, [r7, #32]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00e f9ab 	bl	800f908 <malloc>
 80015b2:	4603      	mov	r3, r0
 80015b4:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80015b6:	2300      	movs	r3, #0
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	e008      	b.n	80015ce <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	893a      	ldrh	r2, [r7, #8]
 80015c6:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	3301      	adds	r3, #1
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3f2      	bcc.n	80015bc <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2104      	movs	r1, #4
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <ST7735_FillRectangleFast+0x100>)
 80015dc:	f000 ff7a 	bl	80024d4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80015e0:	883b      	ldrh	r3, [r7, #0]
 80015e2:	80bb      	strh	r3, [r7, #4]
 80015e4:	e00b      	b.n	80015fe <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <ST7735_FillRectangleFast+0x104>)
 80015f4:	f004 fdf0 	bl	80061d8 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <ST7735_FillRectangleFast+0xce>

    free(line);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f00e f987 	bl	800f918 <free>
    ST7735_Unselect();
 800160a:	f7ff fd5d 	bl	80010c8 <ST7735_Unselect>
 800160e:	e000      	b.n	8001612 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001610:	bf00      	nop
}
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	40020000 	.word	0x40020000
 800161c:	20000288 	.word	0x20000288

08001620 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af02      	add	r7, sp, #8
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2350      	movs	r3, #80	; 0x50
 8001630:	22a0      	movs	r2, #160	; 0xa0
 8001632:	2100      	movs	r1, #0
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fefd 	bl	8001434 <ST7735_FillRectangle>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_MspInit+0x54>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_MspInit+0x54>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x54>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_MspInit+0x54>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_MspInit+0x54>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_MspInit+0x54>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	210f      	movs	r1, #15
 8001686:	f06f 0001 	mvn.w	r0, #1
 800168a:	f000 fc45 	bl	8001f18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	201c      	movs	r0, #28
 80016b2:	f000 fc31 	bl	8001f18 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b6:	201c      	movs	r0, #28
 80016b8:	f000 fc5a 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_InitTick+0xa8>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_InitTick+0xa8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_InitTick+0xa8>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d8:	f107 0210 	add.w	r2, r7, #16
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fdaa 	bl	800523c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016e8:	f003 fd94 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 80016ec:	4603      	mov	r3, r0
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_InitTick+0xac>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	3b01      	subs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0xb0>)
 8001702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001706:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_InitTick+0xb0>)
 800170a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800170e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_InitTick+0xb0>)
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_InitTick+0xb0>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_InitTick+0xb0>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001722:	480a      	ldr	r0, [pc, #40]	; (800174c <HAL_InitTick+0xb0>)
 8001724:	f004 ff6e 	bl	8006604 <HAL_TIM_Base_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d104      	bne.n	8001738 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <HAL_InitTick+0xb0>)
 8001730:	f005 f82e 	bl	8006790 <HAL_TIM_Base_Start_IT>
 8001734:	4603      	mov	r3, r0
 8001736:	e000      	b.n	800173a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	3730      	adds	r7, #48	; 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	431bde83 	.word	0x431bde83
 800174c:	200002e0 	.word	0x200002e0

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001780:	2001      	movs	r0, #1
 8001782:	f000 ff01 	bl	8002588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM2_IRQHandler+0x10>)
 8001792:	f005 fce3 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002e0 	.word	0x200002e0

080017a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <TIM3_IRQHandler+0x28>)
 80017a6:	f005 fcd9 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <TIM3_IRQHandler+0x2c>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <TIM3_IRQHandler+0x2c>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <TIM3_IRQHandler+0x2c>)
 80017bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017c0:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000338 	.word	0x20000338
 80017cc:	40000400 	.word	0x40000400

080017d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM5_IRQHandler+0x10>)
 80017d6:	f005 fcc1 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000380 	.word	0x20000380

080017e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <OTG_FS_IRQHandler+0x10>)
 80017ea:	f001 fe5e 	bl	80034aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2001b6d0 	.word	0x2001b6d0

080017f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db11      	blt.n	800183c <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001818:	f000 fa80 	bl	8001d1c <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 250)
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_GPIO_EXTI_Callback+0x50>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2bf9      	cmp	r3, #249	; 0xf9
 8001828:	d90a      	bls.n	8001840 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_GPIO_EXTI_Callback+0x50>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001834:	4a05      	ldr	r2, [pc, #20]	; (800184c <HAL_GPIO_EXTI_Callback+0x54>)
 8001836:	2101      	movs	r1, #1
 8001838:	54d1      	strb	r1, [r2, r3]
 800183a:	e002      	b.n	8001842 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8001840:	bf00      	nop
}
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000330 	.word	0x20000330
 800184c:	20000328 	.word	0x20000328

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f00e f816 	bl	800f8b0 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00001000 	.word	0x00001000
 80018b4:	20000334 	.word	0x20000334
 80018b8:	2001be10 	.word	0x2001be10

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	; 0x30
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2224      	movs	r2, #36	; 0x24
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00e f828 	bl	800f944 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <MX_TIM3_Init+0xa0>)
 80018fe:	4a21      	ldr	r2, [pc, #132]	; (8001984 <MX_TIM3_Init+0xa4>)
 8001900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <MX_TIM3_Init+0xa0>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM3_Init+0xa0>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM3_Init+0xa0>)
 8001910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM3_Init+0xa0>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM3_Init+0xa0>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001922:	2301      	movs	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001932:	2302      	movs	r3, #2
 8001934:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001942:	2302      	movs	r3, #2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM3_Init+0xa0>)
 800194e:	f005 f9ad 	bl	8006cac <HAL_TIM_Encoder_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001958:	f7ff fa95 	bl	8000e86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM3_Init+0xa0>)
 800196a:	f006 fd79 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001974:	f7ff fa87 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000338 	.word	0x20000338
 8001984:	40000400 	.word	0x40000400

08001988 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08e      	sub	sp, #56	; 0x38
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019ba:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <MX_TIM5_Init+0xe8>)
 80019bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019c0:	222f      	movs	r2, #47	; 0x2f
 80019c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019cc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019de:	4823      	ldr	r0, [pc, #140]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019e0:	f004 fe10 	bl	8006604 <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80019ea:	f7ff fa4c 	bl	8000e86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f8:	4619      	mov	r1, r3
 80019fa:	481c      	ldr	r0, [pc, #112]	; (8001a6c <MX_TIM5_Init+0xe4>)
 80019fc:	f005 fe5c 	bl	80076b8 <HAL_TIM_ConfigClockSource>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001a06:	f7ff fa3e 	bl	8000e86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a0a:	4818      	ldr	r0, [pc, #96]	; (8001a6c <MX_TIM5_Init+0xe4>)
 8001a0c:	f004 ff52 	bl	80068b4 <HAL_TIM_PWM_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001a16:	f7ff fa36 	bl	8000e86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4619      	mov	r1, r3
 8001a28:	4810      	ldr	r0, [pc, #64]	; (8001a6c <MX_TIM5_Init+0xe4>)
 8001a2a:	f006 fd19 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001a34:	f7ff fa27 	bl	8000e86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a38:	2360      	movs	r3, #96	; 0x60
 8001a3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <MX_TIM5_Init+0xe4>)
 8001a50:	f005 fc8c 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001a5a:	f7ff fa14 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <MX_TIM5_Init+0xe4>)
 8001a60:	f000 f8a0 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 8001a64:	bf00      	nop
 8001a66:	3738      	adds	r7, #56	; 0x38
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000380 	.word	0x20000380
 8001a70:	40000c00 	.word	0x40000c00

08001a74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d151      	bne.n	8001b3a <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afa:	2302      	movs	r3, #2
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b06:	f000 fa4b 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b26:	f000 fa3b 	bl	8001fa0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	201d      	movs	r0, #29
 8001b30:	f000 f9f2 	bl	8001f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b34:	201d      	movs	r0, #29
 8001b36:	f000 fa1b 	bl	8001f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_TIM_Base_MspInit+0x48>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d115      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_TIM_Base_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2105      	movs	r1, #5
 8001b86:	2032      	movs	r0, #50	; 0x32
 8001b88:	f000 f9c6 	bl	8001f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f000 f9ef 	bl	8001f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40000c00 	.word	0x40000c00
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_TIM_MspPostInit+0x68>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d11d      	bne.n	8001c02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_TIM_MspPostInit+0x6c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_TIM_MspPostInit+0x6c>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_TIM_MspPostInit+0x6c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001be2:	2302      	movs	r3, #2
 8001be4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_TIM_MspPostInit+0x70>)
 8001bfe:	f000 f9cf 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40000c00 	.word	0x40000c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000

08001c18 <USR_TIM_PWM_OpenTim5Ch2>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USR_TIM_PWM_OpenTim5Ch2() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USR_TIM_PWM_OpenTim5Ch2+0x10>)
 8001c20:	f004 ff18 	bl	8006a54 <HAL_TIM_PWM_Start>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000380 	.word	0x20000380

08001c2c <USR_TIM_PWM_SetCompare>:
void USR_TIM_PWM_CloseTim5Ch2() {
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
}

//duty == 0~1000
void USR_TIM_PWM_SetCompare(uint16_t duty) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
	if (duty > 1000) // здесь 1000, потому что порог подсчета установлен в 1 тысячу
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c3c:	d902      	bls.n	8001c44 <USR_TIM_PWM_SetCompare+0x18>
			{
		duty = 1000;
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, duty);
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <USR_TIM_PWM_SetCompare+0x2c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	20000380 	.word	0x20000380

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c62:	490e      	ldr	r1, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c64:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c78:	4c0b      	ldr	r4, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c86:	f7ff fe19 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f00d fe17 	bl	800f8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7ff f853 	bl	8000d38 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001ca0:	08012ff0 	.word	0x08012ff0
  ldr r2, =_sbss
 8001ca4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001ca8:	2001be0c 	.word	0x2001be0c

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>
	...

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_Init+0x40>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_Init+0x40>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_Init+0x40>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f8fd 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f7ff fcdc 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fcae 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000074 	.word	0x20000074
 8001d18:	200003c8 	.word	0x200003c8

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200003c8 	.word	0x200003c8

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000074 	.word	0x20000074

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b07      	cmp	r3, #7
 8001ee4:	d00f      	beq.n	8001f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d00c      	beq.n	8001f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d009      	beq.n	8001f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d006      	beq.n	8001f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d003      	beq.n	8001f06 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001efe:	2190      	movs	r1, #144	; 0x90
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001f02:	f7fe ffc5 	bl	8000e90 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff38 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	08010398 	.word	0x08010398

08001f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d903      	bls.n	8001f38 <HAL_NVIC_SetPriority+0x20>
 8001f30:	21a8      	movs	r1, #168	; 0xa8
 8001f32:	480e      	ldr	r0, [pc, #56]	; (8001f6c <HAL_NVIC_SetPriority+0x54>)
 8001f34:	f7fe ffac 	bl	8000e90 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d903      	bls.n	8001f46 <HAL_NVIC_SetPriority+0x2e>
 8001f3e:	21a9      	movs	r1, #169	; 0xa9
 8001f40:	480a      	ldr	r0, [pc, #40]	; (8001f6c <HAL_NVIC_SetPriority+0x54>)
 8001f42:	f7fe ffa5 	bl	8000e90 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f46:	f7ff ff3d 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	6978      	ldr	r0, [r7, #20]
 8001f52:	f7ff ff8d 	bl	8001e70 <NVIC_EncodePriority>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff5c 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	08010398 	.word	0x08010398

08001f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	da03      	bge.n	8001f8a <HAL_NVIC_EnableIRQ+0x1a>
 8001f82:	21bc      	movs	r1, #188	; 0xbc
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_NVIC_EnableIRQ+0x2c>)
 8001f86:	f7fe ff83 	bl	8000e90 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff26 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	08010398 	.word	0x08010398

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a33      	ldr	r2, [pc, #204]	; (8002088 <HAL_GPIO_Init+0xe8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d017      	beq.n	8001fee <HAL_GPIO_Init+0x4e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_GPIO_Init+0xec>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x4e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_GPIO_Init+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <HAL_GPIO_Init+0x4e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a30      	ldr	r2, [pc, #192]	; (8002094 <HAL_GPIO_Init+0xf4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <HAL_GPIO_Init+0x4e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <HAL_GPIO_Init+0xf8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x4e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_GPIO_Init+0xfc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x4e>
 8001fe6:	21ac      	movs	r1, #172	; 0xac
 8001fe8:	482d      	ldr	r0, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x100>)
 8001fea:	f7fe ff51 	bl	8000e90 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_GPIO_Init+0x64>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x6c>
 8002004:	21ad      	movs	r1, #173	; 0xad
 8002006:	4826      	ldr	r0, [pc, #152]	; (80020a0 <HAL_GPIO_Init+0x100>)
 8002008:	f7fe ff42 	bl	8000e90 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d035      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d031      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b11      	cmp	r3, #17
 8002022:	d02d      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d029      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d025      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800203c:	d020      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002046:	d01b      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002050:	d016      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800205a:	d011      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002064:	d00c      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0xe0>
 8002078:	21ae      	movs	r1, #174	; 0xae
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <HAL_GPIO_Init+0x100>)
 800207c:	f7fe ff08 	bl	8000e90 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e20c      	b.n	80024a0 <HAL_GPIO_Init+0x500>
 8002086:	bf00      	nop
 8002088:	40020000 	.word	0x40020000
 800208c:	40020400 	.word	0x40020400
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40021000 	.word	0x40021000
 800209c:	40021c00 	.word	0x40021c00
 80020a0:	080103d4 	.word	0x080103d4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 81ec 	bne.w	800249a <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d144      	bne.n	8002164 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00f      	beq.n	8002102 <HAL_GPIO_Init+0x162>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d00b      	beq.n	8002102 <HAL_GPIO_Init+0x162>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x162>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x162>
 80020fa:	21c0      	movs	r1, #192	; 0xc0
 80020fc:	4884      	ldr	r0, [pc, #528]	; (8002310 <HAL_GPIO_Init+0x370>)
 80020fe:	f7fe fec7 	bl	8000e90 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d027      	beq.n	80021c0 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_GPIO_Init+0x1f0>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x1f0>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x1f0>
 8002188:	21d1      	movs	r1, #209	; 0xd1
 800218a:	4861      	ldr	r0, [pc, #388]	; (8002310 <HAL_GPIO_Init+0x370>)
 800218c:	f7fe fe80 	bl	8000e90 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	f040 80a3 	bne.w	8002314 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d077      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b09      	cmp	r3, #9
 80021dc:	d073      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d067      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d05f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d05b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d057      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d053      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d04f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b04      	cmp	r3, #4
 800222c:	d04b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d047      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d043      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d03f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b05      	cmp	r3, #5
 800224c:	d03b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d037      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d033      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d02f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d027      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b07      	cmp	r3, #7
 800227c:	d023      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b07      	cmp	r3, #7
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b07      	cmp	r3, #7
 800228c:	d01b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d017      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b0a      	cmp	r3, #10
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	d00f      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	d00b      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x326>
 80022be:	21de      	movs	r1, #222	; 0xde
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <HAL_GPIO_Init+0x370>)
 80022c2:	f7fe fde5 	bl	8000e90 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800230e:	e001      	b.n	8002314 <HAL_GPIO_Init+0x374>
 8002310:	080103d4 	.word	0x080103d4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a2 	beq.w	800249a <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_GPIO_Init+0x514>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a55      	ldr	r2, [pc, #340]	; (80024b4 <HAL_GPIO_Init+0x514>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_GPIO_Init+0x514>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_GPIO_Init+0x518>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a48      	ldr	r2, [pc, #288]	; (80024bc <HAL_GPIO_Init+0x51c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x432>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_GPIO_Init+0x520>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x42e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a46      	ldr	r2, [pc, #280]	; (80024c4 <HAL_GPIO_Init+0x524>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x42a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a45      	ldr	r2, [pc, #276]	; (80024c8 <HAL_GPIO_Init+0x528>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x426>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a44      	ldr	r2, [pc, #272]	; (80024cc <HAL_GPIO_Init+0x52c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x422>
 80023be:	2304      	movs	r3, #4
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x434>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x434>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x434>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x434>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x434>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e4:	4934      	ldr	r1, [pc, #208]	; (80024b8 <HAL_GPIO_Init+0x518>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_GPIO_Init+0x530>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a2e      	ldr	r2, [pc, #184]	; (80024d0 <HAL_GPIO_Init+0x530>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_GPIO_Init+0x530>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_GPIO_Init+0x530>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_GPIO_Init+0x530>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246a:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <HAL_GPIO_Init+0x530>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_GPIO_Init+0x530>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_GPIO_Init+0x530>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f adfe 	bls.w	80020a4 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <HAL_GPIO_WritePin+0x20>
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_GPIO_WritePin+0x2a>
 80024f4:	f240 119d 	movw	r1, #413	; 0x19d
 80024f8:	480e      	ldr	r0, [pc, #56]	; (8002534 <HAL_GPIO_WritePin+0x60>)
 80024fa:	f7fe fcc9 	bl	8000e90 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024fe:	787b      	ldrb	r3, [r7, #1]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_GPIO_WritePin+0x40>
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d004      	beq.n	8002514 <HAL_GPIO_WritePin+0x40>
 800250a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800250e:	4809      	ldr	r0, [pc, #36]	; (8002534 <HAL_GPIO_WritePin+0x60>)
 8002510:	f7fe fcbe 	bl	8000e90 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	080103d4 	.word	0x080103d4

08002538 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_GPIO_TogglePin+0x1c>
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_GPIO_TogglePin+0x26>
 8002554:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002558:	480a      	ldr	r0, [pc, #40]	; (8002584 <HAL_GPIO_TogglePin+0x4c>)
 800255a:	f7fe fc99 	bl	8000e90 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43d9      	mvns	r1, r3
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	080103d4 	.word	0x080103d4

08002588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f926 	bl	80017f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e1bd      	b.n	8002946 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a93      	ldr	r2, [pc, #588]	; (800281c <HAL_I2C_Init+0x264>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_I2C_Init+0x3a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a91      	ldr	r2, [pc, #580]	; (8002820 <HAL_I2C_Init+0x268>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_I2C_Init+0x3a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a90      	ldr	r2, [pc, #576]	; (8002824 <HAL_I2C_Init+0x26c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_I2C_Init+0x3a>
 80025e8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80025ec:	488e      	ldr	r0, [pc, #568]	; (8002828 <HAL_I2C_Init+0x270>)
 80025ee:	f7fe fc4f 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_I2C_Init+0x4c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a8b      	ldr	r2, [pc, #556]	; (800282c <HAL_I2C_Init+0x274>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d904      	bls.n	800260e <HAL_I2C_Init+0x56>
 8002604:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002608:	4887      	ldr	r0, [pc, #540]	; (8002828 <HAL_I2C_Init+0x270>)
 800260a:	f7fe fc41 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_I2C_Init+0x72>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800261e:	d004      	beq.n	800262a <HAL_I2C_Init+0x72>
 8002620:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002624:	4880      	ldr	r0, [pc, #512]	; (8002828 <HAL_I2C_Init+0x270>)
 8002626:	f7fe fc33 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_I2C_Init+0x8c>
 800263a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800263e:	487a      	ldr	r0, [pc, #488]	; (8002828 <HAL_I2C_Init+0x270>)
 8002640:	f7fe fc26 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264c:	d009      	beq.n	8002662 <HAL_I2C_Init+0xaa>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002656:	d004      	beq.n	8002662 <HAL_I2C_Init+0xaa>
 8002658:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800265c:	4872      	ldr	r0, [pc, #456]	; (8002828 <HAL_I2C_Init+0x270>)
 800265e:	f7fe fc17 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_Init+0xc4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d004      	beq.n	800267c <HAL_I2C_Init+0xc4>
 8002672:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002676:	486c      	ldr	r0, [pc, #432]	; (8002828 <HAL_I2C_Init+0x270>)
 8002678:	f7fe fc0a 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_I2C_Init+0xda>
 8002688:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800268c:	4866      	ldr	r0, [pc, #408]	; (8002828 <HAL_I2C_Init+0x270>)
 800268e:	f7fe fbff 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_I2C_Init+0xf4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d004      	beq.n	80026ac <HAL_I2C_Init+0xf4>
 80026a2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80026a6:	4860      	ldr	r0, [pc, #384]	; (8002828 <HAL_I2C_Init+0x270>)
 80026a8:	f7fe fbf2 	bl	8000e90 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_I2C_Init+0x10e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d004      	beq.n	80026c6 <HAL_I2C_Init+0x10e>
 80026bc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80026c0:	4859      	ldr	r0, [pc, #356]	; (8002828 <HAL_I2C_Init+0x270>)
 80026c2:	f7fe fbe5 	bl	8000e90 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fa9e 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002718:	f002 fd7c 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a43      	ldr	r2, [pc, #268]	; (8002830 <HAL_I2C_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d807      	bhi.n	8002738 <HAL_I2C_Init+0x180>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a42      	ldr	r2, [pc, #264]	; (8002834 <HAL_I2C_Init+0x27c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x18e>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a3f      	ldr	r2, [pc, #252]	; (8002838 <HAL_I2C_Init+0x280>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0fb      	b.n	8002946 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_I2C_Init+0x284>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <HAL_I2C_Init+0x278>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d802      	bhi.n	8002788 <HAL_I2C_Init+0x1d0>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	e009      	b.n	800279c <HAL_I2C_Init+0x1e4>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <HAL_I2C_Init+0x288>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	491e      	ldr	r1, [pc, #120]	; (8002830 <HAL_I2C_Init+0x278>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d819      	bhi.n	80027f0 <HAL_I2C_Init+0x238>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d0:	400b      	ands	r3, r1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_I2C_Init+0x234>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e59      	subs	r1, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	e065      	b.n	80028b8 <HAL_I2C_Init+0x300>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e063      	b.n	80028b8 <HAL_I2C_Init+0x300>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d125      	bne.n	8002844 <HAL_I2C_Init+0x28c>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e026      	b.n	800286a <HAL_I2C_Init+0x2b2>
 800281c:	40005400 	.word	0x40005400
 8002820:	40005800 	.word	0x40005800
 8002824:	40005c00 	.word	0x40005c00
 8002828:	08010410 	.word	0x08010410
 800282c:	00061a80 	.word	0x00061a80
 8002830:	000186a0 	.word	0x000186a0
 8002834:	001e847f 	.word	0x001e847f
 8002838:	003d08ff 	.word	0x003d08ff
 800283c:	431bde83 	.word	0x431bde83
 8002840:	10624dd3 	.word	0x10624dd3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e58      	subs	r0, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	0099      	lsls	r1, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	fbb0 f3f3 	udiv	r3, r0, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Init+0x2ba>
 800286e:	2301      	movs	r3, #1
 8002870:	e022      	b.n	80028b8 <HAL_I2C_Init+0x300>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10e      	bne.n	8002898 <HAL_I2C_Init+0x2e0>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e58      	subs	r0, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	440b      	add	r3, r1
 8002888:	fbb0 f3f3 	udiv	r3, r0, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002896:	e00f      	b.n	80028b8 <HAL_I2C_Init+0x300>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1e58      	subs	r0, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	0099      	lsls	r1, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	6809      	ldr	r1, [r1, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6911      	ldr	r1, [r2, #16]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop

08002950 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800296a:	f7ff f9d7 	bl	8001d1c <HAL_GetTick>
 800296e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d007      	beq.n	8002986 <HAL_I2C_Mem_Write+0x36>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b10      	cmp	r3, #16
 800297a:	d004      	beq.n	8002986 <HAL_I2C_Mem_Write+0x36>
 800297c:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002980:	4873      	ldr	r0, [pc, #460]	; (8002b50 <HAL_I2C_Mem_Write+0x200>)
 8002982:	f7fe fa85 	bl	8000e90 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 80d9 	bne.w	8002b46 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	496d      	ldr	r1, [pc, #436]	; (8002b54 <HAL_I2C_Mem_Write+0x204>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 faa0 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0cc      	b.n	8002b48 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2C_Mem_Write+0x6c>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0c5      	b.n	8002b48 <HAL_I2C_Mem_Write+0x1f8>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d007      	beq.n	80029e2 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <HAL_I2C_Mem_Write+0x208>)
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a24:	88f8      	ldrh	r0, [r7, #6]
 8002a26:	893a      	ldrh	r2, [r7, #8]
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4603      	mov	r3, r0
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f9bf 	bl	8002db8 <I2C_RequestMemoryWrite>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d052      	beq.n	8002ae6 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e081      	b.n	8002b48 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fb21 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e06b      	b.n	8002b48 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d11b      	bne.n	8002ae6 <HAL_I2C_Mem_Write+0x196>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d017      	beq.n	8002ae6 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1aa      	bne.n	8002a44 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fb0d 	bl	8003112 <I2C_WaitOnBTFFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d107      	bne.n	8002b16 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e016      	b.n	8002b48 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08010410 	.word	0x08010410
 8002b54:	00100002 	.word	0x00100002
 8002b58:	ffff0000 	.word	0xffff0000

08002b5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff f8d6 	bl	8001d1c <HAL_GetTick>
 8002b70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 8111 	bne.w	8002da6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2319      	movs	r3, #25
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4988      	ldr	r1, [pc, #544]	; (8002db0 <HAL_I2C_IsDeviceReady+0x254>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9a8 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e104      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_IsDeviceReady+0x50>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0fd      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d007      	beq.n	8002bd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_I2C_IsDeviceReady+0x258>)
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f966 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2c:	d103      	bne.n	8002c36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0b6      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7ff f867 	bl	8001d1c <HAL_GetTick>
 8002c4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c7e:	e025      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7ff f84c 	bl	8001d1c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <HAL_I2C_IsDeviceReady+0x13a>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	22a0      	movs	r2, #160	; 0xa0
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2ba0      	cmp	r3, #160	; 0xa0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_I2C_IsDeviceReady+0x188>
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_I2C_IsDeviceReady+0x188>
 8002cde:	7dbb      	ldrb	r3, [r7, #22]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0cd      	beq.n	8002c80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d129      	bne.n	8002d4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2319      	movs	r3, #25
 8002d26:	2201      	movs	r2, #1
 8002d28:	4921      	ldr	r1, [pc, #132]	; (8002db0 <HAL_I2C_IsDeviceReady+0x254>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f8da 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e036      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e02c      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2319      	movs	r3, #25
 8002d6e:	2201      	movs	r2, #1
 8002d70:	490f      	ldr	r1, [pc, #60]	; (8002db0 <HAL_I2C_IsDeviceReady+0x254>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f8b6 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e012      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f4ff af32 	bcc.w	8002bf6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
  }
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	00100002 	.word	0x00100002
 8002db4:	ffff0000 	.word	0xffff0000

08002db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	813b      	strh	r3, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f878 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d103      	bne.n	8002e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e05f      	b.n	8002ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	492d      	ldr	r1, [pc, #180]	; (8002ee0 <I2C_RequestMemoryWrite+0x128>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f8b0 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e04c      	b.n	8002ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f91a 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d107      	bne.n	8002e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02b      	b.n	8002ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	e021      	b.n	8002ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8f4 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e005      	b.n	8002ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	00010002 	.word	0x00010002

08002ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	e025      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe ff0d 	bl	8001d1c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e023      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10d      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	e00c      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0b6      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa0:	e051      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	d123      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e046      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d021      	beq.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fe8b 	bl	8001d1c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e020      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e00b      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d18d      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309c:	e02d      	b.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f878 	bl	8003194 <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02d      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fe31 	bl	8001d1c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e007      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d1ca      	bne.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800311e:	e02d      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f837 	bl	8003194 <I2C_IsAcknowledgeFailed>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e02d      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d021      	beq.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe fdf0 	bl	8001d1c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d1ca      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d11b      	bne.n	80031e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f043 0204 	orr.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f6:	b08f      	sub	sp, #60	; 0x3c
 80031f8:	af0a      	add	r7, sp, #40	; 0x28
 80031fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e118      	b.n	8003438 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320e:	d003      	beq.n	8003218 <HAL_PCD_Init+0x24>
 8003210:	2187      	movs	r1, #135	; 0x87
 8003212:	488b      	ldr	r0, [pc, #556]	; (8003440 <HAL_PCD_Init+0x24c>)
 8003214:	f7fd fe3c 	bl	8000e90 <assert_failed>

  USBx = hpcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f00c f832 	bl	800f29c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2203      	movs	r2, #3
 800323c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f005 fae9 	bl	800882e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	687e      	ldr	r6, [r7, #4]
 8003264:	466d      	mov	r5, sp
 8003266:	f106 0410 	add.w	r4, r6, #16
 800326a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003276:	e885 0003 	stmia.w	r5, {r0, r1}
 800327a:	1d33      	adds	r3, r6, #4
 800327c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800327e:	6838      	ldr	r0, [r7, #0]
 8003280:	f005 f9c0 	bl	8008604 <USB_CoreInit>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0d0      	b.n	8003438 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f005 fad7 	bl	8008850 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e04a      	b.n	800333e <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	333d      	adds	r3, #61	; 0x3d
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	333c      	adds	r3, #60	; 0x3c
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	b298      	uxth	r0, r3
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3344      	adds	r3, #68	; 0x44
 80032e4:	4602      	mov	r2, r0
 80032e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3340      	adds	r3, #64	; 0x40
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3348      	adds	r3, #72	; 0x48
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334c      	adds	r3, #76	; 0x4c
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3354      	adds	r3, #84	; 0x54
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d3af      	bcc.n	80032a8 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e044      	b.n	80033d8 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	3301      	adds	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3b5      	bcc.n	800334e <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	687e      	ldr	r6, [r7, #4]
 80033ea:	466d      	mov	r5, sp
 80033ec:	f106 0410 	add.w	r4, r6, #16
 80033f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003400:	1d33      	adds	r3, r6, #4
 8003402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003404:	6838      	ldr	r0, [r7, #0]
 8003406:	f005 fa6f 	bl	80088e8 <USB_DevInit>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e00d      	b.n	8003438 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f006 fbbe 	bl	8009bb2 <USB_DevDisconnect>

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003440:	08010448 	.word	0x08010448

08003444 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_PCD_Start+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e020      	b.n	80034a2 <HAL_PCD_Start+0x5e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	2b01      	cmp	r3, #1
 800346e:	d109      	bne.n	8003484 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003474:	2b01      	cmp	r3, #1
 8003476:	d005      	beq.n	8003484 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f005 f9bf 	bl	800880c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f006 fb6c 	bl	8009b70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034aa:	b590      	push	{r4, r7, lr}
 80034ac:	b08d      	sub	sp, #52	; 0x34
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f006 fc2a 	bl	8009d1a <USB_GetMode>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f040 848a 	bne.w	8003de2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f006 fb8e 	bl	8009bf4 <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8480 	beq.w	8003de0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f006 fb7b 	bl	8009bf4 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d107      	bne.n	8003518 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f002 0202 	and.w	r2, r2, #2
 8003516:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f006 fb69 	bl	8009bf4 <USB_ReadInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d161      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0210 	bic.w	r2, r2, #16
 800353a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	0c5b      	lsrs	r3, r3, #17
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2b02      	cmp	r3, #2
 8003566:	d124      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d035      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800357e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6a38      	ldr	r0, [r7, #32]
 8003588:	f006 f9a0 	bl	80098cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003598:	441a      	add	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6a1a      	ldr	r2, [r3, #32]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035aa:	441a      	add	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
 80035b0:	e016      	b.n	80035e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	0c5b      	lsrs	r3, r3, #17
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d110      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035c4:	2208      	movs	r2, #8
 80035c6:	4619      	mov	r1, r3
 80035c8:	6a38      	ldr	r0, [r7, #32]
 80035ca:	f006 f97f 	bl	80098cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035da:	441a      	add	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0210 	orr.w	r2, r2, #16
 80035ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f006 fafd 	bl	8009bf4 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003600:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003604:	f040 80a7 	bne.w	8003756 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f006 fb02 	bl	8009c1a <USB_ReadDevAllOutEpInterrupt>
 8003616:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003618:	e099      	b.n	800374e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 808e 	beq.w	8003742 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f006 fb26 	bl	8009c82 <USB_ReadDevOutEPInterrupt>
 8003636:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	2301      	movs	r3, #1
 8003652:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fec2 	bl	80043e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	2308      	movs	r3, #8
 8003676:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 ff98 	bl	80045b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	461a      	mov	r2, r3
 8003698:	2310      	movs	r3, #16
 800369a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d030      	beq.n	8003708 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d109      	bne.n	80036c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d108      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f00b fecf 	bl	800f494 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	461a      	mov	r2, r3
 8003704:	2302      	movs	r3, #2
 8003706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371e:	461a      	mov	r2, r3
 8003720:	2320      	movs	r3, #32
 8003722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373a:	461a      	mov	r2, r3
 800373c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	3301      	adds	r3, #1
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af62 	bne.w	800361a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f006 fa4a 	bl	8009bf4 <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800376a:	f040 80db 	bne.w	8003924 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f006 fa6b 	bl	8009c4e <USB_ReadDevAllInEpInterrupt>
 8003778:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800377e:	e0cd      	b.n	800391c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80c2 	beq.w	8003910 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f006 fa91 	bl	8009cbe <USB_ReadDevInEPInterrupt>
 800379c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d057      	beq.n	8003858 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	2201      	movs	r2, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69f9      	ldr	r1, [r7, #28]
 80037c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c8:	4013      	ands	r3, r2
 80037ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	2301      	movs	r3, #1
 80037dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d132      	bne.n	800384c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	334c      	adds	r3, #76	; 0x4c
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4403      	add	r3, r0
 8003806:	3348      	adds	r3, #72	; 0x48
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4419      	add	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4403      	add	r3, r0
 800381a:	334c      	adds	r3, #76	; 0x4c
 800381c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d113      	bne.n	800384c <HAL_PCD_IRQHandler+0x3a2>
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3354      	adds	r3, #84	; 0x54
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003844:	461a      	mov	r2, r3
 8003846:	2101      	movs	r1, #1
 8003848:	f006 fa98 	bl	8009d7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	b2db      	uxtb	r3, r3
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f00b fda3 	bl	800f39e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	461a      	mov	r2, r3
 8003870:	2308      	movs	r3, #8
 8003872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388a:	461a      	mov	r2, r3
 800388c:	2310      	movs	r3, #16
 800388e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	461a      	mov	r2, r3
 80038a8:	2340      	movs	r3, #64	; 0x40
 80038aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d023      	beq.n	80038fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b8:	6a38      	ldr	r0, [r7, #32]
 80038ba:	f005 f979 	bl	8008bb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3338      	adds	r3, #56	; 0x38
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	78db      	ldrb	r3, [r3, #3]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d108      	bne.n	80038ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f00b fde6 	bl	800f4b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	2302      	movs	r3, #2
 80038fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fcdb 	bl	80042c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	3301      	adds	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	f47f af2e 	bne.w	8003780 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f006 f963 	bl	8009bf4 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003938:	d122      	bne.n	8003980 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003954:	2b01      	cmp	r3, #1
 8003956:	d108      	bne.n	800396a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fec2 	bl	80046ec <HAL_PCDEx_LPM_Callback>
 8003968:	e002      	b.n	8003970 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f00b fd84 	bl	800f478 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800397e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f006 f935 	bl	8009bf4 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003994:	d112      	bne.n	80039bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f00b fd40 	bl	800f42c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f006 f917 	bl	8009bf4 <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	f040 80b7 	bne.w	8003b42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2110      	movs	r1, #16
 80039ee:	4618      	mov	r0, r3
 80039f0:	f005 f8de 	bl	8008bb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f8:	e046      	b.n	8003a88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	461a      	mov	r2, r3
 8003a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	3301      	adds	r3, #1
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d3b3      	bcc.n	80039fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003aa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003abe:	f043 030b 	orr.w	r3, r3, #11
 8003ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad4:	f043 030b 	orr.w	r3, r3, #11
 8003ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ada:	e015      	b.n	8003b08 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003af2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b02:	f043 030b 	orr.w	r3, r3, #11
 8003b06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f006 f925 	bl	8009d7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f006 f854 	bl	8009bf4 <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b56:	d124      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f006 f8ea 	bl	8009d36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f005 f89f 	bl	8008caa <USB_GetDevSpeed>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681c      	ldr	r4, [r3, #0]
 8003b78:	f001 fb40 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 8003b7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	4620      	mov	r0, r4
 8003b88:	f004 fd9e 	bl	80086c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f00b fc2e 	bl	800f3ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f006 f824 	bl	8009bf4 <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d10a      	bne.n	8003bcc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f00b fc0b 	bl	800f3d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f002 0208 	and.w	r2, r2, #8
 8003bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f006 f80f 	bl	8009bf4 <USB_ReadInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d122      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bec:	2301      	movs	r3, #1
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf0:	e014      	b.n	8003c1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fb27 	bl	8004264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	3301      	adds	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3e5      	bcc.n	8003bf2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f005 ffe2 	bl	8009bf4 <USB_ReadInterrupts>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3a:	d13b      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c40:	e02b      	b.n	8003c9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3340      	adds	r3, #64	; 0x40
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d115      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da12      	bge.n	8003c94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	333f      	adds	r3, #63	; 0x3f
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fae8 	bl	8004264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	3301      	adds	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3ce      	bcc.n	8003c42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f005 ff9b 	bl	8009bf4 <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc8:	d155      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cca:	2301      	movs	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e045      	b.n	8003d5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d12e      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da2b      	bge.n	8003d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d121      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d52:	6053      	str	r3, [r2, #4]
            break;
 8003d54:	e007      	b.n	8003d66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	3301      	adds	r3, #1
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3b4      	bcc.n	8003cd0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f005 ff3a 	bl	8009bf4 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d10a      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f00b fba5 	bl	800f4dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f005 ff24 	bl	8009bf4 <USB_ReadInterrupts>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d115      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f00b fb95 	bl	800f4f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	e000      	b.n	8003de2 <HAL_PCD_IRQHandler+0x938>
      return;
 8003de0:	bf00      	nop
    }
  }
}
 8003de2:	3734      	adds	r7, #52	; 0x34
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd90      	pop	{r4, r7, pc}

08003de8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_PCD_SetAddress+0x1a>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e013      	b.n	8003e2a <HAL_PCD_SetAddress+0x42>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f005 fe82 	bl	8009b24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4603      	mov	r3, r0
 8003e42:	70fb      	strb	r3, [r7, #3]
 8003e44:	460b      	mov	r3, r1
 8003e46:	803b      	strh	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da0f      	bge.n	8003e78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	3338      	adds	r3, #56	; 0x38
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	705a      	strb	r2, [r3, #1]
 8003e76:	e00f      	b.n	8003e98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3304      	adds	r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ea4:	883a      	ldrh	r2, [r7, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	78ba      	ldrb	r2, [r7, #2]
 8003eae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ec2:	78bb      	ldrb	r3, [r7, #2]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d102      	bne.n	8003ece <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_EP_Open+0xaa>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_Open+0xc8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f004 ff02 	bl	8008cf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da0f      	bge.n	8003f36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3338      	adds	r3, #56	; 0x38
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	705a      	strb	r2, [r3, #1]
 8003f34:	e00f      	b.n	8003f56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_PCD_EP_Close+0x6e>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e00e      	b.n	8003f8e <HAL_PCD_EP_Close+0x8c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 ff40 	bl	8008e04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff2:	7afb      	ldrb	r3, [r7, #11]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	6979      	ldr	r1, [r7, #20]
 800400a:	f005 fa1f 	bl	800944c <USB_EP0StartXfer>
 800400e:	e008      	b.n	8004022 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	f004 ffcd 	bl	8008fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	460b      	mov	r3, r1
 800406a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406c:	7afb      	ldrb	r3, [r7, #11]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3338      	adds	r3, #56	; 0x38
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2200      	movs	r2, #0
 8004094:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2201      	movs	r2, #1
 800409a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d102      	bne.n	80040b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6979      	ldr	r1, [r7, #20]
 80040ce:	f005 f9bd 	bl	800944c <USB_EP0StartXfer>
 80040d2:	e008      	b.n	80040e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	f004 ff6b 	bl	8008fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d901      	bls.n	800410e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e050      	b.n	80041b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800410e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da0f      	bge.n	8004136 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	3338      	adds	r3, #56	; 0x38
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	3304      	adds	r3, #4
 800412c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	705a      	strb	r2, [r3, #1]
 8004134:	e00d      	b.n	8004152 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_PCD_EP_SetStall+0x82>
 800416e:	2302      	movs	r3, #2
 8004170:	e01e      	b.n	80041b0 <HAL_PCD_EP_SetStall+0xc0>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4618      	mov	r0, r3
 8004182:	f005 fbfb 	bl	800997c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	b2d9      	uxtb	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041a0:	461a      	mov	r2, r3
 80041a2:	f005 fdeb 	bl	8009d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d901      	bls.n	80041d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da0f      	bge.n	80041fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	3338      	adds	r3, #56	; 0x38
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	3304      	adds	r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	705a      	strb	r2, [r3, #1]
 80041fc:	e00f      	b.n	800421e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 020f 	and.w	r2, r3, #15
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_PCD_EP_ClrStall+0x86>
 800423a:	2302      	movs	r3, #2
 800423c:	e00e      	b.n	800425c <HAL_PCD_EP_ClrStall+0xa4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	4618      	mov	r0, r3
 800424e:	f005 fc03 	bl	8009a58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0c      	bge.n	8004292 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3338      	adds	r3, #56	; 0x38
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e00c      	b.n	80042ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f005 fa22 	bl	80096fc <USB_EPStopXfer>
 80042b8:	4603      	mov	r3, r0
 80042ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042bc:	7afb      	ldrb	r3, [r7, #11]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08a      	sub	sp, #40	; 0x28
 80042ca:	af02      	add	r7, sp, #8
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	3338      	adds	r3, #56	; 0x38
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	3304      	adds	r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1a      	ldr	r2, [r3, #32]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d901      	bls.n	80042fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e06c      	b.n	80043d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	429a      	cmp	r2, r3
 8004312:	d902      	bls.n	800431a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3303      	adds	r3, #3
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004322:	e02b      	b.n	800437c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	429a      	cmp	r2, r3
 8004338:	d902      	bls.n	8004340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3303      	adds	r3, #3
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6919      	ldr	r1, [r3, #16]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004358:	b2db      	uxtb	r3, r3
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4603      	mov	r3, r0
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f005 fa76 	bl	8009850 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	441a      	add	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1a      	ldr	r2, [r3, #32]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	b29b      	uxth	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	429a      	cmp	r2, r3
 8004390:	d809      	bhi.n	80043a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439a:	429a      	cmp	r2, r3
 800439c:	d203      	bcs.n	80043a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1be      	bne.n	8004324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d811      	bhi.n	80043d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	2201      	movs	r2, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	6939      	ldr	r1, [r7, #16]
 80043ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d2:	4013      	ands	r3, r2
 80043d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	333c      	adds	r3, #60	; 0x3c
 80043f8:	3304      	adds	r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d17b      	bne.n	800450e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4a61      	ldr	r2, [pc, #388]	; (80045a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f240 80b9 	bls.w	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80b3 	beq.w	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	461a      	mov	r2, r3
 8004444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004448:	6093      	str	r3, [r2, #8]
 800444a:	e0a7      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	461a      	mov	r2, r3
 8004464:	2320      	movs	r3, #32
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e098      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 8093 	bne.w	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4a4b      	ldr	r2, [pc, #300]	; (80045a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d90f      	bls.n	800449e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	e07e      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	0159      	lsls	r1, r3, #5
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	440b      	add	r3, r1
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044e8:	461a      	mov	r2, r3
 80044ea:	2101      	movs	r1, #1
 80044ec:	f005 fc46 	bl	8009d7c <USB_EP0_OutStart>
 80044f0:	e006      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	441a      	add	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f00a ff2e 	bl	800f368 <HAL_PCD_DataOutStageCallback>
 800450c:	e046      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d124      	bne.n	8004560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	6093      	str	r3, [r2, #8]
 8004534:	e032      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	461a      	mov	r2, r3
 800454e:	2320      	movs	r3, #32
 8004550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f00a ff05 	bl	800f368 <HAL_PCD_DataOutStageCallback>
 800455e:	e01d      	b.n	800459c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d114      	bne.n	8004590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d108      	bne.n	8004590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004588:	461a      	mov	r2, r3
 800458a:	2100      	movs	r1, #0
 800458c:	f005 fbf6 	bl	8009d7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f00a fee6 	bl	800f368 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	4f54300a 	.word	0x4f54300a
 80045ac:	4f54310a 	.word	0x4f54310a

080045b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	333c      	adds	r3, #60	; 0x3c
 80045c8:	3304      	adds	r3, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <PCD_EP_OutSetupPacket_int+0x88>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d90e      	bls.n	8004604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f00a fe9d 	bl	800f344 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <PCD_EP_OutSetupPacket_int+0x88>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d90c      	bls.n	800462c <PCD_EP_OutSetupPacket_int+0x7c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d108      	bne.n	800462c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004624:	461a      	mov	r2, r3
 8004626:	2101      	movs	r1, #1
 8004628:	f005 fba8 	bl	8009d7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	4f54300a 	.word	0x4f54300a

0800463c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
 8004648:	4613      	mov	r3, r2
 800464a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800465a:	883b      	ldrh	r3, [r7, #0]
 800465c:	0419      	lsls	r1, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	430a      	orrs	r2, r1
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
 8004668:	e028      	b.n	80046bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e00d      	b.n	800469a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	3340      	adds	r3, #64	; 0x40
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	3301      	adds	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	3b01      	subs	r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3ec      	bcc.n	800467e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046a4:	883b      	ldrh	r3, [r7, #0]
 80046a6:	0418      	lsls	r0, r3, #16
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	4302      	orrs	r2, r0
 80046b4:	3340      	adds	r3, #64	; 0x40
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e314      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b0f      	cmp	r3, #15
 800471c:	d903      	bls.n	8004726 <HAL_RCC_OscConfig+0x22>
 800471e:	21e6      	movs	r1, #230	; 0xe6
 8004720:	4897      	ldr	r0, [pc, #604]	; (8004980 <HAL_RCC_OscConfig+0x27c>)
 8004722:	f7fc fbb5 	bl	8000e90 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8088 	beq.w	8004844 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00d      	beq.n	8004758 <HAL_RCC_OscConfig+0x54>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d008      	beq.n	8004758 <HAL_RCC_OscConfig+0x54>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800474e:	d003      	beq.n	8004758 <HAL_RCC_OscConfig+0x54>
 8004750:	21eb      	movs	r1, #235	; 0xeb
 8004752:	488b      	ldr	r0, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x27c>)
 8004754:	f7fc fb9c 	bl	8000e90 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004758:	4b8a      	ldr	r3, [pc, #552]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b04      	cmp	r3, #4
 8004762:	d00c      	beq.n	800477e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004764:	4b87      	ldr	r3, [pc, #540]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800476c:	2b08      	cmp	r3, #8
 800476e:	d112      	bne.n	8004796 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004770:	4b84      	ldr	r3, [pc, #528]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477c:	d10b      	bne.n	8004796 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d05b      	beq.n	8004842 <HAL_RCC_OscConfig+0x13e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d157      	bne.n	8004842 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e2d4      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479e:	d106      	bne.n	80047ae <HAL_RCC_OscConfig+0xaa>
 80047a0:	4b78      	ldr	r3, [pc, #480]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a77      	ldr	r2, [pc, #476]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e01d      	b.n	80047ea <HAL_RCC_OscConfig+0xe6>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCC_OscConfig+0xce>
 80047b8:	4b72      	ldr	r3, [pc, #456]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a71      	ldr	r2, [pc, #452]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a6e      	ldr	r2, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e00b      	b.n	80047ea <HAL_RCC_OscConfig+0xe6>
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6b      	ldr	r2, [pc, #428]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b69      	ldr	r3, [pc, #420]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a68      	ldr	r2, [pc, #416]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80047e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d013      	beq.n	800481a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fd fa93 	bl	8001d1c <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fa:	f7fd fa8f 	bl	8001d1c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b64      	cmp	r3, #100	; 0x64
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e299      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480c:	4b5d      	ldr	r3, [pc, #372]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0xf6>
 8004818:	e014      	b.n	8004844 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fd fa7f 	bl	8001d1c <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004822:	f7fd fa7b 	bl	8001d1c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e285      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x11e>
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004842:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d079      	beq.n	8004944 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_OscConfig+0x166>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d004      	beq.n	800486a <HAL_RCC_OscConfig+0x166>
 8004860:	f240 111d 	movw	r1, #285	; 0x11d
 8004864:	4846      	ldr	r0, [pc, #280]	; (8004980 <HAL_RCC_OscConfig+0x27c>)
 8004866:	f7fc fb13 	bl	8000e90 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b1f      	cmp	r3, #31
 8004870:	d904      	bls.n	800487c <HAL_RCC_OscConfig+0x178>
 8004872:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004876:	4842      	ldr	r0, [pc, #264]	; (8004980 <HAL_RCC_OscConfig+0x27c>)
 8004878:	f7fc fb0a 	bl	8000e90 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004888:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004890:	2b08      	cmp	r3, #8
 8004892:	d11c      	bne.n	80048ce <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004894:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a0:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e243      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	492f      	ldr	r1, [pc, #188]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048cc:	e03a      	b.n	8004944 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d020      	beq.n	8004918 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d6:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <HAL_RCC_OscConfig+0x284>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fa1e 	bl	8001d1c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e4:	f7fd fa1a 	bl	8001d1c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e224      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b20      	ldr	r3, [pc, #128]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	491c      	ldr	r1, [pc, #112]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
 8004916:	e015      	b.n	8004944 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x284>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fd f9fd 	bl	8001d1c <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004926:	f7fd f9f9 	bl	8001d1c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e203      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_OscConfig+0x280>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d045      	beq.n	80049dc <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_OscConfig+0x266>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d004      	beq.n	800496a <HAL_RCC_OscConfig+0x266>
 8004960:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004964:	4806      	ldr	r0, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x27c>)
 8004966:	f7fc fa93 	bl	8000e90 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01e      	beq.n	80049b0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCC_OscConfig+0x288>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fd f9d0 	bl	8001d1c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e010      	b.n	80049a2 <HAL_RCC_OscConfig+0x29e>
 8004980:	08010480 	.word	0x08010480
 8004984:	40023800 	.word	0x40023800
 8004988:	42470000 	.word	0x42470000
 800498c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fd f9c4 	bl	8001d1c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1ce      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x28c>
 80049ae:	e015      	b.n	80049dc <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b5b      	ldr	r3, [pc, #364]	; (8004b20 <HAL_RCC_OscConfig+0x41c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd f9b1 	bl	8001d1c <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049be:	f7fd f9ad 	bl	8001d1c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e1b7      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	4b52      	ldr	r3, [pc, #328]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 80049d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80b0 	beq.w	8004b4a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00c      	beq.n	8004a10 <HAL_RCC_OscConfig+0x30c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d008      	beq.n	8004a10 <HAL_RCC_OscConfig+0x30c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d004      	beq.n	8004a10 <HAL_RCC_OscConfig+0x30c>
 8004a06:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004a0a:	4846      	ldr	r0, [pc, #280]	; (8004b24 <HAL_RCC_OscConfig+0x420>)
 8004a0c:	f7fc fa40 	bl	8000e90 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a10:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_RCC_OscConfig+0x424>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d118      	bne.n	8004a7a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a48:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x424>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_RCC_OscConfig+0x424>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a54:	f7fd f962 	bl	8001d1c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5c:	f7fd f95e 	bl	8001d1c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e168      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCC_OscConfig+0x424>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x38c>
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a25      	ldr	r2, [pc, #148]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e01c      	b.n	8004aca <HAL_RCC_OscConfig+0x3c6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3ae>
 8004a98:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x3c6>
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fd f923 	bl	8001d1c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fd f91f 	bl	8001d1c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e127      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_RCC_OscConfig+0x418>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ee      	beq.n	8004ada <HAL_RCC_OscConfig+0x3d6>
 8004afc:	e01c      	b.n	8004b38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afe:	f7fd f90d 	bl	8001d1c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e012      	b.n	8004b2c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd f909 	bl	8001d1c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d909      	bls.n	8004b2c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e111      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	42470e80 	.word	0x42470e80
 8004b24:	08010480 	.word	0x08010480
 8004b28:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2c:	4b86      	ldr	r3, [pc, #536]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3e:	4b82      	ldr	r3, [pc, #520]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x468>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d008      	beq.n	8004b6c <HAL_RCC_OscConfig+0x468>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d004      	beq.n	8004b6c <HAL_RCC_OscConfig+0x468>
 8004b62:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004b66:	4879      	ldr	r0, [pc, #484]	; (8004d4c <HAL_RCC_OscConfig+0x648>)
 8004b68:	f7fc f992 	bl	8000e90 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80e4 	beq.w	8004d3e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b76:	4b74      	ldr	r3, [pc, #464]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	f000 80a5 	beq.w	8004cce <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f040 8089 	bne.w	8004ca0 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_RCC_OscConfig+0x4a6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9e:	d004      	beq.n	8004baa <HAL_RCC_OscConfig+0x4a6>
 8004ba0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004ba4:	4869      	ldr	r0, [pc, #420]	; (8004d4c <HAL_RCC_OscConfig+0x648>)
 8004ba6:	f7fc f973 	bl	8000e90 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	2b3f      	cmp	r3, #63	; 0x3f
 8004bb0:	d904      	bls.n	8004bbc <HAL_RCC_OscConfig+0x4b8>
 8004bb2:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004bb6:	4865      	ldr	r0, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x648>)
 8004bb8:	f7fc f96a 	bl	8000e90 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b31      	cmp	r3, #49	; 0x31
 8004bc2:	d904      	bls.n	8004bce <HAL_RCC_OscConfig+0x4ca>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004bcc:	d904      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x4d4>
 8004bce:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004bd2:	485e      	ldr	r0, [pc, #376]	; (8004d4c <HAL_RCC_OscConfig+0x648>)
 8004bd4:	f7fc f95c 	bl	8000e90 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d010      	beq.n	8004c02 <HAL_RCC_OscConfig+0x4fe>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d00c      	beq.n	8004c02 <HAL_RCC_OscConfig+0x4fe>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d008      	beq.n	8004c02 <HAL_RCC_OscConfig+0x4fe>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d004      	beq.n	8004c02 <HAL_RCC_OscConfig+0x4fe>
 8004bf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004bfc:	4853      	ldr	r0, [pc, #332]	; (8004d4c <HAL_RCC_OscConfig+0x648>)
 8004bfe:	f7fc f947 	bl	8000e90 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d903      	bls.n	8004c12 <HAL_RCC_OscConfig+0x50e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	d904      	bls.n	8004c1c <HAL_RCC_OscConfig+0x518>
 8004c12:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004c16:	484d      	ldr	r0, [pc, #308]	; (8004d4c <HAL_RCC_OscConfig+0x648>)
 8004c18:	f7fc f93a 	bl	8000e90 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b4c      	ldr	r3, [pc, #304]	; (8004d50 <HAL_RCC_OscConfig+0x64c>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fd f87b 	bl	8001d1c <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fd f877 	bl	8001d1c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e081      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	019b      	lsls	r3, r3, #6
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	4936      	ldr	r1, [pc, #216]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_OscConfig+0x64c>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd f850 	bl	8001d1c <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd f84c 	bl	8001d1c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e056      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x57c>
 8004c9e:	e04e      	b.n	8004d3e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_OscConfig+0x64c>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fd f839 	bl	8001d1c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd f835 	bl	8001d1c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e03f      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x5aa>
 8004ccc:	e037      	b.n	8004d3e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e032      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCC_OscConfig+0x644>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d028      	beq.n	8004d3a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d121      	bne.n	8004d3a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d11a      	bne.n	8004d3a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	08010480 	.word	0x08010480
 8004d50:	42470060 	.word	0x42470060

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e174      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x24>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	d904      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x2e>
 8004d78:	f240 215a 	movw	r1, #602	; 0x25a
 8004d7c:	487b      	ldr	r0, [pc, #492]	; (8004f6c <HAL_RCC_ClockConfig+0x218>)
 8004d7e:	f7fc f887 	bl	8000e90 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d019      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d013      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d010      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b06      	cmp	r3, #6
 8004daa:	d007      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b07      	cmp	r3, #7
 8004db0:	d004      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x68>
 8004db2:	f240 215b 	movw	r1, #603	; 0x25b
 8004db6:	486d      	ldr	r0, [pc, #436]	; (8004f6c <HAL_RCC_ClockConfig+0x218>)
 8004db8:	f7fc f86a 	bl	8000e90 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dbc:	4b6c      	ldr	r3, [pc, #432]	; (8004f70 <HAL_RCC_ClockConfig+0x21c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d90c      	bls.n	8004de4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dca:	4b69      	ldr	r3, [pc, #420]	; (8004f70 <HAL_RCC_ClockConfig+0x21c>)
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b67      	ldr	r3, [pc, #412]	; (8004f70 <HAL_RCC_ClockConfig+0x21c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e136      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d049      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dfc:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4a5c      	ldr	r2, [pc, #368]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e14:	4b57      	ldr	r3, [pc, #348]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4a56      	ldr	r2, [pc, #344]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d024      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b90      	cmp	r3, #144	; 0x90
 8004e36:	d01c      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2ba0      	cmp	r3, #160	; 0xa0
 8004e3e:	d018      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2bb0      	cmp	r3, #176	; 0xb0
 8004e46:	d014      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2bc0      	cmp	r3, #192	; 0xc0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2bd0      	cmp	r3, #208	; 0xd0
 8004e56:	d00c      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2be0      	cmp	r3, #224	; 0xe0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2bf0      	cmp	r3, #240	; 0xf0
 8004e66:	d004      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x11e>
 8004e68:	f240 217e 	movw	r1, #638	; 0x27e
 8004e6c:	483f      	ldr	r0, [pc, #252]	; (8004f6c <HAL_RCC_ClockConfig+0x218>)
 8004e6e:	f7fc f80f 	bl	8000e90 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	493d      	ldr	r1, [pc, #244]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d059      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d00c      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d004      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
 8004eb0:	f240 2185 	movw	r1, #645	; 0x285
 8004eb4:	482d      	ldr	r0, [pc, #180]	; (8004f6c <HAL_RCC_ClockConfig+0x218>)
 8004eb6:	f7fb ffeb 	bl	8000e90 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d119      	bne.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0bf      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0af      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0a7      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0203 	bic.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4919      	ldr	r1, [pc, #100]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f14:	f7fc ff02 	bl	8001d1c <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1c:	f7fc fefe 	bl	8001d1c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e08f      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_RCC_ClockConfig+0x220>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 020c 	and.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d1eb      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <HAL_RCC_ClockConfig+0x21c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d212      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <HAL_RCC_ClockConfig+0x21c>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_ClockConfig+0x21c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d007      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e072      	b.n	8005052 <HAL_RCC_ClockConfig+0x2fe>
 8004f6c:	08010480 	.word	0x08010480
 8004f70:	40023c00 	.word	0x40023c00
 8004f74:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d025      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d018      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x26a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d013      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x26a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f9e:	d00e      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x26a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004fa8:	d009      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x26a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004fb2:	d004      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x26a>
 8004fb4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004fb8:	4828      	ldr	r0, [pc, #160]	; (800505c <HAL_RCC_ClockConfig+0x308>)
 8004fba:	f7fb ff69 	bl	8000e90 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fbe:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_ClockConfig+0x30c>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4925      	ldr	r1, [pc, #148]	; (8005060 <HAL_RCC_ClockConfig+0x30c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d026      	beq.n	800502a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <HAL_RCC_ClockConfig+0x2c2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d013      	beq.n	8005016 <HAL_RCC_ClockConfig+0x2c2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ff6:	d00e      	beq.n	8005016 <HAL_RCC_ClockConfig+0x2c2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x2c2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800500a:	d004      	beq.n	8005016 <HAL_RCC_ClockConfig+0x2c2>
 800500c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005010:	4812      	ldr	r0, [pc, #72]	; (800505c <HAL_RCC_ClockConfig+0x308>)
 8005012:	f7fb ff3d 	bl	8000e90 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x30c>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x30c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x30c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x310>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x314>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x318>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fc fb26 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	08010480 	.word	0x08010480
 8005060:	40023800 	.word	0x40023800
 8005064:	08012f34 	.word	0x08012f34
 8005068:	2000006c 	.word	0x2000006c
 800506c:	20000070 	.word	0x20000070

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b090      	sub	sp, #64	; 0x40
 8005076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
 800507c:	2300      	movs	r3, #0
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005080:	2300      	movs	r3, #0
 8005082:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d00d      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005094:	2b08      	cmp	r3, #8
 8005096:	f200 80a1 	bhi.w	80051dc <HAL_RCC_GetSysClockFreq+0x16c>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x3a>
 80050a2:	e09b      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80050a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80050a8:	e09b      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80050ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050ae:	e098      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4b4f      	ldr	r3, [pc, #316]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ba:	4b4d      	ldr	r3, [pc, #308]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d028      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	623b      	str	r3, [r7, #32]
 80050d0:	627a      	str	r2, [r7, #36]	; 0x24
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050d8:	2100      	movs	r1, #0
 80050da:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80050dc:	fb03 f201 	mul.w	r2, r3, r1
 80050e0:	2300      	movs	r3, #0
 80050e2:	fb00 f303 	mul.w	r3, r0, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	4a43      	ldr	r2, [pc, #268]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80050ea:	fba0 1202 	umull	r1, r2, r0, r2
 80050ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f0:	460a      	mov	r2, r1
 80050f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80050f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f6:	4413      	add	r3, r2
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	2200      	movs	r2, #0
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	61fa      	str	r2, [r7, #28]
 8005102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005106:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800510a:	f7fb f8b9 	bl	8000280 <__aeabi_uldivmod>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4613      	mov	r3, r2
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005116:	e053      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005118:	4b35      	ldr	r3, [pc, #212]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	2200      	movs	r2, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	617a      	str	r2, [r7, #20]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800512a:	f04f 0b00 	mov.w	fp, #0
 800512e:	4652      	mov	r2, sl
 8005130:	465b      	mov	r3, fp
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	0159      	lsls	r1, r3, #5
 800513c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005140:	0150      	lsls	r0, r2, #5
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	ebb2 080a 	subs.w	r8, r2, sl
 800514a:	eb63 090b 	sbc.w	r9, r3, fp
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800515a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800515e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005162:	ebb2 0408 	subs.w	r4, r2, r8
 8005166:	eb63 0509 	sbc.w	r5, r3, r9
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	00eb      	lsls	r3, r5, #3
 8005174:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005178:	00e2      	lsls	r2, r4, #3
 800517a:	4614      	mov	r4, r2
 800517c:	461d      	mov	r5, r3
 800517e:	eb14 030a 	adds.w	r3, r4, sl
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	eb45 030b 	adc.w	r3, r5, fp
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005196:	4629      	mov	r1, r5
 8005198:	028b      	lsls	r3, r1, #10
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051a0:	4621      	mov	r1, r4
 80051a2:	028a      	lsls	r2, r1, #10
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	2200      	movs	r2, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	60fa      	str	r2, [r7, #12]
 80051b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b4:	f7fb f864 	bl	8000280 <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4613      	mov	r3, r2
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	3301      	adds	r3, #1
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051da:	e002      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80051de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3740      	adds	r7, #64	; 0x40
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	00f42400 	.word	0x00f42400
 80051f8:	017d7840 	.word	0x017d7840

080051fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <HAL_RCC_GetHCLKFreq+0x14>)
 8005202:	681b      	ldr	r3, [r3, #0]
}
 8005204:	4618      	mov	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	2000006c 	.word	0x2000006c

08005214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005218:	f7ff fff0 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b05      	ldr	r3, [pc, #20]	; (8005234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0a9b      	lsrs	r3, r3, #10
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4903      	ldr	r1, [pc, #12]	; (8005238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40023800 	.word	0x40023800
 8005238:	08012f44 	.word	0x08012f44

0800523c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	220f      	movs	r2, #15
 800524a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800524c:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0203 	and.w	r2, r3, #3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005264:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	08db      	lsrs	r3, r3, #3
 8005276:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_RCC_GetClockConfig+0x60>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0207 	and.w	r2, r3, #7
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	601a      	str	r2, [r3, #0]
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800
 800529c:	40023c00 	.word	0x40023c00

080052a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b0f      	cmp	r3, #15
 80052be:	d904      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80052c0:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80052c4:	4834      	ldr	r0, [pc, #208]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052c6:	f7fb fde3 	bl	8000e90 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d066      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d903      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b07      	cmp	r3, #7
 80052f0:	d904      	bls.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80052f2:	f640 11de 	movw	r1, #2526	; 0x9de
 80052f6:	4828      	ldr	r0, [pc, #160]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052f8:	f7fb fdca 	bl	8000e90 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b31      	cmp	r3, #49	; 0x31
 8005302:	d904      	bls.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800530c:	d904      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800530e:	f640 11df 	movw	r1, #2527	; 0x9df
 8005312:	4821      	ldr	r0, [pc, #132]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005314:	f7fb fdbc 	bl	8000e90 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d903      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b3f      	cmp	r3, #63	; 0x3f
 8005326:	d904      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8005328:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800532c:	481a      	ldr	r0, [pc, #104]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800532e:	f7fb fdaf 	bl	8000e90 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005338:	f7fc fcf0 	bl	8001d1c <HAL_GetTick>
 800533c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005340:	f7fc fcec 	bl	8001d1c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1b3      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	071b      	lsls	r3, r3, #28
 8005370:	490b      	ldr	r1, [pc, #44]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537e:	f7fc fccd 	bl	8001d1c <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005384:	e00e      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005386:	f7fc fcc9 	bl	8001d1c <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d907      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e190      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005398:	080104b8 	.word	0x080104b8
 800539c:	42470068 	.word	0x42470068
 80053a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a4:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ea      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8173 	beq.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c6:	f000 80a6 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d2:	f000 80a0 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	4a7c      	ldr	r2, [pc, #496]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	f000 809a 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	4a7a      	ldr	r2, [pc, #488]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	f000 8094 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	4a78      	ldr	r2, [pc, #480]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	f000 808e 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4a76      	ldr	r2, [pc, #472]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005400:	4293      	cmp	r3, r2
 8005402:	f000 8088 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4a74      	ldr	r2, [pc, #464]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	f000 8082 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4a72      	ldr	r2, [pc, #456]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d07c      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	4a70      	ldr	r2, [pc, #448]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d077      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	4a6f      	ldr	r2, [pc, #444]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d072      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	4a6d      	ldr	r2, [pc, #436]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d06d      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4a6c      	ldr	r2, [pc, #432]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d068      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	4a6a      	ldr	r2, [pc, #424]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d063      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	4a69      	ldr	r2, [pc, #420]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d05e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	4a67      	ldr	r2, [pc, #412]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d059      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	4a66      	ldr	r2, [pc, #408]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d054      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	4a64      	ldr	r2, [pc, #400]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04f      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	4a63      	ldr	r2, [pc, #396]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4a61      	ldr	r2, [pc, #388]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d045      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	4a60      	ldr	r2, [pc, #384]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d040      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4a5e      	ldr	r2, [pc, #376]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d03b      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4a5d      	ldr	r2, [pc, #372]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d036      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	4a5b      	ldr	r2, [pc, #364]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	4a5a      	ldr	r2, [pc, #360]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02c      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	4a58      	ldr	r2, [pc, #352]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	4a57      	ldr	r2, [pc, #348]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	4a55      	ldr	r2, [pc, #340]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	4a54      	ldr	r2, [pc, #336]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	4a52      	ldr	r2, [pc, #328]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	4a51      	ldr	r2, [pc, #324]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	4a4f      	ldr	r2, [pc, #316]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	4a4e      	ldr	r2, [pc, #312]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800550c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8005510:	484c      	ldr	r0, [pc, #304]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8005512:	f7fb fcbd 	bl	8000e90 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
 8005526:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005532:	4b45      	ldr	r3, [pc, #276]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a44      	ldr	r2, [pc, #272]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800553e:	f7fc fbed 	bl	8001d1c <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fc fbe9 	bl	8001d1c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e0b0      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005558:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005564:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d073      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	d06c      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d158      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055aa:	f7fc fbb7 	bl	8001d1c <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b0:	e04e      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fc fbb3 	bl	8001d1c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d945      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e078      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	00020300 	.word	0x00020300
 80055d0:	00030300 	.word	0x00030300
 80055d4:	00040300 	.word	0x00040300
 80055d8:	00050300 	.word	0x00050300
 80055dc:	00060300 	.word	0x00060300
 80055e0:	00070300 	.word	0x00070300
 80055e4:	00080300 	.word	0x00080300
 80055e8:	00090300 	.word	0x00090300
 80055ec:	000a0300 	.word	0x000a0300
 80055f0:	000b0300 	.word	0x000b0300
 80055f4:	000c0300 	.word	0x000c0300
 80055f8:	000d0300 	.word	0x000d0300
 80055fc:	000e0300 	.word	0x000e0300
 8005600:	000f0300 	.word	0x000f0300
 8005604:	00100300 	.word	0x00100300
 8005608:	00110300 	.word	0x00110300
 800560c:	00120300 	.word	0x00120300
 8005610:	00130300 	.word	0x00130300
 8005614:	00140300 	.word	0x00140300
 8005618:	00150300 	.word	0x00150300
 800561c:	00160300 	.word	0x00160300
 8005620:	00170300 	.word	0x00170300
 8005624:	00180300 	.word	0x00180300
 8005628:	00190300 	.word	0x00190300
 800562c:	001a0300 	.word	0x001a0300
 8005630:	001b0300 	.word	0x001b0300
 8005634:	001c0300 	.word	0x001c0300
 8005638:	001d0300 	.word	0x001d0300
 800563c:	001e0300 	.word	0x001e0300
 8005640:	001f0300 	.word	0x001f0300
 8005644:	080104b8 	.word	0x080104b8
 8005648:	40007000 	.word	0x40007000
 800564c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005650:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0aa      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005668:	d10d      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	4911      	ldr	r1, [pc, #68]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005680:	4313      	orrs	r3, r2
 8005682:	608b      	str	r3, [r1, #8]
 8005684:	e005      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4a0e      	ldr	r2, [pc, #56]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800568c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005690:	6093      	str	r3, [r2, #8]
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569e:	4909      	ldr	r1, [pc, #36]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	7d1a      	ldrb	r2, [r3, #20]
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80056b6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	424711e0 	.word	0x424711e0

080056cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0c4      	b.n	800586c <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a63      	ldr	r2, [pc, #396]	; (8005874 <HAL_RTC_Init+0x1a8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_RTC_Init+0x2a>
 80056ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80056f0:	4861      	ldr	r0, [pc, #388]	; (8005878 <HAL_RTC_Init+0x1ac>)
 80056f2:	f7fb fbcd 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d008      	beq.n	8005710 <HAL_RTC_Init+0x44>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_RTC_Init+0x44>
 8005706:	f240 1105 	movw	r1, #261	; 0x105
 800570a:	485b      	ldr	r0, [pc, #364]	; (8005878 <HAL_RTC_Init+0x1ac>)
 800570c:	f7fb fbc0 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b7f      	cmp	r3, #127	; 0x7f
 8005716:	d904      	bls.n	8005722 <HAL_RTC_Init+0x56>
 8005718:	f44f 7183 	mov.w	r1, #262	; 0x106
 800571c:	4856      	ldr	r0, [pc, #344]	; (8005878 <HAL_RTC_Init+0x1ac>)
 800571e:	f7fb fbb7 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572a:	d304      	bcc.n	8005736 <HAL_RTC_Init+0x6a>
 800572c:	f240 1107 	movw	r1, #263	; 0x107
 8005730:	4851      	ldr	r0, [pc, #324]	; (8005878 <HAL_RTC_Init+0x1ac>)
 8005732:	f7fb fbad 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <HAL_RTC_Init+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005746:	d00e      	beq.n	8005766 <HAL_RTC_Init+0x9a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005750:	d009      	beq.n	8005766 <HAL_RTC_Init+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800575a:	d004      	beq.n	8005766 <HAL_RTC_Init+0x9a>
 800575c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005760:	4845      	ldr	r0, [pc, #276]	; (8005878 <HAL_RTC_Init+0x1ac>)
 8005762:	f7fb fb95 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_RTC_Init+0xb6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005776:	d004      	beq.n	8005782 <HAL_RTC_Init+0xb6>
 8005778:	f240 1109 	movw	r1, #265	; 0x109
 800577c:	483e      	ldr	r0, [pc, #248]	; (8005878 <HAL_RTC_Init+0x1ac>)
 800577e:	f7fb fb87 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_RTC_Init+0xd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005792:	d004      	beq.n	800579e <HAL_RTC_Init+0xd2>
 8005794:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005798:	4837      	ldr	r0, [pc, #220]	; (8005878 <HAL_RTC_Init+0x1ac>)
 800579a:	f7fb fb79 	bl	8000e90 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7f5b      	ldrb	r3, [r3, #29]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb fbd4 	bl	8000f5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	22ca      	movs	r2, #202	; 0xca
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2253      	movs	r2, #83	; 0x53
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fad2 	bl	8005d74 <RTC_EnterInitMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d12c      	bne.n	8005834 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6899      	ldr	r1, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68d2      	ldr	r2, [r2, #12]
 8005814:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6919      	ldr	r1, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	041a      	lsls	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fad9 	bl	8005de2 <RTC_ExitInitMode>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d113      	bne.n	8005862 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ff      	movs	r2, #255	; 0xff
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40002800 	.word	0x40002800
 8005878:	080104f4 	.word	0x080104f4

0800587c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_RTC_SetTime+0x26>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d004      	beq.n	80058a2 <HAL_RTC_SetTime+0x26>
 8005898:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 800589c:	489a      	ldr	r0, [pc, #616]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 800589e:	f7fb faf7 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058aa:	d00d      	beq.n	80058c8 <HAL_RTC_SetTime+0x4c>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d008      	beq.n	80058c8 <HAL_RTC_SetTime+0x4c>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <HAL_RTC_SetTime+0x4c>
 80058be:	f240 21b5 	movw	r1, #693	; 0x2b5
 80058c2:	4891      	ldr	r0, [pc, #580]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 80058c4:	f7fb fae4 	bl	8000e90 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <HAL_RTC_SetTime+0x68>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058d8:	d004      	beq.n	80058e4 <HAL_RTC_SetTime+0x68>
 80058da:	f240 21b6 	movw	r1, #694	; 0x2b6
 80058de:	488a      	ldr	r0, [pc, #552]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 80058e0:	f7fb fad6 	bl	8000e90 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	7f1b      	ldrb	r3, [r3, #28]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_RTC_SetTime+0x74>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e107      	b.n	8005b00 <HAL_RTC_SetTime+0x284>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2202      	movs	r2, #2
 80058fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d15c      	bne.n	80059bc <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_RTC_SetTime+0xa4>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d904      	bls.n	800592a <HAL_RTC_SetTime+0xae>
 8005920:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005924:	4878      	ldr	r0, [pc, #480]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 8005926:	f7fb fab3 	bl	8000e90 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d015      	beq.n	800595e <HAL_RTC_SetTime+0xe2>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	78db      	ldrb	r3, [r3, #3]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d011      	beq.n	800595e <HAL_RTC_SetTime+0xe2>
 800593a:	f240 21c2 	movw	r1, #706	; 0x2c2
 800593e:	4872      	ldr	r0, [pc, #456]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 8005940:	f7fb faa6 	bl	8000e90 <assert_failed>
 8005944:	e00b      	b.n	800595e <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2200      	movs	r2, #0
 800594a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b17      	cmp	r3, #23
 8005952:	d904      	bls.n	800595e <HAL_RTC_SetTime+0xe2>
 8005954:	f240 21c7 	movw	r1, #711	; 0x2c7
 8005958:	486b      	ldr	r0, [pc, #428]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 800595a:	f7fb fa99 	bl	8000e90 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b3b      	cmp	r3, #59	; 0x3b
 8005964:	d904      	bls.n	8005970 <HAL_RTC_SetTime+0xf4>
 8005966:	f240 21c9 	movw	r1, #713	; 0x2c9
 800596a:	4867      	ldr	r0, [pc, #412]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 800596c:	f7fb fa90 	bl	8000e90 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	789b      	ldrb	r3, [r3, #2]
 8005974:	2b3b      	cmp	r3, #59	; 0x3b
 8005976:	d904      	bls.n	8005982 <HAL_RTC_SetTime+0x106>
 8005978:	f240 21ca 	movw	r1, #714	; 0x2ca
 800597c:	4862      	ldr	r0, [pc, #392]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 800597e:	f7fb fa87 	bl	8000e90 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fa50 	bl	8005e2c <RTC_ByteToBcd2>
 800598c:	4603      	mov	r3, r0
 800598e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fa49 	bl	8005e2c <RTC_ByteToBcd2>
 800599a:	4603      	mov	r3, r0
 800599c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800599e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	789b      	ldrb	r3, [r3, #2]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fa41 	bl	8005e2c <RTC_ByteToBcd2>
 80059aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	78db      	ldrb	r3, [r3, #3]
 80059b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e062      	b.n	8005a82 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d022      	beq.n	8005a10 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fa49 	bl	8005e66 <RTC_Bcd2ToByte>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_RTC_SetTime+0x16e>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fa41 	bl	8005e66 <RTC_Bcd2ToByte>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d904      	bls.n	80059f4 <HAL_RTC_SetTime+0x178>
 80059ea:	f240 21d5 	movw	r1, #725	; 0x2d5
 80059ee:	4846      	ldr	r0, [pc, #280]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 80059f0:	f7fb fa4e 	bl	8000e90 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d019      	beq.n	8005a30 <HAL_RTC_SetTime+0x1b4>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d015      	beq.n	8005a30 <HAL_RTC_SetTime+0x1b4>
 8005a04:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005a08:	483f      	ldr	r0, [pc, #252]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 8005a0a:	f7fb fa41 	bl	8000e90 <assert_failed>
 8005a0e:	e00f      	b.n	8005a30 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2200      	movs	r2, #0
 8005a14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fa23 	bl	8005e66 <RTC_Bcd2ToByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b17      	cmp	r3, #23
 8005a24:	d904      	bls.n	8005a30 <HAL_RTC_SetTime+0x1b4>
 8005a26:	f240 21db 	movw	r1, #731	; 0x2db
 8005a2a:	4837      	ldr	r0, [pc, #220]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 8005a2c:	f7fb fa30 	bl	8000e90 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fa16 	bl	8005e66 <RTC_Bcd2ToByte>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b3b      	cmp	r3, #59	; 0x3b
 8005a3e:	d904      	bls.n	8005a4a <HAL_RTC_SetTime+0x1ce>
 8005a40:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005a44:	4830      	ldr	r0, [pc, #192]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 8005a46:	f7fb fa23 	bl	8000e90 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	789b      	ldrb	r3, [r3, #2]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fa09 	bl	8005e66 <RTC_Bcd2ToByte>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b3b      	cmp	r3, #59	; 0x3b
 8005a58:	d904      	bls.n	8005a64 <HAL_RTC_SetTime+0x1e8>
 8005a5a:	f240 21de 	movw	r1, #734	; 0x2de
 8005a5e:	482a      	ldr	r0, [pc, #168]	; (8005b08 <HAL_RTC_SetTime+0x28c>)
 8005a60:	f7fb fa16 	bl	8000e90 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a70:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a76:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	78db      	ldrb	r3, [r3, #3]
 8005a7c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	22ca      	movs	r2, #202	; 0xca
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2253      	movs	r2, #83	; 0x53
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f96e 	bl	8005d74 <RTC_EnterInitMode>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d120      	bne.n	8005ae4 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005aac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ab0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ac0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6899      	ldr	r1, [r3, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f981 	bl	8005de2 <RTC_ExitInitMode>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	771a      	strb	r2, [r3, #28]

  return status;
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	080104f4 	.word	0x080104f4

08005b0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_RTC_SetDate+0x26>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d004      	beq.n	8005b32 <HAL_RTC_SetDate+0x26>
 8005b28:	f240 3153 	movw	r1, #851	; 0x353
 8005b2c:	487c      	ldr	r0, [pc, #496]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005b2e:	f7fb f9af 	bl	8000e90 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	7f1b      	ldrb	r3, [r3, #28]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_RTC_SetDate+0x32>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e0ec      	b.n	8005d18 <HAL_RTC_SetDate+0x20c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2202      	movs	r2, #2
 8005b48:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <HAL_RTC_SetDate+0x62>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	f023 0310 	bic.w	r3, r3, #16
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	330a      	adds	r3, #10
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d01c      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d014      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d010      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d00c      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d008      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b07      	cmp	r3, #7
 8005ba4:	d004      	beq.n	8005bb0 <HAL_RTC_SetDate+0xa4>
 8005ba6:	f240 315f 	movw	r1, #863	; 0x35f
 8005baa:	485d      	ldr	r0, [pc, #372]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005bac:	f7fb f970 	bl	8000e90 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13f      	bne.n	8005c36 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	78db      	ldrb	r3, [r3, #3]
 8005bba:	2b63      	cmp	r3, #99	; 0x63
 8005bbc:	d904      	bls.n	8005bc8 <HAL_RTC_SetDate+0xbc>
 8005bbe:	f240 3163 	movw	r1, #867	; 0x363
 8005bc2:	4857      	ldr	r0, [pc, #348]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005bc4:	f7fb f964 	bl	8000e90 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_RTC_SetDate+0xcc>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d904      	bls.n	8005be2 <HAL_RTC_SetDate+0xd6>
 8005bd8:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005bdc:	4850      	ldr	r0, [pc, #320]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005bde:	f7fb f957 	bl	8000e90 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	789b      	ldrb	r3, [r3, #2]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_RTC_SetDate+0xe6>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	789b      	ldrb	r3, [r3, #2]
 8005bee:	2b1f      	cmp	r3, #31
 8005bf0:	d904      	bls.n	8005bfc <HAL_RTC_SetDate+0xf0>
 8005bf2:	f240 3165 	movw	r1, #869	; 0x365
 8005bf6:	484a      	ldr	r0, [pc, #296]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005bf8:	f7fb f94a 	bl	8000e90 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 f913 	bl	8005e2c <RTC_ByteToBcd2>
 8005c06:	4603      	mov	r3, r0
 8005c08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f90c 	bl	8005e2c <RTC_ByteToBcd2>
 8005c14:	4603      	mov	r3, r0
 8005c16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	789b      	ldrb	r3, [r3, #2]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f904 	bl	8005e2c <RTC_ByteToBcd2>
 8005c24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e045      	b.n	8005cc2 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	78db      	ldrb	r3, [r3, #3]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f913 	bl	8005e66 <RTC_Bcd2ToByte>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b63      	cmp	r3, #99	; 0x63
 8005c44:	d904      	bls.n	8005c50 <HAL_RTC_SetDate+0x144>
 8005c46:	f240 316e 	movw	r1, #878	; 0x36e
 8005c4a:	4835      	ldr	r0, [pc, #212]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005c4c:	f7fb f920 	bl	8000e90 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f906 	bl	8005e66 <RTC_Bcd2ToByte>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_RTC_SetDate+0x164>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f8fe 	bl	8005e66 <RTC_Bcd2ToByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	d904      	bls.n	8005c7a <HAL_RTC_SetDate+0x16e>
 8005c70:	f240 316f 	movw	r1, #879	; 0x36f
 8005c74:	482a      	ldr	r0, [pc, #168]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005c76:	f7fb f90b 	bl	8000e90 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	789b      	ldrb	r3, [r3, #2]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 f8f1 	bl	8005e66 <RTC_Bcd2ToByte>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_RTC_SetDate+0x18e>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	789b      	ldrb	r3, [r3, #2]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f8e9 	bl	8005e66 <RTC_Bcd2ToByte>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b1f      	cmp	r3, #31
 8005c98:	d904      	bls.n	8005ca4 <HAL_RTC_SetDate+0x198>
 8005c9a:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005c9e:	4820      	ldr	r0, [pc, #128]	; (8005d20 <HAL_RTC_SetDate+0x214>)
 8005ca0:	f7fb f8f6 	bl	8000e90 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	78db      	ldrb	r3, [r3, #3]
 8005ca8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005cb0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005cb6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	22ca      	movs	r2, #202	; 0xca
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2253      	movs	r2, #83	; 0x53
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f84e 	bl	8005d74 <RTC_EnterInitMode>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cf0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f875 	bl	8005de2 <RTC_ExitInitMode>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005cfc:	7cfb      	ldrb	r3, [r7, #19]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]

  return status;
 8005d16:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd90      	pop	{r4, r7, pc}
 8005d20:	080104f4 	.word	0x080104f4

08005d24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d40:	f7fb ffec 	bl	8001d1c <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d46:	e009      	b.n	8005d5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d48:	f7fb ffe8 	bl	8001d1c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d56:	d901      	bls.n	8005d5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e007      	b.n	8005d6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ee      	beq.n	8005d48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d122      	bne.n	8005dd8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005da0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005da2:	f7fb ffbb 	bl	8001d1c <HAL_GetTick>
 8005da6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005da8:	e00c      	b.n	8005dc4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005daa:	f7fb ffb7 	bl	8001d1c <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db8:	d904      	bls.n	8005dc4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d102      	bne.n	8005dd8 <RTC_EnterInitMode+0x64>
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d1e8      	bne.n	8005daa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dfc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff89 	bl	8005d24 <HAL_RTC_WaitForSynchro>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005e3a:	e005      	b.n	8005e48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	3b0a      	subs	r3, #10
 8005e46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	d8f6      	bhi.n	8005e3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	0092      	lsls	r2, r2, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	4413      	add	r3, r2
 8005e90:	b2db      	uxtb	r3, r3
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e18c      	b.n	80061cc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a75      	ldr	r2, [pc, #468]	; (800608c <HAL_SPI_Init+0x1ec>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d018      	beq.n	8005eee <HAL_SPI_Init+0x4e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a73      	ldr	r2, [pc, #460]	; (8006090 <HAL_SPI_Init+0x1f0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <HAL_SPI_Init+0x4e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a72      	ldr	r2, [pc, #456]	; (8006094 <HAL_SPI_Init+0x1f4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00e      	beq.n	8005eee <HAL_SPI_Init+0x4e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a70      	ldr	r2, [pc, #448]	; (8006098 <HAL_SPI_Init+0x1f8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_SPI_Init+0x4e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6f      	ldr	r2, [pc, #444]	; (800609c <HAL_SPI_Init+0x1fc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_SPI_Init+0x4e>
 8005ee4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ee8:	486d      	ldr	r0, [pc, #436]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005eea:	f7fa ffd1 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_SPI_Init+0x6a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efe:	d004      	beq.n	8005f0a <HAL_SPI_Init+0x6a>
 8005f00:	f240 1141 	movw	r1, #321	; 0x141
 8005f04:	4866      	ldr	r0, [pc, #408]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005f06:	f7fa ffc3 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <HAL_SPI_Init+0x90>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1a:	d009      	beq.n	8005f30 <HAL_SPI_Init+0x90>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f24:	d004      	beq.n	8005f30 <HAL_SPI_Init+0x90>
 8005f26:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005f2a:	485d      	ldr	r0, [pc, #372]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005f2c:	f7fa ffb0 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f38:	d008      	beq.n	8005f4c <HAL_SPI_Init+0xac>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_SPI_Init+0xac>
 8005f42:	f240 1143 	movw	r1, #323	; 0x143
 8005f46:	4856      	ldr	r0, [pc, #344]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005f48:	f7fa ffa2 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f54:	d00d      	beq.n	8005f72 <HAL_SPI_Init+0xd2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <HAL_SPI_Init+0xd2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f66:	d004      	beq.n	8005f72 <HAL_SPI_Init+0xd2>
 8005f68:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005f6c:	484c      	ldr	r0, [pc, #304]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005f6e:	f7fa ff8f 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d01c      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d018      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	2b18      	cmp	r3, #24
 8005f90:	d014      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d010      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	2b28      	cmp	r3, #40	; 0x28
 8005fa0:	d00c      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	2b30      	cmp	r3, #48	; 0x30
 8005fa8:	d008      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	2b38      	cmp	r3, #56	; 0x38
 8005fb0:	d004      	beq.n	8005fbc <HAL_SPI_Init+0x11c>
 8005fb2:	f240 1145 	movw	r1, #325	; 0x145
 8005fb6:	483a      	ldr	r0, [pc, #232]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005fb8:	f7fa ff6a 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_SPI_Init+0x136>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d004      	beq.n	8005fd6 <HAL_SPI_Init+0x136>
 8005fcc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005fd0:	4833      	ldr	r0, [pc, #204]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005fd2:	f7fa ff5d 	bl	8000e90 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <HAL_SPI_Init+0x150>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d004      	beq.n	8005ff0 <HAL_SPI_Init+0x150>
 8005fe6:	f240 1147 	movw	r1, #327	; 0x147
 8005fea:	482d      	ldr	r0, [pc, #180]	; (80060a0 <HAL_SPI_Init+0x200>)
 8005fec:	f7fa ff50 	bl	8000e90 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d155      	bne.n	80060a4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_SPI_Init+0x172>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d004      	beq.n	8006012 <HAL_SPI_Init+0x172>
 8006008:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800600c:	4824      	ldr	r0, [pc, #144]	; (80060a0 <HAL_SPI_Init+0x200>)
 800600e:	f7fa ff3f 	bl	8000e90 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <HAL_SPI_Init+0x18c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d004      	beq.n	800602c <HAL_SPI_Init+0x18c>
 8006022:	f240 114b 	movw	r1, #331	; 0x14b
 8006026:	481e      	ldr	r0, [pc, #120]	; (80060a0 <HAL_SPI_Init+0x200>)
 8006028:	f7fa ff32 	bl	8000e90 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006034:	d125      	bne.n	8006082 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d05d      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	2b08      	cmp	r3, #8
 8006044:	d059      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	2b10      	cmp	r3, #16
 800604c:	d055      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b18      	cmp	r3, #24
 8006054:	d051      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	2b20      	cmp	r3, #32
 800605c:	d04d      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	2b28      	cmp	r3, #40	; 0x28
 8006064:	d049      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	2b30      	cmp	r3, #48	; 0x30
 800606c:	d045      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b38      	cmp	r3, #56	; 0x38
 8006074:	d041      	beq.n	80060fa <HAL_SPI_Init+0x25a>
 8006076:	f240 114f 	movw	r1, #335	; 0x14f
 800607a:	4809      	ldr	r0, [pc, #36]	; (80060a0 <HAL_SPI_Init+0x200>)
 800607c:	f7fa ff08 	bl	8000e90 <assert_failed>
 8006080:	e03b      	b.n	80060fa <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	61da      	str	r2, [r3, #28]
 8006088:	e037      	b.n	80060fa <HAL_SPI_Init+0x25a>
 800608a:	bf00      	nop
 800608c:	40013000 	.word	0x40013000
 8006090:	40003800 	.word	0x40003800
 8006094:	40003c00 	.word	0x40003c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40015000 	.word	0x40015000
 80060a0:	0801052c 	.word	0x0801052c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d01c      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d018      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	2b18      	cmp	r3, #24
 80060c2:	d014      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d010      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	2b28      	cmp	r3, #40	; 0x28
 80060d2:	d00c      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2b30      	cmp	r3, #48	; 0x30
 80060da:	d008      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b38      	cmp	r3, #56	; 0x38
 80060e2:	d004      	beq.n	80060ee <HAL_SPI_Init+0x24e>
 80060e4:	f240 1159 	movw	r1, #345	; 0x159
 80060e8:	483a      	ldr	r0, [pc, #232]	; (80061d4 <HAL_SPI_Init+0x334>)
 80060ea:	f7fa fed1 	bl	8000e90 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fa ff83 	bl	8001020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	ea42 0103 	orr.w	r1, r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 0104 	and.w	r1, r3, #4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0210 	and.w	r2, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	0801052c 	.word	0x0801052c

080061d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_SPI_Transmit+0x30>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fc:	d004      	beq.n	8006208 <HAL_SPI_Transmit+0x30>
 80061fe:	f44f 7142 	mov.w	r1, #776	; 0x308
 8006202:	4880      	ldr	r0, [pc, #512]	; (8006404 <HAL_SPI_Transmit+0x22c>)
 8006204:	f7fa fe44 	bl	8000e90 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_SPI_Transmit+0x3e>
 8006212:	2302      	movs	r3, #2
 8006214:	e128      	b.n	8006468 <HAL_SPI_Transmit+0x290>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800621e:	f7fb fd7d 	bl	8001d1c <HAL_GetTick>
 8006222:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d002      	beq.n	800623a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006234:	2302      	movs	r3, #2
 8006236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006238:	e10d      	b.n	8006456 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Transmit+0x6e>
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800624a:	e104      	b.n	8006456 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2203      	movs	r2, #3
 8006250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006292:	d10f      	bne.n	80062b4 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d007      	beq.n	80062d2 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062da:	d14b      	bne.n	8006374 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_SPI_Transmit+0x112>
 80062e4:	8afb      	ldrh	r3, [r7, #22]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d13e      	bne.n	8006368 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	881a      	ldrh	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800630e:	e02b      	b.n	8006368 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b02      	cmp	r3, #2
 800631c:	d112      	bne.n	8006344 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	881a      	ldrh	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	1c9a      	adds	r2, r3, #2
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	86da      	strh	r2, [r3, #54]	; 0x36
 8006342:	e011      	b.n	8006368 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006344:	f7fb fcea 	bl	8001d1c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d803      	bhi.n	800635c <HAL_SPI_Transmit+0x184>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Transmit+0x18a>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006366:	e076      	b.n	8006456 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1ce      	bne.n	8006310 <HAL_SPI_Transmit+0x138>
 8006372:	e04e      	b.n	8006412 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_Transmit+0x1aa>
 800637c:	8afb      	ldrh	r3, [r7, #22]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d142      	bne.n	8006408 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063a8:	e02e      	b.n	8006408 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d113      	bne.n	80063e0 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80063de:	e013      	b.n	8006408 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e0:	f7fb fc9c 	bl	8001d1c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d803      	bhi.n	80063f8 <HAL_SPI_Transmit+0x220>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Transmit+0x226>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006402:	e028      	b.n	8006456 <HAL_SPI_Transmit+0x27e>
 8006404:	0801052c 	.word	0x0801052c
    while (hspi->TxXferCount > 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1cb      	bne.n	80063aa <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f8b2 	bl	8006580 <SPI_EndRxTxTransaction>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e000      	b.n	8006456 <HAL_SPI_Transmit+0x27e>
  }

error:
 8006454:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006466:	7ffb      	ldrb	r3, [r7, #31]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006480:	f7fb fc4c 	bl	8001d1c <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	4413      	add	r3, r2
 800648e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006490:	f7fb fc44 	bl	8001d1c <HAL_GetTick>
 8006494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006496:	4b39      	ldr	r3, [pc, #228]	; (800657c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	015b      	lsls	r3, r3, #5
 800649c:	0d1b      	lsrs	r3, r3, #20
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a6:	e054      	b.n	8006552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d050      	beq.n	8006552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064b0:	f7fb fc34 	bl	8001d1c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d902      	bls.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d13d      	bne.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064de:	d111      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e8:	d004      	beq.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f2:	d107      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d10f      	bne.n	800652e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800652c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e017      	b.n	8006572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	3b01      	subs	r3, #1
 8006550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4013      	ands	r3, r2
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	bf0c      	ite	eq
 8006562:	2301      	moveq	r3, #1
 8006564:	2300      	movne	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	429a      	cmp	r2, r3
 800656e:	d19b      	bne.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2000006c 	.word	0x2000006c

08006580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <SPI_EndRxTxTransaction+0x7c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <SPI_EndRxTxTransaction+0x80>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	0d5b      	lsrs	r3, r3, #21
 8006598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800659c:	fb02 f303 	mul.w	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065aa:	d112      	bne.n	80065d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff ff5a 	bl	8006470 <SPI_WaitFlagStateUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f043 0220 	orr.w	r2, r3, #32
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	3b01      	subs	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e8:	2b80      	cmp	r3, #128	; 0x80
 80065ea:	d0f2      	beq.n	80065d2 <SPI_EndRxTxTransaction+0x52>
 80065ec:	e000      	b.n	80065f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80065ee:	bf00      	nop
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2000006c 	.word	0x2000006c
 8006600:	165e9f81 	.word	0x165e9f81

08006604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0a7      	b.n	8006766 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a55      	ldr	r2, [pc, #340]	; (8006770 <HAL_TIM_Base_Init+0x16c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d027      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006628:	d022      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_TIM_Base_Init+0x170>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01d      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a4f      	ldr	r2, [pc, #316]	; (8006778 <HAL_TIM_Base_Init+0x174>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a4e      	ldr	r2, [pc, #312]	; (800677c <HAL_TIM_Base_Init+0x178>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a4c      	ldr	r2, [pc, #304]	; (8006780 <HAL_TIM_Base_Init+0x17c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4b      	ldr	r2, [pc, #300]	; (8006784 <HAL_TIM_Base_Init+0x180>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a49      	ldr	r2, [pc, #292]	; (8006788 <HAL_TIM_Base_Init+0x184>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_TIM_Base_Init+0x6c>
 8006666:	f240 1113 	movw	r1, #275	; 0x113
 800666a:	4848      	ldr	r0, [pc, #288]	; (800678c <HAL_TIM_Base_Init+0x188>)
 800666c:	f7fa fc10 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d014      	beq.n	80066a2 <HAL_TIM_Base_Init+0x9e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b10      	cmp	r3, #16
 800667e:	d010      	beq.n	80066a2 <HAL_TIM_Base_Init+0x9e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b20      	cmp	r3, #32
 8006686:	d00c      	beq.n	80066a2 <HAL_TIM_Base_Init+0x9e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d008      	beq.n	80066a2 <HAL_TIM_Base_Init+0x9e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d004      	beq.n	80066a2 <HAL_TIM_Base_Init+0x9e>
 8006698:	f44f 718a 	mov.w	r1, #276	; 0x114
 800669c:	483b      	ldr	r0, [pc, #236]	; (800678c <HAL_TIM_Base_Init+0x188>)
 800669e:	f7fa fbf7 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <HAL_TIM_Base_Init+0xc4>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d009      	beq.n	80066c8 <HAL_TIM_Base_Init+0xc4>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d004      	beq.n	80066c8 <HAL_TIM_Base_Init+0xc4>
 80066be:	f240 1115 	movw	r1, #277	; 0x115
 80066c2:	4832      	ldr	r0, [pc, #200]	; (800678c <HAL_TIM_Base_Init+0x188>)
 80066c4:	f7fa fbe4 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_TIM_Base_Init+0xde>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d004      	beq.n	80066e2 <HAL_TIM_Base_Init+0xde>
 80066d8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80066dc:	482b      	ldr	r0, [pc, #172]	; (800678c <HAL_TIM_Base_Init+0x188>)
 80066de:	f7fa fbd7 	bl	8000e90 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fb fa2c 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f001 fb0a 	bl	8007d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000
 8006784:	40014400 	.word	0x40014400
 8006788:	40014800 	.word	0x40014800
 800678c:	08010564 	.word	0x08010564

08006790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a3d      	ldr	r2, [pc, #244]	; (8006894 <HAL_TIM_Base_Start_IT+0x104>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d027      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d022      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a39      	ldr	r2, [pc, #228]	; (8006898 <HAL_TIM_Base_Start_IT+0x108>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01d      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a38      	ldr	r2, [pc, #224]	; (800689c <HAL_TIM_Base_Start_IT+0x10c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d018      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <HAL_TIM_Base_Start_IT+0x110>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a35      	ldr	r2, [pc, #212]	; (80068a4 <HAL_TIM_Base_Start_IT+0x114>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00e      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <HAL_TIM_Base_Start_IT+0x118>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d009      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a32      	ldr	r2, [pc, #200]	; (80068ac <HAL_TIM_Base_Start_IT+0x11c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d004      	beq.n	80067f2 <HAL_TIM_Base_Start_IT+0x62>
 80067e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80067ec:	4830      	ldr	r0, [pc, #192]	; (80068b0 <HAL_TIM_Base_Start_IT+0x120>)
 80067ee:	f7fa fb4f 	bl	8000e90 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d001      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e044      	b.n	800688c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <HAL_TIM_Base_Start_IT+0x104>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xc6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d013      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xc6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a19      	ldr	r2, [pc, #100]	; (8006898 <HAL_TIM_Base_Start_IT+0x108>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xc6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <HAL_TIM_Base_Start_IT+0x10c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xc6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <HAL_TIM_Base_Start_IT+0x110>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xc6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <HAL_TIM_Base_Start_IT+0x114>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d111      	bne.n	800687a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b06      	cmp	r3, #6
 8006866:	d010      	beq.n	800688a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006878:	e007      	b.n	800688a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0201 	orr.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40010000 	.word	0x40010000
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	40000c00 	.word	0x40000c00
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800
 80068b0:	08010564 	.word	0x08010564

080068b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0a7      	b.n	8006a16 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a55      	ldr	r2, [pc, #340]	; (8006a20 <HAL_TIM_PWM_Init+0x16c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d027      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d022      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a51      	ldr	r2, [pc, #324]	; (8006a24 <HAL_TIM_PWM_Init+0x170>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a4f      	ldr	r2, [pc, #316]	; (8006a28 <HAL_TIM_PWM_Init+0x174>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a4e      	ldr	r2, [pc, #312]	; (8006a2c <HAL_TIM_PWM_Init+0x178>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a4c      	ldr	r2, [pc, #304]	; (8006a30 <HAL_TIM_PWM_Init+0x17c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4b      	ldr	r2, [pc, #300]	; (8006a34 <HAL_TIM_PWM_Init+0x180>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a49      	ldr	r2, [pc, #292]	; (8006a38 <HAL_TIM_PWM_Init+0x184>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIM_PWM_Init+0x6c>
 8006916:	f240 5129 	movw	r1, #1321	; 0x529
 800691a:	4848      	ldr	r0, [pc, #288]	; (8006a3c <HAL_TIM_PWM_Init+0x188>)
 800691c:	f7fa fab8 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d014      	beq.n	8006952 <HAL_TIM_PWM_Init+0x9e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b10      	cmp	r3, #16
 800692e:	d010      	beq.n	8006952 <HAL_TIM_PWM_Init+0x9e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b20      	cmp	r3, #32
 8006936:	d00c      	beq.n	8006952 <HAL_TIM_PWM_Init+0x9e>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d008      	beq.n	8006952 <HAL_TIM_PWM_Init+0x9e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d004      	beq.n	8006952 <HAL_TIM_PWM_Init+0x9e>
 8006948:	f240 512a 	movw	r1, #1322	; 0x52a
 800694c:	483b      	ldr	r0, [pc, #236]	; (8006a3c <HAL_TIM_PWM_Init+0x188>)
 800694e:	f7fa fa9f 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <HAL_TIM_PWM_Init+0xc4>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d009      	beq.n	8006978 <HAL_TIM_PWM_Init+0xc4>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d004      	beq.n	8006978 <HAL_TIM_PWM_Init+0xc4>
 800696e:	f240 512b 	movw	r1, #1323	; 0x52b
 8006972:	4832      	ldr	r0, [pc, #200]	; (8006a3c <HAL_TIM_PWM_Init+0x188>)
 8006974:	f7fa fa8c 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_TIM_PWM_Init+0xde>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b80      	cmp	r3, #128	; 0x80
 8006986:	d004      	beq.n	8006992 <HAL_TIM_PWM_Init+0xde>
 8006988:	f240 512c 	movw	r1, #1324	; 0x52c
 800698c:	482b      	ldr	r0, [pc, #172]	; (8006a3c <HAL_TIM_PWM_Init+0x188>)
 800698e:	f7fa fa7f 	bl	8000e90 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f84a 	bl	8006a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f001 f9b2 	bl	8007d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40014400 	.word	0x40014400
 8006a38:	40014800 	.word	0x40014800
 8006a3c:	08010564 	.word	0x08010564

08006a40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a8a      	ldr	r2, [pc, #552]	; (8006c8c <HAL_TIM_PWM_Start+0x238>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10b      	bne.n	8006a80 <HAL_TIM_PWM_Start+0x2c>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d06c      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d069      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d066      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	d063      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d10b      	bne.n	8006aa2 <HAL_TIM_PWM_Start+0x4e>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05b      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d058      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d055      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d052      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a7a      	ldr	r2, [pc, #488]	; (8006c90 <HAL_TIM_PWM_Start+0x23c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d10b      	bne.n	8006ac4 <HAL_TIM_PWM_Start+0x70>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d04a      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d047      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d044      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	d041      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a72      	ldr	r2, [pc, #456]	; (8006c94 <HAL_TIM_PWM_Start+0x240>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d10b      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x92>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d039      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d036      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d033      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d030      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6b      	ldr	r2, [pc, #428]	; (8006c98 <HAL_TIM_PWM_Start+0x244>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10b      	bne.n	8006b08 <HAL_TIM_PWM_Start+0xb4>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d028      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d025      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d022      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	d01f      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a63      	ldr	r2, [pc, #396]	; (8006c9c <HAL_TIM_PWM_Start+0x248>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d105      	bne.n	8006b1e <HAL_TIM_PWM_Start+0xca>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d014      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5f      	ldr	r2, [pc, #380]	; (8006ca0 <HAL_TIM_PWM_Start+0x24c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d102      	bne.n	8006b2e <HAL_TIM_PWM_Start+0xda>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a5c      	ldr	r2, [pc, #368]	; (8006ca4 <HAL_TIM_PWM_Start+0x250>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d102      	bne.n	8006b3e <HAL_TIM_PWM_Start+0xea>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIM_PWM_Start+0xf4>
 8006b3e:	f240 51af 	movw	r1, #1455	; 0x5af
 8006b42:	4859      	ldr	r0, [pc, #356]	; (8006ca8 <HAL_TIM_PWM_Start+0x254>)
 8006b44:	f7fa f9a4 	bl	8000e90 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_TIM_PWM_Start+0x10e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	bf14      	ite	ne
 8006b5a:	2301      	movne	r3, #1
 8006b5c:	2300      	moveq	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	e022      	b.n	8006ba8 <HAL_TIM_PWM_Start+0x154>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d109      	bne.n	8006b7c <HAL_TIM_PWM_Start+0x128>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	bf14      	ite	ne
 8006b74:	2301      	movne	r3, #1
 8006b76:	2300      	moveq	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e015      	b.n	8006ba8 <HAL_TIM_PWM_Start+0x154>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d109      	bne.n	8006b96 <HAL_TIM_PWM_Start+0x142>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	bf14      	ite	ne
 8006b8e:	2301      	movne	r3, #1
 8006b90:	2300      	moveq	r3, #0
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	e008      	b.n	8006ba8 <HAL_TIM_PWM_Start+0x154>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	bf14      	ite	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	2300      	moveq	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e068      	b.n	8006c82 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <HAL_TIM_PWM_Start+0x16c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bbe:	e013      	b.n	8006be8 <HAL_TIM_PWM_Start+0x194>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d104      	bne.n	8006bd0 <HAL_TIM_PWM_Start+0x17c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bce:	e00b      	b.n	8006be8 <HAL_TIM_PWM_Start+0x194>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d104      	bne.n	8006be0 <HAL_TIM_PWM_Start+0x18c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bde:	e003      	b.n	8006be8 <HAL_TIM_PWM_Start+0x194>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 fbc9 	bl	8008388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <HAL_TIM_PWM_Start+0x238>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d107      	bne.n	8006c10 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <HAL_TIM_PWM_Start+0x238>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x1f8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c22:	d013      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x1f8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a19      	ldr	r2, [pc, #100]	; (8006c90 <HAL_TIM_PWM_Start+0x23c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x1f8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a18      	ldr	r2, [pc, #96]	; (8006c94 <HAL_TIM_PWM_Start+0x240>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x1f8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <HAL_TIM_PWM_Start+0x244>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x1f8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <HAL_TIM_PWM_Start+0x248>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d111      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d010      	beq.n	8006c80 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	e007      	b.n	8006c80 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800
 8006ca8:	08010564 	.word	0x08010564

08006cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e18a      	b.n	8006fd6 <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a78      	ldr	r2, [pc, #480]	; (8006ea8 <HAL_TIM_Encoder_Init+0x1fc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <HAL_TIM_Encoder_Init+0x5a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d018      	beq.n	8006d06 <HAL_TIM_Encoder_Init+0x5a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a74      	ldr	r2, [pc, #464]	; (8006eac <HAL_TIM_Encoder_Init+0x200>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_TIM_Encoder_Init+0x5a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a73      	ldr	r2, [pc, #460]	; (8006eb0 <HAL_TIM_Encoder_Init+0x204>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIM_Encoder_Init+0x5a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a71      	ldr	r2, [pc, #452]	; (8006eb4 <HAL_TIM_Encoder_Init+0x208>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIM_Encoder_Init+0x5a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a70      	ldr	r2, [pc, #448]	; (8006eb8 <HAL_TIM_Encoder_Init+0x20c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIM_Encoder_Init+0x5a>
 8006cfc:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006d00:	486e      	ldr	r0, [pc, #440]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006d02:	f7fa f8c5 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d014      	beq.n	8006d38 <HAL_TIM_Encoder_Init+0x8c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d010      	beq.n	8006d38 <HAL_TIM_Encoder_Init+0x8c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d00c      	beq.n	8006d38 <HAL_TIM_Encoder_Init+0x8c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d008      	beq.n	8006d38 <HAL_TIM_Encoder_Init+0x8c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b60      	cmp	r3, #96	; 0x60
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_Encoder_Init+0x8c>
 8006d2e:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8006d32:	4862      	ldr	r0, [pc, #392]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006d34:	f7fa f8ac 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIM_Encoder_Init+0xb2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d48:	d009      	beq.n	8006d5e <HAL_TIM_Encoder_Init+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d52:	d004      	beq.n	8006d5e <HAL_TIM_Encoder_Init+0xb2>
 8006d54:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8006d58:	4858      	ldr	r0, [pc, #352]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006d5a:	f7fa f899 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d008      	beq.n	8006d78 <HAL_TIM_Encoder_Init+0xcc>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d004      	beq.n	8006d78 <HAL_TIM_Encoder_Init+0xcc>
 8006d6e:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8006d72:	4852      	ldr	r0, [pc, #328]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006d74:	f7fa f88c 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d00c      	beq.n	8006d9a <HAL_TIM_Encoder_Init+0xee>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d008      	beq.n	8006d9a <HAL_TIM_Encoder_Init+0xee>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d004      	beq.n	8006d9a <HAL_TIM_Encoder_Init+0xee>
 8006d90:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8006d94:	4849      	ldr	r0, [pc, #292]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006d96:	f7fa f87b 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d00c      	beq.n	8006dbc <HAL_TIM_Encoder_Init+0x110>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d008      	beq.n	8006dbc <HAL_TIM_Encoder_Init+0x110>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d004      	beq.n	8006dbc <HAL_TIM_Encoder_Init+0x110>
 8006db2:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8006db6:	4841      	ldr	r0, [pc, #260]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006db8:	f7fa f86a 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d00c      	beq.n	8006dde <HAL_TIM_Encoder_Init+0x132>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d008      	beq.n	8006dde <HAL_TIM_Encoder_Init+0x132>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d004      	beq.n	8006dde <HAL_TIM_Encoder_Init+0x132>
 8006dd4:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8006dd8:	4838      	ldr	r0, [pc, #224]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006dda:	f7fa f859 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <HAL_TIM_Encoder_Init+0x14c>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d004      	beq.n	8006df8 <HAL_TIM_Encoder_Init+0x14c>
 8006dee:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006df2:	4832      	ldr	r0, [pc, #200]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006df4:	f7fa f84c 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_TIM_Encoder_Init+0x166>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIM_Encoder_Init+0x166>
 8006e08:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8006e0c:	482b      	ldr	r0, [pc, #172]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006e0e:	f7fa f83f 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d010      	beq.n	8006e3c <HAL_TIM_Encoder_Init+0x190>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d00c      	beq.n	8006e3c <HAL_TIM_Encoder_Init+0x190>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d008      	beq.n	8006e3c <HAL_TIM_Encoder_Init+0x190>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_Encoder_Init+0x190>
 8006e32:	f640 31da 	movw	r1, #3034	; 0xbda
 8006e36:	4821      	ldr	r0, [pc, #132]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006e38:	f7fa f82a 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <HAL_TIM_Encoder_Init+0x1ba>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d00c      	beq.n	8006e66 <HAL_TIM_Encoder_Init+0x1ba>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d008      	beq.n	8006e66 <HAL_TIM_Encoder_Init+0x1ba>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIM_Encoder_Init+0x1ba>
 8006e5c:	f640 31db 	movw	r1, #3035	; 0xbdb
 8006e60:	4816      	ldr	r0, [pc, #88]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006e62:	f7fa f815 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b0f      	cmp	r3, #15
 8006e6c:	d904      	bls.n	8006e78 <HAL_TIM_Encoder_Init+0x1cc>
 8006e6e:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8006e72:	4812      	ldr	r0, [pc, #72]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006e74:	f7fa f80c 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	2b0f      	cmp	r3, #15
 8006e7e:	d904      	bls.n	8006e8a <HAL_TIM_Encoder_Init+0x1de>
 8006e80:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8006e84:	480d      	ldr	r0, [pc, #52]	; (8006ebc <HAL_TIM_Encoder_Init+0x210>)
 8006e86:	f7fa f803 	bl	8000e90 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d114      	bne.n	8006ec0 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fa fde8 	bl	8001a74 <HAL_TIM_Encoder_MspInit>
 8006ea4:	e00c      	b.n	8006ec0 <HAL_TIM_Encoder_Init+0x214>
 8006ea6:	bf00      	nop
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40014000 	.word	0x40014000
 8006ebc:	08010564 	.word	0x08010564
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f000 ff1e 	bl	8007d28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	4313      	orrs	r3, r2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f32:	f023 030c 	bic.w	r3, r3, #12
 8006f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	011a      	lsls	r2, r3, #4
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	031b      	lsls	r3, r3, #12
 8006f62:	4313      	orrs	r3, r2
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	4313      	orrs	r3, r2
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ff8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007000:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007008:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a4d      	ldr	r2, [pc, #308]	; (8007144 <HAL_TIM_Encoder_Start+0x164>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d01d      	beq.n	8007050 <HAL_TIM_Encoder_Start+0x70>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701c:	d018      	beq.n	8007050 <HAL_TIM_Encoder_Start+0x70>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a49      	ldr	r2, [pc, #292]	; (8007148 <HAL_TIM_Encoder_Start+0x168>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <HAL_TIM_Encoder_Start+0x70>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a47      	ldr	r2, [pc, #284]	; (800714c <HAL_TIM_Encoder_Start+0x16c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <HAL_TIM_Encoder_Start+0x70>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a46      	ldr	r2, [pc, #280]	; (8007150 <HAL_TIM_Encoder_Start+0x170>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <HAL_TIM_Encoder_Start+0x70>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a44      	ldr	r2, [pc, #272]	; (8007154 <HAL_TIM_Encoder_Start+0x174>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_TIM_Encoder_Start+0x70>
 8007046:	f640 418e 	movw	r1, #3214	; 0xc8e
 800704a:	4843      	ldr	r0, [pc, #268]	; (8007158 <HAL_TIM_Encoder_Start+0x178>)
 800704c:	f7f9 ff20 	bl	8000e90 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d110      	bne.n	8007078 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d102      	bne.n	8007062 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800705c:	7b7b      	ldrb	r3, [r7, #13]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d001      	beq.n	8007066 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e069      	b.n	800713a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007076:	e031      	b.n	80070dc <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b04      	cmp	r3, #4
 800707c:	d110      	bne.n	80070a0 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d102      	bne.n	800708a <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007084:	7b3b      	ldrb	r3, [r7, #12]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d001      	beq.n	800708e <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e055      	b.n	800713a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800709e:	e01d      	b.n	80070dc <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d108      	bne.n	80070b8 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d105      	bne.n	80070b8 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070ac:	7b7b      	ldrb	r3, [r7, #13]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d102      	bne.n	80070b8 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070b2:	7b3b      	ldrb	r3, [r7, #12]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d001      	beq.n	80070bc <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e03e      	b.n	800713a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_Encoder_Start+0x10a>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d008      	beq.n	80070fa <HAL_TIM_Encoder_Start+0x11a>
 80070e8:	e00f      	b.n	800710a <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2201      	movs	r2, #1
 80070f0:	2100      	movs	r1, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 f948 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 80070f8:	e016      	b.n	8007128 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2201      	movs	r2, #1
 8007100:	2104      	movs	r1, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f940 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007108:	e00e      	b.n	8007128 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2201      	movs	r2, #1
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f001 f938 	bl	8008388 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	2104      	movs	r1, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f931 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007126:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40014000 	.word	0x40014000
 8007158:	08010564 	.word	0x08010564

0800715c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d122      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0202 	mvn.w	r2, #2
 8007188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fda4 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fd96 	bl	8007cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fda7 	bl	8007d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d122      	bne.n	800720c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d11b      	bne.n	800720c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0204 	mvn.w	r2, #4
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fd7a 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd6c 	bl	8007cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fd7d 	bl	8007d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b08      	cmp	r3, #8
 8007218:	d122      	bne.n	8007260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b08      	cmp	r3, #8
 8007226:	d11b      	bne.n	8007260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0208 	mvn.w	r2, #8
 8007230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2204      	movs	r2, #4
 8007236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fd50 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 800724c:	e005      	b.n	800725a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fd42 	bl	8007cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fd53 	bl	8007d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b10      	cmp	r3, #16
 800726c:	d122      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b10      	cmp	r3, #16
 800727a:	d11b      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0210 	mvn.w	r2, #16
 8007284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2208      	movs	r2, #8
 800728a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fd26 	bl	8007cec <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fd18 	bl	8007cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fd29 	bl	8007d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10e      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0201 	mvn.w	r2, #1
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7f9 fdc4 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d10e      	bne.n	800730c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f8:	2b80      	cmp	r3, #128	; 0x80
 80072fa:	d107      	bne.n	800730c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f972 	bl	80085f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fcee 	bl	8007d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b20      	cmp	r3, #32
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b20      	cmp	r3, #32
 8007352:	d107      	bne.n	8007364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0220 	mvn.w	r2, #32
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f93c 	bl	80085dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d010      	beq.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d00d      	beq.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b08      	cmp	r3, #8
 800738c:	d00a      	beq.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x38>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b0c      	cmp	r3, #12
 8007392:	d007      	beq.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b3c      	cmp	r3, #60	; 0x3c
 8007398:	d004      	beq.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x38>
 800739a:	f241 0177 	movw	r1, #4215	; 0x1077
 800739e:	4893      	ldr	r0, [pc, #588]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 80073a0:	f7f9 fd76 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b60      	cmp	r3, #96	; 0x60
 80073aa:	d008      	beq.n	80073be <HAL_TIM_PWM_ConfigChannel+0x52>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b70      	cmp	r3, #112	; 0x70
 80073b2:	d004      	beq.n	80073be <HAL_TIM_PWM_ConfigChannel+0x52>
 80073b4:	f241 0178 	movw	r1, #4216	; 0x1078
 80073b8:	488c      	ldr	r0, [pc, #560]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 80073ba:	f7f9 fd69 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d004      	beq.n	80073d8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80073ce:	f241 0179 	movw	r1, #4217	; 0x1079
 80073d2:	4886      	ldr	r0, [pc, #536]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 80073d4:	f7f9 fd5c 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d004      	beq.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80073e8:	f241 017a 	movw	r1, #4218	; 0x107a
 80073ec:	487f      	ldr	r0, [pc, #508]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 80073ee:	f7f9 fd4f 	bl	8000e90 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_PWM_ConfigChannel+0x94>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e14c      	b.n	800769a <HAL_TIM_PWM_ConfigChannel+0x32e>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b0c      	cmp	r3, #12
 800740c:	f200 813d 	bhi.w	800768a <HAL_TIM_PWM_ConfigChannel+0x31e>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	0800744d 	.word	0x0800744d
 800741c:	0800768b 	.word	0x0800768b
 8007420:	0800768b 	.word	0x0800768b
 8007424:	0800768b 	.word	0x0800768b
 8007428:	080074e7 	.word	0x080074e7
 800742c:	0800768b 	.word	0x0800768b
 8007430:	0800768b 	.word	0x0800768b
 8007434:	0800768b 	.word	0x0800768b
 8007438:	0800756f 	.word	0x0800756f
 800743c:	0800768b 	.word	0x0800768b
 8007440:	0800768b 	.word	0x0800768b
 8007444:	0800768b 	.word	0x0800768b
 8007448:	0800760d 	.word	0x0800760d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a67      	ldr	r2, [pc, #412]	; (80075f0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d027      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d022      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a63      	ldr	r2, [pc, #396]	; (80075f4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01d      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a62      	ldr	r2, [pc, #392]	; (80075f8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d018      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a60      	ldr	r2, [pc, #384]	; (80075fc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d013      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a5f      	ldr	r2, [pc, #380]	; (8007600 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00e      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a5d      	ldr	r2, [pc, #372]	; (8007604 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d009      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a5c      	ldr	r2, [pc, #368]	; (8007608 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d004      	beq.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800749c:	f241 0184 	movw	r1, #4228	; 0x1084
 80074a0:	4852      	ldr	r0, [pc, #328]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 80074a2:	f7f9 fcf5 	bl	8000e90 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fcbb 	bl	8007e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0208 	orr.w	r2, r2, #8
 80074c0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0204 	bic.w	r2, r2, #4
 80074d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6999      	ldr	r1, [r3, #24]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	619a      	str	r2, [r3, #24]
      break;
 80074e4:	e0d4      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a41      	ldr	r2, [pc, #260]	; (80075f0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01d      	beq.n	800752c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f8:	d018      	beq.n	800752c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a3d      	ldr	r2, [pc, #244]	; (80075f4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3b      	ldr	r2, [pc, #236]	; (80075f8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00e      	beq.n	800752c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3a      	ldr	r2, [pc, #232]	; (80075fc <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d009      	beq.n	800752c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a38      	ldr	r2, [pc, #224]	; (8007600 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007522:	f241 0195 	movw	r1, #4245	; 0x1095
 8007526:	4831      	ldr	r0, [pc, #196]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007528:	f7f9 fcb2 	bl	8000e90 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fd08 	bl	8007f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6999      	ldr	r1, [r3, #24]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	021a      	lsls	r2, r3, #8
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	619a      	str	r2, [r3, #24]
      break;
 800756c:	e090      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007580:	d013      	beq.n	80075aa <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1b      	ldr	r2, [pc, #108]	; (80075f4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_TIM_PWM_ConfigChannel+0x23e>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_TIM_PWM_ConfigChannel+0x23e>
 80075a0:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80075a4:	4811      	ldr	r0, [pc, #68]	; (80075ec <HAL_TIM_PWM_ConfigChannel+0x280>)
 80075a6:	f7f9 fc73 	bl	8000e90 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68b9      	ldr	r1, [r7, #8]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fd5d 	bl	8008070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0208 	orr.w	r2, r2, #8
 80075c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0204 	bic.w	r2, r2, #4
 80075d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69d9      	ldr	r1, [r3, #28]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	61da      	str	r2, [r3, #28]
      break;
 80075e8:	e052      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x324>
 80075ea:	bf00      	nop
 80075ec:	08010564 	.word	0x08010564
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800
 80075fc:	40000c00 	.word	0x40000c00
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a24      	ldr	r2, [pc, #144]	; (80076a4 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d013      	beq.n	8007648 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <HAL_TIM_PWM_ConfigChannel+0x340>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1d      	ldr	r2, [pc, #116]	; (80076b0 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800763e:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007642:	481c      	ldr	r0, [pc, #112]	; (80076b4 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007644:	f7f9 fc24 	bl	8000e90 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fda2 	bl	8008198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69da      	ldr	r2, [r3, #28]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007662:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	69da      	ldr	r2, [r3, #28]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007672:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69d9      	ldr	r1, [r3, #28]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	021a      	lsls	r2, r3, #8
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
      break;
 8007688:	e002      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	75fb      	strb	r3, [r7, #23]
      break;
 800768e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	08010564 	.word	0x08010564

080076b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_TIM_ConfigClockSource+0x1c>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e2f0      	b.n	8007cb6 <HAL_TIM_ConfigClockSource+0x5fe>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ec:	d029      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b70      	cmp	r3, #112	; 0x70
 80076f4:	d025      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fe:	d020      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d01c      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b50      	cmp	r3, #80	; 0x50
 800770e:	d018      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b60      	cmp	r3, #96	; 0x60
 8007716:	d014      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b10      	cmp	r3, #16
 8007726:	d00c      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b20      	cmp	r3, #32
 800772e:	d008      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b30      	cmp	r3, #48	; 0x30
 8007736:	d004      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x8a>
 8007738:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800773c:	487c      	ldr	r0, [pc, #496]	; (8007930 <HAL_TIM_ConfigClockSource+0x278>)
 800773e:	f7f9 fba7 	bl	8000e90 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007750:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007758:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776a:	f000 80f1 	beq.w	8007950 <HAL_TIM_ConfigClockSource+0x298>
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007772:	f200 8293 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d02d      	beq.n	80077d8 <HAL_TIM_ConfigClockSource+0x120>
 800777c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007780:	f200 828c 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 8007784:	2b70      	cmp	r3, #112	; 0x70
 8007786:	d05d      	beq.n	8007844 <HAL_TIM_ConfigClockSource+0x18c>
 8007788:	2b70      	cmp	r3, #112	; 0x70
 800778a:	f200 8287 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 800778e:	2b60      	cmp	r3, #96	; 0x60
 8007790:	f000 81a0 	beq.w	8007ad4 <HAL_TIM_ConfigClockSource+0x41c>
 8007794:	2b60      	cmp	r3, #96	; 0x60
 8007796:	f200 8281 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 800779a:	2b50      	cmp	r3, #80	; 0x50
 800779c:	f000 8144 	beq.w	8007a28 <HAL_TIM_ConfigClockSource+0x370>
 80077a0:	2b50      	cmp	r3, #80	; 0x50
 80077a2:	f200 827b 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	f000 81f6 	beq.w	8007b98 <HAL_TIM_ConfigClockSource+0x4e0>
 80077ac:	2b40      	cmp	r3, #64	; 0x40
 80077ae:	f200 8275 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 80077b2:	2b30      	cmp	r3, #48	; 0x30
 80077b4:	f000 8246 	beq.w	8007c44 <HAL_TIM_ConfigClockSource+0x58c>
 80077b8:	2b30      	cmp	r3, #48	; 0x30
 80077ba:	f200 826f 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	f000 8240 	beq.w	8007c44 <HAL_TIM_ConfigClockSource+0x58c>
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	f200 8269 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 823a 	beq.w	8007c44 <HAL_TIM_ConfigClockSource+0x58c>
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	f000 8237 	beq.w	8007c44 <HAL_TIM_ConfigClockSource+0x58c>
 80077d6:	e261      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a55      	ldr	r2, [pc, #340]	; (8007934 <HAL_TIM_ConfigClockSource+0x27c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	f000 825f 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ec:	f000 8259 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a50      	ldr	r2, [pc, #320]	; (8007938 <HAL_TIM_ConfigClockSource+0x280>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	f000 8253 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a4e      	ldr	r2, [pc, #312]	; (800793c <HAL_TIM_ConfigClockSource+0x284>)
 8007802:	4293      	cmp	r3, r2
 8007804:	f000 824d 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a4c      	ldr	r2, [pc, #304]	; (8007940 <HAL_TIM_ConfigClockSource+0x288>)
 800780e:	4293      	cmp	r3, r2
 8007810:	f000 8247 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a4a      	ldr	r2, [pc, #296]	; (8007944 <HAL_TIM_ConfigClockSource+0x28c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	f000 8241 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a48      	ldr	r2, [pc, #288]	; (8007948 <HAL_TIM_ConfigClockSource+0x290>)
 8007826:	4293      	cmp	r3, r2
 8007828:	f000 823b 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a46      	ldr	r2, [pc, #280]	; (800794c <HAL_TIM_ConfigClockSource+0x294>)
 8007832:	4293      	cmp	r3, r2
 8007834:	f000 8235 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007838:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800783c:	483c      	ldr	r0, [pc, #240]	; (8007930 <HAL_TIM_ConfigClockSource+0x278>)
 800783e:	f7f9 fb27 	bl	8000e90 <assert_failed>
      break;
 8007842:	e22e      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a3a      	ldr	r2, [pc, #232]	; (8007934 <HAL_TIM_ConfigClockSource+0x27c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01d      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x1d2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007856:	d018      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x1d2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a36      	ldr	r2, [pc, #216]	; (8007938 <HAL_TIM_ConfigClockSource+0x280>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d013      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x1d2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a35      	ldr	r2, [pc, #212]	; (800793c <HAL_TIM_ConfigClockSource+0x284>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00e      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x1d2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a33      	ldr	r2, [pc, #204]	; (8007940 <HAL_TIM_ConfigClockSource+0x288>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d009      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x1d2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a32      	ldr	r2, [pc, #200]	; (8007944 <HAL_TIM_ConfigClockSource+0x28c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d004      	beq.n	800788a <HAL_TIM_ConfigClockSource+0x1d2>
 8007880:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007884:	482a      	ldr	r0, [pc, #168]	; (8007930 <HAL_TIM_ConfigClockSource+0x278>)
 8007886:	f7f9 fb03 	bl	8000e90 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d013      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x202>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789a:	d00e      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x202>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a4:	d009      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x202>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ae:	d004      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x202>
 80078b0:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80078b4:	481e      	ldr	r0, [pc, #120]	; (8007930 <HAL_TIM_ConfigClockSource+0x278>)
 80078b6:	f7f9 faeb 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c2:	d014      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0x236>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0x236>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00c      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0x236>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d008      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0x236>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b0a      	cmp	r3, #10
 80078e2:	d004      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0x236>
 80078e4:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80078e8:	4811      	ldr	r0, [pc, #68]	; (8007930 <HAL_TIM_ConfigClockSource+0x278>)
 80078ea:	f7f9 fad1 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d904      	bls.n	8007900 <HAL_TIM_ConfigClockSource+0x248>
 80078f6:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80078fa:	480d      	ldr	r0, [pc, #52]	; (8007930 <HAL_TIM_ConfigClockSource+0x278>)
 80078fc:	f7f9 fac8 	bl	8000e90 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f000 fd1a 	bl	8008348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007922:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	609a      	str	r2, [r3, #8]
      break;
 800792c:	e1ba      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 800792e:	bf00      	nop
 8007930:	08010564 	.word	0x08010564
 8007934:	40010000 	.word	0x40010000
 8007938:	40000400 	.word	0x40000400
 800793c:	40000800 	.word	0x40000800
 8007940:	40000c00 	.word	0x40000c00
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a8a      	ldr	r2, [pc, #552]	; (8007b80 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x2d4>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007962:	d013      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x2d4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a86      	ldr	r2, [pc, #536]	; (8007b84 <HAL_TIM_ConfigClockSource+0x4cc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x2d4>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a85      	ldr	r2, [pc, #532]	; (8007b88 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x2d4>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a83      	ldr	r2, [pc, #524]	; (8007b8c <HAL_TIM_ConfigClockSource+0x4d4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_TIM_ConfigClockSource+0x2d4>
 8007982:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007986:	4882      	ldr	r0, [pc, #520]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007988:	f7f9 fa82 	bl	8000e90 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d013      	beq.n	80079bc <HAL_TIM_ConfigClockSource+0x304>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799c:	d00e      	beq.n	80079bc <HAL_TIM_ConfigClockSource+0x304>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a6:	d009      	beq.n	80079bc <HAL_TIM_ConfigClockSource+0x304>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079b0:	d004      	beq.n	80079bc <HAL_TIM_ConfigClockSource+0x304>
 80079b2:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80079b6:	4876      	ldr	r0, [pc, #472]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 80079b8:	f7f9 fa6a 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	d014      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x338>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d010      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x338>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00c      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x338>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d008      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x338>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b0a      	cmp	r3, #10
 80079e4:	d004      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x338>
 80079e6:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80079ea:	4869      	ldr	r0, [pc, #420]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 80079ec:	f7f9 fa50 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b0f      	cmp	r3, #15
 80079f6:	d904      	bls.n	8007a02 <HAL_TIM_ConfigClockSource+0x34a>
 80079f8:	f241 41e7 	movw	r1, #5351	; 0x14e7
 80079fc:	4864      	ldr	r0, [pc, #400]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 80079fe:	f7f9 fa47 	bl	8000e90 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6899      	ldr	r1, [r3, #8]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f000 fc99 	bl	8008348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a24:	609a      	str	r2, [r3, #8]
      break;
 8007a26:	e13d      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a54      	ldr	r2, [pc, #336]	; (8007b80 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d01d      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x3b6>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3a:	d018      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x3b6>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a50      	ldr	r2, [pc, #320]	; (8007b84 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x3b6>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4f      	ldr	r2, [pc, #316]	; (8007b88 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00e      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x3b6>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a4d      	ldr	r2, [pc, #308]	; (8007b8c <HAL_TIM_ConfigClockSource+0x4d4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d009      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x3b6>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a4d      	ldr	r2, [pc, #308]	; (8007b94 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x3b6>
 8007a64:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007a68:	4849      	ldr	r0, [pc, #292]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007a6a:	f7f9 fa11 	bl	8000e90 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a76:	d014      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x3ea>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x3ea>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00c      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x3ea>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d008      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x3ea>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b0a      	cmp	r3, #10
 8007a96:	d004      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x3ea>
 8007a98:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8007a9c:	483c      	ldr	r0, [pc, #240]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007a9e:	f7f9 f9f7 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d904      	bls.n	8007ab4 <HAL_TIM_ConfigClockSource+0x3fc>
 8007aaa:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8007aae:	4838      	ldr	r0, [pc, #224]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007ab0:	f7f9 f9ee 	bl	8000e90 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6859      	ldr	r1, [r3, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f000 fbc7 	bl	8008254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2150      	movs	r1, #80	; 0x50
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fc20 	bl	8008312 <TIM_ITRx_SetConfig>
      break;
 8007ad2:	e0e7      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a29      	ldr	r2, [pc, #164]	; (8007b80 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01d      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x462>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae6:	d018      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x462>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a25      	ldr	r2, [pc, #148]	; (8007b84 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x462>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a24      	ldr	r2, [pc, #144]	; (8007b88 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00e      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x462>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <HAL_TIM_ConfigClockSource+0x4d4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x462>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x462>
 8007b10:	f241 5106 	movw	r1, #5382	; 0x1506
 8007b14:	481e      	ldr	r0, [pc, #120]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b16:	f7f9 f9bb 	bl	8000e90 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b22:	d014      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x496>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d010      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x496>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x496>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d008      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x496>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b0a      	cmp	r3, #10
 8007b42:	d004      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0x496>
 8007b44:	f241 5109 	movw	r1, #5385	; 0x1509
 8007b48:	4811      	ldr	r0, [pc, #68]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b4a:	f7f9 f9a1 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	2b0f      	cmp	r3, #15
 8007b54:	d904      	bls.n	8007b60 <HAL_TIM_ConfigClockSource+0x4a8>
 8007b56:	f241 510a 	movw	r1, #5386	; 0x150a
 8007b5a:	480d      	ldr	r0, [pc, #52]	; (8007b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b5c:	f7f9 f998 	bl	8000e90 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	6859      	ldr	r1, [r3, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f000 fba0 	bl	80082b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2160      	movs	r1, #96	; 0x60
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fbca 	bl	8008312 <TIM_ITRx_SetConfig>
      break;
 8007b7e:	e091      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	08010564 	.word	0x08010564
 8007b94:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a48      	ldr	r2, [pc, #288]	; (8007cc0 <HAL_TIM_ConfigClockSource+0x608>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01d      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x526>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d018      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x526>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a44      	ldr	r2, [pc, #272]	; (8007cc4 <HAL_TIM_ConfigClockSource+0x60c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d013      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x526>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a43      	ldr	r2, [pc, #268]	; (8007cc8 <HAL_TIM_ConfigClockSource+0x610>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00e      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x526>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a41      	ldr	r2, [pc, #260]	; (8007ccc <HAL_TIM_ConfigClockSource+0x614>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d009      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x526>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a40      	ldr	r2, [pc, #256]	; (8007cd0 <HAL_TIM_ConfigClockSource+0x618>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d004      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x526>
 8007bd4:	f241 5116 	movw	r1, #5398	; 0x1516
 8007bd8:	483e      	ldr	r0, [pc, #248]	; (8007cd4 <HAL_TIM_ConfigClockSource+0x61c>)
 8007bda:	f7f9 f959 	bl	8000e90 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be6:	d014      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x55a>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d010      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x55a>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00c      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x55a>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d008      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x55a>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b0a      	cmp	r3, #10
 8007c06:	d004      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x55a>
 8007c08:	f241 5119 	movw	r1, #5401	; 0x1519
 8007c0c:	4831      	ldr	r0, [pc, #196]	; (8007cd4 <HAL_TIM_ConfigClockSource+0x61c>)
 8007c0e:	f7f9 f93f 	bl	8000e90 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b0f      	cmp	r3, #15
 8007c18:	d904      	bls.n	8007c24 <HAL_TIM_ConfigClockSource+0x56c>
 8007c1a:	f241 511a 	movw	r1, #5402	; 0x151a
 8007c1e:	482d      	ldr	r0, [pc, #180]	; (8007cd4 <HAL_TIM_ConfigClockSource+0x61c>)
 8007c20:	f7f9 f936 	bl	8000e90 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	6859      	ldr	r1, [r3, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	461a      	mov	r2, r3
 8007c32:	f000 fb0f 	bl	8008254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2140      	movs	r1, #64	; 0x40
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fb68 	bl	8008312 <TIM_ITRx_SetConfig>
      break;
 8007c42:	e02f      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <HAL_TIM_ConfigClockSource+0x608>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01d      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x5d2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c56:	d018      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x5d2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a19      	ldr	r2, [pc, #100]	; (8007cc4 <HAL_TIM_ConfigClockSource+0x60c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x5d2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <HAL_TIM_ConfigClockSource+0x610>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x5d2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <HAL_TIM_ConfigClockSource+0x614>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x5d2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <HAL_TIM_ConfigClockSource+0x618>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x5d2>
 8007c80:	f241 5129 	movw	r1, #5417	; 0x1529
 8007c84:	4813      	ldr	r0, [pc, #76]	; (8007cd4 <HAL_TIM_ConfigClockSource+0x61c>)
 8007c86:	f7f9 f903 	bl	8000e90 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f000 fb3c 	bl	8008312 <TIM_ITRx_SetConfig>
      break;
 8007c9a:	e003      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca0:	e000      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8007ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	08010564 	.word	0x08010564

08007cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a34      	ldr	r2, [pc, #208]	; (8007e0c <TIM_Base_SetConfig+0xe4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00f      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d46:	d00b      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a31      	ldr	r2, [pc, #196]	; (8007e10 <TIM_Base_SetConfig+0xe8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a30      	ldr	r2, [pc, #192]	; (8007e14 <TIM_Base_SetConfig+0xec>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_Base_SetConfig+0x38>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a2f      	ldr	r2, [pc, #188]	; (8007e18 <TIM_Base_SetConfig+0xf0>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d108      	bne.n	8007d72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a25      	ldr	r2, [pc, #148]	; (8007e0c <TIM_Base_SetConfig+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01b      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d80:	d017      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a22      	ldr	r2, [pc, #136]	; (8007e10 <TIM_Base_SetConfig+0xe8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <TIM_Base_SetConfig+0xec>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00f      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <TIM_Base_SetConfig+0xf0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	; (8007e1c <TIM_Base_SetConfig+0xf4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <TIM_Base_SetConfig+0xf8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d003      	beq.n	8007db2 <TIM_Base_SetConfig+0x8a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <TIM_Base_SetConfig+0xfc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d108      	bne.n	8007dc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <TIM_Base_SetConfig+0xe4>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d103      	bne.n	8007df8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	615a      	str	r2, [r3, #20]
}
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40010000 	.word	0x40010000
 8007e10:	40000400 	.word	0x40000400
 8007e14:	40000800 	.word	0x40000800
 8007e18:	40000c00 	.word	0x40000c00
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800

08007e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0201 	bic.w	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0303 	bic.w	r3, r3, #3
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 0302 	bic.w	r3, r3, #2
 8007e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a30      	ldr	r2, [pc, #192]	; (8007f40 <TIM_OC1_SetConfig+0x118>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d119      	bne.n	8007eb8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d008      	beq.n	8007e9e <TIM_OC1_SetConfig+0x76>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d004      	beq.n	8007e9e <TIM_OC1_SetConfig+0x76>
 8007e94:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8007e98:	482a      	ldr	r0, [pc, #168]	; (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007e9a:	f7f8 fff9 	bl	8000e90 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f023 0308 	bic.w	r3, r3, #8
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f023 0304 	bic.w	r3, r3, #4
 8007eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a21      	ldr	r2, [pc, #132]	; (8007f40 <TIM_OC1_SetConfig+0x118>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d12d      	bne.n	8007f1c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec8:	d008      	beq.n	8007edc <TIM_OC1_SetConfig+0xb4>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d004      	beq.n	8007edc <TIM_OC1_SetConfig+0xb4>
 8007ed2:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8007ed6:	481b      	ldr	r0, [pc, #108]	; (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007ed8:	f7f8 ffda 	bl	8000e90 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee4:	d008      	beq.n	8007ef8 <TIM_OC1_SetConfig+0xd0>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <TIM_OC1_SetConfig+0xd0>
 8007eee:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8007ef2:	4814      	ldr	r0, [pc, #80]	; (8007f44 <TIM_OC1_SetConfig+0x11c>)
 8007ef4:	f7f8 ffcc 	bl	8000e90 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40010000 	.word	0x40010000
 8007f44:	08010564 	.word	0x08010564

08007f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f023 0210 	bic.w	r2, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f023 0320 	bic.w	r3, r3, #32
 8007f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a31      	ldr	r2, [pc, #196]	; (8008068 <TIM_OC2_SetConfig+0x120>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d11a      	bne.n	8007fde <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d008      	beq.n	8007fc2 <TIM_OC2_SetConfig+0x7a>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d004      	beq.n	8007fc2 <TIM_OC2_SetConfig+0x7a>
 8007fb8:	f641 3112 	movw	r1, #6930	; 0x1b12
 8007fbc:	482b      	ldr	r0, [pc, #172]	; (800806c <TIM_OC2_SetConfig+0x124>)
 8007fbe:	f7f8 ff67 	bl	8000e90 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fdc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a21      	ldr	r2, [pc, #132]	; (8008068 <TIM_OC2_SetConfig+0x120>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d12f      	bne.n	8008046 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fee:	d008      	beq.n	8008002 <TIM_OC2_SetConfig+0xba>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <TIM_OC2_SetConfig+0xba>
 8007ff8:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8007ffc:	481b      	ldr	r0, [pc, #108]	; (800806c <TIM_OC2_SetConfig+0x124>)
 8007ffe:	f7f8 ff47 	bl	8000e90 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800a:	d008      	beq.n	800801e <TIM_OC2_SetConfig+0xd6>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <TIM_OC2_SetConfig+0xd6>
 8008014:	f641 3121 	movw	r1, #6945	; 0x1b21
 8008018:	4814      	ldr	r0, [pc, #80]	; (800806c <TIM_OC2_SetConfig+0x124>)
 800801a:	f7f8 ff39 	bl	8000e90 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800802c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	621a      	str	r2, [r3, #32]
}
 8008060:	bf00      	nop
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40010000 	.word	0x40010000
 800806c:	08010564 	.word	0x08010564

08008070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a31      	ldr	r2, [pc, #196]	; (8008190 <TIM_OC3_SetConfig+0x120>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d11a      	bne.n	8008104 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <TIM_OC3_SetConfig+0x78>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d004      	beq.n	80080e8 <TIM_OC3_SetConfig+0x78>
 80080de:	f641 315d 	movw	r1, #7005	; 0x1b5d
 80080e2:	482c      	ldr	r0, [pc, #176]	; (8008194 <TIM_OC3_SetConfig+0x124>)
 80080e4:	f7f8 fed4 	bl	8000e90 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a22      	ldr	r2, [pc, #136]	; (8008190 <TIM_OC3_SetConfig+0x120>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d12f      	bne.n	800816c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008114:	d008      	beq.n	8008128 <TIM_OC3_SetConfig+0xb8>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <TIM_OC3_SetConfig+0xb8>
 800811e:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8008122:	481c      	ldr	r0, [pc, #112]	; (8008194 <TIM_OC3_SetConfig+0x124>)
 8008124:	f7f8 feb4 	bl	8000e90 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008130:	d008      	beq.n	8008144 <TIM_OC3_SetConfig+0xd4>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <TIM_OC3_SetConfig+0xd4>
 800813a:	f641 316b 	movw	r1, #7019	; 0x1b6b
 800813e:	4815      	ldr	r0, [pc, #84]	; (8008194 <TIM_OC3_SetConfig+0x124>)
 8008140:	f7f8 fea6 	bl	8000e90 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800814a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	bf00      	nop
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40010000 	.word	0x40010000
 8008194:	08010564 	.word	0x08010564

08008198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	031b      	lsls	r3, r3, #12
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a16      	ldr	r2, [pc, #88]	; (800824c <TIM_OC4_SetConfig+0xb4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d117      	bne.n	8008228 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008200:	d008      	beq.n	8008214 <TIM_OC4_SetConfig+0x7c>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <TIM_OC4_SetConfig+0x7c>
 800820a:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 800820e:	4810      	ldr	r0, [pc, #64]	; (8008250 <TIM_OC4_SetConfig+0xb8>)
 8008210:	f7f8 fe3e 	bl	8000e90 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800821a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	019b      	lsls	r3, r3, #6
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	4313      	orrs	r3, r2
 8008226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	621a      	str	r2, [r3, #32]
}
 8008242:	bf00      	nop
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	40010000 	.word	0x40010000
 8008250:	08010564 	.word	0x08010564

08008254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	f023 0201 	bic.w	r2, r3, #1
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800827e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f023 030a 	bic.w	r3, r3, #10
 8008290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	621a      	str	r2, [r3, #32]
}
 80082a6:	bf00      	nop
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b087      	sub	sp, #28
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	f023 0210 	bic.w	r2, r3, #16
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	031b      	lsls	r3, r3, #12
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	f043 0307 	orr.w	r3, r3, #7
 8008334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	609a      	str	r2, [r3, #8]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	021a      	lsls	r2, r3, #8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	431a      	orrs	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	609a      	str	r2, [r3, #8]
}
 800837c:	bf00      	nop
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <TIM_CCxChannelCmd+0xb8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d020      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a2:	d01c      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4a27      	ldr	r2, [pc, #156]	; (8008444 <TIM_CCxChannelCmd+0xbc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d018      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a26      	ldr	r2, [pc, #152]	; (8008448 <TIM_CCxChannelCmd+0xc0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d014      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4a25      	ldr	r2, [pc, #148]	; (800844c <TIM_CCxChannelCmd+0xc4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d010      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4a24      	ldr	r2, [pc, #144]	; (8008450 <TIM_CCxChannelCmd+0xc8>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00c      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a23      	ldr	r2, [pc, #140]	; (8008454 <TIM_CCxChannelCmd+0xcc>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d008      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4a22      	ldr	r2, [pc, #136]	; (8008458 <TIM_CCxChannelCmd+0xd0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d004      	beq.n	80083de <TIM_CCxChannelCmd+0x56>
 80083d4:	f641 5194 	movw	r1, #7572	; 0x1d94
 80083d8:	4820      	ldr	r0, [pc, #128]	; (800845c <TIM_CCxChannelCmd+0xd4>)
 80083da:	f7f8 fd59 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <TIM_CCxChannelCmd+0x7e>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d00d      	beq.n	8008406 <TIM_CCxChannelCmd+0x7e>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d00a      	beq.n	8008406 <TIM_CCxChannelCmd+0x7e>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b0c      	cmp	r3, #12
 80083f4:	d007      	beq.n	8008406 <TIM_CCxChannelCmd+0x7e>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b3c      	cmp	r3, #60	; 0x3c
 80083fa:	d004      	beq.n	8008406 <TIM_CCxChannelCmd+0x7e>
 80083fc:	f641 5195 	movw	r1, #7573	; 0x1d95
 8008400:	4816      	ldr	r0, [pc, #88]	; (800845c <TIM_CCxChannelCmd+0xd4>)
 8008402:	f7f8 fd45 	bl	8000e90 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f003 031f 	and.w	r3, r3, #31
 800840c:	2201      	movs	r2, #1
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1a      	ldr	r2, [r3, #32]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	43db      	mvns	r3, r3
 800841c:	401a      	ands	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	fa01 f303 	lsl.w	r3, r1, r3
 8008432:	431a      	orrs	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	621a      	str	r2, [r3, #32]
}
 8008438:	bf00      	nop
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40010000 	.word	0x40010000
 8008444:	40000400 	.word	0x40000400
 8008448:	40000800 	.word	0x40000800
 800844c:	40000c00 	.word	0x40000c00
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800
 800845c:	08010564 	.word	0x08010564

08008460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a55      	ldr	r2, [pc, #340]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d018      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d013      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a51      	ldr	r2, [pc, #324]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00e      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a4f      	ldr	r2, [pc, #316]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d009      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4e      	ldr	r2, [pc, #312]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800849c:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80084a0:	484c      	ldr	r0, [pc, #304]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80084a2:	f7f8 fcf5 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d020      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b10      	cmp	r3, #16
 80084b4:	d01c      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d018      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b30      	cmp	r3, #48	; 0x30
 80084c4:	d014      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d010      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b50      	cmp	r3, #80	; 0x50
 80084d4:	d00c      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b60      	cmp	r3, #96	; 0x60
 80084dc:	d008      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b70      	cmp	r3, #112	; 0x70
 80084e4:	d004      	beq.n	80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80084e6:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80084ea:	483a      	ldr	r0, [pc, #232]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80084ec:	f7f8 fcd0 	bl	8000e90 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b80      	cmp	r3, #128	; 0x80
 80084f6:	d008      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d004      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008500:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8008504:	4833      	ldr	r0, [pc, #204]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008506:	f7f8 fcc3 	bl	8000e90 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008514:	2302      	movs	r3, #2
 8008516:	e050      	b.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1b      	ldr	r2, [pc, #108]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d018      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008564:	d013      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00e      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a15      	ldr	r2, [pc, #84]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d009      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a14      	ldr	r2, [pc, #80]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d004      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d10c      	bne.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4313      	orrs	r3, r2
 800859e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40000400 	.word	0x40000400
 80085cc:	40000800 	.word	0x40000800
 80085d0:	40000c00 	.word	0x40000c00
 80085d4:	0801059c 	.word	0x0801059c
 80085d8:	40014000 	.word	0x40014000

080085dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008604:	b084      	sub	sp, #16
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	f107 001c 	add.w	r0, r7, #28
 8008612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2b01      	cmp	r3, #1
 800861a:	d122      	bne.n	8008662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008646:	2b01      	cmp	r3, #1
 8008648:	d105      	bne.n	8008656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fbee 	bl	8009e38 <USB_CoreReset>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
 8008660:	e01a      	b.n	8008698 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fbe2 	bl	8009e38 <USB_CoreReset>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	639a      	str	r2, [r3, #56]	; 0x38
 800868a:	e005      	b.n	8008698 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	2b01      	cmp	r3, #1
 800869c:	d10b      	bne.n	80086b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f043 0206 	orr.w	r2, r3, #6
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086c2:	b004      	add	sp, #16
 80086c4:	4770      	bx	lr
	...

080086c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d165      	bne.n	80087a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4a41      	ldr	r2, [pc, #260]	; (80087e4 <USB_SetTurnaroundTime+0x11c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d906      	bls.n	80086f2 <USB_SetTurnaroundTime+0x2a>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4a40      	ldr	r2, [pc, #256]	; (80087e8 <USB_SetTurnaroundTime+0x120>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d202      	bcs.n	80086f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80086ec:	230f      	movs	r3, #15
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	e062      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4a3c      	ldr	r2, [pc, #240]	; (80087e8 <USB_SetTurnaroundTime+0x120>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d306      	bcc.n	8008708 <USB_SetTurnaroundTime+0x40>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4a3b      	ldr	r2, [pc, #236]	; (80087ec <USB_SetTurnaroundTime+0x124>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d202      	bcs.n	8008708 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008702:	230e      	movs	r3, #14
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	e057      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <USB_SetTurnaroundTime+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d306      	bcc.n	800871e <USB_SetTurnaroundTime+0x56>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4a37      	ldr	r2, [pc, #220]	; (80087f0 <USB_SetTurnaroundTime+0x128>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d202      	bcs.n	800871e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008718:	230d      	movs	r3, #13
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e04c      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4a33      	ldr	r2, [pc, #204]	; (80087f0 <USB_SetTurnaroundTime+0x128>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d306      	bcc.n	8008734 <USB_SetTurnaroundTime+0x6c>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4a32      	ldr	r2, [pc, #200]	; (80087f4 <USB_SetTurnaroundTime+0x12c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d802      	bhi.n	8008734 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800872e:	230c      	movs	r3, #12
 8008730:	617b      	str	r3, [r7, #20]
 8008732:	e041      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4a2f      	ldr	r2, [pc, #188]	; (80087f4 <USB_SetTurnaroundTime+0x12c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d906      	bls.n	800874a <USB_SetTurnaroundTime+0x82>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4a2e      	ldr	r2, [pc, #184]	; (80087f8 <USB_SetTurnaroundTime+0x130>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d802      	bhi.n	800874a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008744:	230b      	movs	r3, #11
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e036      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <USB_SetTurnaroundTime+0x130>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d906      	bls.n	8008760 <USB_SetTurnaroundTime+0x98>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4a29      	ldr	r2, [pc, #164]	; (80087fc <USB_SetTurnaroundTime+0x134>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d802      	bhi.n	8008760 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800875a:	230a      	movs	r3, #10
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e02b      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4a26      	ldr	r2, [pc, #152]	; (80087fc <USB_SetTurnaroundTime+0x134>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d906      	bls.n	8008776 <USB_SetTurnaroundTime+0xae>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	4a25      	ldr	r2, [pc, #148]	; (8008800 <USB_SetTurnaroundTime+0x138>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d202      	bcs.n	8008776 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008770:	2309      	movs	r3, #9
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	e020      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4a21      	ldr	r2, [pc, #132]	; (8008800 <USB_SetTurnaroundTime+0x138>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d306      	bcc.n	800878c <USB_SetTurnaroundTime+0xc4>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	4a20      	ldr	r2, [pc, #128]	; (8008804 <USB_SetTurnaroundTime+0x13c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d802      	bhi.n	800878c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008786:	2308      	movs	r3, #8
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	e015      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4a1d      	ldr	r2, [pc, #116]	; (8008804 <USB_SetTurnaroundTime+0x13c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d906      	bls.n	80087a2 <USB_SetTurnaroundTime+0xda>
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4a1c      	ldr	r2, [pc, #112]	; (8008808 <USB_SetTurnaroundTime+0x140>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d202      	bcs.n	80087a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800879c:	2307      	movs	r3, #7
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	e00a      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80087a2:	2306      	movs	r3, #6
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e007      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80087ae:	2309      	movs	r3, #9
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e001      	b.n	80087b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80087b4:	2309      	movs	r3, #9
 80087b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	029b      	lsls	r3, r3, #10
 80087cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80087d0:	431a      	orrs	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	00d8acbf 	.word	0x00d8acbf
 80087e8:	00e4e1c0 	.word	0x00e4e1c0
 80087ec:	00f42400 	.word	0x00f42400
 80087f0:	01067380 	.word	0x01067380
 80087f4:	011a499f 	.word	0x011a499f
 80087f8:	01312cff 	.word	0x01312cff
 80087fc:	014ca43f 	.word	0x014ca43f
 8008800:	016e3600 	.word	0x016e3600
 8008804:	01a6ab1f 	.word	0x01a6ab1f
 8008808:	01e84800 	.word	0x01e84800

0800880c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f043 0201 	orr.w	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f023 0201 	bic.w	r2, r3, #1
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d115      	bne.n	800889e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800887e:	2001      	movs	r0, #1
 8008880:	f7f9 fa58 	bl	8001d34 <HAL_Delay>
      ms++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fa45 	bl	8009d1a <USB_GetMode>
 8008890:	4603      	mov	r3, r0
 8008892:	2b01      	cmp	r3, #1
 8008894:	d01e      	beq.n	80088d4 <USB_SetCurrentMode+0x84>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b31      	cmp	r3, #49	; 0x31
 800889a:	d9f0      	bls.n	800887e <USB_SetCurrentMode+0x2e>
 800889c:	e01a      	b.n	80088d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d115      	bne.n	80088d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088b0:	2001      	movs	r0, #1
 80088b2:	f7f9 fa3f 	bl	8001d34 <HAL_Delay>
      ms++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 fa2c 	bl	8009d1a <USB_GetMode>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <USB_SetCurrentMode+0x84>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b31      	cmp	r3, #49	; 0x31
 80088cc:	d9f0      	bls.n	80088b0 <USB_SetCurrentMode+0x60>
 80088ce:	e001      	b.n	80088d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e005      	b.n	80088e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b32      	cmp	r3, #50	; 0x32
 80088d8:	d101      	bne.n	80088de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088e8:	b084      	sub	sp, #16
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008902:	2300      	movs	r3, #0
 8008904:	613b      	str	r3, [r7, #16]
 8008906:	e009      	b.n	800891c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	3340      	adds	r3, #64	; 0x40
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	2200      	movs	r2, #0
 8008914:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	3301      	adds	r3, #1
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2b0e      	cmp	r3, #14
 8008920:	d9f2      	bls.n	8008908 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11c      	bne.n	8008962 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008936:	f043 0302 	orr.w	r3, r3, #2
 800893a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38
 8008960:	e00b      	b.n	800897a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008980:	461a      	mov	r2, r3
 8008982:	2300      	movs	r3, #0
 8008984:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898c:	4619      	mov	r1, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008994:	461a      	mov	r2, r3
 8008996:	680b      	ldr	r3, [r1, #0]
 8008998:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	2b01      	cmp	r3, #1
 800899e:	d10c      	bne.n	80089ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089a6:	2100      	movs	r1, #0
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f965 	bl	8008c78 <USB_SetDevSpeed>
 80089ae:	e008      	b.n	80089c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089b0:	2101      	movs	r1, #1
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f960 	bl	8008c78 <USB_SetDevSpeed>
 80089b8:	e003      	b.n	80089c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089ba:	2103      	movs	r1, #3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f95b 	bl	8008c78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089c2:	2110      	movs	r1, #16
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f8f3 	bl	8008bb0 <USB_FlushTxFifo>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f91f 	bl	8008c18 <USB_FlushRxFifo>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	461a      	mov	r2, r3
 80089ec:	2300      	movs	r3, #0
 80089ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	461a      	mov	r2, r3
 80089f8:	2300      	movs	r3, #0
 80089fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	461a      	mov	r2, r3
 8008a04:	2300      	movs	r3, #0
 8008a06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	e043      	b.n	8008a96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a24:	d118      	bne.n	8008a58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	e013      	b.n	8008a6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	e008      	b.n	8008a6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a64:	461a      	mov	r2, r3
 8008a66:	2300      	movs	r3, #0
 8008a68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	461a      	mov	r2, r3
 8008a78:	2300      	movs	r3, #0
 8008a7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	3301      	adds	r3, #1
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3b7      	bcc.n	8008a0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	e043      	b.n	8008b2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aba:	d118      	bne.n	8008aee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	e013      	b.n	8008b00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e008      	b.n	8008b00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	461a      	mov	r2, r3
 8008afc:	2300      	movs	r3, #0
 8008afe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2300      	movs	r3, #0
 8008b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	613b      	str	r3, [r7, #16]
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d3b7      	bcc.n	8008aa4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d105      	bne.n	8008b68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f043 0210 	orr.w	r2, r3, #16
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699a      	ldr	r2, [r3, #24]
 8008b6c:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <USB_DevInit+0x2c4>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f043 0208 	orr.w	r2, r3, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d107      	bne.n	8008b9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b94:	f043 0304 	orr.w	r3, r3, #4
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ba8:	b004      	add	sp, #16
 8008baa:	4770      	bx	lr
 8008bac:	803c3800 	.word	0x803c3800

08008bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a13      	ldr	r2, [pc, #76]	; (8008c14 <USB_FlushTxFifo+0x64>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d901      	bls.n	8008bd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e01b      	b.n	8008c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	daf2      	bge.n	8008bbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	019b      	lsls	r3, r3, #6
 8008be0:	f043 0220 	orr.w	r2, r3, #32
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <USB_FlushTxFifo+0x64>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e006      	b.n	8008c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d0f0      	beq.n	8008be8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	00030d40 	.word	0x00030d40

08008c18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <USB_FlushRxFifo+0x5c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d901      	bls.n	8008c36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e018      	b.n	8008c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	daf2      	bge.n	8008c24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2210      	movs	r2, #16
 8008c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a08      	ldr	r2, [pc, #32]	; (8008c74 <USB_FlushRxFifo+0x5c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e006      	b.n	8008c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	2b10      	cmp	r3, #16
 8008c64:	d0f0      	beq.n	8008c48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	00030d40 	.word	0x00030d40

08008c78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b087      	sub	sp, #28
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0306 	and.w	r3, r3, #6
 8008cc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	75fb      	strb	r3, [r7, #23]
 8008cce:	e00a      	b.n	8008ce6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d002      	beq.n	8008cdc <USB_GetDevSpeed+0x32>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d102      	bne.n	8008ce2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	75fb      	strb	r3, [r7, #23]
 8008ce0:	e001      	b.n	8008ce6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ce2:	230f      	movs	r3, #15
 8008ce4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	785b      	ldrb	r3, [r3, #1]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d13a      	bne.n	8008d86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	2101      	movs	r1, #1
 8008d22:	fa01 f303 	lsl.w	r3, r1, r3
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	68f9      	ldr	r1, [r7, #12]
 8008d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d155      	bne.n	8008df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	791b      	ldrb	r3, [r3, #4]
 8008d62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	059b      	lsls	r3, r3, #22
 8008d6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e036      	b.n	8008df4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	69da      	ldr	r2, [r3, #28]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	2101      	movs	r1, #1
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	041b      	lsls	r3, r3, #16
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da4:	4313      	orrs	r3, r2
 8008da6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d11a      	bne.n	8008df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	791b      	ldrb	r3, [r3, #4]
 8008dd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008dda:	430b      	orrs	r3, r1
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d161      	bne.n	8008ee4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e36:	d11f      	bne.n	8008e78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	2101      	movs	r1, #1
 8008e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	43db      	mvns	r3, r3
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e98:	4013      	ands	r3, r2
 8008e9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f003 030f 	and.w	r3, r3, #15
 8008eac:	2101      	movs	r1, #1
 8008eae:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	68f9      	ldr	r1, [r7, #12]
 8008eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	0159      	lsls	r1, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	440b      	add	r3, r1
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eda:	4619      	mov	r1, r3
 8008edc:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <USB_DeactivateEndpoint+0x1b0>)
 8008ede:	4013      	ands	r3, r2
 8008ee0:	600b      	str	r3, [r1, #0]
 8008ee2:	e060      	b.n	8008fa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008efa:	d11f      	bne.n	8008f3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f52:	041b      	lsls	r3, r3, #16
 8008f54:	43db      	mvns	r3, r3
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f66:	69da      	ldr	r2, [r3, #28]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 030f 	and.w	r3, r3, #15
 8008f70:	2101      	movs	r1, #1
 8008f72:	fa01 f303 	lsl.w	r3, r1, r3
 8008f76:	041b      	lsls	r3, r3, #16
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f80:	4013      	ands	r3, r2
 8008f82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	0159      	lsls	r1, r3, #5
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	440b      	add	r3, r1
 8008f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <USB_DeactivateEndpoint+0x1b4>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	ec337800 	.word	0xec337800
 8008fb8:	eff37800 	.word	0xeff37800

08008fbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	f040 815c 	bne.w	8009296 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d132      	bne.n	800904c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	440a      	add	r2, r1
 8009020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009044:	0cdb      	lsrs	r3, r3, #19
 8009046:	04db      	lsls	r3, r3, #19
 8009048:	6113      	str	r3, [r2, #16]
 800904a:	e074      	b.n	8009136 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	440a      	add	r2, r1
 8009062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009066:	0cdb      	lsrs	r3, r3, #19
 8009068:	04db      	lsls	r3, r3, #19
 800906a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009086:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800908a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800908e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6999      	ldr	r1, [r3, #24]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	440b      	add	r3, r1
 80090a8:	1e59      	subs	r1, r3, #1
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80090b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090b4:	4b9d      	ldr	r3, [pc, #628]	; (800932c <USB_EPStartXfer+0x370>)
 80090b6:	400b      	ands	r3, r1
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	0148      	lsls	r0, r1, #5
 80090bc:	69f9      	ldr	r1, [r7, #28]
 80090be:	4401      	add	r1, r0
 80090c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090c4:	4313      	orrs	r3, r2
 80090c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d4:	691a      	ldr	r2, [r3, #16]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090de:	69b9      	ldr	r1, [r7, #24]
 80090e0:	0148      	lsls	r0, r1, #5
 80090e2:	69f9      	ldr	r1, [r7, #28]
 80090e4:	4401      	add	r1, r0
 80090e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090ea:	4313      	orrs	r3, r2
 80090ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	791b      	ldrb	r3, [r3, #4]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d11f      	bne.n	8009136 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	0151      	lsls	r1, r2, #5
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	440a      	add	r2, r1
 800910c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009110:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009114:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009134:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d14b      	bne.n	80091d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	461a      	mov	r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	791b      	ldrb	r3, [r3, #4]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d128      	bne.n	80091b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916c:	2b00      	cmp	r3, #0
 800916e:	d110      	bne.n	8009192 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	440a      	add	r2, r1
 8009186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	e00f      	b.n	80091b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	69fa      	ldr	r2, [r7, #28]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	e133      	b.n	800943c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	791b      	ldrb	r3, [r3, #4]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d015      	beq.n	8009228 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 811b 	beq.w	800943c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	2101      	movs	r1, #1
 8009218:	fa01 f303 	lsl.w	r3, r1, r3
 800921c:	69f9      	ldr	r1, [r7, #28]
 800921e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009222:	4313      	orrs	r3, r2
 8009224:	634b      	str	r3, [r1, #52]	; 0x34
 8009226:	e109      	b.n	800943c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009234:	2b00      	cmp	r3, #0
 8009236:	d110      	bne.n	800925a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	e00f      	b.n	800927a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009278:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6919      	ldr	r1, [r3, #16]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	781a      	ldrb	r2, [r3, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	b298      	uxth	r0, r3
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	4603      	mov	r3, r0
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fade 	bl	8009850 <USB_WritePacket>
 8009294:	e0d2      	b.n	800943c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b0:	0cdb      	lsrs	r3, r3, #19
 80092b2:	04db      	lsls	r3, r3, #19
 80092b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d126      	bne.n	8009330 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f8:	69b9      	ldr	r1, [r7, #24]
 80092fa:	0148      	lsls	r0, r1, #5
 80092fc:	69f9      	ldr	r1, [r7, #28]
 80092fe:	4401      	add	r1, r0
 8009300:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009304:	4313      	orrs	r3, r2
 8009306:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	0151      	lsls	r1, r2, #5
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	440a      	add	r2, r1
 800931e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009326:	6113      	str	r3, [r2, #16]
 8009328:	e03a      	b.n	80093a0 <USB_EPStartXfer+0x3e4>
 800932a:	bf00      	nop
 800932c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	699a      	ldr	r2, [r3, #24]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	4413      	add	r3, r2
 800933a:	1e5a      	subs	r2, r3, #1
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	8afa      	ldrh	r2, [r7, #22]
 800934c:	fb03 f202 	mul.w	r2, r3, r2
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	8afb      	ldrh	r3, [r7, #22]
 8009364:	04d9      	lsls	r1, r3, #19
 8009366:	4b38      	ldr	r3, [pc, #224]	; (8009448 <USB_EPStartXfer+0x48c>)
 8009368:	400b      	ands	r3, r1
 800936a:	69b9      	ldr	r1, [r7, #24]
 800936c:	0148      	lsls	r0, r1, #5
 800936e:	69f9      	ldr	r1, [r7, #28]
 8009370:	4401      	add	r1, r0
 8009372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009376:	4313      	orrs	r3, r2
 8009378:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	0148      	lsls	r0, r1, #5
 8009394:	69f9      	ldr	r1, [r7, #28]
 8009396:	4401      	add	r1, r0
 8009398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800939c:	4313      	orrs	r3, r2
 800939e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d10d      	bne.n	80093c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6919      	ldr	r1, [r3, #16]
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	460a      	mov	r2, r1
 80093c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	791b      	ldrb	r3, [r3, #4]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d128      	bne.n	800941c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d110      	bne.n	80093fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	e00f      	b.n	800941c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800941a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800943a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3720      	adds	r7, #32
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	1ff80000 	.word	0x1ff80000

0800944c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	4613      	mov	r3, r2
 8009458:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	2b01      	cmp	r3, #1
 800946a:	f040 80ce 	bne.w	800960a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d132      	bne.n	80094dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d4:	0cdb      	lsrs	r3, r3, #19
 80094d6:	04db      	lsls	r3, r3, #19
 80094d8:	6113      	str	r3, [r2, #16]
 80094da:	e04e      	b.n	800957a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f6:	0cdb      	lsrs	r3, r3, #19
 80094f8:	04db      	lsls	r3, r3, #19
 80094fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	0151      	lsls	r1, r2, #5
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	440a      	add	r2, r1
 8009512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009516:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800951a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800951e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	429a      	cmp	r2, r3
 800952a:	d903      	bls.n	8009534 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	691a      	ldr	r2, [r3, #16]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800956a:	6939      	ldr	r1, [r7, #16]
 800956c:	0148      	lsls	r0, r1, #5
 800956e:	6979      	ldr	r1, [r7, #20]
 8009570:	4401      	add	r1, r0
 8009572:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009576:	4313      	orrs	r3, r2
 8009578:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d11e      	bne.n	80095be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	461a      	mov	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	e097      	b.n	80096ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	0151      	lsls	r1, r2, #5
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	440a      	add	r2, r1
 80095d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 8083 	beq.w	80096ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	2101      	movs	r1, #1
 80095fa:	fa01 f303 	lsl.w	r3, r1, r3
 80095fe:	6979      	ldr	r1, [r7, #20]
 8009600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009604:	4313      	orrs	r3, r2
 8009606:	634b      	str	r3, [r1, #52]	; 0x34
 8009608:	e071      	b.n	80096ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	0151      	lsls	r1, r2, #5
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	440a      	add	r2, r1
 8009620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009624:	0cdb      	lsrs	r3, r3, #19
 8009626:	04db      	lsls	r3, r3, #19
 8009628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	0151      	lsls	r1, r2, #5
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	440a      	add	r2, r1
 8009640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009644:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009648:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800964c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800969c:	6939      	ldr	r1, [r7, #16]
 800969e:	0148      	lsls	r0, r1, #5
 80096a0:	6979      	ldr	r1, [r7, #20]
 80096a2:	4401      	add	r1, r0
 80096a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a8:	4313      	orrs	r3, r2
 80096aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d10d      	bne.n	80096ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d009      	beq.n	80096ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6919      	ldr	r1, [r3, #16]
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	460a      	mov	r2, r1
 80096cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d14a      	bne.n	80097b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800972e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009732:	f040 8086 	bne.w	8009842 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009758:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800977c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f242 7210 	movw	r2, #10000	; 0x2710
 800978a:	4293      	cmp	r3, r2
 800978c:	d902      	bls.n	8009794 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
          break;
 8009792:	e056      	b.n	8009842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ac:	d0e7      	beq.n	800977e <USB_EPStopXfer+0x82>
 80097ae:	e048      	b.n	8009842 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c8:	d13b      	bne.n	8009842 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	7812      	ldrb	r2, [r2, #0]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	7812      	ldrb	r2, [r2, #0]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800980c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009810:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f242 7210 	movw	r2, #10000	; 0x2710
 800981e:	4293      	cmp	r3, r2
 8009820:	d902      	bls.n	8009828 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]
          break;
 8009826:	e00c      	b.n	8009842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800983c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009840:	d0e7      	beq.n	8009812 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009850:	b480      	push	{r7}
 8009852:	b089      	sub	sp, #36	; 0x24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4611      	mov	r1, r2
 800985c:	461a      	mov	r2, r3
 800985e:	460b      	mov	r3, r1
 8009860:	71fb      	strb	r3, [r7, #7]
 8009862:	4613      	mov	r3, r2
 8009864:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800986e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d123      	bne.n	80098be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009876:	88bb      	ldrh	r3, [r7, #4]
 8009878:	3303      	adds	r3, #3
 800987a:	089b      	lsrs	r3, r3, #2
 800987c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800987e:	2300      	movs	r3, #0
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	e018      	b.n	80098b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	031a      	lsls	r2, r3, #12
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	4413      	add	r3, r2
 800988c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009890:	461a      	mov	r2, r3
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	3301      	adds	r3, #1
 800989c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	3301      	adds	r3, #1
 80098a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	3301      	adds	r3, #1
 80098a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	3301      	adds	r3, #1
 80098ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	3301      	adds	r3, #1
 80098b4:	61bb      	str	r3, [r7, #24]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d3e2      	bcc.n	8009884 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3724      	adds	r7, #36	; 0x24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b08b      	sub	sp, #44	; 0x2c
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4613      	mov	r3, r2
 80098d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	089b      	lsrs	r3, r3, #2
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098ea:	88fb      	ldrh	r3, [r7, #6]
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098f2:	2300      	movs	r3, #0
 80098f4:	623b      	str	r3, [r7, #32]
 80098f6:	e014      	b.n	8009922 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	601a      	str	r2, [r3, #0]
    pDest++;
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	3301      	adds	r3, #1
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	3301      	adds	r3, #1
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	3301      	adds	r3, #1
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	3301      	adds	r3, #1
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	3301      	adds	r3, #1
 8009920:	623b      	str	r3, [r7, #32]
 8009922:	6a3a      	ldr	r2, [r7, #32]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	429a      	cmp	r2, r3
 8009928:	d3e6      	bcc.n	80098f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800992a:	8bfb      	ldrh	r3, [r7, #30]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01e      	beq.n	800996e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993a:	461a      	mov	r2, r3
 800993c:	f107 0310 	add.w	r3, r7, #16
 8009940:	6812      	ldr	r2, [r2, #0]
 8009942:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
 8009950:	b2da      	uxtb	r2, r3
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	701a      	strb	r2, [r3, #0]
      i++;
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	3301      	adds	r3, #1
 800995a:	623b      	str	r3, [r7, #32]
      pDest++;
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	3301      	adds	r3, #1
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009962:	8bfb      	ldrh	r3, [r7, #30]
 8009964:	3b01      	subs	r3, #1
 8009966:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009968:	8bfb      	ldrh	r3, [r7, #30]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1ea      	bne.n	8009944 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009970:	4618      	mov	r0, r3
 8009972:	372c      	adds	r7, #44	; 0x2c
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d12c      	bne.n	80099f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	db12      	blt.n	80099d0 <USB_EPSetStall+0x54>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00f      	beq.n	80099d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	0151      	lsls	r1, r2, #5
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	440a      	add	r2, r1
 80099c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099ee:	6013      	str	r3, [r2, #0]
 80099f0:	e02b      	b.n	8009a4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	db12      	blt.n	8009a2a <USB_EPSetStall+0xae>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00f      	beq.n	8009a2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	0151      	lsls	r1, r2, #5
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	440a      	add	r2, r1
 8009a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	0151      	lsls	r1, r2, #5
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	440a      	add	r2, r1
 8009a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d128      	bne.n	8009ac6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	0151      	lsls	r1, r2, #5
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	440a      	add	r2, r1
 8009a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	791b      	ldrb	r3, [r3, #4]
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d003      	beq.n	8009aa4 <USB_EPClearStall+0x4c>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	791b      	ldrb	r3, [r3, #4]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d138      	bne.n	8009b16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	e027      	b.n	8009b16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	0151      	lsls	r1, r2, #5
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	440a      	add	r2, r1
 8009adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ae4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	791b      	ldrb	r3, [r3, #4]
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d003      	beq.n	8009af6 <USB_EPClearStall+0x9e>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	791b      	ldrb	r3, [r3, #4]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d10f      	bne.n	8009b16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	0151      	lsls	r1, r2, #5
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	440a      	add	r2, r1
 8009b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b9e:	f023 0302 	bic.w	r3, r3, #2
 8009ba2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bcc:	f023 0303 	bic.w	r3, r3, #3
 8009bd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009be0:	f043 0302 	orr.w	r3, r3, #2
 8009be4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	0c1b      	lsrs	r3, r3, #16
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	b29b      	uxth	r3, r3
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4013      	ands	r3, r2
 8009cae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b087      	sub	sp, #28
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	f003 030f 	and.w	r3, r3, #15
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	fa22 f303 	lsr.w	r3, r2, r3
 8009cee:	01db      	lsls	r3, r3, #7
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	f003 0301 	and.w	r3, r3, #1
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009d54:	f023 0307 	bic.w	r3, r3, #7
 8009d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	460b      	mov	r3, r1
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	333c      	adds	r3, #60	; 0x3c
 8009d92:	3304      	adds	r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	4a26      	ldr	r2, [pc, #152]	; (8009e34 <USB_EP0_OutStart+0xb8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d90a      	bls.n	8009db6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db0:	d101      	bne.n	8009db6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e037      	b.n	8009e26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de4:	f043 0318 	orr.w	r3, r3, #24
 8009de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009dfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d10f      	bne.n	8009e24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	4f54300a 	.word	0x4f54300a

08009e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3301      	adds	r3, #1
 8009e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4a13      	ldr	r2, [pc, #76]	; (8009e9c <USB_CoreReset+0x64>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d901      	bls.n	8009e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e01b      	b.n	8009e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	daf2      	bge.n	8009e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f043 0201 	orr.w	r2, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3301      	adds	r3, #1
 8009e72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4a09      	ldr	r2, [pc, #36]	; (8009e9c <USB_CoreReset+0x64>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d901      	bls.n	8009e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e006      	b.n	8009e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d0f0      	beq.n	8009e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	00030d40 	.word	0x00030d40

08009ea0 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8009ea8:	4a18      	ldr	r2, [pc, #96]	; (8009f0c <si5351_Init+0x6c>)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8009eae:	21ff      	movs	r1, #255	; 0xff
 8009eb0:	2003      	movs	r0, #3
 8009eb2:	f000 fa0d 	bl	800a2d0 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 8009eb6:	2180      	movs	r1, #128	; 0x80
 8009eb8:	2010      	movs	r0, #16
 8009eba:	f000 fa09 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8009ebe:	2180      	movs	r1, #128	; 0x80
 8009ec0:	2011      	movs	r0, #17
 8009ec2:	f000 fa05 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 8009ec6:	2180      	movs	r1, #128	; 0x80
 8009ec8:	2012      	movs	r0, #18
 8009eca:	f000 fa01 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 8009ece:	2180      	movs	r1, #128	; 0x80
 8009ed0:	2013      	movs	r0, #19
 8009ed2:	f000 f9fd 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 8009ed6:	2180      	movs	r1, #128	; 0x80
 8009ed8:	2014      	movs	r0, #20
 8009eda:	f000 f9f9 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 8009ede:	2180      	movs	r1, #128	; 0x80
 8009ee0:	2015      	movs	r0, #21
 8009ee2:	f000 f9f5 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 8009ee6:	2180      	movs	r1, #128	; 0x80
 8009ee8:	2016      	movs	r0, #22
 8009eea:	f000 f9f1 	bl	800a2d0 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	2017      	movs	r0, #23
 8009ef2:	f000 f9ed 	bl	800a2d0 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 8009ef6:	23c0      	movs	r3, #192	; 0xc0
 8009ef8:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	4619      	mov	r1, r3
 8009efe:	20b7      	movs	r0, #183	; 0xb7
 8009f00:	f000 f9e6 	bl	800a2d0 <si5351_write>
}
 8009f04:	bf00      	nop
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	200003cc 	.word	0x200003cc

08009f10 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08c      	sub	sp, #48	; 0x30
 8009f14:	af02      	add	r7, sp, #8
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	01da      	lsls	r2, r3, #7
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	01d9      	lsls	r1, r3, #7
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	fb91 f3f3 	sdiv	r3, r1, r3
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8009f42:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	01db      	lsls	r3, r3, #7
 8009f48:	69fa      	ldr	r2, [r7, #28]
 8009f4a:	fb93 f2f2 	sdiv	r2, r3, r2
 8009f4e:	69f9      	ldr	r1, [r7, #28]
 8009f50:	fb01 f202 	mul.w	r2, r1, r2
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8009f5c:	79fb      	ldrb	r3, [r7, #7]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <si5351_SetupPLL+0x56>
 8009f62:	231a      	movs	r3, #26
 8009f64:	e000      	b.n	8009f68 <si5351_SetupPLL+0x58>
 8009f66:	2322      	movs	r3, #34	; 0x22
 8009f68:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8009f6a:	7bf8      	ldrb	r0, [r7, #15]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	2300      	movs	r3, #0
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	69b9      	ldr	r1, [r7, #24]
 8009f7a:	f000 f9d1 	bl	800a320 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 8009f7e:	21a0      	movs	r1, #160	; 0xa0
 8009f80:	20b1      	movs	r0, #177	; 0xb1
 8009f82:	f000 f9a5 	bl	800a2d0 <si5351_write>
}
 8009f86:	bf00      	nop
 8009f88:	3728      	adds	r7, #40	; 0x28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b08c      	sub	sp, #48	; 0x30
 8009f92:	af02      	add	r7, sp, #8
 8009f94:	603b      	str	r3, [r7, #0]
 8009f96:	4603      	mov	r3, r0
 8009f98:	71fb      	strb	r3, [r7, #7]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	71bb      	strb	r3, [r7, #6]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <si5351_SetupOutput+0x36>
        return 1;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e08d      	b.n	800a0e0 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <si5351_SetupOutput+0x54>
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b07      	cmp	r3, #7
 8009fd0:	dd05      	ble.n	8009fde <si5351_SetupOutput+0x50>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d104      	bne.n	8009fe2 <si5351_SetupOutput+0x54>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e07e      	b.n	800a0e0 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d109      	bne.n	8009ffc <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	623b      	str	r3, [r7, #32]
        P2 = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ffa:	e016      	b.n	800a02a <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	01da      	lsls	r2, r3, #7
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	01d9      	lsls	r1, r3, #7
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	fb91 f3f3 	sdiv	r3, r1, r3
 800a00a:	4413      	add	r3, r2
 800a00c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a010:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	01db      	lsls	r3, r3, #7
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	fb93 f2f2 	sdiv	r2, r3, r2
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	fb01 f202 	mul.w	r2, r1, r2
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a02a:	2300      	movs	r3, #0
 800a02c:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d014      	beq.n	800a066 <si5351_SetupOutput+0xd8>
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	dc19      	bgt.n	800a074 <si5351_SetupOutput+0xe6>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <si5351_SetupOutput+0xbc>
 800a044:	2b01      	cmp	r3, #1
 800a046:	d007      	beq.n	800a058 <si5351_SetupOutput+0xca>
 800a048:	e014      	b.n	800a074 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a04a:	232a      	movs	r3, #42	; 0x2a
 800a04c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a04e:	23a5      	movs	r3, #165	; 0xa5
 800a050:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a052:	2310      	movs	r3, #16
 800a054:	757b      	strb	r3, [r7, #21]
        break;
 800a056:	e00d      	b.n	800a074 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a058:	2332      	movs	r3, #50	; 0x32
 800a05a:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a05c:	23a6      	movs	r3, #166	; 0xa6
 800a05e:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a060:	2311      	movs	r3, #17
 800a062:	757b      	strb	r3, [r7, #21]
        break;
 800a064:	e006      	b.n	800a074 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a066:	233a      	movs	r3, #58	; 0x3a
 800a068:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a06a:	23a7      	movs	r3, #167	; 0xa7
 800a06c:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a06e:	2312      	movs	r3, #18
 800a070:	757b      	strb	r3, [r7, #21]
        break;
 800a072:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a074:	797b      	ldrb	r3, [r7, #5]
 800a076:	f043 030c 	orr.w	r3, r3, #12
 800a07a:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a07c:	79bb      	ldrb	r3, [r7, #6]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d103      	bne.n	800a08a <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a082:	7d3b      	ldrb	r3, [r7, #20]
 800a084:	f043 0320 	orr.w	r3, r3, #32
 800a088:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <si5351_SetupOutput+0x118>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <si5351_SetupOutput+0x110>
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d103      	bne.n	800a0a6 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a09e:	7d3b      	ldrb	r3, [r7, #20]
 800a0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a4:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a0a6:	7d3a      	ldrb	r2, [r7, #20]
 800a0a8:	7d7b      	ldrb	r3, [r7, #21]
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 f90f 	bl	800a2d0 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	7c1b      	ldrb	r3, [r3, #16]
 800a0b6:	7df8      	ldrb	r0, [r7, #23]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	6a39      	ldr	r1, [r7, #32]
 800a0c6:	f000 f92b 	bl	800a320 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a0ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	7dbb      	ldrb	r3, [r7, #22]
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 f8f9 	bl	800a2d0 <si5351_write>

    return 0;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3728      	adds	r7, #40	; 0x28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a0e8:	b480      	push	{r7}
 800a0ea:	b08f      	sub	sp, #60	; 0x3c
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a0fa:	da03      	bge.n	800a104 <si5351_Calc+0x1c>
 800a0fc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e005      	b.n	800a110 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4a4f      	ldr	r2, [pc, #316]	; (800a244 <si5351_Calc+0x15c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	dd01      	ble.n	800a110 <si5351_Calc+0x28>
 800a10c:	4b4d      	ldr	r3, [pc, #308]	; (800a244 <si5351_Calc+0x15c>)
 800a10e:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4a4b      	ldr	r2, [pc, #300]	; (800a248 <si5351_Calc+0x160>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	dc06      	bgt.n	800a12c <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	019b      	lsls	r3, r3, #6
 800a122:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2206      	movs	r2, #6
 800a128:	741a      	strb	r2, [r3, #16]
 800a12a:	e002      	b.n	800a132 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4a45      	ldr	r2, [pc, #276]	; (800a24c <si5351_Calc+0x164>)
 800a136:	fb82 1203 	smull	r1, r2, r2, r3
 800a13a:	1492      	asrs	r2, r2, #18
 800a13c:	17db      	asrs	r3, r3, #31
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	4a43      	ldr	r2, [pc, #268]	; (800a250 <si5351_Calc+0x168>)
 800a142:	6812      	ldr	r2, [r2, #0]
 800a144:	fb02 f303 	mul.w	r3, r2, r3
 800a148:	4a42      	ldr	r2, [pc, #264]	; (800a254 <si5351_Calc+0x16c>)
 800a14a:	fb82 1203 	smull	r1, r2, r2, r3
 800a14e:	1152      	asrs	r2, r2, #5
 800a150:	17db      	asrs	r3, r3, #31
 800a152:	1a9b      	subs	r3, r3, r2
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4413      	add	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a15a:	4b3f      	ldr	r3, [pc, #252]	; (800a258 <si5351_Calc+0x170>)
 800a15c:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4a3e      	ldr	r2, [pc, #248]	; (800a25c <si5351_Calc+0x174>)
 800a162:	4293      	cmp	r3, r2
 800a164:	dc22      	bgt.n	800a1ac <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a166:	2324      	movs	r3, #36	; 0x24
 800a168:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a172:	4b3b      	ldr	r3, [pc, #236]	; (800a260 <si5351_Calc+0x178>)
 800a174:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	151b      	asrs	r3, r3, #20
 800a184:	3301      	adds	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	fb93 f2f2 	sdiv	r2, r3, r2
 800a190:	68f9      	ldr	r1, [r7, #12]
 800a192:	fb01 f202 	mul.w	r2, r1, r2
 800a196:	1a9a      	subs	r2, r3, r2
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a1a8:	623b      	str	r3, [r7, #32]
 800a1aa:	e032      	b.n	800a212 <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a2d      	ldr	r2, [pc, #180]	; (800a264 <si5351_Calc+0x17c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	dd02      	ble.n	800a1ba <si5351_Calc+0xd2>
            x = 4;
 800a1b4:	2304      	movs	r3, #4
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1b8:	e008      	b.n	800a1cc <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4a2a      	ldr	r2, [pc, #168]	; (800a268 <si5351_Calc+0x180>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	dd02      	ble.n	800a1c8 <si5351_Calc+0xe0>
            x = 6;
 800a1c2:	2306      	movs	r3, #6
 800a1c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1c6:	e001      	b.n	800a1cc <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	fb02 f303 	mul.w	r3, r2, r3
 800a1dc:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	fb92 f3f3 	sdiv	r3, r2, r3
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	151b      	asrs	r3, r3, #20
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	fb93 f2f2 	sdiv	r2, r3, r2
 800a1f8:	69f9      	ldr	r1, [r7, #28]
 800a1fa:	fb01 f202 	mul.w	r2, r1, r2
 800a1fe:	1a9a      	subs	r2, r3, r2
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	fb92 f3f3 	sdiv	r3, r2, r3
 800a206:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	fb92 f3f3 	sdiv	r3, r2, r3
 800a210:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a216:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21c:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a222:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a228:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22e:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a3a      	ldr	r2, [r7, #32]
 800a234:	60da      	str	r2, [r3, #12]
}
 800a236:	bf00      	nop
 800a238:	373c      	adds	r7, #60	; 0x3c
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	09896800 	.word	0x09896800
 800a248:	000f423f 	.word	0x000f423f
 800a24c:	431bde83 	.word	0x431bde83
 800a250:	200003cc 	.word	0x200003cc
 800a254:	51eb851f 	.word	0x51eb851f
 800a258:	017d7840 	.word	0x017d7840
 800a25c:	04d3f63f 	.word	0x04d3f63f
 800a260:	35a4e900 	.word	0x35a4e900
 800a264:	08f0d17f 	.word	0x08f0d17f
 800a268:	05f5e0ff 	.word	0x05f5e0ff

0800a26c <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08c      	sub	sp, #48	; 0x30
 800a270:	af02      	add	r7, sp, #8
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800a278:	f107 0208 	add.w	r2, r7, #8
 800a27c:	f107 031c 	add.w	r3, r7, #28
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7ff ff30 	bl	800a0e8 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800a288:	f107 031c 	add.w	r3, r7, #28
 800a28c:	4619      	mov	r1, r3
 800a28e:	2000      	movs	r0, #0
 800a290:	f7ff fe3e 	bl	8009f10 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	2100      	movs	r1, #0
 800a29c:	9100      	str	r1, [sp, #0]
 800a29e:	2100      	movs	r1, #0
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	f7ff fe74 	bl	8009f8e <si5351_SetupOutput>
}
 800a2a6:	bf00      	nop
 800a2a8:	3728      	adds	r7, #40	; 0x28
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
 800a2ba:	43db      	mvns	r3, r3
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	2003      	movs	r0, #3
 800a2c2:	f000 f805 	bl	800a2d0 <si5351_write>
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af04      	add	r7, sp, #16
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	460a      	mov	r2, r1
 800a2da:	71fb      	strb	r3, [r7, #7]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a2e0:	bf00      	nop
 800a2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e6:	2203      	movs	r2, #3
 800a2e8:	21c0      	movs	r1, #192	; 0xc0
 800a2ea:	480c      	ldr	r0, [pc, #48]	; (800a31c <si5351_write+0x4c>)
 800a2ec:	f7f8 fc36 	bl	8002b5c <HAL_I2C_IsDeviceReady>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f5      	bne.n	800a2e2 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	2301      	movs	r3, #1
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	1dbb      	adds	r3, r7, #6
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2301      	movs	r3, #1
 800a30a:	21c0      	movs	r1, #192	; 0xc0
 800a30c:	4803      	ldr	r0, [pc, #12]	; (800a31c <si5351_write+0x4c>)
 800a30e:	f7f8 fb1f 	bl	8002950 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000208 	.word	0x20000208

0800a320 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	121b      	asrs	r3, r3, #8
 800a334:	b2da      	uxtb	r2, r3
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	4611      	mov	r1, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ffc8 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	3301      	adds	r3, #1
 800a344:	b2db      	uxtb	r3, r3
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	b2d2      	uxtb	r2, r2
 800a34a:	4611      	mov	r1, r2
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff ffbf 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	3302      	adds	r3, #2
 800a356:	b2d8      	uxtb	r0, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	141b      	asrs	r3, r3, #16
 800a35c:	b25b      	sxtb	r3, r3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	b25a      	sxtb	r2, r3
 800a364:	7e3b      	ldrb	r3, [r7, #24]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	b25b      	sxtb	r3, r3
 800a36a:	f003 030c 	and.w	r3, r3, #12
 800a36e:	b25b      	sxtb	r3, r3
 800a370:	4313      	orrs	r3, r2
 800a372:	b25a      	sxtb	r2, r3
 800a374:	7f3b      	ldrb	r3, [r7, #28]
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a37e:	b25b      	sxtb	r3, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	b25b      	sxtb	r3, r3
 800a384:	b2db      	uxtb	r3, r3
 800a386:	4619      	mov	r1, r3
 800a388:	f7ff ffa2 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	3303      	adds	r3, #3
 800a390:	b2da      	uxtb	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	121b      	asrs	r3, r3, #8
 800a396:	b2db      	uxtb	r3, r3
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f7ff ff98 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff8f 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
 800a3b4:	3305      	adds	r3, #5
 800a3b6:	b2d8      	uxtb	r0, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	131b      	asrs	r3, r3, #12
 800a3bc:	b25b      	sxtb	r3, r3
 800a3be:	f023 030f 	bic.w	r3, r3, #15
 800a3c2:	b25a      	sxtb	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	141b      	asrs	r3, r3, #16
 800a3c8:	b25b      	sxtb	r3, r3
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	b25b      	sxtb	r3, r3
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	b25b      	sxtb	r3, r3
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f7ff ff7a 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	3306      	adds	r3, #6
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	121b      	asrs	r3, r3, #8
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	f7ff ff70 	bl	800a2d0 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	3307      	adds	r3, #7
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff ff67 	bl	800a2d0 <si5351_write>
}
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a418:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a41c:	f005 fa04 	bl	800f828 <USBD_static_malloc>
 800a420:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	32b0      	adds	r2, #176	; 0xb0
 800a432:	2100      	movs	r1, #0
 800a434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a438:	2302      	movs	r3, #2
 800a43a:	e0d4      	b.n	800a5e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a43c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a440:	2100      	movs	r1, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f005 fa7e 	bl	800f944 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32b0      	adds	r2, #176	; 0xb0
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32b0      	adds	r2, #176	; 0xb0
 800a462:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7c1b      	ldrb	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d138      	bne.n	800a4e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a474:	4b5e      	ldr	r3, [pc, #376]	; (800a5f0 <USBD_CDC_Init+0x1e4>)
 800a476:	7819      	ldrb	r1, [r3, #0]
 800a478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a47c:	2202      	movs	r2, #2
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f005 f8af 	bl	800f5e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a484:	4b5a      	ldr	r3, [pc, #360]	; (800a5f0 <USBD_CDC_Init+0x1e4>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 020f 	and.w	r2, r3, #15
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	440b      	add	r3, r1
 800a498:	3324      	adds	r3, #36	; 0x24
 800a49a:	2201      	movs	r2, #1
 800a49c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a49e:	4b55      	ldr	r3, [pc, #340]	; (800a5f4 <USBD_CDC_Init+0x1e8>)
 800a4a0:	7819      	ldrb	r1, [r3, #0]
 800a4a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f005 f89a 	bl	800f5e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a4ae:	4b51      	ldr	r3, [pc, #324]	; (800a5f4 <USBD_CDC_Init+0x1e8>)
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	f003 020f 	and.w	r2, r3, #15
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4ca:	4b4b      	ldr	r3, [pc, #300]	; (800a5f8 <USBD_CDC_Init+0x1ec>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 020f 	and.w	r2, r3, #15
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	3326      	adds	r3, #38	; 0x26
 800a4e0:	2210      	movs	r2, #16
 800a4e2:	801a      	strh	r2, [r3, #0]
 800a4e4:	e035      	b.n	800a552 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4e6:	4b42      	ldr	r3, [pc, #264]	; (800a5f0 <USBD_CDC_Init+0x1e4>)
 800a4e8:	7819      	ldrb	r1, [r3, #0]
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f005 f877 	bl	800f5e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4f4:	4b3e      	ldr	r3, [pc, #248]	; (800a5f0 <USBD_CDC_Init+0x1e4>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f003 020f 	and.w	r2, r3, #15
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	440b      	add	r3, r1
 800a508:	3324      	adds	r3, #36	; 0x24
 800a50a:	2201      	movs	r2, #1
 800a50c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a50e:	4b39      	ldr	r3, [pc, #228]	; (800a5f4 <USBD_CDC_Init+0x1e8>)
 800a510:	7819      	ldrb	r1, [r3, #0]
 800a512:	2340      	movs	r3, #64	; 0x40
 800a514:	2202      	movs	r2, #2
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f005 f863 	bl	800f5e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a51c:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <USBD_CDC_Init+0x1e8>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	f003 020f 	and.w	r2, r3, #15
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	440b      	add	r3, r1
 800a530:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a534:	2201      	movs	r2, #1
 800a536:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a538:	4b2f      	ldr	r3, [pc, #188]	; (800a5f8 <USBD_CDC_Init+0x1ec>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	f003 020f 	and.w	r2, r3, #15
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	440b      	add	r3, r1
 800a54c:	3326      	adds	r3, #38	; 0x26
 800a54e:	2210      	movs	r2, #16
 800a550:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a552:	4b29      	ldr	r3, [pc, #164]	; (800a5f8 <USBD_CDC_Init+0x1ec>)
 800a554:	7819      	ldrb	r1, [r3, #0]
 800a556:	2308      	movs	r3, #8
 800a558:	2203      	movs	r2, #3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f005 f841 	bl	800f5e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a560:	4b25      	ldr	r3, [pc, #148]	; (800a5f8 <USBD_CDC_Init+0x1ec>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	f003 020f 	and.w	r2, r3, #15
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	4613      	mov	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	440b      	add	r3, r1
 800a574:	3324      	adds	r3, #36	; 0x24
 800a576:	2201      	movs	r2, #1
 800a578:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	33b0      	adds	r3, #176	; 0xb0
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e018      	b.n	800a5e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	7c1b      	ldrb	r3, [r3, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5bc:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <USBD_CDC_Init+0x1e8>)
 800a5be:	7819      	ldrb	r1, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f005 f8f8 	bl	800f7c0 <USBD_LL_PrepareReceive>
 800a5d0:	e008      	b.n	800a5e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5d2:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <USBD_CDC_Init+0x1e8>)
 800a5d4:	7819      	ldrb	r1, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5dc:	2340      	movs	r3, #64	; 0x40
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f005 f8ee 	bl	800f7c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200000ff 	.word	0x200000ff
 800a5f4:	20000100 	.word	0x20000100
 800a5f8:	20000101 	.word	0x20000101

0800a5fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a608:	4b3a      	ldr	r3, [pc, #232]	; (800a6f4 <USBD_CDC_DeInit+0xf8>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f005 f80d 	bl	800f62e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a614:	4b37      	ldr	r3, [pc, #220]	; (800a6f4 <USBD_CDC_DeInit+0xf8>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	3324      	adds	r3, #36	; 0x24
 800a62a:	2200      	movs	r2, #0
 800a62c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a62e:	4b32      	ldr	r3, [pc, #200]	; (800a6f8 <USBD_CDC_DeInit+0xfc>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f004 fffa 	bl	800f62e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a63a:	4b2f      	ldr	r3, [pc, #188]	; (800a6f8 <USBD_CDC_DeInit+0xfc>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	f003 020f 	and.w	r2, r3, #15
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	4613      	mov	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	440b      	add	r3, r1
 800a64e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a652:	2200      	movs	r2, #0
 800a654:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a656:	4b29      	ldr	r3, [pc, #164]	; (800a6fc <USBD_CDC_DeInit+0x100>)
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f004 ffe6 	bl	800f62e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a662:	4b26      	ldr	r3, [pc, #152]	; (800a6fc <USBD_CDC_DeInit+0x100>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	f003 020f 	and.w	r2, r3, #15
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	440b      	add	r3, r1
 800a676:	3324      	adds	r3, #36	; 0x24
 800a678:	2200      	movs	r2, #0
 800a67a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a67c:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <USBD_CDC_DeInit+0x100>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f003 020f 	and.w	r2, r3, #15
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	440b      	add	r3, r1
 800a690:	3326      	adds	r3, #38	; 0x26
 800a692:	2200      	movs	r2, #0
 800a694:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	32b0      	adds	r2, #176	; 0xb0
 800a6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01f      	beq.n	800a6e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	33b0      	adds	r3, #176	; 0xb0
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	32b0      	adds	r2, #176	; 0xb0
 800a6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f005 f8ba 	bl	800f844 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32b0      	adds	r2, #176	; 0xb0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200000ff 	.word	0x200000ff
 800a6f8:	20000100 	.word	0x20000100
 800a6fc:	20000101 	.word	0x20000101

0800a700 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	32b0      	adds	r2, #176	; 0xb0
 800a714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a718:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e0bf      	b.n	800a8b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d050      	beq.n	800a7de <USBD_CDC_Setup+0xde>
 800a73c:	2b20      	cmp	r3, #32
 800a73e:	f040 80af 	bne.w	800a8a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	88db      	ldrh	r3, [r3, #6]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d03a      	beq.n	800a7c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	b25b      	sxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	da1b      	bge.n	800a78c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	33b0      	adds	r3, #176	; 0xb0
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a76a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	88d2      	ldrh	r2, [r2, #6]
 800a770:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	88db      	ldrh	r3, [r3, #6]
 800a776:	2b07      	cmp	r3, #7
 800a778:	bf28      	it	cs
 800a77a:	2307      	movcs	r3, #7
 800a77c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	89fa      	ldrh	r2, [r7, #14]
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fd43 	bl	800c210 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a78a:	e090      	b.n	800a8ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	785a      	ldrb	r2, [r3, #1]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	88db      	ldrh	r3, [r3, #6]
 800a79a:	2b3f      	cmp	r3, #63	; 0x3f
 800a79c:	d803      	bhi.n	800a7a6 <USBD_CDC_Setup+0xa6>
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	88db      	ldrh	r3, [r3, #6]
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	e000      	b.n	800a7a8 <USBD_CDC_Setup+0xa8>
 800a7a6:	2240      	movs	r2, #64	; 0x40
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a7ae:	6939      	ldr	r1, [r7, #16]
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 fd55 	bl	800c268 <USBD_CtlPrepareRx>
      break;
 800a7be:	e076      	b.n	800a8ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	33b0      	adds	r3, #176	; 0xb0
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	7850      	ldrb	r0, [r2, #1]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	4798      	blx	r3
      break;
 800a7dc:	e067      	b.n	800a8ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	785b      	ldrb	r3, [r3, #1]
 800a7e2:	2b0b      	cmp	r3, #11
 800a7e4:	d851      	bhi.n	800a88a <USBD_CDC_Setup+0x18a>
 800a7e6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <USBD_CDC_Setup+0xec>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a81d 	.word	0x0800a81d
 800a7f0:	0800a899 	.word	0x0800a899
 800a7f4:	0800a88b 	.word	0x0800a88b
 800a7f8:	0800a88b 	.word	0x0800a88b
 800a7fc:	0800a88b 	.word	0x0800a88b
 800a800:	0800a88b 	.word	0x0800a88b
 800a804:	0800a88b 	.word	0x0800a88b
 800a808:	0800a88b 	.word	0x0800a88b
 800a80c:	0800a88b 	.word	0x0800a88b
 800a810:	0800a88b 	.word	0x0800a88b
 800a814:	0800a847 	.word	0x0800a847
 800a818:	0800a871 	.word	0x0800a871
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b03      	cmp	r3, #3
 800a826:	d107      	bne.n	800a838 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a828:	f107 030a 	add.w	r3, r7, #10
 800a82c:	2202      	movs	r2, #2
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fced 	bl	800c210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a836:	e032      	b.n	800a89e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fc77 	bl	800c12e <USBD_CtlError>
            ret = USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	75fb      	strb	r3, [r7, #23]
          break;
 800a844:	e02b      	b.n	800a89e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d107      	bne.n	800a862 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a852:	f107 030d 	add.w	r3, r7, #13
 800a856:	2201      	movs	r2, #1
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fcd8 	bl	800c210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a860:	e01d      	b.n	800a89e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f001 fc62 	bl	800c12e <USBD_CtlError>
            ret = USBD_FAIL;
 800a86a:	2303      	movs	r3, #3
 800a86c:	75fb      	strb	r3, [r7, #23]
          break;
 800a86e:	e016      	b.n	800a89e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d00f      	beq.n	800a89c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 fc55 	bl	800c12e <USBD_CtlError>
            ret = USBD_FAIL;
 800a884:	2303      	movs	r3, #3
 800a886:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a888:	e008      	b.n	800a89c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 fc4e 	bl	800c12e <USBD_CtlError>
          ret = USBD_FAIL;
 800a892:	2303      	movs	r3, #3
 800a894:	75fb      	strb	r3, [r7, #23]
          break;
 800a896:	e002      	b.n	800a89e <USBD_CDC_Setup+0x19e>
          break;
 800a898:	bf00      	nop
 800a89a:	e008      	b.n	800a8ae <USBD_CDC_Setup+0x1ae>
          break;
 800a89c:	bf00      	nop
      }
      break;
 800a89e:	e006      	b.n	800a8ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fc43 	bl	800c12e <USBD_CtlError>
      ret = USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	32b0      	adds	r2, #176	; 0xb0
 800a8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e065      	b.n	800a9ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	32b0      	adds	r2, #176	; 0xb0
 800a8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	f003 020f 	and.w	r2, r3, #15
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	440b      	add	r3, r1
 800a904:	3318      	adds	r3, #24
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d02f      	beq.n	800a96c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a90c:	78fb      	ldrb	r3, [r7, #3]
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	440b      	add	r3, r1
 800a91e:	3318      	adds	r3, #24
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	78fb      	ldrb	r3, [r7, #3]
 800a924:	f003 010f 	and.w	r1, r3, #15
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	460b      	mov	r3, r1
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	440b      	add	r3, r1
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4403      	add	r3, r0
 800a934:	3348      	adds	r3, #72	; 0x48
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	fbb2 f1f3 	udiv	r1, r2, r3
 800a93c:	fb01 f303 	mul.w	r3, r1, r3
 800a940:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a942:	2b00      	cmp	r3, #0
 800a944:	d112      	bne.n	800a96c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	3318      	adds	r3, #24
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a95e:	78f9      	ldrb	r1, [r7, #3]
 800a960:	2300      	movs	r3, #0
 800a962:	2200      	movs	r2, #0
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f004 ff0a 	bl	800f77e <USBD_LL_Transmit>
 800a96a:	e01f      	b.n	800a9ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	33b0      	adds	r3, #176	; 0xb0
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d010      	beq.n	800a9ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	33b0      	adds	r3, #176	; 0xb0
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	32b0      	adds	r2, #176	; 0xb0
 800a9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	32b0      	adds	r2, #176	; 0xb0
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e01a      	b.n	800aa1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f004 ff08 	bl	800f802 <USBD_LL_GetRxDataSize>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	33b0      	adds	r3, #176	; 0xb0
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	32b0      	adds	r2, #176	; 0xb0
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e025      	b.n	800aa94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	33b0      	adds	r3, #176	; 0xb0
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01a      	beq.n	800aa92 <USBD_CDC_EP0_RxReady+0x6c>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aa62:	2bff      	cmp	r3, #255	; 0xff
 800aa64:	d015      	beq.n	800aa92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	33b0      	adds	r3, #176	; 0xb0
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aa7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa86:	b292      	uxth	r2, r2
 800aa88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	22ff      	movs	r2, #255	; 0xff
 800aa8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aaa4:	2182      	movs	r1, #130	; 0x82
 800aaa6:	4818      	ldr	r0, [pc, #96]	; (800ab08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aaa8:	f000 fd09 	bl	800b4be <USBD_GetEpDesc>
 800aaac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aaae:	2101      	movs	r1, #1
 800aab0:	4815      	ldr	r0, [pc, #84]	; (800ab08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aab2:	f000 fd04 	bl	800b4be <USBD_GetEpDesc>
 800aab6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aab8:	2181      	movs	r1, #129	; 0x81
 800aaba:	4813      	ldr	r0, [pc, #76]	; (800ab08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aabc:	f000 fcff 	bl	800b4be <USBD_GetEpDesc>
 800aac0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2210      	movs	r2, #16
 800aacc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d006      	beq.n	800aae2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aadc:	711a      	strb	r2, [r3, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaf0:	711a      	strb	r2, [r3, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2243      	movs	r2, #67	; 0x43
 800aafa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aafc:	4b02      	ldr	r3, [pc, #8]	; (800ab08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200000bc 	.word	0x200000bc

0800ab0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab14:	2182      	movs	r1, #130	; 0x82
 800ab16:	4818      	ldr	r0, [pc, #96]	; (800ab78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab18:	f000 fcd1 	bl	800b4be <USBD_GetEpDesc>
 800ab1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab1e:	2101      	movs	r1, #1
 800ab20:	4815      	ldr	r0, [pc, #84]	; (800ab78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab22:	f000 fccc 	bl	800b4be <USBD_GetEpDesc>
 800ab26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab28:	2181      	movs	r1, #129	; 0x81
 800ab2a:	4813      	ldr	r0, [pc, #76]	; (800ab78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab2c:	f000 fcc7 	bl	800b4be <USBD_GetEpDesc>
 800ab30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2210      	movs	r2, #16
 800ab3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	2200      	movs	r2, #0
 800ab48:	711a      	strb	r2, [r3, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f042 0202 	orr.w	r2, r2, #2
 800ab50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d006      	beq.n	800ab66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	711a      	strb	r2, [r3, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f042 0202 	orr.w	r2, r2, #2
 800ab64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2243      	movs	r2, #67	; 0x43
 800ab6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab6c:	4b02      	ldr	r3, [pc, #8]	; (800ab78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	200000bc 	.word	0x200000bc

0800ab7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab84:	2182      	movs	r1, #130	; 0x82
 800ab86:	4818      	ldr	r0, [pc, #96]	; (800abe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab88:	f000 fc99 	bl	800b4be <USBD_GetEpDesc>
 800ab8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4815      	ldr	r0, [pc, #84]	; (800abe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab92:	f000 fc94 	bl	800b4be <USBD_GetEpDesc>
 800ab96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab98:	2181      	movs	r1, #129	; 0x81
 800ab9a:	4813      	ldr	r0, [pc, #76]	; (800abe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab9c:	f000 fc8f 	bl	800b4be <USBD_GetEpDesc>
 800aba0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2210      	movs	r2, #16
 800abac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abbc:	711a      	strb	r2, [r3, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abd0:	711a      	strb	r2, [r3, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2243      	movs	r2, #67	; 0x43
 800abda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	200000bc 	.word	0x200000bc

0800abec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	220a      	movs	r2, #10
 800abf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800abfa:	4b03      	ldr	r3, [pc, #12]	; (800ac08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	20000078 	.word	0x20000078

0800ac0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e009      	b.n	800ac34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	33b0      	adds	r3, #176	; 0xb0
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	32b0      	adds	r2, #176	; 0xb0
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e008      	b.n	800ac78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	32b0      	adds	r2, #176	; 0xb0
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e004      	b.n	800acb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
	...

0800acc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	32b0      	adds	r2, #176	; 0xb0
 800acd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32b0      	adds	r2, #176	; 0xb0
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800acea:	2303      	movs	r3, #3
 800acec:	e018      	b.n	800ad20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	7c1b      	ldrb	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10a      	bne.n	800ad0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acf6:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <USBD_CDC_ReceivePacket+0x68>)
 800acf8:	7819      	ldrb	r1, [r3, #0]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f004 fd5b 	bl	800f7c0 <USBD_LL_PrepareReceive>
 800ad0a:	e008      	b.n	800ad1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad0c:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <USBD_CDC_ReceivePacket+0x68>)
 800ad0e:	7819      	ldrb	r1, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad16:	2340      	movs	r3, #64	; 0x40
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f004 fd51 	bl	800f7c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000100 	.word	0x20000100

0800ad2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	4613      	mov	r3, r2
 800ad38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad40:	2303      	movs	r3, #3
 800ad42:	e01f      	b.n	800ad84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	79fa      	ldrb	r2, [r7, #7]
 800ad76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f004 fbcb 	bl	800f514 <USBD_LL_Init>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e025      	b.n	800adf0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	; 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00f      	beq.n	800ade0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	32ae      	adds	r2, #174	; 0xae
 800adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	f107 020e 	add.w	r2, r7, #14
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	4602      	mov	r2, r0
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f004 fbd3 	bl	800f5ac <USBD_LL_Start>
 800ae06:	4603      	mov	r3, r0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	78fa      	ldrb	r2, [r7, #3]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	4798      	blx	r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	78fa      	ldrb	r2, [r7, #3]
 800ae78:	4611      	mov	r1, r2
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	4798      	blx	r3
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ae84:	2303      	movs	r3, #3
 800ae86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 f908 	bl	800c0ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aeb8:	461a      	mov	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aec6:	f003 031f 	and.w	r3, r3, #31
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d01a      	beq.n	800af04 <USBD_LL_SetupStage+0x72>
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d822      	bhi.n	800af18 <USBD_LL_SetupStage+0x86>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <USBD_LL_SetupStage+0x4a>
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d00a      	beq.n	800aef0 <USBD_LL_SetupStage+0x5e>
 800aeda:	e01d      	b.n	800af18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fb5f 	bl	800b5a8 <USBD_StdDevReq>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]
      break;
 800aeee:	e020      	b.n	800af32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fbc7 	bl	800b68c <USBD_StdItfReq>
 800aefe:	4603      	mov	r3, r0
 800af00:	73fb      	strb	r3, [r7, #15]
      break;
 800af02:	e016      	b.n	800af32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fc29 	bl	800b764 <USBD_StdEPReq>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]
      break;
 800af16:	e00c      	b.n	800af32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af22:	b2db      	uxtb	r3, r3
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f004 fba0 	bl	800f66c <USBD_LL_StallEP>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]
      break;
 800af30:	bf00      	nop
  }

  return ret;
 800af32:	7bfb      	ldrb	r3, [r7, #15]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	460b      	mov	r3, r1
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800af4e:	7afb      	ldrb	r3, [r7, #11]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d16e      	bne.n	800b032 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af62:	2b03      	cmp	r3, #3
 800af64:	f040 8098 	bne.w	800b098 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	429a      	cmp	r2, r3
 800af72:	d913      	bls.n	800af9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	1ad2      	subs	r2, r2, r3
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	4293      	cmp	r3, r2
 800af8c:	bf28      	it	cs
 800af8e:	4613      	movcs	r3, r2
 800af90:	461a      	mov	r2, r3
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f001 f984 	bl	800c2a2 <USBD_CtlContinueRx>
 800af9a:	e07d      	b.n	800b098 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afa2:	f003 031f 	and.w	r3, r3, #31
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d014      	beq.n	800afd4 <USBD_LL_DataOutStage+0x98>
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d81d      	bhi.n	800afea <USBD_LL_DataOutStage+0xae>
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <USBD_LL_DataOutStage+0x7c>
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d003      	beq.n	800afbe <USBD_LL_DataOutStage+0x82>
 800afb6:	e018      	b.n	800afea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	75bb      	strb	r3, [r7, #22]
            break;
 800afbc:	e018      	b.n	800aff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	4619      	mov	r1, r3
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 fa5e 	bl	800b48a <USBD_CoreFindIF>
 800afce:	4603      	mov	r3, r0
 800afd0:	75bb      	strb	r3, [r7, #22]
            break;
 800afd2:	e00d      	b.n	800aff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	4619      	mov	r1, r3
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 fa60 	bl	800b4a4 <USBD_CoreFindEP>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75bb      	strb	r3, [r7, #22]
            break;
 800afe8:	e002      	b.n	800aff0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	75bb      	strb	r3, [r7, #22]
            break;
 800afee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aff0:	7dbb      	ldrb	r3, [r7, #22]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d119      	bne.n	800b02a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b03      	cmp	r3, #3
 800b000:	d113      	bne.n	800b02a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b002:	7dba      	ldrb	r2, [r7, #22]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	32ae      	adds	r2, #174	; 0xae
 800b008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00b      	beq.n	800b02a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b012:	7dba      	ldrb	r2, [r7, #22]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b01a:	7dba      	ldrb	r2, [r7, #22]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	32ae      	adds	r2, #174	; 0xae
 800b020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f001 f94a 	bl	800c2c4 <USBD_CtlSendStatus>
 800b030:	e032      	b.n	800b098 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b032:	7afb      	ldrb	r3, [r7, #11]
 800b034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	4619      	mov	r1, r3
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fa31 	bl	800b4a4 <USBD_CoreFindEP>
 800b042:	4603      	mov	r3, r0
 800b044:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b046:	7dbb      	ldrb	r3, [r7, #22]
 800b048:	2bff      	cmp	r3, #255	; 0xff
 800b04a:	d025      	beq.n	800b098 <USBD_LL_DataOutStage+0x15c>
 800b04c:	7dbb      	ldrb	r3, [r7, #22]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d122      	bne.n	800b098 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d117      	bne.n	800b08e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b05e:	7dba      	ldrb	r2, [r7, #22]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	32ae      	adds	r2, #174	; 0xae
 800b064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00f      	beq.n	800b08e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b06e:	7dba      	ldrb	r2, [r7, #22]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b076:	7dba      	ldrb	r2, [r7, #22]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	32ae      	adds	r2, #174	; 0xae
 800b07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	7afa      	ldrb	r2, [r7, #11]
 800b084:	4611      	mov	r1, r2
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	4798      	blx	r3
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	e000      	b.n	800b09a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b086      	sub	sp, #24
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b0b0:	7afb      	ldrb	r3, [r7, #11]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d16f      	bne.n	800b196 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d15a      	bne.n	800b17c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d914      	bls.n	800b0fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	1ad2      	subs	r2, r2, r3
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f001 f8ac 	bl	800c246 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f004 fb63 	bl	800f7c0 <USBD_LL_PrepareReceive>
 800b0fa:	e03f      	b.n	800b17c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	68da      	ldr	r2, [r3, #12]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	429a      	cmp	r2, r3
 800b106:	d11c      	bne.n	800b142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b110:	429a      	cmp	r2, r3
 800b112:	d316      	bcc.n	800b142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b11e:	429a      	cmp	r2, r3
 800b120:	d20f      	bcs.n	800b142 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b122:	2200      	movs	r2, #0
 800b124:	2100      	movs	r1, #0
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f001 f88d 	bl	800c246 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b134:	2300      	movs	r3, #0
 800b136:	2200      	movs	r2, #0
 800b138:	2100      	movs	r1, #0
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f004 fb40 	bl	800f7c0 <USBD_LL_PrepareReceive>
 800b140:	e01c      	b.n	800b17c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d10f      	bne.n	800b16e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d009      	beq.n	800b16e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b16e:	2180      	movs	r1, #128	; 0x80
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f004 fa7b 	bl	800f66c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f001 f8b7 	bl	800c2ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d03a      	beq.n	800b1fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff fe42 	bl	800ae10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b194:	e032      	b.n	800b1fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b196:	7afb      	ldrb	r3, [r7, #11]
 800b198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	4619      	mov	r1, r3
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 f97f 	bl	800b4a4 <USBD_CoreFindEP>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	2bff      	cmp	r3, #255	; 0xff
 800b1ae:	d025      	beq.n	800b1fc <USBD_LL_DataInStage+0x15a>
 800b1b0:	7dfb      	ldrb	r3, [r7, #23]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d122      	bne.n	800b1fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d11c      	bne.n	800b1fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b1c2:	7dfa      	ldrb	r2, [r7, #23]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	32ae      	adds	r2, #174	; 0xae
 800b1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d014      	beq.n	800b1fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b1d2:	7dfa      	ldrb	r2, [r7, #23]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b1da:	7dfa      	ldrb	r2, [r7, #23]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	32ae      	adds	r2, #174	; 0xae
 800b1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e4:	695b      	ldr	r3, [r3, #20]
 800b1e6:	7afa      	ldrb	r2, [r7, #11]
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	4798      	blx	r3
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b1f2:	7dbb      	ldrb	r3, [r7, #22]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b1f8:	7dbb      	ldrb	r3, [r7, #22]
 800b1fa:	e000      	b.n	800b1fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d014      	beq.n	800b26c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00e      	beq.n	800b26c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6852      	ldr	r2, [r2, #4]
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	4611      	mov	r1, r2
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	4798      	blx	r3
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b268:	2303      	movs	r3, #3
 800b26a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b26c:	2340      	movs	r3, #64	; 0x40
 800b26e:	2200      	movs	r2, #0
 800b270:	2100      	movs	r1, #0
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f004 f9b5 	bl	800f5e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2240      	movs	r2, #64	; 0x40
 800b284:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b288:	2340      	movs	r3, #64	; 0x40
 800b28a:	2200      	movs	r2, #0
 800b28c:	2180      	movs	r1, #128	; 0x80
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f004 f9a7 	bl	800f5e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2240      	movs	r2, #64	; 0x40
 800b29e:	621a      	str	r2, [r3, #32]

  return ret;
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b083      	sub	sp, #12
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2204      	movs	r2, #4
 800b2e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b04      	cmp	r3, #4
 800b308:	d106      	bne.n	800b318 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b310:	b2da      	uxtb	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b03      	cmp	r3, #3
 800b338:	d110      	bne.n	800b35c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	32ae      	adds	r2, #174	; 0xae
 800b37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	e01c      	b.n	800b3c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b03      	cmp	r3, #3
 800b392:	d115      	bne.n	800b3c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32ae      	adds	r2, #174	; 0xae
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	6a1b      	ldr	r3, [r3, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00b      	beq.n	800b3c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	32ae      	adds	r2, #174	; 0xae
 800b3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	78fa      	ldrb	r2, [r7, #3]
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32ae      	adds	r2, #174	; 0xae
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e01c      	b.n	800b426 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d115      	bne.n	800b424 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	32ae      	adds	r2, #174	; 0xae
 800b402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00b      	beq.n	800b424 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	32ae      	adds	r2, #174	; 0xae
 800b416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41c:	78fa      	ldrb	r2, [r7, #3]
 800b41e:	4611      	mov	r1, r2
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00e      	beq.n	800b480 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6852      	ldr	r2, [r2, #4]
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	4611      	mov	r1, r2
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b47c:	2303      	movs	r3, #3
 800b47e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b496:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b086      	sub	sp, #24
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	885b      	ldrh	r3, [r3, #2]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d920      	bls.n	800b528 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b4ee:	e013      	b.n	800b518 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b4f0:	f107 030a 	add.w	r3, r7, #10
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6978      	ldr	r0, [r7, #20]
 800b4f8:	f000 f81b 	bl	800b532 <USBD_GetNextDesc>
 800b4fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	785b      	ldrb	r3, [r3, #1]
 800b502:	2b05      	cmp	r3, #5
 800b504:	d108      	bne.n	800b518 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	789b      	ldrb	r3, [r3, #2]
 800b50e:	78fa      	ldrb	r2, [r7, #3]
 800b510:	429a      	cmp	r2, r3
 800b512:	d008      	beq.n	800b526 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b514:	2300      	movs	r3, #0
 800b516:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	885b      	ldrh	r3, [r3, #2]
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	897b      	ldrh	r3, [r7, #10]
 800b520:	429a      	cmp	r2, r3
 800b522:	d8e5      	bhi.n	800b4f0 <USBD_GetEpDesc+0x32>
 800b524:	e000      	b.n	800b528 <USBD_GetEpDesc+0x6a>
          break;
 800b526:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b528:	693b      	ldr	r3, [r7, #16]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b532:	b480      	push	{r7}
 800b534:	b085      	sub	sp, #20
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	881a      	ldrh	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	4413      	add	r3, r2
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4413      	add	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b55e:	68fb      	ldr	r3, [r7, #12]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	3301      	adds	r3, #1
 800b582:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b58a:	8a3b      	ldrh	r3, [r7, #16]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	b21a      	sxth	r2, r3
 800b590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b594:	4313      	orrs	r3, r2
 800b596:	b21b      	sxth	r3, r3
 800b598:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b59a:	89fb      	ldrh	r3, [r7, #14]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	371c      	adds	r7, #28
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5be:	2b40      	cmp	r3, #64	; 0x40
 800b5c0:	d005      	beq.n	800b5ce <USBD_StdDevReq+0x26>
 800b5c2:	2b40      	cmp	r3, #64	; 0x40
 800b5c4:	d857      	bhi.n	800b676 <USBD_StdDevReq+0xce>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00f      	beq.n	800b5ea <USBD_StdDevReq+0x42>
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d153      	bne.n	800b676 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	32ae      	adds	r2, #174	; 0xae
 800b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e8:	e04a      	b.n	800b680 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d83b      	bhi.n	800b66a <USBD_StdDevReq+0xc2>
 800b5f2:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <USBD_StdDevReq+0x50>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b64d 	.word	0x0800b64d
 800b5fc:	0800b661 	.word	0x0800b661
 800b600:	0800b66b 	.word	0x0800b66b
 800b604:	0800b657 	.word	0x0800b657
 800b608:	0800b66b 	.word	0x0800b66b
 800b60c:	0800b62b 	.word	0x0800b62b
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b66b 	.word	0x0800b66b
 800b618:	0800b643 	.word	0x0800b643
 800b61c:	0800b635 	.word	0x0800b635
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fa3c 	bl	800baa0 <USBD_GetDescriptor>
          break;
 800b628:	e024      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fba1 	bl	800bd74 <USBD_SetAddress>
          break;
 800b632:	e01f      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fbe0 	bl	800bdfc <USBD_SetConfig>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
          break;
 800b640:	e018      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fc83 	bl	800bf50 <USBD_GetConfig>
          break;
 800b64a:	e013      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fcb4 	bl	800bfbc <USBD_GetStatus>
          break;
 800b654:	e00e      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fce3 	bl	800c024 <USBD_SetFeature>
          break;
 800b65e:	e009      	b.n	800b674 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fd07 	bl	800c076 <USBD_ClrFeature>
          break;
 800b668:	e004      	b.n	800b674 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fd5e 	bl	800c12e <USBD_CtlError>
          break;
 800b672:	bf00      	nop
      }
      break;
 800b674:	e004      	b.n	800b680 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fd58 	bl	800c12e <USBD_CtlError>
      break;
 800b67e:	bf00      	nop
  }

  return ret;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop

0800b68c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6a2:	2b40      	cmp	r3, #64	; 0x40
 800b6a4:	d005      	beq.n	800b6b2 <USBD_StdItfReq+0x26>
 800b6a6:	2b40      	cmp	r3, #64	; 0x40
 800b6a8:	d852      	bhi.n	800b750 <USBD_StdItfReq+0xc4>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <USBD_StdItfReq+0x26>
 800b6ae:	2b20      	cmp	r3, #32
 800b6b0:	d14e      	bne.n	800b750 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d840      	bhi.n	800b742 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	889b      	ldrh	r3, [r3, #4]
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d836      	bhi.n	800b738 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	889b      	ldrh	r3, [r3, #4]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fed9 	bl	800b48a <USBD_CoreFindIF>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
 800b6de:	2bff      	cmp	r3, #255	; 0xff
 800b6e0:	d01d      	beq.n	800b71e <USBD_StdItfReq+0x92>
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d11a      	bne.n	800b71e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b6e8:	7bba      	ldrb	r2, [r7, #14]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	32ae      	adds	r2, #174	; 0xae
 800b6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00f      	beq.n	800b718 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b6f8:	7bba      	ldrb	r2, [r7, #14]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b700:	7bba      	ldrb	r2, [r7, #14]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	32ae      	adds	r2, #174	; 0xae
 800b706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	4798      	blx	r3
 800b712:	4603      	mov	r3, r0
 800b714:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b716:	e004      	b.n	800b722 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b71c:	e001      	b.n	800b722 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b71e:	2303      	movs	r3, #3
 800b720:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	88db      	ldrh	r3, [r3, #6]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d110      	bne.n	800b74c <USBD_StdItfReq+0xc0>
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10d      	bne.n	800b74c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fdc7 	bl	800c2c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b736:	e009      	b.n	800b74c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fcf7 	bl	800c12e <USBD_CtlError>
          break;
 800b740:	e004      	b.n	800b74c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fcf2 	bl	800c12e <USBD_CtlError>
          break;
 800b74a:	e000      	b.n	800b74e <USBD_StdItfReq+0xc2>
          break;
 800b74c:	bf00      	nop
      }
      break;
 800b74e:	e004      	b.n	800b75a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fceb 	bl	800c12e <USBD_CtlError>
      break;
 800b758:	bf00      	nop
  }

  return ret;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	889b      	ldrh	r3, [r3, #4]
 800b776:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b780:	2b40      	cmp	r3, #64	; 0x40
 800b782:	d007      	beq.n	800b794 <USBD_StdEPReq+0x30>
 800b784:	2b40      	cmp	r3, #64	; 0x40
 800b786:	f200 817f 	bhi.w	800ba88 <USBD_StdEPReq+0x324>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d02a      	beq.n	800b7e4 <USBD_StdEPReq+0x80>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	f040 817a 	bne.w	800ba88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff fe83 	bl	800b4a4 <USBD_CoreFindEP>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7a2:	7b7b      	ldrb	r3, [r7, #13]
 800b7a4:	2bff      	cmp	r3, #255	; 0xff
 800b7a6:	f000 8174 	beq.w	800ba92 <USBD_StdEPReq+0x32e>
 800b7aa:	7b7b      	ldrb	r3, [r7, #13]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f040 8170 	bne.w	800ba92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b7b2:	7b7a      	ldrb	r2, [r7, #13]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b7ba:	7b7a      	ldrb	r2, [r7, #13]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	32ae      	adds	r2, #174	; 0xae
 800b7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8163 	beq.w	800ba92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7cc:	7b7a      	ldrb	r2, [r7, #13]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	32ae      	adds	r2, #174	; 0xae
 800b7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7e2:	e156      	b.n	800ba92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	785b      	ldrb	r3, [r3, #1]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d008      	beq.n	800b7fe <USBD_StdEPReq+0x9a>
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	f300 8145 	bgt.w	800ba7c <USBD_StdEPReq+0x318>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 809b 	beq.w	800b92e <USBD_StdEPReq+0x1ca>
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d03c      	beq.n	800b876 <USBD_StdEPReq+0x112>
 800b7fc:	e13e      	b.n	800ba7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b02      	cmp	r3, #2
 800b808:	d002      	beq.n	800b810 <USBD_StdEPReq+0xac>
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d016      	beq.n	800b83c <USBD_StdEPReq+0xd8>
 800b80e:	e02c      	b.n	800b86a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b810:	7bbb      	ldrb	r3, [r7, #14]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00d      	beq.n	800b832 <USBD_StdEPReq+0xce>
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b80      	cmp	r3, #128	; 0x80
 800b81a:	d00a      	beq.n	800b832 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f003 ff23 	bl	800f66c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b826:	2180      	movs	r1, #128	; 0x80
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f003 ff1f 	bl	800f66c <USBD_LL_StallEP>
 800b82e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b830:	e020      	b.n	800b874 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fc7a 	bl	800c12e <USBD_CtlError>
              break;
 800b83a:	e01b      	b.n	800b874 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	885b      	ldrh	r3, [r3, #2]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10e      	bne.n	800b862 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b844:	7bbb      	ldrb	r3, [r7, #14]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <USBD_StdEPReq+0xfe>
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b80      	cmp	r3, #128	; 0x80
 800b84e:	d008      	beq.n	800b862 <USBD_StdEPReq+0xfe>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	88db      	ldrh	r3, [r3, #6]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f003 ff05 	bl	800f66c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fd2e 	bl	800c2c4 <USBD_CtlSendStatus>

              break;
 800b868:	e004      	b.n	800b874 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fc5e 	bl	800c12e <USBD_CtlError>
              break;
 800b872:	bf00      	nop
          }
          break;
 800b874:	e107      	b.n	800ba86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d002      	beq.n	800b888 <USBD_StdEPReq+0x124>
 800b882:	2b03      	cmp	r3, #3
 800b884:	d016      	beq.n	800b8b4 <USBD_StdEPReq+0x150>
 800b886:	e04b      	b.n	800b920 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00d      	beq.n	800b8aa <USBD_StdEPReq+0x146>
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	2b80      	cmp	r3, #128	; 0x80
 800b892:	d00a      	beq.n	800b8aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f003 fee7 	bl	800f66c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b89e:	2180      	movs	r1, #128	; 0x80
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f003 fee3 	bl	800f66c <USBD_LL_StallEP>
 800b8a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8a8:	e040      	b.n	800b92c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fc3e 	bl	800c12e <USBD_CtlError>
              break;
 800b8b2:	e03b      	b.n	800b92c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	885b      	ldrh	r3, [r3, #2]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d136      	bne.n	800b92a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d004      	beq.n	800b8d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f003 feed 	bl	800f6aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fcf7 	bl	800c2c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fde2 	bl	800b4a4 <USBD_CoreFindEP>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e4:	7b7b      	ldrb	r3, [r7, #13]
 800b8e6:	2bff      	cmp	r3, #255	; 0xff
 800b8e8:	d01f      	beq.n	800b92a <USBD_StdEPReq+0x1c6>
 800b8ea:	7b7b      	ldrb	r3, [r7, #13]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d11c      	bne.n	800b92a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b8f0:	7b7a      	ldrb	r2, [r7, #13]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b8f8:	7b7a      	ldrb	r2, [r7, #13]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	32ae      	adds	r2, #174	; 0xae
 800b8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d010      	beq.n	800b92a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b908:	7b7a      	ldrb	r2, [r7, #13]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	32ae      	adds	r2, #174	; 0xae
 800b90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4798      	blx	r3
 800b91a:	4603      	mov	r3, r0
 800b91c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b91e:	e004      	b.n	800b92a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fc03 	bl	800c12e <USBD_CtlError>
              break;
 800b928:	e000      	b.n	800b92c <USBD_StdEPReq+0x1c8>
              break;
 800b92a:	bf00      	nop
          }
          break;
 800b92c:	e0ab      	b.n	800ba86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b02      	cmp	r3, #2
 800b938:	d002      	beq.n	800b940 <USBD_StdEPReq+0x1dc>
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d032      	beq.n	800b9a4 <USBD_StdEPReq+0x240>
 800b93e:	e097      	b.n	800ba70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <USBD_StdEPReq+0x1f2>
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	2b80      	cmp	r3, #128	; 0x80
 800b94a:	d004      	beq.n	800b956 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fbed 	bl	800c12e <USBD_CtlError>
                break;
 800b954:	e091      	b.n	800ba7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	da0b      	bge.n	800b976 <USBD_StdEPReq+0x212>
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
 800b960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	3310      	adds	r3, #16
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	4413      	add	r3, r2
 800b972:	3304      	adds	r3, #4
 800b974:	e00b      	b.n	800b98e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	4413      	add	r3, r2
 800b98c:	3304      	adds	r3, #4
 800b98e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2202      	movs	r2, #2
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fc37 	bl	800c210 <USBD_CtlSendData>
              break;
 800b9a2:	e06a      	b.n	800ba7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	da11      	bge.n	800b9d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	f003 020f 	and.w	r2, r3, #15
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	440b      	add	r3, r1
 800b9be:	3324      	adds	r3, #36	; 0x24
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d117      	bne.n	800b9f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fbb0 	bl	800c12e <USBD_CtlError>
                  break;
 800b9ce:	e054      	b.n	800ba7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9d0:	7bbb      	ldrb	r3, [r7, #14]
 800b9d2:	f003 020f 	and.w	r2, r3, #15
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	440b      	add	r3, r1
 800b9e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d104      	bne.n	800b9f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fb9d 	bl	800c12e <USBD_CtlError>
                  break;
 800b9f4:	e041      	b.n	800ba7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da0b      	bge.n	800ba16 <USBD_StdEPReq+0x2b2>
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	4413      	add	r3, r2
 800ba12:	3304      	adds	r3, #4
 800ba14:	e00b      	b.n	800ba2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <USBD_StdEPReq+0x2d8>
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b80      	cmp	r3, #128	; 0x80
 800ba3a:	d103      	bne.n	800ba44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	e00e      	b.n	800ba62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f003 fe4d 	bl	800f6e8 <USBD_LL_IsStallEP>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	e002      	b.n	800ba62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2202      	movs	r2, #2
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fbd1 	bl	800c210 <USBD_CtlSendData>
              break;
 800ba6e:	e004      	b.n	800ba7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fb5b 	bl	800c12e <USBD_CtlError>
              break;
 800ba78:	bf00      	nop
          }
          break;
 800ba7a:	e004      	b.n	800ba86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fb55 	bl	800c12e <USBD_CtlError>
          break;
 800ba84:	bf00      	nop
      }
      break;
 800ba86:	e005      	b.n	800ba94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fb4f 	bl	800c12e <USBD_CtlError>
      break;
 800ba90:	e000      	b.n	800ba94 <USBD_StdEPReq+0x330>
      break;
 800ba92:	bf00      	nop
  }

  return ret;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	885b      	ldrh	r3, [r3, #2]
 800baba:	0a1b      	lsrs	r3, r3, #8
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	2b06      	cmp	r3, #6
 800bac2:	f200 8128 	bhi.w	800bd16 <USBD_GetDescriptor+0x276>
 800bac6:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <USBD_GetDescriptor+0x2c>)
 800bac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bacc:	0800bae9 	.word	0x0800bae9
 800bad0:	0800bb01 	.word	0x0800bb01
 800bad4:	0800bb41 	.word	0x0800bb41
 800bad8:	0800bd17 	.word	0x0800bd17
 800badc:	0800bd17 	.word	0x0800bd17
 800bae0:	0800bcb7 	.word	0x0800bcb7
 800bae4:	0800bce3 	.word	0x0800bce3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	7c12      	ldrb	r2, [r2, #16]
 800baf4:	f107 0108 	add.w	r1, r7, #8
 800baf8:	4610      	mov	r0, r2
 800bafa:	4798      	blx	r3
 800bafc:	60f8      	str	r0, [r7, #12]
      break;
 800bafe:	e112      	b.n	800bd26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7c1b      	ldrb	r3, [r3, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10d      	bne.n	800bb24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb10:	f107 0208 	add.w	r2, r7, #8
 800bb14:	4610      	mov	r0, r2
 800bb16:	4798      	blx	r3
 800bb18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	2202      	movs	r2, #2
 800bb20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb22:	e100      	b.n	800bd26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	f107 0208 	add.w	r2, r7, #8
 800bb30:	4610      	mov	r0, r2
 800bb32:	4798      	blx	r3
 800bb34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	701a      	strb	r2, [r3, #0]
      break;
 800bb3e:	e0f2      	b.n	800bd26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	885b      	ldrh	r3, [r3, #2]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b05      	cmp	r3, #5
 800bb48:	f200 80ac 	bhi.w	800bca4 <USBD_GetDescriptor+0x204>
 800bb4c:	a201      	add	r2, pc, #4	; (adr r2, 800bb54 <USBD_GetDescriptor+0xb4>)
 800bb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb52:	bf00      	nop
 800bb54:	0800bb6d 	.word	0x0800bb6d
 800bb58:	0800bba1 	.word	0x0800bba1
 800bb5c:	0800bbd5 	.word	0x0800bbd5
 800bb60:	0800bc09 	.word	0x0800bc09
 800bb64:	0800bc3d 	.word	0x0800bc3d
 800bb68:	0800bc71 	.word	0x0800bc71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	7c12      	ldrb	r2, [r2, #16]
 800bb84:	f107 0108 	add.w	r1, r7, #8
 800bb88:	4610      	mov	r0, r2
 800bb8a:	4798      	blx	r3
 800bb8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb8e:	e091      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 facb 	bl	800c12e <USBD_CtlError>
            err++;
 800bb98:	7afb      	ldrb	r3, [r7, #11]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb9e:	e089      	b.n	800bcb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	7c12      	ldrb	r2, [r2, #16]
 800bbb8:	f107 0108 	add.w	r1, r7, #8
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4798      	blx	r3
 800bbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbc2:	e077      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fab1 	bl	800c12e <USBD_CtlError>
            err++;
 800bbcc:	7afb      	ldrb	r3, [r7, #11]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bbd2:	e06f      	b.n	800bcb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	7c12      	ldrb	r2, [r2, #16]
 800bbec:	f107 0108 	add.w	r1, r7, #8
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf6:	e05d      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fa97 	bl	800c12e <USBD_CtlError>
            err++;
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	3301      	adds	r3, #1
 800bc04:	72fb      	strb	r3, [r7, #11]
          break;
 800bc06:	e055      	b.n	800bcb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	7c12      	ldrb	r2, [r2, #16]
 800bc20:	f107 0108 	add.w	r1, r7, #8
 800bc24:	4610      	mov	r0, r2
 800bc26:	4798      	blx	r3
 800bc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2a:	e043      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fa7d 	bl	800c12e <USBD_CtlError>
            err++;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	3301      	adds	r3, #1
 800bc38:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3a:	e03b      	b.n	800bcb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7c12      	ldrb	r2, [r2, #16]
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc5e:	e029      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa63 	bl	800c12e <USBD_CtlError>
            err++;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc6e:	e021      	b.n	800bcb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7c12      	ldrb	r2, [r2, #16]
 800bc88:	f107 0108 	add.w	r1, r7, #8
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4798      	blx	r3
 800bc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc92:	e00f      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa49 	bl	800c12e <USBD_CtlError>
            err++;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	72fb      	strb	r3, [r7, #11]
          break;
 800bca2:	e007      	b.n	800bcb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa41 	bl	800c12e <USBD_CtlError>
          err++;
 800bcac:	7afb      	ldrb	r3, [r7, #11]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bcb2:	bf00      	nop
      }
      break;
 800bcb4:	e037      	b.n	800bd26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7c1b      	ldrb	r3, [r3, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d109      	bne.n	800bcd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc6:	f107 0208 	add.w	r2, r7, #8
 800bcca:	4610      	mov	r0, r2
 800bccc:	4798      	blx	r3
 800bcce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcd0:	e029      	b.n	800bd26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fa2a 	bl	800c12e <USBD_CtlError>
        err++;
 800bcda:	7afb      	ldrb	r3, [r7, #11]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	72fb      	strb	r3, [r7, #11]
      break;
 800bce0:	e021      	b.n	800bd26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7c1b      	ldrb	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10d      	bne.n	800bd06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf2:	f107 0208 	add.w	r2, r7, #8
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	4798      	blx	r3
 800bcfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	2207      	movs	r2, #7
 800bd02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd04:	e00f      	b.n	800bd26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa10 	bl	800c12e <USBD_CtlError>
        err++;
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	3301      	adds	r3, #1
 800bd12:	72fb      	strb	r3, [r7, #11]
      break;
 800bd14:	e007      	b.n	800bd26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fa08 	bl	800c12e <USBD_CtlError>
      err++;
 800bd1e:	7afb      	ldrb	r3, [r7, #11]
 800bd20:	3301      	adds	r3, #1
 800bd22:	72fb      	strb	r3, [r7, #11]
      break;
 800bd24:	bf00      	nop
  }

  if (err != 0U)
 800bd26:	7afb      	ldrb	r3, [r7, #11]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d11e      	bne.n	800bd6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	88db      	ldrh	r3, [r3, #6]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d016      	beq.n	800bd62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bd34:	893b      	ldrh	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	88da      	ldrh	r2, [r3, #6]
 800bd3e:	893b      	ldrh	r3, [r7, #8]
 800bd40:	4293      	cmp	r3, r2
 800bd42:	bf28      	it	cs
 800bd44:	4613      	movcs	r3, r2
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd4a:	893b      	ldrh	r3, [r7, #8]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	68f9      	ldr	r1, [r7, #12]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fa5d 	bl	800c210 <USBD_CtlSendData>
 800bd56:	e009      	b.n	800bd6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f9e7 	bl	800c12e <USBD_CtlError>
 800bd60:	e004      	b.n	800bd6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 faae 	bl	800c2c4 <USBD_CtlSendStatus>
 800bd68:	e000      	b.n	800bd6c <USBD_GetDescriptor+0x2cc>
    return;
 800bd6a:	bf00      	nop
  }
}
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop

0800bd74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	889b      	ldrh	r3, [r3, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d131      	bne.n	800bdea <USBD_SetAddress+0x76>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	88db      	ldrh	r3, [r3, #6]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d12d      	bne.n	800bdea <USBD_SetAddress+0x76>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	885b      	ldrh	r3, [r3, #2]
 800bd92:	2b7f      	cmp	r3, #127	; 0x7f
 800bd94:	d829      	bhi.n	800bdea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	885b      	ldrh	r3, [r3, #2]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d104      	bne.n	800bdb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f9bc 	bl	800c12e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdb6:	e01d      	b.n	800bdf4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7bfa      	ldrb	r2, [r7, #15]
 800bdbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f003 fcbb 	bl	800f740 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa7a 	bl	800c2c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d004      	beq.n	800bde0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2202      	movs	r2, #2
 800bdda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdde:	e009      	b.n	800bdf4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde8:	e004      	b.n	800bdf4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f99e 	bl	800c12e <USBD_CtlError>
  }
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	885b      	ldrh	r3, [r3, #2]
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	4b4e      	ldr	r3, [pc, #312]	; (800bf4c <USBD_SetConfig+0x150>)
 800be12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be14:	4b4d      	ldr	r3, [pc, #308]	; (800bf4c <USBD_SetConfig+0x150>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d905      	bls.n	800be28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f985 	bl	800c12e <USBD_CtlError>
    return USBD_FAIL;
 800be24:	2303      	movs	r3, #3
 800be26:	e08c      	b.n	800bf42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b02      	cmp	r3, #2
 800be32:	d002      	beq.n	800be3a <USBD_SetConfig+0x3e>
 800be34:	2b03      	cmp	r3, #3
 800be36:	d029      	beq.n	800be8c <USBD_SetConfig+0x90>
 800be38:	e075      	b.n	800bf26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be3a:	4b44      	ldr	r3, [pc, #272]	; (800bf4c <USBD_SetConfig+0x150>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d020      	beq.n	800be84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800be42:	4b42      	ldr	r3, [pc, #264]	; (800bf4c <USBD_SetConfig+0x150>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	461a      	mov	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be4c:	4b3f      	ldr	r3, [pc, #252]	; (800bf4c <USBD_SetConfig+0x150>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7fe ffe7 	bl	800ae26 <USBD_SetClassConfig>
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f962 	bl	800c12e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2202      	movs	r2, #2
 800be6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be72:	e065      	b.n	800bf40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fa25 	bl	800c2c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2203      	movs	r2, #3
 800be7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be82:	e05d      	b.n	800bf40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fa1d 	bl	800c2c4 <USBD_CtlSendStatus>
      break;
 800be8a:	e059      	b.n	800bf40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800be8c:	4b2f      	ldr	r3, [pc, #188]	; (800bf4c <USBD_SetConfig+0x150>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d112      	bne.n	800beba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2202      	movs	r2, #2
 800be98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800be9c:	4b2b      	ldr	r3, [pc, #172]	; (800bf4c <USBD_SetConfig+0x150>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bea6:	4b29      	ldr	r3, [pc, #164]	; (800bf4c <USBD_SetConfig+0x150>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7fe ffd6 	bl	800ae5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fa06 	bl	800c2c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800beb8:	e042      	b.n	800bf40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800beba:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <USBD_SetConfig+0x150>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d02a      	beq.n	800bf1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7fe ffc4 	bl	800ae5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bed6:	4b1d      	ldr	r3, [pc, #116]	; (800bf4c <USBD_SetConfig+0x150>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bee0:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <USBD_SetConfig+0x150>)
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	4619      	mov	r1, r3
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7fe ff9d 	bl	800ae26 <USBD_SetClassConfig>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00f      	beq.n	800bf16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f918 	bl	800c12e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7fe ffa9 	bl	800ae5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf14:	e014      	b.n	800bf40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f9d4 	bl	800c2c4 <USBD_CtlSendStatus>
      break;
 800bf1c:	e010      	b.n	800bf40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f9d0 	bl	800c2c4 <USBD_CtlSendStatus>
      break;
 800bf24:	e00c      	b.n	800bf40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f900 	bl	800c12e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf2e:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <USBD_SetConfig+0x150>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7fe ff92 	bl	800ae5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf3e:	bf00      	nop
  }

  return ret;
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200003d0 	.word	0x200003d0

0800bf50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	88db      	ldrh	r3, [r3, #6]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d004      	beq.n	800bf6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f8e2 	bl	800c12e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf6a:	e023      	b.n	800bfb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	dc02      	bgt.n	800bf7e <USBD_GetConfig+0x2e>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dc03      	bgt.n	800bf84 <USBD_GetConfig+0x34>
 800bf7c:	e015      	b.n	800bfaa <USBD_GetConfig+0x5a>
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d00b      	beq.n	800bf9a <USBD_GetConfig+0x4a>
 800bf82:	e012      	b.n	800bfaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	2201      	movs	r2, #1
 800bf90:	4619      	mov	r1, r3
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f93c 	bl	800c210 <USBD_CtlSendData>
        break;
 800bf98:	e00c      	b.n	800bfb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f934 	bl	800c210 <USBD_CtlSendData>
        break;
 800bfa8:	e004      	b.n	800bfb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f8be 	bl	800c12e <USBD_CtlError>
        break;
 800bfb2:	bf00      	nop
}
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d81e      	bhi.n	800c012 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	88db      	ldrh	r3, [r3, #6]
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d004      	beq.n	800bfe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f8a5 	bl	800c12e <USBD_CtlError>
        break;
 800bfe4:	e01a      	b.n	800c01c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d005      	beq.n	800c002 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	f043 0202 	orr.w	r2, r3, #2
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	330c      	adds	r3, #12
 800c006:	2202      	movs	r2, #2
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f900 	bl	800c210 <USBD_CtlSendData>
      break;
 800c010:	e004      	b.n	800c01c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f88a 	bl	800c12e <USBD_CtlError>
      break;
 800c01a:	bf00      	nop
  }
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	885b      	ldrh	r3, [r3, #2]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d107      	bne.n	800c046 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f940 	bl	800c2c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c044:	e013      	b.n	800c06e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	885b      	ldrh	r3, [r3, #2]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d10b      	bne.n	800c066 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	889b      	ldrh	r3, [r3, #4]
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	b29b      	uxth	r3, r3
 800c056:	b2da      	uxtb	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f930 	bl	800c2c4 <USBD_CtlSendStatus>
}
 800c064:	e003      	b.n	800c06e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f860 	bl	800c12e <USBD_CtlError>
}
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c086:	b2db      	uxtb	r3, r3
 800c088:	3b01      	subs	r3, #1
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d80b      	bhi.n	800c0a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	885b      	ldrh	r3, [r3, #2]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d10c      	bne.n	800c0b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f910 	bl	800c2c4 <USBD_CtlSendStatus>
      }
      break;
 800c0a4:	e004      	b.n	800c0b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f840 	bl	800c12e <USBD_CtlError>
      break;
 800c0ae:	e000      	b.n	800c0b2 <USBD_ClrFeature+0x3c>
      break;
 800c0b0:	bf00      	nop
  }
}
 800c0b2:	bf00      	nop
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	781a      	ldrb	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	781a      	ldrb	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f7ff fa41 	bl	800b56c <SWAPBYTE>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f7ff fa34 	bl	800b56c <SWAPBYTE>
 800c104:	4603      	mov	r3, r0
 800c106:	461a      	mov	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3301      	adds	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff fa27 	bl	800b56c <SWAPBYTE>
 800c11e:	4603      	mov	r3, r0
 800c120:	461a      	mov	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	80da      	strh	r2, [r3, #6]
}
 800c126:	bf00      	nop
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c138:	2180      	movs	r1, #128	; 0x80
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f003 fa96 	bl	800f66c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c140:	2100      	movs	r1, #0
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f003 fa92 	bl	800f66c <USBD_LL_StallEP>
}
 800c148:	bf00      	nop
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d036      	beq.n	800c1d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c16a:	6938      	ldr	r0, [r7, #16]
 800c16c:	f000 f836 	bl	800c1dc <USBD_GetLen>
 800c170:	4603      	mov	r3, r0
 800c172:	3301      	adds	r3, #1
 800c174:	b29b      	uxth	r3, r3
 800c176:	005b      	lsls	r3, r3, #1
 800c178:	b29a      	uxth	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	4413      	add	r3, r2
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	7812      	ldrb	r2, [r2, #0]
 800c188:	701a      	strb	r2, [r3, #0]
  idx++;
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
 800c18c:	3301      	adds	r3, #1
 800c18e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	4413      	add	r3, r2
 800c196:	2203      	movs	r2, #3
 800c198:	701a      	strb	r2, [r3, #0]
  idx++;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	3301      	adds	r3, #1
 800c19e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1a0:	e013      	b.n	800c1ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1a2:	7dfb      	ldrb	r3, [r7, #23]
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	7812      	ldrb	r2, [r2, #0]
 800c1ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	613b      	str	r3, [r7, #16]
    idx++;
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	4413      	add	r3, r2
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1e7      	bne.n	800c1a2 <USBD_GetString+0x52>
 800c1d2:	e000      	b.n	800c1d6 <USBD_GetString+0x86>
    return;
 800c1d4:	bf00      	nop
  }
}
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c1ec:	e005      	b.n	800c1fa <USBD_GetLen+0x1e>
  {
    len++;
 800c1ee:	7bfb      	ldrb	r3, [r7, #15]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1f5      	bne.n	800c1ee <USBD_GetLen+0x12>
  }

  return len;
 800c202:	7bfb      	ldrb	r3, [r7, #15]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2202      	movs	r2, #2
 800c220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	2100      	movs	r1, #0
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f003 faa1 	bl	800f77e <USBD_LL_Transmit>

  return USBD_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	2100      	movs	r1, #0
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f003 fa90 	bl	800f77e <USBD_LL_Transmit>

  return USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2203      	movs	r2, #3
 800c278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	2100      	movs	r1, #0
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f003 fa94 	bl	800f7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	60f8      	str	r0, [r7, #12]
 800c2aa:	60b9      	str	r1, [r7, #8]
 800c2ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f003 fa83 	bl	800f7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2100      	movs	r1, #0
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f003 fa4f 	bl	800f77e <USBD_LL_Transmit>

  return USBD_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2205      	movs	r2, #5
 800c2f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2100      	movs	r1, #0
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f003 fa5d 	bl	800f7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <__NVIC_SetPriority>:
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c320:	2b00      	cmp	r3, #0
 800c322:	db0a      	blt.n	800c33a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	b2da      	uxtb	r2, r3
 800c328:	490c      	ldr	r1, [pc, #48]	; (800c35c <__NVIC_SetPriority+0x4c>)
 800c32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c32e:	0112      	lsls	r2, r2, #4
 800c330:	b2d2      	uxtb	r2, r2
 800c332:	440b      	add	r3, r1
 800c334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c338:	e00a      	b.n	800c350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4908      	ldr	r1, [pc, #32]	; (800c360 <__NVIC_SetPriority+0x50>)
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	3b04      	subs	r3, #4
 800c348:	0112      	lsls	r2, r2, #4
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	440b      	add	r3, r1
 800c34e:	761a      	strb	r2, [r3, #24]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	e000e100 	.word	0xe000e100
 800c360:	e000ed00 	.word	0xe000ed00

0800c364 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c368:	4b05      	ldr	r3, [pc, #20]	; (800c380 <SysTick_Handler+0x1c>)
 800c36a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c36c:	f001 fd4c 	bl	800de08 <xTaskGetSchedulerState>
 800c370:	4603      	mov	r3, r0
 800c372:	2b01      	cmp	r3, #1
 800c374:	d001      	beq.n	800c37a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c376:	f002 fb37 	bl	800e9e8 <xPortSysTickHandler>
  }
}
 800c37a:	bf00      	nop
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	e000e010 	.word	0xe000e010

0800c384 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c388:	2100      	movs	r1, #0
 800c38a:	f06f 0004 	mvn.w	r0, #4
 800c38e:	f7ff ffbf 	bl	800c310 <__NVIC_SetPriority>
#endif
}
 800c392:	bf00      	nop
 800c394:	bd80      	pop	{r7, pc}
	...

0800c398 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c39e:	f3ef 8305 	mrs	r3, IPSR
 800c3a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c3a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3aa:	f06f 0305 	mvn.w	r3, #5
 800c3ae:	607b      	str	r3, [r7, #4]
 800c3b0:	e00c      	b.n	800c3cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c3b2:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <osKernelInitialize+0x44>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3ba:	4b08      	ldr	r3, [pc, #32]	; (800c3dc <osKernelInitialize+0x44>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	607b      	str	r3, [r7, #4]
 800c3c4:	e002      	b.n	800c3cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3cc:	687b      	ldr	r3, [r7, #4]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	200003d4 	.word	0x200003d4

0800c3e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3e6:	f3ef 8305 	mrs	r3, IPSR
 800c3ea:	603b      	str	r3, [r7, #0]
  return(result);
 800c3ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800c3f2:	f06f 0305 	mvn.w	r3, #5
 800c3f6:	607b      	str	r3, [r7, #4]
 800c3f8:	e010      	b.n	800c41c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c3fa:	4b0b      	ldr	r3, [pc, #44]	; (800c428 <osKernelStart+0x48>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d109      	bne.n	800c416 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c402:	f7ff ffbf 	bl	800c384 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c406:	4b08      	ldr	r3, [pc, #32]	; (800c428 <osKernelStart+0x48>)
 800c408:	2202      	movs	r2, #2
 800c40a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c40c:	f001 f880 	bl	800d510 <vTaskStartScheduler>
      stat = osOK;
 800c410:	2300      	movs	r3, #0
 800c412:	607b      	str	r3, [r7, #4]
 800c414:	e002      	b.n	800c41c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c416:	f04f 33ff 	mov.w	r3, #4294967295
 800c41a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c41c:	687b      	ldr	r3, [r7, #4]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	200003d4 	.word	0x200003d4

0800c42c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08e      	sub	sp, #56	; 0x38
 800c430:	af04      	add	r7, sp, #16
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c43c:	f3ef 8305 	mrs	r3, IPSR
 800c440:	617b      	str	r3, [r7, #20]
  return(result);
 800c442:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c444:	2b00      	cmp	r3, #0
 800c446:	d17e      	bne.n	800c546 <osThreadNew+0x11a>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d07b      	beq.n	800c546 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c44e:	2380      	movs	r3, #128	; 0x80
 800c450:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c452:	2318      	movs	r3, #24
 800c454:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c456:	2300      	movs	r3, #0
 800c458:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c45a:	f04f 33ff 	mov.w	r3, #4294967295
 800c45e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d045      	beq.n	800c4f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <osThreadNew+0x48>
        name = attr->name;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <osThreadNew+0x6e>
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	2b38      	cmp	r3, #56	; 0x38
 800c48c:	d805      	bhi.n	800c49a <osThreadNew+0x6e>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <osThreadNew+0x72>
        return (NULL);
 800c49a:	2300      	movs	r3, #0
 800c49c:	e054      	b.n	800c548 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	089b      	lsrs	r3, r3, #2
 800c4ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00e      	beq.n	800c4d4 <osThreadNew+0xa8>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	2bbf      	cmp	r3, #191	; 0xbf
 800c4bc:	d90a      	bls.n	800c4d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d006      	beq.n	800c4d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <osThreadNew+0xa8>
        mem = 1;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	61bb      	str	r3, [r7, #24]
 800c4d2:	e010      	b.n	800c4f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10c      	bne.n	800c4f6 <osThreadNew+0xca>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d108      	bne.n	800c4f6 <osThreadNew+0xca>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d104      	bne.n	800c4f6 <osThreadNew+0xca>
          mem = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	61bb      	str	r3, [r7, #24]
 800c4f0:	e001      	b.n	800c4f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d110      	bne.n	800c51e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c504:	9202      	str	r2, [sp, #8]
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	6a3a      	ldr	r2, [r7, #32]
 800c510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 fe0c 	bl	800d130 <xTaskCreateStatic>
 800c518:	4603      	mov	r3, r0
 800c51a:	613b      	str	r3, [r7, #16]
 800c51c:	e013      	b.n	800c546 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d110      	bne.n	800c546 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	b29a      	uxth	r2, r3
 800c528:	f107 0310 	add.w	r3, r7, #16
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 fe57 	bl	800d1ea <xTaskCreate>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d001      	beq.n	800c546 <osThreadNew+0x11a>
            hTask = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c546:	693b      	ldr	r3, [r7, #16]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3728      	adds	r7, #40	; 0x28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c558:	f3ef 8305 	mrs	r3, IPSR
 800c55c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c55e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <osDelay+0x1c>
    stat = osErrorISR;
 800c564:	f06f 0305 	mvn.w	r3, #5
 800c568:	60fb      	str	r3, [r7, #12]
 800c56a:	e007      	b.n	800c57c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 ff96 	bl	800d4a8 <vTaskDelay>
    }
  }

  return (stat);
 800c57c:	68fb      	ldr	r3, [r7, #12]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4a07      	ldr	r2, [pc, #28]	; (800c5b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	4a06      	ldr	r2, [pc, #24]	; (800c5b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c59e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2280      	movs	r2, #128	; 0x80
 800c5a4:	601a      	str	r2, [r3, #0]
}
 800c5a6:	bf00      	nop
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	200003d8 	.word	0x200003d8
 800c5b8:	20000498 	.word	0x20000498

0800c5bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a07      	ldr	r2, [pc, #28]	; (800c5e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c5cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4a06      	ldr	r2, [pc, #24]	; (800c5ec <vApplicationGetTimerTaskMemory+0x30>)
 800c5d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5da:	601a      	str	r2, [r3, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	20000698 	.word	0x20000698
 800c5ec:	20000758 	.word	0x20000758

0800c5f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f103 0208 	add.w	r2, r3, #8
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f103 0208 	add.w	r2, r3, #8
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0208 	add.w	r2, r3, #8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	601a      	str	r2, [r3, #0]
}
 800c686:	bf00      	nop
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a8:	d103      	bne.n	800c6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	e00c      	b.n	800c6cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e002      	b.n	800c6c0 <vListInsert+0x2e>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d2f6      	bcs.n	800c6ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6892      	ldr	r2, [r2, #8]
 800c71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6852      	ldr	r2, [r2, #4]
 800c724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d103      	bne.n	800c738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	689a      	ldr	r2, [r3, #8]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c782:	f002 f89f 	bl	800e8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	68f9      	ldr	r1, [r7, #12]
 800c790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c792:	fb01 f303 	mul.w	r3, r1, r3
 800c796:	441a      	add	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	68f9      	ldr	r1, [r7, #12]
 800c7b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7b8:	fb01 f303 	mul.w	r3, r1, r3
 800c7bc:	441a      	add	r2, r3
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	22ff      	movs	r2, #255	; 0xff
 800c7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	22ff      	movs	r2, #255	; 0xff
 800c7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d114      	bne.n	800c802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01a      	beq.n	800c816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3310      	adds	r3, #16
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f001 f94b 	bl	800da80 <xTaskRemoveFromEventList>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d012      	beq.n	800c816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c7f0:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <xQueueGenericReset+0xcc>)
 800c7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	e009      	b.n	800c816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3310      	adds	r3, #16
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fef2 	bl	800c5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3324      	adds	r3, #36	; 0x24
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff feed 	bl	800c5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c816:	f002 f885 	bl	800e924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c81a:	2301      	movs	r3, #1
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08e      	sub	sp, #56	; 0x38
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <xQueueGenericCreateStatic+0x52>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <xQueueGenericCreateStatic+0x56>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e000      	b.n	800c880 <xQueueGenericCreateStatic+0x58>
 800c87e:	2300      	movs	r3, #0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10a      	bne.n	800c89a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	623b      	str	r3, [r7, #32]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <xQueueGenericCreateStatic+0x7e>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <xQueueGenericCreateStatic+0x82>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <xQueueGenericCreateStatic+0x84>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61fb      	str	r3, [r7, #28]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8c6:	2350      	movs	r3, #80	; 0x50
 800c8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b50      	cmp	r3, #80	; 0x50
 800c8ce:	d00a      	beq.n	800c8e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	61bb      	str	r3, [r7, #24]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00d      	beq.n	800c90e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	4613      	mov	r3, r2
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 f805 	bl	800c918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c910:	4618      	mov	r0, r3
 800c912:	3730      	adds	r7, #48	; 0x30
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d103      	bne.n	800c934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	69ba      	ldr	r2, [r7, #24]
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	e002      	b.n	800c93a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c946:	2101      	movs	r1, #1
 800c948:	69b8      	ldr	r0, [r7, #24]
 800c94a:	f7ff ff05 	bl	800c758 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	78fa      	ldrb	r2, [r7, #3]
 800c952:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c956:	bf00      	nop
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
	...

0800c960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b08e      	sub	sp, #56	; 0x38
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
 800c96c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c96e:	2300      	movs	r3, #0
 800c970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <xQueueGenericSend+0x32>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d103      	bne.n	800c9a0 <xQueueGenericSend+0x40>
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <xQueueGenericSend+0x44>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e000      	b.n	800c9a6 <xQueueGenericSend+0x46>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10a      	bne.n	800c9c0 <xQueueGenericSend+0x60>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9bc:	bf00      	nop
 800c9be:	e7fe      	b.n	800c9be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d103      	bne.n	800c9ce <xQueueGenericSend+0x6e>
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d101      	bne.n	800c9d2 <xQueueGenericSend+0x72>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e000      	b.n	800c9d4 <xQueueGenericSend+0x74>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <xQueueGenericSend+0x8e>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	623b      	str	r3, [r7, #32]
}
 800c9ea:	bf00      	nop
 800c9ec:	e7fe      	b.n	800c9ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ee:	f001 fa0b 	bl	800de08 <xTaskGetSchedulerState>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <xQueueGenericSend+0x9e>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <xQueueGenericSend+0xa2>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e000      	b.n	800ca04 <xQueueGenericSend+0xa4>
 800ca02:	2300      	movs	r3, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <xQueueGenericSend+0xbe>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	61fb      	str	r3, [r7, #28]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca1e:	f001 ff51 	bl	800e8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d302      	bcc.n	800ca34 <xQueueGenericSend+0xd4>
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d129      	bne.n	800ca88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca3a:	f000 fa0b 	bl	800ce54 <prvCopyDataToQueue>
 800ca3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d010      	beq.n	800ca6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	3324      	adds	r3, #36	; 0x24
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f001 f817 	bl	800da80 <xTaskRemoveFromEventList>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d013      	beq.n	800ca80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca58:	4b3f      	ldr	r3, [pc, #252]	; (800cb58 <xQueueGenericSend+0x1f8>)
 800ca5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca5e:	601a      	str	r2, [r3, #0]
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	e00a      	b.n	800ca80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d007      	beq.n	800ca80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca70:	4b39      	ldr	r3, [pc, #228]	; (800cb58 <xQueueGenericSend+0x1f8>)
 800ca72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ca80:	f001 ff50 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e063      	b.n	800cb50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d103      	bne.n	800ca96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca8e:	f001 ff49 	bl	800e924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	e05c      	b.n	800cb50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca9c:	f107 0314 	add.w	r3, r7, #20
 800caa0:	4618      	mov	r0, r3
 800caa2:	f001 f851 	bl	800db48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caa6:	2301      	movs	r3, #1
 800caa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800caaa:	f001 ff3b 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800caae:	f000 fda1 	bl	800d5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cab2:	f001 ff07 	bl	800e8c4 <vPortEnterCritical>
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cabc:	b25b      	sxtb	r3, r3
 800cabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac2:	d103      	bne.n	800cacc <xQueueGenericSend+0x16c>
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cad2:	b25b      	sxtb	r3, r3
 800cad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad8:	d103      	bne.n	800cae2 <xQueueGenericSend+0x182>
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae2:	f001 ff1f 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cae6:	1d3a      	adds	r2, r7, #4
 800cae8:	f107 0314 	add.w	r3, r7, #20
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f001 f840 	bl	800db74 <xTaskCheckForTimeOut>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d124      	bne.n	800cb44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cafa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cafc:	f000 faa2 	bl	800d044 <prvIsQueueFull>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d018      	beq.n	800cb38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	3310      	adds	r3, #16
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 ff66 	bl	800d9e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb16:	f000 fa2d 	bl	800cf74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb1a:	f000 fd79 	bl	800d610 <xTaskResumeAll>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f47f af7c 	bne.w	800ca1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb26:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <xQueueGenericSend+0x1f8>)
 800cb28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	e772      	b.n	800ca1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb3a:	f000 fa1b 	bl	800cf74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb3e:	f000 fd67 	bl	800d610 <xTaskResumeAll>
 800cb42:	e76c      	b.n	800ca1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb46:	f000 fa15 	bl	800cf74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb4a:	f000 fd61 	bl	800d610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3738      	adds	r7, #56	; 0x38
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b090      	sub	sp, #64	; 0x40
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb86:	bf00      	nop
 800cb88:	e7fe      	b.n	800cb88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d103      	bne.n	800cb98 <xQueueGenericSendFromISR+0x3c>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <xQueueGenericSendFromISR+0x40>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e000      	b.n	800cb9e <xQueueGenericSendFromISR+0x42>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10a      	bne.n	800cbb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbb4:	bf00      	nop
 800cbb6:	e7fe      	b.n	800cbb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d103      	bne.n	800cbc6 <xQueueGenericSendFromISR+0x6a>
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d101      	bne.n	800cbca <xQueueGenericSendFromISR+0x6e>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e000      	b.n	800cbcc <xQueueGenericSendFromISR+0x70>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	623b      	str	r3, [r7, #32]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbe6:	f001 ff4f 	bl	800ea88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cbea:	f3ef 8211 	mrs	r2, BASEPRI
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	61fa      	str	r2, [r7, #28]
 800cc00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d302      	bcc.n	800cc18 <xQueueGenericSendFromISR+0xbc>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d12f      	bne.n	800cc78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc2e:	f000 f911 	bl	800ce54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3a:	d112      	bne.n	800cc62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d016      	beq.n	800cc72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	3324      	adds	r3, #36	; 0x24
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f000 ff19 	bl	800da80 <xTaskRemoveFromEventList>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00e      	beq.n	800cc72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00b      	beq.n	800cc72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e007      	b.n	800cc72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc66:	3301      	adds	r3, #1
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	b25a      	sxtb	r2, r3
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc72:	2301      	movs	r3, #1
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cc76:	e001      	b.n	800cc7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cc86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3740      	adds	r7, #64	; 0x40
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08c      	sub	sp, #48	; 0x30
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10a      	bne.n	800ccc4 <xQueueReceive+0x30>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	623b      	str	r3, [r7, #32]
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d103      	bne.n	800ccd2 <xQueueReceive+0x3e>
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d101      	bne.n	800ccd6 <xQueueReceive+0x42>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e000      	b.n	800ccd8 <xQueueReceive+0x44>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10a      	bne.n	800ccf2 <xQueueReceive+0x5e>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	61fb      	str	r3, [r7, #28]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccf2:	f001 f889 	bl	800de08 <xTaskGetSchedulerState>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <xQueueReceive+0x6e>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <xQueueReceive+0x72>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <xQueueReceive+0x74>
 800cd06:	2300      	movs	r3, #0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <xQueueReceive+0x8e>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	61bb      	str	r3, [r7, #24]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd22:	f001 fdcf 	bl	800e8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d01f      	beq.n	800cd72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd36:	f000 f8f7 	bl	800cf28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	1e5a      	subs	r2, r3, #1
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00f      	beq.n	800cd6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	3310      	adds	r3, #16
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 fe96 	bl	800da80 <xTaskRemoveFromEventList>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d007      	beq.n	800cd6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd5a:	4b3d      	ldr	r3, [pc, #244]	; (800ce50 <xQueueReceive+0x1bc>)
 800cd5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd6a:	f001 fddb 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e069      	b.n	800ce46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d103      	bne.n	800cd80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd78:	f001 fdd4 	bl	800e924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e062      	b.n	800ce46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd86:	f107 0310 	add.w	r3, r7, #16
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 fedc 	bl	800db48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd90:	2301      	movs	r3, #1
 800cd92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd94:	f001 fdc6 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd98:	f000 fc2c 	bl	800d5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd9c:	f001 fd92 	bl	800e8c4 <vPortEnterCritical>
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cda6:	b25b      	sxtb	r3, r3
 800cda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdac:	d103      	bne.n	800cdb6 <xQueueReceive+0x122>
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdbc:	b25b      	sxtb	r3, r3
 800cdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc2:	d103      	bne.n	800cdcc <xQueueReceive+0x138>
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdcc:	f001 fdaa 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdd0:	1d3a      	adds	r2, r7, #4
 800cdd2:	f107 0310 	add.w	r3, r7, #16
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 fecb 	bl	800db74 <xTaskCheckForTimeOut>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d123      	bne.n	800ce2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cde4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cde6:	f000 f917 	bl	800d018 <prvIsQueueEmpty>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d017      	beq.n	800ce20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	3324      	adds	r3, #36	; 0x24
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 fdf1 	bl	800d9e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce00:	f000 f8b8 	bl	800cf74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce04:	f000 fc04 	bl	800d610 <xTaskResumeAll>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d189      	bne.n	800cd22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce0e:	4b10      	ldr	r3, [pc, #64]	; (800ce50 <xQueueReceive+0x1bc>)
 800ce10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	e780      	b.n	800cd22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce22:	f000 f8a7 	bl	800cf74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce26:	f000 fbf3 	bl	800d610 <xTaskResumeAll>
 800ce2a:	e77a      	b.n	800cd22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce2e:	f000 f8a1 	bl	800cf74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce32:	f000 fbed 	bl	800d610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce38:	f000 f8ee 	bl	800d018 <prvIsQueueEmpty>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f43f af6f 	beq.w	800cd22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3730      	adds	r7, #48	; 0x30
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	e000ed04 	.word	0xe000ed04

0800ce54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce60:	2300      	movs	r3, #0
 800ce62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10d      	bne.n	800ce8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d14d      	bne.n	800cf16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 ffe0 	bl	800de44 <xTaskPriorityDisinherit>
 800ce84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	609a      	str	r2, [r3, #8]
 800ce8c:	e043      	b.n	800cf16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d119      	bne.n	800cec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6858      	ldr	r0, [r3, #4]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	f002 fd42 	bl	800f928 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	441a      	add	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d32b      	bcc.n	800cf16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	605a      	str	r2, [r3, #4]
 800cec6:	e026      	b.n	800cf16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68d8      	ldr	r0, [r3, #12]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced0:	461a      	mov	r2, r3
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	f002 fd28 	bl	800f928 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	68da      	ldr	r2, [r3, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee0:	425b      	negs	r3, r3
 800cee2:	441a      	add	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d207      	bcs.n	800cf04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	425b      	negs	r3, r3
 800cefe:	441a      	add	r2, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d105      	bne.n	800cf16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf1e:	697b      	ldr	r3, [r7, #20]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d018      	beq.n	800cf6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68da      	ldr	r2, [r3, #12]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf42:	441a      	add	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68da      	ldr	r2, [r3, #12]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d303      	bcc.n	800cf5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68d9      	ldr	r1, [r3, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf64:	461a      	mov	r2, r3
 800cf66:	6838      	ldr	r0, [r7, #0]
 800cf68:	f002 fcde 	bl	800f928 <memcpy>
	}
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf7c:	f001 fca2 	bl	800e8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf88:	e011      	b.n	800cfae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d012      	beq.n	800cfb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3324      	adds	r3, #36	; 0x24
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 fd72 	bl	800da80 <xTaskRemoveFromEventList>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfa2:	f000 fe49 	bl	800dc38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	dce9      	bgt.n	800cf8a <prvUnlockQueue+0x16>
 800cfb6:	e000      	b.n	800cfba <prvUnlockQueue+0x46>
					break;
 800cfb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	22ff      	movs	r2, #255	; 0xff
 800cfbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfc2:	f001 fcaf 	bl	800e924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfc6:	f001 fc7d 	bl	800e8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfd2:	e011      	b.n	800cff8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d012      	beq.n	800d002 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3310      	adds	r3, #16
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 fd4d 	bl	800da80 <xTaskRemoveFromEventList>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cfec:	f000 fe24 	bl	800dc38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dce9      	bgt.n	800cfd4 <prvUnlockQueue+0x60>
 800d000:	e000      	b.n	800d004 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d002:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	22ff      	movs	r2, #255	; 0xff
 800d008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d00c:	f001 fc8a 	bl	800e924 <vPortExitCritical>
}
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d020:	f001 fc50 	bl	800e8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d102      	bne.n	800d032 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d02c:	2301      	movs	r3, #1
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	e001      	b.n	800d036 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d036:	f001 fc75 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800d03a:	68fb      	ldr	r3, [r7, #12]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d04c:	f001 fc3a 	bl	800e8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d058:	429a      	cmp	r2, r3
 800d05a:	d102      	bne.n	800d062 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d05c:	2301      	movs	r3, #1
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e001      	b.n	800d066 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d066:	f001 fc5d 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800d06a:	68fb      	ldr	r3, [r7, #12]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	e014      	b.n	800d0ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d084:	4a0f      	ldr	r2, [pc, #60]	; (800d0c4 <vQueueAddToRegistry+0x50>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10b      	bne.n	800d0a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d090:	490c      	ldr	r1, [pc, #48]	; (800d0c4 <vQueueAddToRegistry+0x50>)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d09a:	4a0a      	ldr	r2, [pc, #40]	; (800d0c4 <vQueueAddToRegistry+0x50>)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	4413      	add	r3, r2
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0a6:	e006      	b.n	800d0b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b07      	cmp	r3, #7
 800d0b2:	d9e7      	bls.n	800d084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	20000b58 	.word	0x20000b58

0800d0c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d0d8:	f001 fbf4 	bl	800e8c4 <vPortEnterCritical>
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0e2:	b25b      	sxtb	r3, r3
 800d0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e8:	d103      	bne.n	800d0f2 <vQueueWaitForMessageRestricted+0x2a>
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0f8:	b25b      	sxtb	r3, r3
 800d0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fe:	d103      	bne.n	800d108 <vQueueWaitForMessageRestricted+0x40>
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d108:	f001 fc0c 	bl	800e924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d110:	2b00      	cmp	r3, #0
 800d112:	d106      	bne.n	800d122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	3324      	adds	r3, #36	; 0x24
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	68b9      	ldr	r1, [r7, #8]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fc83 	bl	800da28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d122:	6978      	ldr	r0, [r7, #20]
 800d124:	f7ff ff26 	bl	800cf74 <prvUnlockQueue>
	}
 800d128:	bf00      	nop
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08e      	sub	sp, #56	; 0x38
 800d134:	af04      	add	r7, sp, #16
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10a      	bne.n	800d15a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	623b      	str	r3, [r7, #32]
}
 800d156:	bf00      	nop
 800d158:	e7fe      	b.n	800d158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <xTaskCreateStatic+0x46>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	61fb      	str	r3, [r7, #28]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d176:	23c0      	movs	r3, #192	; 0xc0
 800d178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	2bc0      	cmp	r3, #192	; 0xc0
 800d17e:	d00a      	beq.n	800d196 <xTaskCreateStatic+0x66>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	61bb      	str	r3, [r7, #24]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d196:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01e      	beq.n	800d1dc <xTaskCreateStatic+0xac>
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d01b      	beq.n	800d1dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	9303      	str	r3, [sp, #12]
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	9302      	str	r3, [sp, #8]
 800d1be:	f107 0314 	add.w	r3, r7, #20
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	68b9      	ldr	r1, [r7, #8]
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 f850 	bl	800d274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1d6:	f000 f8f7 	bl	800d3c8 <prvAddNewTaskToReadyList>
 800d1da:	e001      	b.n	800d1e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d1e0:	697b      	ldr	r3, [r7, #20]
	}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3728      	adds	r7, #40	; 0x28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b08c      	sub	sp, #48	; 0x30
 800d1ee:	af04      	add	r7, sp, #16
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	603b      	str	r3, [r7, #0]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d1fa:	88fb      	ldrh	r3, [r7, #6]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4618      	mov	r0, r3
 800d200:	f001 fc82 	bl	800eb08 <pvPortMalloc>
 800d204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00e      	beq.n	800d22a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d20c:	20c0      	movs	r0, #192	; 0xc0
 800d20e:	f001 fc7b 	bl	800eb08 <pvPortMalloc>
 800d212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d003      	beq.n	800d222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	631a      	str	r2, [r3, #48]	; 0x30
 800d220:	e005      	b.n	800d22e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d222:	6978      	ldr	r0, [r7, #20]
 800d224:	f001 fd3c 	bl	800eca0 <vPortFree>
 800d228:	e001      	b.n	800d22e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d017      	beq.n	800d264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d23c:	88fa      	ldrh	r2, [r7, #6]
 800d23e:	2300      	movs	r3, #0
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	9302      	str	r3, [sp, #8]
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	9301      	str	r3, [sp, #4]
 800d24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	68b9      	ldr	r1, [r7, #8]
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f000 f80e 	bl	800d274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d258:	69f8      	ldr	r0, [r7, #28]
 800d25a:	f000 f8b5 	bl	800d3c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d25e:	2301      	movs	r3, #1
 800d260:	61bb      	str	r3, [r7, #24]
 800d262:	e002      	b.n	800d26a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d264:	f04f 33ff 	mov.w	r3, #4294967295
 800d268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d26a:	69bb      	ldr	r3, [r7, #24]
	}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3720      	adds	r7, #32
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	461a      	mov	r2, r3
 800d28c:	21a5      	movs	r1, #165	; 0xa5
 800d28e:	f002 fb59 	bl	800f944 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d29c:	3b01      	subs	r3, #1
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	f023 0307 	bic.w	r3, r3, #7
 800d2aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	f003 0307 	and.w	r3, r3, #7
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00a      	beq.n	800d2cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	617b      	str	r3, [r7, #20]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d01f      	beq.n	800d312 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	61fb      	str	r3, [r7, #28]
 800d2d6:	e012      	b.n	800d2fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	4413      	add	r3, r2
 800d2de:	7819      	ldrb	r1, [r3, #0]
 800d2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	3334      	adds	r3, #52	; 0x34
 800d2e8:	460a      	mov	r2, r1
 800d2ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d2ec:	68ba      	ldr	r2, [r7, #8]
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d006      	beq.n	800d306 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	61fb      	str	r3, [r7, #28]
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	2b0f      	cmp	r3, #15
 800d302:	d9e9      	bls.n	800d2d8 <prvInitialiseNewTask+0x64>
 800d304:	e000      	b.n	800d308 <prvInitialiseNewTask+0x94>
			{
				break;
 800d306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d310:	e003      	b.n	800d31a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	2200      	movs	r2, #0
 800d316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31c:	2b37      	cmp	r3, #55	; 0x37
 800d31e:	d901      	bls.n	800d324 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d320:	2337      	movs	r3, #55	; 0x37
 800d322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d32e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d332:	2200      	movs	r2, #0
 800d334:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	3304      	adds	r3, #4
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff f978 	bl	800c630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	3318      	adds	r3, #24
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff f973 	bl	800c630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d34e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d35e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	2200      	movs	r2, #0
 800d364:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	2200      	movs	r2, #0
 800d36a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	2200      	movs	r2, #0
 800d372:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	3358      	adds	r3, #88	; 0x58
 800d37a:	2260      	movs	r2, #96	; 0x60
 800d37c:	2100      	movs	r1, #0
 800d37e:	4618      	mov	r0, r3
 800d380:	f002 fae0 	bl	800f944 <memset>
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	4a0d      	ldr	r2, [pc, #52]	; (800d3bc <prvInitialiseNewTask+0x148>)
 800d388:	65da      	str	r2, [r3, #92]	; 0x5c
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	4a0c      	ldr	r2, [pc, #48]	; (800d3c0 <prvInitialiseNewTask+0x14c>)
 800d38e:	661a      	str	r2, [r3, #96]	; 0x60
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	4a0c      	ldr	r2, [pc, #48]	; (800d3c4 <prvInitialiseNewTask+0x150>)
 800d394:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	68f9      	ldr	r1, [r7, #12]
 800d39a:	69b8      	ldr	r0, [r7, #24]
 800d39c:	f001 f962 	bl	800e664 <pxPortInitialiseStack>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3b2:	bf00      	nop
 800d3b4:	3720      	adds	r7, #32
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	08012f6c 	.word	0x08012f6c
 800d3c0:	08012f8c 	.word	0x08012f8c
 800d3c4:	08012f4c 	.word	0x08012f4c

0800d3c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3d0:	f001 fa78 	bl	800e8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3d4:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	4a2c      	ldr	r2, [pc, #176]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d3dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3de:	4b2c      	ldr	r3, [pc, #176]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d109      	bne.n	800d3fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3e6:	4a2a      	ldr	r2, [pc, #168]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3ec:	4b27      	ldr	r3, [pc, #156]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d110      	bne.n	800d416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3f4:	f000 fc46 	bl	800dc84 <prvInitialiseTaskLists>
 800d3f8:	e00d      	b.n	800d416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3fa:	4b26      	ldr	r3, [pc, #152]	; (800d494 <prvAddNewTaskToReadyList+0xcc>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d402:	4b23      	ldr	r3, [pc, #140]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d802      	bhi.n	800d416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d410:	4a1f      	ldr	r2, [pc, #124]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d416:	4b20      	ldr	r3, [pc, #128]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	4a1e      	ldr	r2, [pc, #120]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d41e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d420:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42c:	4b1b      	ldr	r3, [pc, #108]	; (800d49c <prvAddNewTaskToReadyList+0xd4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d903      	bls.n	800d43c <prvAddNewTaskToReadyList+0x74>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	4a18      	ldr	r2, [pc, #96]	; (800d49c <prvAddNewTaskToReadyList+0xd4>)
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4a15      	ldr	r2, [pc, #84]	; (800d4a0 <prvAddNewTaskToReadyList+0xd8>)
 800d44a:	441a      	add	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3304      	adds	r3, #4
 800d450:	4619      	mov	r1, r3
 800d452:	4610      	mov	r0, r2
 800d454:	f7ff f8f9 	bl	800c64a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d458:	f001 fa64 	bl	800e924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <prvAddNewTaskToReadyList+0xcc>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d464:	4b0a      	ldr	r3, [pc, #40]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	429a      	cmp	r2, r3
 800d470:	d207      	bcs.n	800d482 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d472:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <prvAddNewTaskToReadyList+0xdc>)
 800d474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d482:	bf00      	nop
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	2000106c 	.word	0x2000106c
 800d490:	20000b98 	.word	0x20000b98
 800d494:	20001078 	.word	0x20001078
 800d498:	20001088 	.word	0x20001088
 800d49c:	20001074 	.word	0x20001074
 800d4a0:	20000b9c 	.word	0x20000b9c
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d017      	beq.n	800d4ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4ba:	4b13      	ldr	r3, [pc, #76]	; (800d508 <vTaskDelay+0x60>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00a      	beq.n	800d4d8 <vTaskDelay+0x30>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	60bb      	str	r3, [r7, #8]
}
 800d4d4:	bf00      	nop
 800d4d6:	e7fe      	b.n	800d4d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4d8:	f000 f88c 	bl	800d5f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4dc:	2100      	movs	r1, #0
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fd1e 	bl	800df20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d4e4:	f000 f894 	bl	800d610 <xTaskResumeAll>
 800d4e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d107      	bne.n	800d500 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d4f0:	4b06      	ldr	r3, [pc, #24]	; (800d50c <vTaskDelay+0x64>)
 800d4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f6:	601a      	str	r2, [r3, #0]
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d500:	bf00      	nop
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20001094 	.word	0x20001094
 800d50c:	e000ed04 	.word	0xe000ed04

0800d510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08a      	sub	sp, #40	; 0x28
 800d514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d516:	2300      	movs	r3, #0
 800d518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d51a:	2300      	movs	r3, #0
 800d51c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d51e:	463a      	mov	r2, r7
 800d520:	1d39      	adds	r1, r7, #4
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff f82e 	bl	800c588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	9202      	str	r2, [sp, #8]
 800d534:	9301      	str	r3, [sp, #4]
 800d536:	2300      	movs	r3, #0
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	2300      	movs	r3, #0
 800d53c:	460a      	mov	r2, r1
 800d53e:	4925      	ldr	r1, [pc, #148]	; (800d5d4 <vTaskStartScheduler+0xc4>)
 800d540:	4825      	ldr	r0, [pc, #148]	; (800d5d8 <vTaskStartScheduler+0xc8>)
 800d542:	f7ff fdf5 	bl	800d130 <xTaskCreateStatic>
 800d546:	4603      	mov	r3, r0
 800d548:	4a24      	ldr	r2, [pc, #144]	; (800d5dc <vTaskStartScheduler+0xcc>)
 800d54a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d54c:	4b23      	ldr	r3, [pc, #140]	; (800d5dc <vTaskStartScheduler+0xcc>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d554:	2301      	movs	r3, #1
 800d556:	617b      	str	r3, [r7, #20]
 800d558:	e001      	b.n	800d55e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d102      	bne.n	800d56a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d564:	f000 fd30 	bl	800dfc8 <xTimerCreateTimerTask>
 800d568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d11d      	bne.n	800d5ac <vTaskStartScheduler+0x9c>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	613b      	str	r3, [r7, #16]
}
 800d582:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d584:	4b16      	ldr	r3, [pc, #88]	; (800d5e0 <vTaskStartScheduler+0xd0>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	3358      	adds	r3, #88	; 0x58
 800d58a:	4a16      	ldr	r2, [pc, #88]	; (800d5e4 <vTaskStartScheduler+0xd4>)
 800d58c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d58e:	4b16      	ldr	r3, [pc, #88]	; (800d5e8 <vTaskStartScheduler+0xd8>)
 800d590:	f04f 32ff 	mov.w	r2, #4294967295
 800d594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d596:	4b15      	ldr	r3, [pc, #84]	; (800d5ec <vTaskStartScheduler+0xdc>)
 800d598:	2201      	movs	r2, #1
 800d59a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d59c:	4b14      	ldr	r3, [pc, #80]	; (800d5f0 <vTaskStartScheduler+0xe0>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d5a2:	f7f3 f93a 	bl	800081a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5a6:	f001 f8eb 	bl	800e780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5aa:	e00e      	b.n	800d5ca <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d10a      	bne.n	800d5ca <vTaskStartScheduler+0xba>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	60fb      	str	r3, [r7, #12]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <vTaskStartScheduler+0xb8>
}
 800d5ca:	bf00      	nop
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	080105d8 	.word	0x080105d8
 800d5d8:	0800dc51 	.word	0x0800dc51
 800d5dc:	20001090 	.word	0x20001090
 800d5e0:	20000b98 	.word	0x20000b98
 800d5e4:	2000016c 	.word	0x2000016c
 800d5e8:	2000108c 	.word	0x2000108c
 800d5ec:	20001078 	.word	0x20001078
 800d5f0:	20001070 	.word	0x20001070

0800d5f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d5f8:	4b04      	ldr	r3, [pc, #16]	; (800d60c <vTaskSuspendAll+0x18>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	4a03      	ldr	r2, [pc, #12]	; (800d60c <vTaskSuspendAll+0x18>)
 800d600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d602:	bf00      	nop
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	20001094 	.word	0x20001094

0800d610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d61a:	2300      	movs	r3, #0
 800d61c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d61e:	4b42      	ldr	r3, [pc, #264]	; (800d728 <xTaskResumeAll+0x118>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <xTaskResumeAll+0x2c>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	603b      	str	r3, [r7, #0]
}
 800d638:	bf00      	nop
 800d63a:	e7fe      	b.n	800d63a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d63c:	f001 f942 	bl	800e8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d640:	4b39      	ldr	r3, [pc, #228]	; (800d728 <xTaskResumeAll+0x118>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3b01      	subs	r3, #1
 800d646:	4a38      	ldr	r2, [pc, #224]	; (800d728 <xTaskResumeAll+0x118>)
 800d648:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d64a:	4b37      	ldr	r3, [pc, #220]	; (800d728 <xTaskResumeAll+0x118>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d162      	bne.n	800d718 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d652:	4b36      	ldr	r3, [pc, #216]	; (800d72c <xTaskResumeAll+0x11c>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d05e      	beq.n	800d718 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d65a:	e02f      	b.n	800d6bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d65c:	4b34      	ldr	r3, [pc, #208]	; (800d730 <xTaskResumeAll+0x120>)
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3318      	adds	r3, #24
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff f84b 	bl	800c704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3304      	adds	r3, #4
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff f846 	bl	800c704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67c:	4b2d      	ldr	r3, [pc, #180]	; (800d734 <xTaskResumeAll+0x124>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	429a      	cmp	r2, r3
 800d682:	d903      	bls.n	800d68c <xTaskResumeAll+0x7c>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	4a2a      	ldr	r2, [pc, #168]	; (800d734 <xTaskResumeAll+0x124>)
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d690:	4613      	mov	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	4413      	add	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4a27      	ldr	r2, [pc, #156]	; (800d738 <xTaskResumeAll+0x128>)
 800d69a:	441a      	add	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f7fe ffd1 	bl	800c64a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ac:	4b23      	ldr	r3, [pc, #140]	; (800d73c <xTaskResumeAll+0x12c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d302      	bcc.n	800d6bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d6b6:	4b22      	ldr	r3, [pc, #136]	; (800d740 <xTaskResumeAll+0x130>)
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6bc:	4b1c      	ldr	r3, [pc, #112]	; (800d730 <xTaskResumeAll+0x120>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1cb      	bne.n	800d65c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6ca:	f000 fb7d 	bl	800ddc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d6ce:	4b1d      	ldr	r3, [pc, #116]	; (800d744 <xTaskResumeAll+0x134>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d010      	beq.n	800d6fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6da:	f000 f847 	bl	800d76c <xTaskIncrementTick>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d6e4:	4b16      	ldr	r3, [pc, #88]	; (800d740 <xTaskResumeAll+0x130>)
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1f1      	bne.n	800d6da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d6f6:	4b13      	ldr	r3, [pc, #76]	; (800d744 <xTaskResumeAll+0x134>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6fc:	4b10      	ldr	r3, [pc, #64]	; (800d740 <xTaskResumeAll+0x130>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d009      	beq.n	800d718 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d704:	2301      	movs	r3, #1
 800d706:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d708:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <xTaskResumeAll+0x138>)
 800d70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70e:	601a      	str	r2, [r3, #0]
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d718:	f001 f904 	bl	800e924 <vPortExitCritical>

	return xAlreadyYielded;
 800d71c:	68bb      	ldr	r3, [r7, #8]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20001094 	.word	0x20001094
 800d72c:	2000106c 	.word	0x2000106c
 800d730:	2000102c 	.word	0x2000102c
 800d734:	20001074 	.word	0x20001074
 800d738:	20000b9c 	.word	0x20000b9c
 800d73c:	20000b98 	.word	0x20000b98
 800d740:	20001080 	.word	0x20001080
 800d744:	2000107c 	.word	0x2000107c
 800d748:	e000ed04 	.word	0xe000ed04

0800d74c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d752:	4b05      	ldr	r3, [pc, #20]	; (800d768 <xTaskGetTickCount+0x1c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d758:	687b      	ldr	r3, [r7, #4]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	20001070 	.word	0x20001070

0800d76c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d776:	4b4f      	ldr	r3, [pc, #316]	; (800d8b4 <xTaskIncrementTick+0x148>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f040 808f 	bne.w	800d89e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d780:	4b4d      	ldr	r3, [pc, #308]	; (800d8b8 <xTaskIncrementTick+0x14c>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3301      	adds	r3, #1
 800d786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d788:	4a4b      	ldr	r2, [pc, #300]	; (800d8b8 <xTaskIncrementTick+0x14c>)
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d120      	bne.n	800d7d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d794:	4b49      	ldr	r3, [pc, #292]	; (800d8bc <xTaskIncrementTick+0x150>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	603b      	str	r3, [r7, #0]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <xTaskIncrementTick+0x46>
 800d7b4:	4b41      	ldr	r3, [pc, #260]	; (800d8bc <xTaskIncrementTick+0x150>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	4b41      	ldr	r3, [pc, #260]	; (800d8c0 <xTaskIncrementTick+0x154>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a3f      	ldr	r2, [pc, #252]	; (800d8bc <xTaskIncrementTick+0x150>)
 800d7c0:	6013      	str	r3, [r2, #0]
 800d7c2:	4a3f      	ldr	r2, [pc, #252]	; (800d8c0 <xTaskIncrementTick+0x154>)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	4b3e      	ldr	r3, [pc, #248]	; (800d8c4 <xTaskIncrementTick+0x158>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	4a3d      	ldr	r2, [pc, #244]	; (800d8c4 <xTaskIncrementTick+0x158>)
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	f000 faf9 	bl	800ddc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7d6:	4b3c      	ldr	r3, [pc, #240]	; (800d8c8 <xTaskIncrementTick+0x15c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	693a      	ldr	r2, [r7, #16]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d349      	bcc.n	800d874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7e0:	4b36      	ldr	r3, [pc, #216]	; (800d8bc <xTaskIncrementTick+0x150>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d104      	bne.n	800d7f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ea:	4b37      	ldr	r3, [pc, #220]	; (800d8c8 <xTaskIncrementTick+0x15c>)
 800d7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f0:	601a      	str	r2, [r3, #0]
					break;
 800d7f2:	e03f      	b.n	800d874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f4:	4b31      	ldr	r3, [pc, #196]	; (800d8bc <xTaskIncrementTick+0x150>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d203      	bcs.n	800d814 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d80c:	4a2e      	ldr	r2, [pc, #184]	; (800d8c8 <xTaskIncrementTick+0x15c>)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d812:	e02f      	b.n	800d874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	3304      	adds	r3, #4
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fe ff73 	bl	800c704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d822:	2b00      	cmp	r3, #0
 800d824:	d004      	beq.n	800d830 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	3318      	adds	r3, #24
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe ff6a 	bl	800c704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d834:	4b25      	ldr	r3, [pc, #148]	; (800d8cc <xTaskIncrementTick+0x160>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d903      	bls.n	800d844 <xTaskIncrementTick+0xd8>
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	4a22      	ldr	r2, [pc, #136]	; (800d8cc <xTaskIncrementTick+0x160>)
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d848:	4613      	mov	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4a1f      	ldr	r2, [pc, #124]	; (800d8d0 <xTaskIncrementTick+0x164>)
 800d852:	441a      	add	r2, r3
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	3304      	adds	r3, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7fe fef5 	bl	800c64a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d864:	4b1b      	ldr	r3, [pc, #108]	; (800d8d4 <xTaskIncrementTick+0x168>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d3b8      	bcc.n	800d7e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d86e:	2301      	movs	r3, #1
 800d870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d872:	e7b5      	b.n	800d7e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d874:	4b17      	ldr	r3, [pc, #92]	; (800d8d4 <xTaskIncrementTick+0x168>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87a:	4915      	ldr	r1, [pc, #84]	; (800d8d0 <xTaskIncrementTick+0x164>)
 800d87c:	4613      	mov	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	440b      	add	r3, r1
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d901      	bls.n	800d890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d88c:	2301      	movs	r3, #1
 800d88e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d890:	4b11      	ldr	r3, [pc, #68]	; (800d8d8 <xTaskIncrementTick+0x16c>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d007      	beq.n	800d8a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d898:	2301      	movs	r3, #1
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	e004      	b.n	800d8a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d89e:	4b0f      	ldr	r3, [pc, #60]	; (800d8dc <xTaskIncrementTick+0x170>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	4a0d      	ldr	r2, [pc, #52]	; (800d8dc <xTaskIncrementTick+0x170>)
 800d8a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d8a8:	697b      	ldr	r3, [r7, #20]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3718      	adds	r7, #24
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	20001094 	.word	0x20001094
 800d8b8:	20001070 	.word	0x20001070
 800d8bc:	20001024 	.word	0x20001024
 800d8c0:	20001028 	.word	0x20001028
 800d8c4:	20001084 	.word	0x20001084
 800d8c8:	2000108c 	.word	0x2000108c
 800d8cc:	20001074 	.word	0x20001074
 800d8d0:	20000b9c 	.word	0x20000b9c
 800d8d4:	20000b98 	.word	0x20000b98
 800d8d8:	20001080 	.word	0x20001080
 800d8dc:	2000107c 	.word	0x2000107c

0800d8e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8e6:	4b36      	ldr	r3, [pc, #216]	; (800d9c0 <vTaskSwitchContext+0xe0>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d8ee:	4b35      	ldr	r3, [pc, #212]	; (800d9c4 <vTaskSwitchContext+0xe4>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8f4:	e05f      	b.n	800d9b6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800d8f6:	4b33      	ldr	r3, [pc, #204]	; (800d9c4 <vTaskSwitchContext+0xe4>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d8fc:	f7f2 ff94 	bl	8000828 <getRunTimeCounterValue>
 800d900:	4603      	mov	r3, r0
 800d902:	4a31      	ldr	r2, [pc, #196]	; (800d9c8 <vTaskSwitchContext+0xe8>)
 800d904:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d906:	4b30      	ldr	r3, [pc, #192]	; (800d9c8 <vTaskSwitchContext+0xe8>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b30      	ldr	r3, [pc, #192]	; (800d9cc <vTaskSwitchContext+0xec>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d909      	bls.n	800d926 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d912:	4b2f      	ldr	r3, [pc, #188]	; (800d9d0 <vTaskSwitchContext+0xf0>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d918:	4a2b      	ldr	r2, [pc, #172]	; (800d9c8 <vTaskSwitchContext+0xe8>)
 800d91a:	6810      	ldr	r0, [r2, #0]
 800d91c:	4a2b      	ldr	r2, [pc, #172]	; (800d9cc <vTaskSwitchContext+0xec>)
 800d91e:	6812      	ldr	r2, [r2, #0]
 800d920:	1a82      	subs	r2, r0, r2
 800d922:	440a      	add	r2, r1
 800d924:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d926:	4b28      	ldr	r3, [pc, #160]	; (800d9c8 <vTaskSwitchContext+0xe8>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a28      	ldr	r2, [pc, #160]	; (800d9cc <vTaskSwitchContext+0xec>)
 800d92c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d92e:	4b29      	ldr	r3, [pc, #164]	; (800d9d4 <vTaskSwitchContext+0xf4>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	e010      	b.n	800d958 <vTaskSwitchContext+0x78>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10a      	bne.n	800d952 <vTaskSwitchContext+0x72>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	607b      	str	r3, [r7, #4]
}
 800d94e:	bf00      	nop
 800d950:	e7fe      	b.n	800d950 <vTaskSwitchContext+0x70>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	3b01      	subs	r3, #1
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	491f      	ldr	r1, [pc, #124]	; (800d9d8 <vTaskSwitchContext+0xf8>)
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	4613      	mov	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	440b      	add	r3, r1
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0e4      	beq.n	800d936 <vTaskSwitchContext+0x56>
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4613      	mov	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <vTaskSwitchContext+0xf8>)
 800d978:	4413      	add	r3, r2
 800d97a:	60bb      	str	r3, [r7, #8]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	685a      	ldr	r2, [r3, #4]
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	605a      	str	r2, [r3, #4]
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	3308      	adds	r3, #8
 800d98e:	429a      	cmp	r2, r3
 800d990:	d104      	bne.n	800d99c <vTaskSwitchContext+0xbc>
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	605a      	str	r2, [r3, #4]
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	4a0b      	ldr	r2, [pc, #44]	; (800d9d0 <vTaskSwitchContext+0xf0>)
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	4a0b      	ldr	r2, [pc, #44]	; (800d9d4 <vTaskSwitchContext+0xf4>)
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9ac:	4b08      	ldr	r3, [pc, #32]	; (800d9d0 <vTaskSwitchContext+0xf0>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3358      	adds	r3, #88	; 0x58
 800d9b2:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <vTaskSwitchContext+0xfc>)
 800d9b4:	6013      	str	r3, [r2, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	20001094 	.word	0x20001094
 800d9c4:	20001080 	.word	0x20001080
 800d9c8:	2000109c 	.word	0x2000109c
 800d9cc:	20001098 	.word	0x20001098
 800d9d0:	20000b98 	.word	0x20000b98
 800d9d4:	20001074 	.word	0x20001074
 800d9d8:	20000b9c 	.word	0x20000b9c
 800d9dc:	2000016c 	.word	0x2000016c

0800d9e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	60fb      	str	r3, [r7, #12]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da06:	4b07      	ldr	r3, [pc, #28]	; (800da24 <vTaskPlaceOnEventList+0x44>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3318      	adds	r3, #24
 800da0c:	4619      	mov	r1, r3
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7fe fe3f 	bl	800c692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da14:	2101      	movs	r1, #1
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	f000 fa82 	bl	800df20 <prvAddCurrentTaskToDelayedList>
}
 800da1c:	bf00      	nop
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20000b98 	.word	0x20000b98

0800da28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	617b      	str	r3, [r7, #20]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da50:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <vTaskPlaceOnEventListRestricted+0x54>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3318      	adds	r3, #24
 800da56:	4619      	mov	r1, r3
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7fe fdf6 	bl	800c64a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da64:	f04f 33ff 	mov.w	r3, #4294967295
 800da68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	68b8      	ldr	r0, [r7, #8]
 800da6e:	f000 fa57 	bl	800df20 <prvAddCurrentTaskToDelayedList>
	}
 800da72:	bf00      	nop
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20000b98 	.word	0x20000b98

0800da80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10a      	bne.n	800daac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	60fb      	str	r3, [r7, #12]
}
 800daa8:	bf00      	nop
 800daaa:	e7fe      	b.n	800daaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	3318      	adds	r3, #24
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fe fe27 	bl	800c704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dab6:	4b1e      	ldr	r3, [pc, #120]	; (800db30 <xTaskRemoveFromEventList+0xb0>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d11d      	bne.n	800dafa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	3304      	adds	r3, #4
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe fe1e 	bl	800c704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dacc:	4b19      	ldr	r3, [pc, #100]	; (800db34 <xTaskRemoveFromEventList+0xb4>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d903      	bls.n	800dadc <xTaskRemoveFromEventList+0x5c>
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad8:	4a16      	ldr	r2, [pc, #88]	; (800db34 <xTaskRemoveFromEventList+0xb4>)
 800dada:	6013      	str	r3, [r2, #0]
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae0:	4613      	mov	r3, r2
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4a13      	ldr	r2, [pc, #76]	; (800db38 <xTaskRemoveFromEventList+0xb8>)
 800daea:	441a      	add	r2, r3
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	3304      	adds	r3, #4
 800daf0:	4619      	mov	r1, r3
 800daf2:	4610      	mov	r0, r2
 800daf4:	f7fe fda9 	bl	800c64a <vListInsertEnd>
 800daf8:	e005      	b.n	800db06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	3318      	adds	r3, #24
 800dafe:	4619      	mov	r1, r3
 800db00:	480e      	ldr	r0, [pc, #56]	; (800db3c <xTaskRemoveFromEventList+0xbc>)
 800db02:	f7fe fda2 	bl	800c64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db0a:	4b0d      	ldr	r3, [pc, #52]	; (800db40 <xTaskRemoveFromEventList+0xc0>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db10:	429a      	cmp	r2, r3
 800db12:	d905      	bls.n	800db20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db18:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <xTaskRemoveFromEventList+0xc4>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	601a      	str	r2, [r3, #0]
 800db1e:	e001      	b.n	800db24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800db20:	2300      	movs	r3, #0
 800db22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db24:	697b      	ldr	r3, [r7, #20]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20001094 	.word	0x20001094
 800db34:	20001074 	.word	0x20001074
 800db38:	20000b9c 	.word	0x20000b9c
 800db3c:	2000102c 	.word	0x2000102c
 800db40:	20000b98 	.word	0x20000b98
 800db44:	20001080 	.word	0x20001080

0800db48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db50:	4b06      	ldr	r3, [pc, #24]	; (800db6c <vTaskInternalSetTimeOutState+0x24>)
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db58:	4b05      	ldr	r3, [pc, #20]	; (800db70 <vTaskInternalSetTimeOutState+0x28>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	605a      	str	r2, [r3, #4]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	20001084 	.word	0x20001084
 800db70:	20001070 	.word	0x20001070

0800db74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	613b      	str	r3, [r7, #16]
}
 800db96:	bf00      	nop
 800db98:	e7fe      	b.n	800db98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	60fb      	str	r3, [r7, #12]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dbb6:	f000 fe85 	bl	800e8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbba:	4b1d      	ldr	r3, [pc, #116]	; (800dc30 <xTaskCheckForTimeOut+0xbc>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd2:	d102      	bne.n	800dbda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	61fb      	str	r3, [r7, #28]
 800dbd8:	e023      	b.n	800dc22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b15      	ldr	r3, [pc, #84]	; (800dc34 <xTaskCheckForTimeOut+0xc0>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d007      	beq.n	800dbf6 <xTaskCheckForTimeOut+0x82>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d302      	bcc.n	800dbf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	61fb      	str	r3, [r7, #28]
 800dbf4:	e015      	b.n	800dc22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d20b      	bcs.n	800dc18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	1ad2      	subs	r2, r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff ff9b 	bl	800db48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	61fb      	str	r3, [r7, #28]
 800dc16:	e004      	b.n	800dc22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc22:	f000 fe7f 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800dc26:	69fb      	ldr	r3, [r7, #28]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3720      	adds	r7, #32
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20001070 	.word	0x20001070
 800dc34:	20001084 	.word	0x20001084

0800dc38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc3c:	4b03      	ldr	r3, [pc, #12]	; (800dc4c <vTaskMissedYield+0x14>)
 800dc3e:	2201      	movs	r2, #1
 800dc40:	601a      	str	r2, [r3, #0]
}
 800dc42:	bf00      	nop
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	20001080 	.word	0x20001080

0800dc50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc58:	f000 f854 	bl	800dd04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc5c:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <prvIdleTask+0x2c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d907      	bls.n	800dc74 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dc64:	4b06      	ldr	r3, [pc, #24]	; (800dc80 <prvIdleTask+0x30>)
 800dc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800dc74:	f7f2 fde4 	bl	8000840 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dc78:	e7ee      	b.n	800dc58 <prvIdleTask+0x8>
 800dc7a:	bf00      	nop
 800dc7c:	20000b9c 	.word	0x20000b9c
 800dc80:	e000ed04 	.word	0xe000ed04

0800dc84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	607b      	str	r3, [r7, #4]
 800dc8e:	e00c      	b.n	800dcaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4a12      	ldr	r2, [pc, #72]	; (800dce4 <prvInitialiseTaskLists+0x60>)
 800dc9c:	4413      	add	r3, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fca6 	bl	800c5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	3301      	adds	r3, #1
 800dca8:	607b      	str	r3, [r7, #4]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b37      	cmp	r3, #55	; 0x37
 800dcae:	d9ef      	bls.n	800dc90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dcb0:	480d      	ldr	r0, [pc, #52]	; (800dce8 <prvInitialiseTaskLists+0x64>)
 800dcb2:	f7fe fc9d 	bl	800c5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcb6:	480d      	ldr	r0, [pc, #52]	; (800dcec <prvInitialiseTaskLists+0x68>)
 800dcb8:	f7fe fc9a 	bl	800c5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcbc:	480c      	ldr	r0, [pc, #48]	; (800dcf0 <prvInitialiseTaskLists+0x6c>)
 800dcbe:	f7fe fc97 	bl	800c5f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcc2:	480c      	ldr	r0, [pc, #48]	; (800dcf4 <prvInitialiseTaskLists+0x70>)
 800dcc4:	f7fe fc94 	bl	800c5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dcc8:	480b      	ldr	r0, [pc, #44]	; (800dcf8 <prvInitialiseTaskLists+0x74>)
 800dcca:	f7fe fc91 	bl	800c5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dcce:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <prvInitialiseTaskLists+0x78>)
 800dcd0:	4a05      	ldr	r2, [pc, #20]	; (800dce8 <prvInitialiseTaskLists+0x64>)
 800dcd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <prvInitialiseTaskLists+0x7c>)
 800dcd6:	4a05      	ldr	r2, [pc, #20]	; (800dcec <prvInitialiseTaskLists+0x68>)
 800dcd8:	601a      	str	r2, [r3, #0]
}
 800dcda:	bf00      	nop
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000b9c 	.word	0x20000b9c
 800dce8:	20000ffc 	.word	0x20000ffc
 800dcec:	20001010 	.word	0x20001010
 800dcf0:	2000102c 	.word	0x2000102c
 800dcf4:	20001040 	.word	0x20001040
 800dcf8:	20001058 	.word	0x20001058
 800dcfc:	20001024 	.word	0x20001024
 800dd00:	20001028 	.word	0x20001028

0800dd04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd0a:	e019      	b.n	800dd40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd0c:	f000 fdda 	bl	800e8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd10:	4b10      	ldr	r3, [pc, #64]	; (800dd54 <prvCheckTasksWaitingTermination+0x50>)
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fcf1 	bl	800c704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd22:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <prvCheckTasksWaitingTermination+0x54>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	4a0b      	ldr	r2, [pc, #44]	; (800dd58 <prvCheckTasksWaitingTermination+0x54>)
 800dd2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd2c:	4b0b      	ldr	r3, [pc, #44]	; (800dd5c <prvCheckTasksWaitingTermination+0x58>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3b01      	subs	r3, #1
 800dd32:	4a0a      	ldr	r2, [pc, #40]	; (800dd5c <prvCheckTasksWaitingTermination+0x58>)
 800dd34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd36:	f000 fdf5 	bl	800e924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f810 	bl	800dd60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd40:	4b06      	ldr	r3, [pc, #24]	; (800dd5c <prvCheckTasksWaitingTermination+0x58>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d1e1      	bne.n	800dd0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd48:	bf00      	nop
 800dd4a:	bf00      	nop
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	20001040 	.word	0x20001040
 800dd58:	2000106c 	.word	0x2000106c
 800dd5c:	20001054 	.word	0x20001054

0800dd60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3358      	adds	r3, #88	; 0x58
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f001 fedf 	bl	800fb30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d108      	bne.n	800dd8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd80:	4618      	mov	r0, r3
 800dd82:	f000 ff8d 	bl	800eca0 <vPortFree>
				vPortFree( pxTCB );
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 ff8a 	bl	800eca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd8c:	e018      	b.n	800ddc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d103      	bne.n	800dda0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 ff81 	bl	800eca0 <vPortFree>
	}
 800dd9e:	e00f      	b.n	800ddc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d00a      	beq.n	800ddc0 <prvDeleteTCB+0x60>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	60fb      	str	r3, [r7, #12]
}
 800ddbc:	bf00      	nop
 800ddbe:	e7fe      	b.n	800ddbe <prvDeleteTCB+0x5e>
	}
 800ddc0:	bf00      	nop
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddce:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <prvResetNextTaskUnblockTime+0x38>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d104      	bne.n	800dde2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ddd8:	4b0a      	ldr	r3, [pc, #40]	; (800de04 <prvResetNextTaskUnblockTime+0x3c>)
 800ddda:	f04f 32ff 	mov.w	r2, #4294967295
 800ddde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dde0:	e008      	b.n	800ddf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dde2:	4b07      	ldr	r3, [pc, #28]	; (800de00 <prvResetNextTaskUnblockTime+0x38>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	4a04      	ldr	r2, [pc, #16]	; (800de04 <prvResetNextTaskUnblockTime+0x3c>)
 800ddf2:	6013      	str	r3, [r2, #0]
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	20001024 	.word	0x20001024
 800de04:	2000108c 	.word	0x2000108c

0800de08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de0e:	4b0b      	ldr	r3, [pc, #44]	; (800de3c <xTaskGetSchedulerState+0x34>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d102      	bne.n	800de1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de16:	2301      	movs	r3, #1
 800de18:	607b      	str	r3, [r7, #4]
 800de1a:	e008      	b.n	800de2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de1c:	4b08      	ldr	r3, [pc, #32]	; (800de40 <xTaskGetSchedulerState+0x38>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d102      	bne.n	800de2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de24:	2302      	movs	r3, #2
 800de26:	607b      	str	r3, [r7, #4]
 800de28:	e001      	b.n	800de2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de2a:	2300      	movs	r3, #0
 800de2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de2e:	687b      	ldr	r3, [r7, #4]
	}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	20001078 	.word	0x20001078
 800de40:	20001094 	.word	0x20001094

0800de44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d056      	beq.n	800df08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800de5a:	4b2e      	ldr	r3, [pc, #184]	; (800df14 <xTaskPriorityDisinherit+0xd0>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	429a      	cmp	r2, r3
 800de62:	d00a      	beq.n	800de7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	60fb      	str	r3, [r7, #12]
}
 800de76:	bf00      	nop
 800de78:	e7fe      	b.n	800de78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10a      	bne.n	800de98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	60bb      	str	r3, [r7, #8]
}
 800de94:	bf00      	nop
 800de96:	e7fe      	b.n	800de96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de9c:	1e5a      	subs	r2, r3, #1
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deaa:	429a      	cmp	r2, r3
 800deac:	d02c      	beq.n	800df08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d128      	bne.n	800df08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	3304      	adds	r3, #4
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fc22 	bl	800c704 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800decc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded8:	4b0f      	ldr	r3, [pc, #60]	; (800df18 <xTaskPriorityDisinherit+0xd4>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d903      	bls.n	800dee8 <xTaskPriorityDisinherit+0xa4>
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee4:	4a0c      	ldr	r2, [pc, #48]	; (800df18 <xTaskPriorityDisinherit+0xd4>)
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deec:	4613      	mov	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4a09      	ldr	r2, [pc, #36]	; (800df1c <xTaskPriorityDisinherit+0xd8>)
 800def6:	441a      	add	r2, r3
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	3304      	adds	r3, #4
 800defc:	4619      	mov	r1, r3
 800defe:	4610      	mov	r0, r2
 800df00:	f7fe fba3 	bl	800c64a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df04:	2301      	movs	r3, #1
 800df06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df08:	697b      	ldr	r3, [r7, #20]
	}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20000b98 	.word	0x20000b98
 800df18:	20001074 	.word	0x20001074
 800df1c:	20000b9c 	.word	0x20000b9c

0800df20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df2a:	4b21      	ldr	r3, [pc, #132]	; (800dfb0 <prvAddCurrentTaskToDelayedList+0x90>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df30:	4b20      	ldr	r3, [pc, #128]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3304      	adds	r3, #4
 800df36:	4618      	mov	r0, r3
 800df38:	f7fe fbe4 	bl	800c704 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df42:	d10a      	bne.n	800df5a <prvAddCurrentTaskToDelayedList+0x3a>
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d007      	beq.n	800df5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df4a:	4b1a      	ldr	r3, [pc, #104]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3304      	adds	r3, #4
 800df50:	4619      	mov	r1, r3
 800df52:	4819      	ldr	r0, [pc, #100]	; (800dfb8 <prvAddCurrentTaskToDelayedList+0x98>)
 800df54:	f7fe fb79 	bl	800c64a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df58:	e026      	b.n	800dfa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4413      	add	r3, r2
 800df60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df62:	4b14      	ldr	r3, [pc, #80]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d209      	bcs.n	800df86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df72:	4b12      	ldr	r3, [pc, #72]	; (800dfbc <prvAddCurrentTaskToDelayedList+0x9c>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	3304      	adds	r3, #4
 800df7c:	4619      	mov	r1, r3
 800df7e:	4610      	mov	r0, r2
 800df80:	f7fe fb87 	bl	800c692 <vListInsert>
}
 800df84:	e010      	b.n	800dfa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df86:	4b0e      	ldr	r3, [pc, #56]	; (800dfc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	4b0a      	ldr	r3, [pc, #40]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3304      	adds	r3, #4
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f7fe fb7d 	bl	800c692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df98:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d202      	bcs.n	800dfa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dfa2:	4a08      	ldr	r2, [pc, #32]	; (800dfc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	6013      	str	r3, [r2, #0]
}
 800dfa8:	bf00      	nop
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20001070 	.word	0x20001070
 800dfb4:	20000b98 	.word	0x20000b98
 800dfb8:	20001058 	.word	0x20001058
 800dfbc:	20001028 	.word	0x20001028
 800dfc0:	20001024 	.word	0x20001024
 800dfc4:	2000108c 	.word	0x2000108c

0800dfc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08a      	sub	sp, #40	; 0x28
 800dfcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dfd2:	f000 fb07 	bl	800e5e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dfd6:	4b1c      	ldr	r3, [pc, #112]	; (800e048 <xTimerCreateTimerTask+0x80>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d021      	beq.n	800e022 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dfe6:	1d3a      	adds	r2, r7, #4
 800dfe8:	f107 0108 	add.w	r1, r7, #8
 800dfec:	f107 030c 	add.w	r3, r7, #12
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fe fae3 	bl	800c5bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	9202      	str	r2, [sp, #8]
 800dffe:	9301      	str	r3, [sp, #4]
 800e000:	2302      	movs	r3, #2
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	2300      	movs	r3, #0
 800e006:	460a      	mov	r2, r1
 800e008:	4910      	ldr	r1, [pc, #64]	; (800e04c <xTimerCreateTimerTask+0x84>)
 800e00a:	4811      	ldr	r0, [pc, #68]	; (800e050 <xTimerCreateTimerTask+0x88>)
 800e00c:	f7ff f890 	bl	800d130 <xTaskCreateStatic>
 800e010:	4603      	mov	r3, r0
 800e012:	4a10      	ldr	r2, [pc, #64]	; (800e054 <xTimerCreateTimerTask+0x8c>)
 800e014:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e016:	4b0f      	ldr	r3, [pc, #60]	; (800e054 <xTimerCreateTimerTask+0x8c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e01e:	2301      	movs	r3, #1
 800e020:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10a      	bne.n	800e03e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	613b      	str	r3, [r7, #16]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e03e:	697b      	ldr	r3, [r7, #20]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3718      	adds	r7, #24
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	200010d0 	.word	0x200010d0
 800e04c:	08010608 	.word	0x08010608
 800e050:	0800e18d 	.word	0x0800e18d
 800e054:	200010d4 	.word	0x200010d4

0800e058 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08a      	sub	sp, #40	; 0x28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
 800e064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e066:	2300      	movs	r3, #0
 800e068:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10a      	bne.n	800e086 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	623b      	str	r3, [r7, #32]
}
 800e082:	bf00      	nop
 800e084:	e7fe      	b.n	800e084 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e086:	4b1a      	ldr	r3, [pc, #104]	; (800e0f0 <xTimerGenericCommand+0x98>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d02a      	beq.n	800e0e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b05      	cmp	r3, #5
 800e09e:	dc18      	bgt.n	800e0d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0a0:	f7ff feb2 	bl	800de08 <xTaskGetSchedulerState>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d109      	bne.n	800e0be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e0aa:	4b11      	ldr	r3, [pc, #68]	; (800e0f0 <xTimerGenericCommand+0x98>)
 800e0ac:	6818      	ldr	r0, [r3, #0]
 800e0ae:	f107 0110 	add.w	r1, r7, #16
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0b6:	f7fe fc53 	bl	800c960 <xQueueGenericSend>
 800e0ba:	6278      	str	r0, [r7, #36]	; 0x24
 800e0bc:	e012      	b.n	800e0e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e0be:	4b0c      	ldr	r3, [pc, #48]	; (800e0f0 <xTimerGenericCommand+0x98>)
 800e0c0:	6818      	ldr	r0, [r3, #0]
 800e0c2:	f107 0110 	add.w	r1, r7, #16
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f7fe fc49 	bl	800c960 <xQueueGenericSend>
 800e0ce:	6278      	str	r0, [r7, #36]	; 0x24
 800e0d0:	e008      	b.n	800e0e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e0d2:	4b07      	ldr	r3, [pc, #28]	; (800e0f0 <xTimerGenericCommand+0x98>)
 800e0d4:	6818      	ldr	r0, [r3, #0]
 800e0d6:	f107 0110 	add.w	r1, r7, #16
 800e0da:	2300      	movs	r3, #0
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	f7fe fd3d 	bl	800cb5c <xQueueGenericSendFromISR>
 800e0e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3728      	adds	r7, #40	; 0x28
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	200010d0 	.word	0x200010d0

0800e0f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0fe:	4b22      	ldr	r3, [pc, #136]	; (800e188 <prvProcessExpiredTimer+0x94>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	3304      	adds	r3, #4
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fe faf9 	bl	800c704 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e118:	f003 0304 	and.w	r3, r3, #4
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d022      	beq.n	800e166 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	699a      	ldr	r2, [r3, #24]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	18d1      	adds	r1, r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	6978      	ldr	r0, [r7, #20]
 800e12e:	f000 f8d1 	bl	800e2d4 <prvInsertTimerInActiveList>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d01f      	beq.n	800e178 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e138:	2300      	movs	r3, #0
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	2300      	movs	r3, #0
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	2100      	movs	r1, #0
 800e142:	6978      	ldr	r0, [r7, #20]
 800e144:	f7ff ff88 	bl	800e058 <xTimerGenericCommand>
 800e148:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d113      	bne.n	800e178 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e16c:	f023 0301 	bic.w	r3, r3, #1
 800e170:	b2da      	uxtb	r2, r3
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	6a1b      	ldr	r3, [r3, #32]
 800e17c:	6978      	ldr	r0, [r7, #20]
 800e17e:	4798      	blx	r3
}
 800e180:	bf00      	nop
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	200010c8 	.word	0x200010c8

0800e18c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e194:	f107 0308 	add.w	r3, r7, #8
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 f857 	bl	800e24c <prvGetNextExpireTime>
 800e19e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 f803 	bl	800e1b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e1aa:	f000 f8d5 	bl	800e358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1ae:	e7f1      	b.n	800e194 <prvTimerTask+0x8>

0800e1b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e1ba:	f7ff fa1b 	bl	800d5f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1be:	f107 0308 	add.w	r3, r7, #8
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 f866 	bl	800e294 <prvSampleTimeNow>
 800e1c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d130      	bne.n	800e232 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10a      	bne.n	800e1ec <prvProcessTimerOrBlockTask+0x3c>
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d806      	bhi.n	800e1ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e1de:	f7ff fa17 	bl	800d610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e1e2:	68f9      	ldr	r1, [r7, #12]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff ff85 	bl	800e0f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e1ea:	e024      	b.n	800e236 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d008      	beq.n	800e204 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e1f2:	4b13      	ldr	r3, [pc, #76]	; (800e240 <prvProcessTimerOrBlockTask+0x90>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <prvProcessTimerOrBlockTask+0x50>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e000      	b.n	800e202 <prvProcessTimerOrBlockTask+0x52>
 800e200:	2300      	movs	r3, #0
 800e202:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e204:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <prvProcessTimerOrBlockTask+0x94>)
 800e206:	6818      	ldr	r0, [r3, #0]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	1ad3      	subs	r3, r2, r3
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	4619      	mov	r1, r3
 800e212:	f7fe ff59 	bl	800d0c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e216:	f7ff f9fb 	bl	800d610 <xTaskResumeAll>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10a      	bne.n	800e236 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e220:	4b09      	ldr	r3, [pc, #36]	; (800e248 <prvProcessTimerOrBlockTask+0x98>)
 800e222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	f3bf 8f6f 	isb	sy
}
 800e230:	e001      	b.n	800e236 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e232:	f7ff f9ed 	bl	800d610 <xTaskResumeAll>
}
 800e236:	bf00      	nop
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	200010cc 	.word	0x200010cc
 800e244:	200010d0 	.word	0x200010d0
 800e248:	e000ed04 	.word	0xe000ed04

0800e24c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e254:	4b0e      	ldr	r3, [pc, #56]	; (800e290 <prvGetNextExpireTime+0x44>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <prvGetNextExpireTime+0x16>
 800e25e:	2201      	movs	r2, #1
 800e260:	e000      	b.n	800e264 <prvGetNextExpireTime+0x18>
 800e262:	2200      	movs	r2, #0
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d105      	bne.n	800e27c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e270:	4b07      	ldr	r3, [pc, #28]	; (800e290 <prvGetNextExpireTime+0x44>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	60fb      	str	r3, [r7, #12]
 800e27a:	e001      	b.n	800e280 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e27c:	2300      	movs	r3, #0
 800e27e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e280:	68fb      	ldr	r3, [r7, #12]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	200010c8 	.word	0x200010c8

0800e294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e29c:	f7ff fa56 	bl	800d74c <xTaskGetTickCount>
 800e2a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e2a2:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <prvSampleTimeNow+0x3c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d205      	bcs.n	800e2b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e2ac:	f000 f936 	bl	800e51c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	e002      	b.n	800e2be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e2be:	4a04      	ldr	r2, [pc, #16]	; (800e2d0 <prvSampleTimeNow+0x3c>)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	200010d8 	.word	0x200010d8

0800e2d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d812      	bhi.n	800e320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	1ad2      	subs	r2, r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	429a      	cmp	r2, r3
 800e306:	d302      	bcc.n	800e30e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e308:	2301      	movs	r3, #1
 800e30a:	617b      	str	r3, [r7, #20]
 800e30c:	e01b      	b.n	800e346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e30e:	4b10      	ldr	r3, [pc, #64]	; (800e350 <prvInsertTimerInActiveList+0x7c>)
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3304      	adds	r3, #4
 800e316:	4619      	mov	r1, r3
 800e318:	4610      	mov	r0, r2
 800e31a:	f7fe f9ba 	bl	800c692 <vListInsert>
 800e31e:	e012      	b.n	800e346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	429a      	cmp	r2, r3
 800e326:	d206      	bcs.n	800e336 <prvInsertTimerInActiveList+0x62>
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d302      	bcc.n	800e336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e330:	2301      	movs	r3, #1
 800e332:	617b      	str	r3, [r7, #20]
 800e334:	e007      	b.n	800e346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e336:	4b07      	ldr	r3, [pc, #28]	; (800e354 <prvInsertTimerInActiveList+0x80>)
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4619      	mov	r1, r3
 800e340:	4610      	mov	r0, r2
 800e342:	f7fe f9a6 	bl	800c692 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e346:	697b      	ldr	r3, [r7, #20]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	200010cc 	.word	0x200010cc
 800e354:	200010c8 	.word	0x200010c8

0800e358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08e      	sub	sp, #56	; 0x38
 800e35c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e35e:	e0ca      	b.n	800e4f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	da18      	bge.n	800e398 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e366:	1d3b      	adds	r3, r7, #4
 800e368:	3304      	adds	r3, #4
 800e36a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10a      	bne.n	800e388 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	61fb      	str	r3, [r7, #28]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e38e:	6850      	ldr	r0, [r2, #4]
 800e390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e392:	6892      	ldr	r2, [r2, #8]
 800e394:	4611      	mov	r1, r2
 800e396:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f2c0 80aa 	blt.w	800e4f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d004      	beq.n	800e3b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fe f9a7 	bl	800c704 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3b6:	463b      	mov	r3, r7
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7ff ff6b 	bl	800e294 <prvSampleTimeNow>
 800e3be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b09      	cmp	r3, #9
 800e3c4:	f200 8097 	bhi.w	800e4f6 <prvProcessReceivedCommands+0x19e>
 800e3c8:	a201      	add	r2, pc, #4	; (adr r2, 800e3d0 <prvProcessReceivedCommands+0x78>)
 800e3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ce:	bf00      	nop
 800e3d0:	0800e3f9 	.word	0x0800e3f9
 800e3d4:	0800e3f9 	.word	0x0800e3f9
 800e3d8:	0800e3f9 	.word	0x0800e3f9
 800e3dc:	0800e46d 	.word	0x0800e46d
 800e3e0:	0800e481 	.word	0x0800e481
 800e3e4:	0800e4cb 	.word	0x0800e4cb
 800e3e8:	0800e3f9 	.word	0x0800e3f9
 800e3ec:	0800e3f9 	.word	0x0800e3f9
 800e3f0:	0800e46d 	.word	0x0800e46d
 800e3f4:	0800e481 	.word	0x0800e481
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3fe:	f043 0301 	orr.w	r3, r3, #1
 800e402:	b2da      	uxtb	r2, r3
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	699b      	ldr	r3, [r3, #24]
 800e410:	18d1      	adds	r1, r2, r3
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e418:	f7ff ff5c 	bl	800e2d4 <prvInsertTimerInActiveList>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d069      	beq.n	800e4f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e428:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e430:	f003 0304 	and.w	r3, r3, #4
 800e434:	2b00      	cmp	r3, #0
 800e436:	d05e      	beq.n	800e4f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	441a      	add	r2, r3
 800e440:	2300      	movs	r3, #0
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	2300      	movs	r3, #0
 800e446:	2100      	movs	r1, #0
 800e448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e44a:	f7ff fe05 	bl	800e058 <xTimerGenericCommand>
 800e44e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e450:	6a3b      	ldr	r3, [r7, #32]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d14f      	bne.n	800e4f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	61bb      	str	r3, [r7, #24]
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e472:	f023 0301 	bic.w	r3, r3, #1
 800e476:	b2da      	uxtb	r2, r3
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e47e:	e03a      	b.n	800e4f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e486:	f043 0301 	orr.w	r3, r3, #1
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10a      	bne.n	800e4b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	617b      	str	r3, [r7, #20]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	699a      	ldr	r2, [r3, #24]
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	18d1      	adds	r1, r2, r3
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4c4:	f7ff ff06 	bl	800e2d4 <prvInsertTimerInActiveList>
					break;
 800e4c8:	e015      	b.n	800e4f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4d0:	f003 0302 	and.w	r3, r3, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d103      	bne.n	800e4e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4da:	f000 fbe1 	bl	800eca0 <vPortFree>
 800e4de:	e00a      	b.n	800e4f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4e6:	f023 0301 	bic.w	r3, r3, #1
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e4f2:	e000      	b.n	800e4f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e4f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4f6:	4b08      	ldr	r3, [pc, #32]	; (800e518 <prvProcessReceivedCommands+0x1c0>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	1d39      	adds	r1, r7, #4
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fe fbc8 	bl	800cc94 <xQueueReceive>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	f47f af2a 	bne.w	800e360 <prvProcessReceivedCommands+0x8>
	}
}
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
 800e510:	3730      	adds	r7, #48	; 0x30
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	200010d0 	.word	0x200010d0

0800e51c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b088      	sub	sp, #32
 800e520:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e522:	e048      	b.n	800e5b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e524:	4b2d      	ldr	r3, [pc, #180]	; (800e5dc <prvSwitchTimerLists+0xc0>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e52e:	4b2b      	ldr	r3, [pc, #172]	; (800e5dc <prvSwitchTimerLists+0xc0>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3304      	adds	r3, #4
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fe f8e1 	bl	800c704 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	6a1b      	ldr	r3, [r3, #32]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e550:	f003 0304 	and.w	r3, r3, #4
 800e554:	2b00      	cmp	r3, #0
 800e556:	d02e      	beq.n	800e5b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	4413      	add	r3, r2
 800e560:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	429a      	cmp	r2, r3
 800e568:	d90e      	bls.n	800e588 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e576:	4b19      	ldr	r3, [pc, #100]	; (800e5dc <prvSwitchTimerLists+0xc0>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3304      	adds	r3, #4
 800e57e:	4619      	mov	r1, r3
 800e580:	4610      	mov	r0, r2
 800e582:	f7fe f886 	bl	800c692 <vListInsert>
 800e586:	e016      	b.n	800e5b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e588:	2300      	movs	r3, #0
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	2300      	movs	r3, #0
 800e58e:	693a      	ldr	r2, [r7, #16]
 800e590:	2100      	movs	r1, #0
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f7ff fd60 	bl	800e058 <xTimerGenericCommand>
 800e598:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10a      	bne.n	800e5b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	603b      	str	r3, [r7, #0]
}
 800e5b2:	bf00      	nop
 800e5b4:	e7fe      	b.n	800e5b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5b6:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <prvSwitchTimerLists+0xc0>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1b1      	bne.n	800e524 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e5c0:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <prvSwitchTimerLists+0xc0>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e5c6:	4b06      	ldr	r3, [pc, #24]	; (800e5e0 <prvSwitchTimerLists+0xc4>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a04      	ldr	r2, [pc, #16]	; (800e5dc <prvSwitchTimerLists+0xc0>)
 800e5cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e5ce:	4a04      	ldr	r2, [pc, #16]	; (800e5e0 <prvSwitchTimerLists+0xc4>)
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	6013      	str	r3, [r2, #0]
}
 800e5d4:	bf00      	nop
 800e5d6:	3718      	adds	r7, #24
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	200010c8 	.word	0x200010c8
 800e5e0:	200010cc 	.word	0x200010cc

0800e5e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5ea:	f000 f96b 	bl	800e8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5ee:	4b15      	ldr	r3, [pc, #84]	; (800e644 <prvCheckForValidListAndQueue+0x60>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d120      	bne.n	800e638 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e5f6:	4814      	ldr	r0, [pc, #80]	; (800e648 <prvCheckForValidListAndQueue+0x64>)
 800e5f8:	f7fd fffa 	bl	800c5f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5fc:	4813      	ldr	r0, [pc, #76]	; (800e64c <prvCheckForValidListAndQueue+0x68>)
 800e5fe:	f7fd fff7 	bl	800c5f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e602:	4b13      	ldr	r3, [pc, #76]	; (800e650 <prvCheckForValidListAndQueue+0x6c>)
 800e604:	4a10      	ldr	r2, [pc, #64]	; (800e648 <prvCheckForValidListAndQueue+0x64>)
 800e606:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e608:	4b12      	ldr	r3, [pc, #72]	; (800e654 <prvCheckForValidListAndQueue+0x70>)
 800e60a:	4a10      	ldr	r2, [pc, #64]	; (800e64c <prvCheckForValidListAndQueue+0x68>)
 800e60c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e60e:	2300      	movs	r3, #0
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	4b11      	ldr	r3, [pc, #68]	; (800e658 <prvCheckForValidListAndQueue+0x74>)
 800e614:	4a11      	ldr	r2, [pc, #68]	; (800e65c <prvCheckForValidListAndQueue+0x78>)
 800e616:	2110      	movs	r1, #16
 800e618:	200a      	movs	r0, #10
 800e61a:	f7fe f905 	bl	800c828 <xQueueGenericCreateStatic>
 800e61e:	4603      	mov	r3, r0
 800e620:	4a08      	ldr	r2, [pc, #32]	; (800e644 <prvCheckForValidListAndQueue+0x60>)
 800e622:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e624:	4b07      	ldr	r3, [pc, #28]	; (800e644 <prvCheckForValidListAndQueue+0x60>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d005      	beq.n	800e638 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e62c:	4b05      	ldr	r3, [pc, #20]	; (800e644 <prvCheckForValidListAndQueue+0x60>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	490b      	ldr	r1, [pc, #44]	; (800e660 <prvCheckForValidListAndQueue+0x7c>)
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe fd1e 	bl	800d074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e638:	f000 f974 	bl	800e924 <vPortExitCritical>
}
 800e63c:	bf00      	nop
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	200010d0 	.word	0x200010d0
 800e648:	200010a0 	.word	0x200010a0
 800e64c:	200010b4 	.word	0x200010b4
 800e650:	200010c8 	.word	0x200010c8
 800e654:	200010cc 	.word	0x200010cc
 800e658:	2000117c 	.word	0x2000117c
 800e65c:	200010dc 	.word	0x200010dc
 800e660:	08010610 	.word	0x08010610

0800e664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	3b04      	subs	r3, #4
 800e674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3b04      	subs	r3, #4
 800e682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	f023 0201 	bic.w	r2, r3, #1
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3b04      	subs	r3, #4
 800e692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e694:	4a0c      	ldr	r2, [pc, #48]	; (800e6c8 <pxPortInitialiseStack+0x64>)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	3b14      	subs	r3, #20
 800e69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3b04      	subs	r3, #4
 800e6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f06f 0202 	mvn.w	r2, #2
 800e6b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3b20      	subs	r3, #32
 800e6b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3714      	adds	r7, #20
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	0800e6cd 	.word	0x0800e6cd

0800e6cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6d6:	4b12      	ldr	r3, [pc, #72]	; (800e720 <prvTaskExitError+0x54>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6de:	d00a      	beq.n	800e6f6 <prvTaskExitError+0x2a>
	__asm volatile
 800e6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e4:	f383 8811 	msr	BASEPRI, r3
 800e6e8:	f3bf 8f6f 	isb	sy
 800e6ec:	f3bf 8f4f 	dsb	sy
 800e6f0:	60fb      	str	r3, [r7, #12]
}
 800e6f2:	bf00      	nop
 800e6f4:	e7fe      	b.n	800e6f4 <prvTaskExitError+0x28>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	60bb      	str	r3, [r7, #8]
}
 800e708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e70a:	bf00      	nop
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0fc      	beq.n	800e70c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e712:	bf00      	nop
 800e714:	bf00      	nop
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	20000104 	.word	0x20000104
	...

0800e730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <pxCurrentTCBConst2>)
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	f380 8809 	msr	PSP, r0
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f04f 0000 	mov.w	r0, #0
 800e746:	f380 8811 	msr	BASEPRI, r0
 800e74a:	4770      	bx	lr
 800e74c:	f3af 8000 	nop.w

0800e750 <pxCurrentTCBConst2>:
 800e750:	20000b98 	.word	0x20000b98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop

0800e758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e758:	4808      	ldr	r0, [pc, #32]	; (800e77c <prvPortStartFirstTask+0x24>)
 800e75a:	6800      	ldr	r0, [r0, #0]
 800e75c:	6800      	ldr	r0, [r0, #0]
 800e75e:	f380 8808 	msr	MSP, r0
 800e762:	f04f 0000 	mov.w	r0, #0
 800e766:	f380 8814 	msr	CONTROL, r0
 800e76a:	b662      	cpsie	i
 800e76c:	b661      	cpsie	f
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	df00      	svc	0
 800e778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e77a:	bf00      	nop
 800e77c:	e000ed08 	.word	0xe000ed08

0800e780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e786:	4b46      	ldr	r3, [pc, #280]	; (800e8a0 <xPortStartScheduler+0x120>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a46      	ldr	r2, [pc, #280]	; (800e8a4 <xPortStartScheduler+0x124>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d10a      	bne.n	800e7a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	613b      	str	r3, [r7, #16]
}
 800e7a2:	bf00      	nop
 800e7a4:	e7fe      	b.n	800e7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7a6:	4b3e      	ldr	r3, [pc, #248]	; (800e8a0 <xPortStartScheduler+0x120>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a3f      	ldr	r2, [pc, #252]	; (800e8a8 <xPortStartScheduler+0x128>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d10a      	bne.n	800e7c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	60fb      	str	r3, [r7, #12]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7c6:	4b39      	ldr	r3, [pc, #228]	; (800e8ac <xPortStartScheduler+0x12c>)
 800e7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	22ff      	movs	r2, #255	; 0xff
 800e7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4b31      	ldr	r3, [pc, #196]	; (800e8b0 <xPortStartScheduler+0x130>)
 800e7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7ee:	4b31      	ldr	r3, [pc, #196]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7f0:	2207      	movs	r2, #7
 800e7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7f4:	e009      	b.n	800e80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e7f6:	4b2f      	ldr	r3, [pc, #188]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	4a2d      	ldr	r2, [pc, #180]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	b2db      	uxtb	r3, r3
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e812:	2b80      	cmp	r3, #128	; 0x80
 800e814:	d0ef      	beq.n	800e7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e816:	4b27      	ldr	r3, [pc, #156]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f1c3 0307 	rsb	r3, r3, #7
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d00a      	beq.n	800e838 <xPortStartScheduler+0xb8>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	60bb      	str	r3, [r7, #8]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e838:	4b1e      	ldr	r3, [pc, #120]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	4a1d      	ldr	r2, [pc, #116]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e842:	4b1c      	ldr	r3, [pc, #112]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e84a:	4a1a      	ldr	r2, [pc, #104]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	b2da      	uxtb	r2, r3
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e856:	4b18      	ldr	r3, [pc, #96]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a17      	ldr	r2, [pc, #92]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e862:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a14      	ldr	r2, [pc, #80]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e86e:	f000 f8dd 	bl	800ea2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e872:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <xPortStartScheduler+0x13c>)
 800e874:	2200      	movs	r2, #0
 800e876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e878:	f000 f8fc 	bl	800ea74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e87c:	4b10      	ldr	r3, [pc, #64]	; (800e8c0 <xPortStartScheduler+0x140>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a0f      	ldr	r2, [pc, #60]	; (800e8c0 <xPortStartScheduler+0x140>)
 800e882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e888:	f7ff ff66 	bl	800e758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e88c:	f7ff f828 	bl	800d8e0 <vTaskSwitchContext>
	prvTaskExitError();
 800e890:	f7ff ff1c 	bl	800e6cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	e000ed00 	.word	0xe000ed00
 800e8a4:	410fc271 	.word	0x410fc271
 800e8a8:	410fc270 	.word	0x410fc270
 800e8ac:	e000e400 	.word	0xe000e400
 800e8b0:	200011cc 	.word	0x200011cc
 800e8b4:	200011d0 	.word	0x200011d0
 800e8b8:	e000ed20 	.word	0xe000ed20
 800e8bc:	20000104 	.word	0x20000104
 800e8c0:	e000ef34 	.word	0xe000ef34

0800e8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	607b      	str	r3, [r7, #4]
}
 800e8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8de:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <vPortEnterCritical+0x58>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	4a0d      	ldr	r2, [pc, #52]	; (800e91c <vPortEnterCritical+0x58>)
 800e8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <vPortEnterCritical+0x58>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d10f      	bne.n	800e910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8f0:	4b0b      	ldr	r3, [pc, #44]	; (800e920 <vPortEnterCritical+0x5c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00a      	beq.n	800e910 <vPortEnterCritical+0x4c>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	603b      	str	r3, [r7, #0]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <vPortEnterCritical+0x4a>
	}
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr
 800e91c:	20000104 	.word	0x20000104
 800e920:	e000ed04 	.word	0xe000ed04

0800e924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e92a:	4b12      	ldr	r3, [pc, #72]	; (800e974 <vPortExitCritical+0x50>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10a      	bne.n	800e948 <vPortExitCritical+0x24>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	607b      	str	r3, [r7, #4]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e948:	4b0a      	ldr	r3, [pc, #40]	; (800e974 <vPortExitCritical+0x50>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	4a09      	ldr	r2, [pc, #36]	; (800e974 <vPortExitCritical+0x50>)
 800e950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e952:	4b08      	ldr	r3, [pc, #32]	; (800e974 <vPortExitCritical+0x50>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d105      	bne.n	800e966 <vPortExitCritical+0x42>
 800e95a:	2300      	movs	r3, #0
 800e95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	f383 8811 	msr	BASEPRI, r3
}
 800e964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e966:	bf00      	nop
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20000104 	.word	0x20000104
	...

0800e980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e980:	f3ef 8009 	mrs	r0, PSP
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4b15      	ldr	r3, [pc, #84]	; (800e9e0 <pxCurrentTCBConst>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	f01e 0f10 	tst.w	lr, #16
 800e990:	bf08      	it	eq
 800e992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	6010      	str	r0, [r2, #0]
 800e99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9a4:	f380 8811 	msr	BASEPRI, r0
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f7fe ff96 	bl	800d8e0 <vTaskSwitchContext>
 800e9b4:	f04f 0000 	mov.w	r0, #0
 800e9b8:	f380 8811 	msr	BASEPRI, r0
 800e9bc:	bc09      	pop	{r0, r3}
 800e9be:	6819      	ldr	r1, [r3, #0]
 800e9c0:	6808      	ldr	r0, [r1, #0]
 800e9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c6:	f01e 0f10 	tst.w	lr, #16
 800e9ca:	bf08      	it	eq
 800e9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9d0:	f380 8809 	msr	PSP, r0
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w

0800e9e0 <pxCurrentTCBConst>:
 800e9e0:	20000b98 	.word	0x20000b98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop

0800e9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	607b      	str	r3, [r7, #4]
}
 800ea00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea02:	f7fe feb3 	bl	800d76c <xTaskIncrementTick>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <xPortSysTickHandler+0x40>)
 800ea0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	2300      	movs	r3, #0
 800ea16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f383 8811 	msr	BASEPRI, r3
}
 800ea1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea30:	4b0b      	ldr	r3, [pc, #44]	; (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea36:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <vPortSetupTimerInterrupt+0x38>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <vPortSetupTimerInterrupt+0x3c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0a      	ldr	r2, [pc, #40]	; (800ea6c <vPortSetupTimerInterrupt+0x40>)
 800ea42:	fba2 2303 	umull	r2, r3, r2, r3
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	4a09      	ldr	r2, [pc, #36]	; (800ea70 <vPortSetupTimerInterrupt+0x44>)
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea4e:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	e000e010 	.word	0xe000e010
 800ea64:	e000e018 	.word	0xe000e018
 800ea68:	2000006c 	.word	0x2000006c
 800ea6c:	10624dd3 	.word	0x10624dd3
 800ea70:	e000e014 	.word	0xe000e014

0800ea74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea84 <vPortEnableVFP+0x10>
 800ea78:	6801      	ldr	r1, [r0, #0]
 800ea7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea7e:	6001      	str	r1, [r0, #0]
 800ea80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea82:	bf00      	nop
 800ea84:	e000ed88 	.word	0xe000ed88

0800ea88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea8e:	f3ef 8305 	mrs	r3, IPSR
 800ea92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b0f      	cmp	r3, #15
 800ea98:	d914      	bls.n	800eac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea9a:	4a17      	ldr	r2, [pc, #92]	; (800eaf8 <vPortValidateInterruptPriority+0x70>)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eaa4:	4b15      	ldr	r3, [pc, #84]	; (800eafc <vPortValidateInterruptPriority+0x74>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	7afa      	ldrb	r2, [r7, #11]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d20a      	bcs.n	800eac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	607b      	str	r3, [r7, #4]
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eac4:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <vPortValidateInterruptPriority+0x78>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eacc:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <vPortValidateInterruptPriority+0x7c>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d90a      	bls.n	800eaea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ead4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	603b      	str	r3, [r7, #0]
}
 800eae6:	bf00      	nop
 800eae8:	e7fe      	b.n	800eae8 <vPortValidateInterruptPriority+0x60>
	}
 800eaea:	bf00      	nop
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	e000e3f0 	.word	0xe000e3f0
 800eafc:	200011cc 	.word	0x200011cc
 800eb00:	e000ed0c 	.word	0xe000ed0c
 800eb04:	200011d0 	.word	0x200011d0

0800eb08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b08a      	sub	sp, #40	; 0x28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb10:	2300      	movs	r3, #0
 800eb12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb14:	f7fe fd6e 	bl	800d5f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb18:	4b5b      	ldr	r3, [pc, #364]	; (800ec88 <pvPortMalloc+0x180>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb20:	f000 f920 	bl	800ed64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb24:	4b59      	ldr	r3, [pc, #356]	; (800ec8c <pvPortMalloc+0x184>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f040 8093 	bne.w	800ec58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d01d      	beq.n	800eb74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb38:	2208      	movs	r2, #8
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f003 0307 	and.w	r3, r3, #7
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d014      	beq.n	800eb74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f023 0307 	bic.w	r3, r3, #7
 800eb50:	3308      	adds	r3, #8
 800eb52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00a      	beq.n	800eb74 <pvPortMalloc+0x6c>
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	617b      	str	r3, [r7, #20]
}
 800eb70:	bf00      	nop
 800eb72:	e7fe      	b.n	800eb72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d06e      	beq.n	800ec58 <pvPortMalloc+0x150>
 800eb7a:	4b45      	ldr	r3, [pc, #276]	; (800ec90 <pvPortMalloc+0x188>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d869      	bhi.n	800ec58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb84:	4b43      	ldr	r3, [pc, #268]	; (800ec94 <pvPortMalloc+0x18c>)
 800eb86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb88:	4b42      	ldr	r3, [pc, #264]	; (800ec94 <pvPortMalloc+0x18c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb8e:	e004      	b.n	800eb9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d903      	bls.n	800ebac <pvPortMalloc+0xa4>
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1f1      	bne.n	800eb90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ebac:	4b36      	ldr	r3, [pc, #216]	; (800ec88 <pvPortMalloc+0x180>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d050      	beq.n	800ec58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2208      	movs	r2, #8
 800ebbc:	4413      	add	r3, r2
 800ebbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ebc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	1ad2      	subs	r2, r2, r3
 800ebd0:	2308      	movs	r3, #8
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d91f      	bls.n	800ec18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <pvPortMalloc+0xf8>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	613b      	str	r3, [r7, #16]
}
 800ebfc:	bf00      	nop
 800ebfe:	e7fe      	b.n	800ebfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	1ad2      	subs	r2, r2, r3
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec12:	69b8      	ldr	r0, [r7, #24]
 800ec14:	f000 f908 	bl	800ee28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec18:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <pvPortMalloc+0x188>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	4a1b      	ldr	r2, [pc, #108]	; (800ec90 <pvPortMalloc+0x188>)
 800ec24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec26:	4b1a      	ldr	r3, [pc, #104]	; (800ec90 <pvPortMalloc+0x188>)
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	4b1b      	ldr	r3, [pc, #108]	; (800ec98 <pvPortMalloc+0x190>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d203      	bcs.n	800ec3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec32:	4b17      	ldr	r3, [pc, #92]	; (800ec90 <pvPortMalloc+0x188>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a18      	ldr	r2, [pc, #96]	; (800ec98 <pvPortMalloc+0x190>)
 800ec38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <pvPortMalloc+0x184>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	431a      	orrs	r2, r3
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec4e:	4b13      	ldr	r3, [pc, #76]	; (800ec9c <pvPortMalloc+0x194>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	4a11      	ldr	r2, [pc, #68]	; (800ec9c <pvPortMalloc+0x194>)
 800ec56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec58:	f7fe fcda 	bl	800d610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	f003 0307 	and.w	r3, r3, #7
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00a      	beq.n	800ec7c <pvPortMalloc+0x174>
	__asm volatile
 800ec66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	60fb      	str	r3, [r7, #12]
}
 800ec78:	bf00      	nop
 800ec7a:	e7fe      	b.n	800ec7a <pvPortMalloc+0x172>
	return pvReturn;
 800ec7c:	69fb      	ldr	r3, [r7, #28]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3728      	adds	r7, #40	; 0x28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	2001a1dc 	.word	0x2001a1dc
 800ec8c:	2001a1f0 	.word	0x2001a1f0
 800ec90:	2001a1e0 	.word	0x2001a1e0
 800ec94:	2001a1d4 	.word	0x2001a1d4
 800ec98:	2001a1e4 	.word	0x2001a1e4
 800ec9c:	2001a1e8 	.word	0x2001a1e8

0800eca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d04d      	beq.n	800ed4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ecb2:	2308      	movs	r3, #8
 800ecb4:	425b      	negs	r3, r3
 800ecb6:	697a      	ldr	r2, [r7, #20]
 800ecb8:	4413      	add	r3, r2
 800ecba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <vPortFree+0xb8>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10a      	bne.n	800ece4 <vPortFree+0x44>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	60fb      	str	r3, [r7, #12]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00a      	beq.n	800ed02 <vPortFree+0x62>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	60bb      	str	r3, [r7, #8]
}
 800ecfe:	bf00      	nop
 800ed00:	e7fe      	b.n	800ed00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <vPortFree+0xb8>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d01e      	beq.n	800ed4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d11a      	bne.n	800ed4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <vPortFree+0xb8>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	43db      	mvns	r3, r3
 800ed22:	401a      	ands	r2, r3
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed28:	f7fe fc64 	bl	800d5f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <vPortFree+0xbc>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4413      	add	r3, r2
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <vPortFree+0xbc>)
 800ed38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed3a:	6938      	ldr	r0, [r7, #16]
 800ed3c:	f000 f874 	bl	800ee28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed40:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <vPortFree+0xc0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	4a06      	ldr	r2, [pc, #24]	; (800ed60 <vPortFree+0xc0>)
 800ed48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed4a:	f7fe fc61 	bl	800d610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed4e:	bf00      	nop
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	2001a1f0 	.word	0x2001a1f0
 800ed5c:	2001a1e0 	.word	0x2001a1e0
 800ed60:	2001a1ec 	.word	0x2001a1ec

0800ed64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed6a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800ed6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed70:	4b27      	ldr	r3, [pc, #156]	; (800ee10 <prvHeapInit+0xac>)
 800ed72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3307      	adds	r3, #7
 800ed82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f023 0307 	bic.w	r3, r3, #7
 800ed8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	4a1f      	ldr	r2, [pc, #124]	; (800ee10 <prvHeapInit+0xac>)
 800ed94:	4413      	add	r3, r2
 800ed96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed9c:	4a1d      	ldr	r2, [pc, #116]	; (800ee14 <prvHeapInit+0xb0>)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eda2:	4b1c      	ldr	r3, [pc, #112]	; (800ee14 <prvHeapInit+0xb0>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4413      	add	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800edb0:	2208      	movs	r2, #8
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	1a9b      	subs	r3, r3, r2
 800edb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f023 0307 	bic.w	r3, r3, #7
 800edbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	4a15      	ldr	r2, [pc, #84]	; (800ee18 <prvHeapInit+0xb4>)
 800edc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800edc6:	4b14      	ldr	r3, [pc, #80]	; (800ee18 <prvHeapInit+0xb4>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2200      	movs	r2, #0
 800edcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800edce:	4b12      	ldr	r3, [pc, #72]	; (800ee18 <prvHeapInit+0xb4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	1ad2      	subs	r2, r2, r3
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ede4:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <prvHeapInit+0xb4>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4a0a      	ldr	r2, [pc, #40]	; (800ee1c <prvHeapInit+0xb8>)
 800edf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	4a09      	ldr	r2, [pc, #36]	; (800ee20 <prvHeapInit+0xbc>)
 800edfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edfc:	4b09      	ldr	r3, [pc, #36]	; (800ee24 <prvHeapInit+0xc0>)
 800edfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee02:	601a      	str	r2, [r3, #0]
}
 800ee04:	bf00      	nop
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	200011d4 	.word	0x200011d4
 800ee14:	2001a1d4 	.word	0x2001a1d4
 800ee18:	2001a1dc 	.word	0x2001a1dc
 800ee1c:	2001a1e4 	.word	0x2001a1e4
 800ee20:	2001a1e0 	.word	0x2001a1e0
 800ee24:	2001a1f0 	.word	0x2001a1f0

0800ee28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee30:	4b28      	ldr	r3, [pc, #160]	; (800eed4 <prvInsertBlockIntoFreeList+0xac>)
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	e002      	b.n	800ee3c <prvInsertBlockIntoFreeList+0x14>
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d8f7      	bhi.n	800ee36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	4413      	add	r3, r2
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d108      	bne.n	800ee6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	441a      	add	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	441a      	add	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d118      	bne.n	800eeb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d00d      	beq.n	800eea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	441a      	add	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	e008      	b.n	800eeb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eea6:	4b0c      	ldr	r3, [pc, #48]	; (800eed8 <prvInsertBlockIntoFreeList+0xb0>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e003      	b.n	800eeb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d002      	beq.n	800eec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eec6:	bf00      	nop
 800eec8:	3714      	adds	r7, #20
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	2001a1d4 	.word	0x2001a1d4
 800eed8:	2001a1dc 	.word	0x2001a1dc

0800eedc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eee0:	2200      	movs	r2, #0
 800eee2:	4912      	ldr	r1, [pc, #72]	; (800ef2c <MX_USB_DEVICE_Init+0x50>)
 800eee4:	4812      	ldr	r0, [pc, #72]	; (800ef30 <MX_USB_DEVICE_Init+0x54>)
 800eee6:	f7fb ff21 	bl	800ad2c <USBD_Init>
 800eeea:	4603      	mov	r3, r0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d001      	beq.n	800eef4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eef0:	f7f1 ffc9 	bl	8000e86 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eef4:	490f      	ldr	r1, [pc, #60]	; (800ef34 <MX_USB_DEVICE_Init+0x58>)
 800eef6:	480e      	ldr	r0, [pc, #56]	; (800ef30 <MX_USB_DEVICE_Init+0x54>)
 800eef8:	f7fb ff48 	bl	800ad8c <USBD_RegisterClass>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d001      	beq.n	800ef06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef02:	f7f1 ffc0 	bl	8000e86 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef06:	490c      	ldr	r1, [pc, #48]	; (800ef38 <MX_USB_DEVICE_Init+0x5c>)
 800ef08:	4809      	ldr	r0, [pc, #36]	; (800ef30 <MX_USB_DEVICE_Init+0x54>)
 800ef0a:	f7fb fe7f 	bl	800ac0c <USBD_CDC_RegisterInterface>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef14:	f7f1 ffb7 	bl	8000e86 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef18:	4805      	ldr	r0, [pc, #20]	; (800ef30 <MX_USB_DEVICE_Init+0x54>)
 800ef1a:	f7fb ff6d 	bl	800adf8 <USBD_Start>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d001      	beq.n	800ef28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef24:	f7f1 ffaf 	bl	8000e86 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef28:	bf00      	nop
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	2000011c 	.word	0x2000011c
 800ef30:	2001a1f4 	.word	0x2001a1f4
 800ef34:	20000084 	.word	0x20000084
 800ef38:	20000108 	.word	0x20000108

0800ef3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef40:	2200      	movs	r2, #0
 800ef42:	4905      	ldr	r1, [pc, #20]	; (800ef58 <CDC_Init_FS+0x1c>)
 800ef44:	4805      	ldr	r0, [pc, #20]	; (800ef5c <CDC_Init_FS+0x20>)
 800ef46:	f7fb fe7b 	bl	800ac40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef4a:	4905      	ldr	r1, [pc, #20]	; (800ef60 <CDC_Init_FS+0x24>)
 800ef4c:	4803      	ldr	r0, [pc, #12]	; (800ef5c <CDC_Init_FS+0x20>)
 800ef4e:	f7fb fe99 	bl	800ac84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	2001acd0 	.word	0x2001acd0
 800ef5c:	2001a1f4 	.word	0x2001a1f4
 800ef60:	2001a4d0 	.word	0x2001a4d0

0800ef64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ef64:	b480      	push	{r7}
 800ef66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	6039      	str	r1, [r7, #0]
 800ef7e:	71fb      	strb	r3, [r7, #7]
 800ef80:	4613      	mov	r3, r2
 800ef82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ef84:	79fb      	ldrb	r3, [r7, #7]
 800ef86:	2b23      	cmp	r3, #35	; 0x23
 800ef88:	d84a      	bhi.n	800f020 <CDC_Control_FS+0xac>
 800ef8a:	a201      	add	r2, pc, #4	; (adr r2, 800ef90 <CDC_Control_FS+0x1c>)
 800ef8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef90:	0800f021 	.word	0x0800f021
 800ef94:	0800f021 	.word	0x0800f021
 800ef98:	0800f021 	.word	0x0800f021
 800ef9c:	0800f021 	.word	0x0800f021
 800efa0:	0800f021 	.word	0x0800f021
 800efa4:	0800f021 	.word	0x0800f021
 800efa8:	0800f021 	.word	0x0800f021
 800efac:	0800f021 	.word	0x0800f021
 800efb0:	0800f021 	.word	0x0800f021
 800efb4:	0800f021 	.word	0x0800f021
 800efb8:	0800f021 	.word	0x0800f021
 800efbc:	0800f021 	.word	0x0800f021
 800efc0:	0800f021 	.word	0x0800f021
 800efc4:	0800f021 	.word	0x0800f021
 800efc8:	0800f021 	.word	0x0800f021
 800efcc:	0800f021 	.word	0x0800f021
 800efd0:	0800f021 	.word	0x0800f021
 800efd4:	0800f021 	.word	0x0800f021
 800efd8:	0800f021 	.word	0x0800f021
 800efdc:	0800f021 	.word	0x0800f021
 800efe0:	0800f021 	.word	0x0800f021
 800efe4:	0800f021 	.word	0x0800f021
 800efe8:	0800f021 	.word	0x0800f021
 800efec:	0800f021 	.word	0x0800f021
 800eff0:	0800f021 	.word	0x0800f021
 800eff4:	0800f021 	.word	0x0800f021
 800eff8:	0800f021 	.word	0x0800f021
 800effc:	0800f021 	.word	0x0800f021
 800f000:	0800f021 	.word	0x0800f021
 800f004:	0800f021 	.word	0x0800f021
 800f008:	0800f021 	.word	0x0800f021
 800f00c:	0800f021 	.word	0x0800f021
 800f010:	0800f021 	.word	0x0800f021
 800f014:	0800f021 	.word	0x0800f021
 800f018:	0800f021 	.word	0x0800f021
 800f01c:	0800f021 	.word	0x0800f021
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f020:	bf00      	nop
  }

  return (USBD_OK);
 800f022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f024:	4618      	mov	r0, r3
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	4805      	ldr	r0, [pc, #20]	; (800f054 <CDC_Receive_FS+0x24>)
 800f03e:	f7fb fe21 	bl	800ac84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f042:	4804      	ldr	r0, [pc, #16]	; (800f054 <CDC_Receive_FS+0x24>)
 800f044:	f7fb fe3c 	bl	800acc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f048:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	2001a1f4 	.word	0x2001a1f4

0800f058 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f058:	b480      	push	{r7}
 800f05a:	b087      	sub	sp, #28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	4613      	mov	r3, r2
 800f064:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	371c      	adds	r7, #28
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
	...

0800f07c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	6039      	str	r1, [r7, #0]
 800f086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	2212      	movs	r2, #18
 800f08c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f08e:	4b03      	ldr	r3, [pc, #12]	; (800f09c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	20000138 	.word	0x20000138

0800f0a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	6039      	str	r1, [r7, #0]
 800f0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2204      	movs	r2, #4
 800f0b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f0b2:	4b03      	ldr	r3, [pc, #12]	; (800f0c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	2000014c 	.word	0x2000014c

0800f0c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	6039      	str	r1, [r7, #0]
 800f0ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d105      	bne.n	800f0e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	4907      	ldr	r1, [pc, #28]	; (800f0f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f0da:	4808      	ldr	r0, [pc, #32]	; (800f0fc <USBD_FS_ProductStrDescriptor+0x38>)
 800f0dc:	f7fd f838 	bl	800c150 <USBD_GetString>
 800f0e0:	e004      	b.n	800f0ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	4904      	ldr	r1, [pc, #16]	; (800f0f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f0e6:	4805      	ldr	r0, [pc, #20]	; (800f0fc <USBD_FS_ProductStrDescriptor+0x38>)
 800f0e8:	f7fd f832 	bl	800c150 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0ec:	4b02      	ldr	r3, [pc, #8]	; (800f0f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	2001b4d0 	.word	0x2001b4d0
 800f0fc:	08010618 	.word	0x08010618

0800f100 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	4603      	mov	r3, r0
 800f108:	6039      	str	r1, [r7, #0]
 800f10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	4904      	ldr	r1, [pc, #16]	; (800f120 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f110:	4804      	ldr	r0, [pc, #16]	; (800f124 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f112:	f7fd f81d 	bl	800c150 <USBD_GetString>
  return USBD_StrDesc;
 800f116:	4b02      	ldr	r3, [pc, #8]	; (800f120 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	2001b4d0 	.word	0x2001b4d0
 800f124:	08010630 	.word	0x08010630

0800f128 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	6039      	str	r1, [r7, #0]
 800f132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	221a      	movs	r2, #26
 800f138:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f13a:	f000 f843 	bl	800f1c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f13e:	4b02      	ldr	r3, [pc, #8]	; (800f148 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f140:	4618      	mov	r0, r3
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20000150 	.word	0x20000150

0800f14c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	6039      	str	r1, [r7, #0]
 800f156:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f158:	79fb      	ldrb	r3, [r7, #7]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d105      	bne.n	800f16a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	4907      	ldr	r1, [pc, #28]	; (800f180 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f162:	4808      	ldr	r0, [pc, #32]	; (800f184 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f164:	f7fc fff4 	bl	800c150 <USBD_GetString>
 800f168:	e004      	b.n	800f174 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	4904      	ldr	r1, [pc, #16]	; (800f180 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f16e:	4805      	ldr	r0, [pc, #20]	; (800f184 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f170:	f7fc ffee 	bl	800c150 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f174:	4b02      	ldr	r3, [pc, #8]	; (800f180 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f176:	4618      	mov	r0, r3
 800f178:	3708      	adds	r7, #8
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	2001b4d0 	.word	0x2001b4d0
 800f184:	08010644 	.word	0x08010644

0800f188 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	6039      	str	r1, [r7, #0]
 800f192:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d105      	bne.n	800f1a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	4907      	ldr	r1, [pc, #28]	; (800f1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f19e:	4808      	ldr	r0, [pc, #32]	; (800f1c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f1a0:	f7fc ffd6 	bl	800c150 <USBD_GetString>
 800f1a4:	e004      	b.n	800f1b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f1a6:	683a      	ldr	r2, [r7, #0]
 800f1a8:	4904      	ldr	r1, [pc, #16]	; (800f1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f1aa:	4805      	ldr	r0, [pc, #20]	; (800f1c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f1ac:	f7fc ffd0 	bl	800c150 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1b0:	4b02      	ldr	r3, [pc, #8]	; (800f1bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	2001b4d0 	.word	0x2001b4d0
 800f1c0:	08010650 	.word	0x08010650

0800f1c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f1ca:	4b0f      	ldr	r3, [pc, #60]	; (800f208 <Get_SerialNum+0x44>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f1d0:	4b0e      	ldr	r3, [pc, #56]	; (800f20c <Get_SerialNum+0x48>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f1d6:	4b0e      	ldr	r3, [pc, #56]	; (800f210 <Get_SerialNum+0x4c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d009      	beq.n	800f1fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	4909      	ldr	r1, [pc, #36]	; (800f214 <Get_SerialNum+0x50>)
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f000 f814 	bl	800f21c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f1f4:	2204      	movs	r2, #4
 800f1f6:	4908      	ldr	r1, [pc, #32]	; (800f218 <Get_SerialNum+0x54>)
 800f1f8:	68b8      	ldr	r0, [r7, #8]
 800f1fa:	f000 f80f 	bl	800f21c <IntToUnicode>
  }
}
 800f1fe:	bf00      	nop
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	1fff7a10 	.word	0x1fff7a10
 800f20c:	1fff7a14 	.word	0x1fff7a14
 800f210:	1fff7a18 	.word	0x1fff7a18
 800f214:	20000152 	.word	0x20000152
 800f218:	20000162 	.word	0x20000162

0800f21c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b087      	sub	sp, #28
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	4613      	mov	r3, r2
 800f228:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f22e:	2300      	movs	r3, #0
 800f230:	75fb      	strb	r3, [r7, #23]
 800f232:	e027      	b.n	800f284 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	0f1b      	lsrs	r3, r3, #28
 800f238:	2b09      	cmp	r3, #9
 800f23a:	d80b      	bhi.n	800f254 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	0f1b      	lsrs	r3, r3, #28
 800f240:	b2da      	uxtb	r2, r3
 800f242:	7dfb      	ldrb	r3, [r7, #23]
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	4619      	mov	r1, r3
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	440b      	add	r3, r1
 800f24c:	3230      	adds	r2, #48	; 0x30
 800f24e:	b2d2      	uxtb	r2, r2
 800f250:	701a      	strb	r2, [r3, #0]
 800f252:	e00a      	b.n	800f26a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	0f1b      	lsrs	r3, r3, #28
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	4619      	mov	r1, r3
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	440b      	add	r3, r1
 800f264:	3237      	adds	r2, #55	; 0x37
 800f266:	b2d2      	uxtb	r2, r2
 800f268:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	011b      	lsls	r3, r3, #4
 800f26e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f270:	7dfb      	ldrb	r3, [r7, #23]
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	3301      	adds	r3, #1
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	4413      	add	r3, r2
 800f27a:	2200      	movs	r2, #0
 800f27c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	3301      	adds	r3, #1
 800f282:	75fb      	strb	r3, [r7, #23]
 800f284:	7dfa      	ldrb	r2, [r7, #23]
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d3d3      	bcc.n	800f234 <IntToUnicode+0x18>
  }
}
 800f28c:	bf00      	nop
 800f28e:	bf00      	nop
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
	...

0800f29c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b08a      	sub	sp, #40	; 0x28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2a4:	f107 0314 	add.w	r3, r7, #20
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	601a      	str	r2, [r3, #0]
 800f2ac:	605a      	str	r2, [r3, #4]
 800f2ae:	609a      	str	r2, [r3, #8]
 800f2b0:	60da      	str	r2, [r3, #12]
 800f2b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f2bc:	d13a      	bne.n	800f334 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2be:	2300      	movs	r3, #0
 800f2c0:	613b      	str	r3, [r7, #16]
 800f2c2:	4b1e      	ldr	r3, [pc, #120]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c6:	4a1d      	ldr	r2, [pc, #116]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f2c8:	f043 0301 	orr.w	r3, r3, #1
 800f2cc:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ce:	4b1b      	ldr	r3, [pc, #108]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d2:	f003 0301 	and.w	r3, r3, #1
 800f2d6:	613b      	str	r3, [r7, #16]
 800f2d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f2da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f2de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f2ec:	230a      	movs	r3, #10
 800f2ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2f0:	f107 0314 	add.w	r3, r7, #20
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4812      	ldr	r0, [pc, #72]	; (800f340 <HAL_PCD_MspInit+0xa4>)
 800f2f8:	f7f2 fe52 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f2fc:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f300:	4a0e      	ldr	r2, [pc, #56]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f306:	6353      	str	r3, [r2, #52]	; 0x34
 800f308:	2300      	movs	r3, #0
 800f30a:	60fb      	str	r3, [r7, #12]
 800f30c:	4b0b      	ldr	r3, [pc, #44]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f310:	4a0a      	ldr	r2, [pc, #40]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f316:	6453      	str	r3, [r2, #68]	; 0x44
 800f318:	4b08      	ldr	r3, [pc, #32]	; (800f33c <HAL_PCD_MspInit+0xa0>)
 800f31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f31c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f324:	2200      	movs	r2, #0
 800f326:	2105      	movs	r1, #5
 800f328:	2043      	movs	r0, #67	; 0x43
 800f32a:	f7f2 fdf5 	bl	8001f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f32e:	2043      	movs	r0, #67	; 0x43
 800f330:	f7f2 fe1e 	bl	8001f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f334:	bf00      	nop
 800f336:	3728      	adds	r7, #40	; 0x28
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	40023800 	.word	0x40023800
 800f340:	40020000 	.word	0x40020000

0800f344 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f358:	4619      	mov	r1, r3
 800f35a:	4610      	mov	r0, r2
 800f35c:	f7fb fd99 	bl	800ae92 <USBD_LL_SetupStage>
}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	460b      	mov	r3, r1
 800f372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f37a:	78fa      	ldrb	r2, [r7, #3]
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	4613      	mov	r3, r2
 800f380:	00db      	lsls	r3, r3, #3
 800f382:	4413      	add	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	440b      	add	r3, r1
 800f388:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	78fb      	ldrb	r3, [r7, #3]
 800f390:	4619      	mov	r1, r3
 800f392:	f7fb fdd3 	bl	800af3c <USBD_LL_DataOutStage>
}
 800f396:	bf00      	nop
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b082      	sub	sp, #8
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f3b0:	78fa      	ldrb	r2, [r7, #3]
 800f3b2:	6879      	ldr	r1, [r7, #4]
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	00db      	lsls	r3, r3, #3
 800f3b8:	4413      	add	r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	440b      	add	r3, r1
 800f3be:	334c      	adds	r3, #76	; 0x4c
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	78fb      	ldrb	r3, [r7, #3]
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f7fb fe6c 	bl	800b0a2 <USBD_LL_DataInStage>
}
 800f3ca:	bf00      	nop
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b082      	sub	sp, #8
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fb ffa0 	bl	800b326 <USBD_LL_SOF>
}
 800f3e6:	bf00      	nop
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}

0800f3ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b084      	sub	sp, #16
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d001      	beq.n	800f406 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f402:	f7f1 fd40 	bl	8000e86 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f40c:	7bfa      	ldrb	r2, [r7, #15]
 800f40e:	4611      	mov	r1, r2
 800f410:	4618      	mov	r0, r3
 800f412:	f7fb ff4a 	bl	800b2aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fb fef2 	bl	800b206 <USBD_LL_Reset>
}
 800f422:	bf00      	nop
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
	...

0800f42c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fb ff45 	bl	800b2ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	6812      	ldr	r2, [r2, #0]
 800f44e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f452:	f043 0301 	orr.w	r3, r3, #1
 800f456:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a1b      	ldr	r3, [r3, #32]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d005      	beq.n	800f46c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f460:	4b04      	ldr	r3, [pc, #16]	; (800f474 <HAL_PCD_SuspendCallback+0x48>)
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	4a03      	ldr	r2, [pc, #12]	; (800f474 <HAL_PCD_SuspendCallback+0x48>)
 800f466:	f043 0306 	orr.w	r3, r3, #6
 800f46a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f46c:	bf00      	nop
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	e000ed00 	.word	0xe000ed00

0800f478 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f486:	4618      	mov	r0, r3
 800f488:	f7fb ff35 	bl	800b2f6 <USBD_LL_Resume>
}
 800f48c:	bf00      	nop
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	460b      	mov	r3, r1
 800f49e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4a6:	78fa      	ldrb	r2, [r7, #3]
 800f4a8:	4611      	mov	r1, r2
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fb ff8d 	bl	800b3ca <USBD_LL_IsoOUTIncomplete>
}
 800f4b0:	bf00      	nop
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4ca:	78fa      	ldrb	r2, [r7, #3]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fb ff49 	bl	800b366 <USBD_LL_IsoINIncomplete>
}
 800f4d4:	bf00      	nop
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fb ff9f 	bl	800b42e <USBD_LL_DevConnected>
}
 800f4f0:	bf00      	nop
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f506:	4618      	mov	r0, r3
 800f508:	f7fb ff9c 	bl	800b444 <USBD_LL_DevDisconnected>
}
 800f50c:	bf00      	nop
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d13c      	bne.n	800f59e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f524:	4a20      	ldr	r2, [pc, #128]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a1e      	ldr	r2, [pc, #120]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f530:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f534:	4b1c      	ldr	r3, [pc, #112]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f53a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f53c:	4b1a      	ldr	r3, [pc, #104]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f53e:	2204      	movs	r2, #4
 800f540:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f542:	4b19      	ldr	r3, [pc, #100]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f544:	2202      	movs	r2, #2
 800f546:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f548:	4b17      	ldr	r3, [pc, #92]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f54e:	4b16      	ldr	r3, [pc, #88]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f550:	2202      	movs	r2, #2
 800f552:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f554:	4b14      	ldr	r3, [pc, #80]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f556:	2200      	movs	r2, #0
 800f558:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f55a:	4b13      	ldr	r3, [pc, #76]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f560:	4b11      	ldr	r3, [pc, #68]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f562:	2200      	movs	r2, #0
 800f564:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f566:	4b10      	ldr	r3, [pc, #64]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f568:	2200      	movs	r2, #0
 800f56a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f56c:	4b0e      	ldr	r3, [pc, #56]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f56e:	2200      	movs	r2, #0
 800f570:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f572:	480d      	ldr	r0, [pc, #52]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f574:	f7f3 fe3e 	bl	80031f4 <HAL_PCD_Init>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f57e:	f7f1 fc82 	bl	8000e86 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f582:	2180      	movs	r1, #128	; 0x80
 800f584:	4808      	ldr	r0, [pc, #32]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f586:	f7f5 f8a0 	bl	80046ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f58a:	2240      	movs	r2, #64	; 0x40
 800f58c:	2100      	movs	r1, #0
 800f58e:	4806      	ldr	r0, [pc, #24]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f590:	f7f5 f854 	bl	800463c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f594:	2280      	movs	r2, #128	; 0x80
 800f596:	2101      	movs	r1, #1
 800f598:	4803      	ldr	r0, [pc, #12]	; (800f5a8 <USBD_LL_Init+0x94>)
 800f59a:	f7f5 f84f 	bl	800463c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f59e:	2300      	movs	r3, #0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	2001b6d0 	.word	0x2001b6d0

0800f5ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7f3 ff3e 	bl	8003444 <HAL_PCD_Start>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 f942 	bl	800f858 <USBD_Get_USB_Status>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b084      	sub	sp, #16
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	4611      	mov	r1, r2
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	70fb      	strb	r3, [r7, #3]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	70bb      	strb	r3, [r7, #2]
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f60a:	78bb      	ldrb	r3, [r7, #2]
 800f60c:	883a      	ldrh	r2, [r7, #0]
 800f60e:	78f9      	ldrb	r1, [r7, #3]
 800f610:	f7f4 fc0f 	bl	8003e32 <HAL_PCD_EP_Open>
 800f614:	4603      	mov	r3, r0
 800f616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f618:	7bfb      	ldrb	r3, [r7, #15]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f000 f91c 	bl	800f858 <USBD_Get_USB_Status>
 800f620:	4603      	mov	r3, r0
 800f622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f624:	7bbb      	ldrb	r3, [r7, #14]
}
 800f626:	4618      	mov	r0, r3
 800f628:	3710      	adds	r7, #16
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	b084      	sub	sp, #16
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
 800f636:	460b      	mov	r3, r1
 800f638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f63a:	2300      	movs	r3, #0
 800f63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f648:	78fa      	ldrb	r2, [r7, #3]
 800f64a:	4611      	mov	r1, r2
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7f4 fc58 	bl	8003f02 <HAL_PCD_EP_Close>
 800f652:	4603      	mov	r3, r0
 800f654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f656:	7bfb      	ldrb	r3, [r7, #15]
 800f658:	4618      	mov	r0, r3
 800f65a:	f000 f8fd 	bl	800f858 <USBD_Get_USB_Status>
 800f65e:	4603      	mov	r3, r0
 800f660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f662:	7bbb      	ldrb	r3, [r7, #14]
}
 800f664:	4618      	mov	r0, r3
 800f666:	3710      	adds	r7, #16
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	460b      	mov	r3, r1
 800f676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f678:	2300      	movs	r3, #0
 800f67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f67c:	2300      	movs	r3, #0
 800f67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f686:	78fa      	ldrb	r2, [r7, #3]
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7f4 fd30 	bl	80040f0 <HAL_PCD_EP_SetStall>
 800f690:	4603      	mov	r3, r0
 800f692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f694:	7bfb      	ldrb	r3, [r7, #15]
 800f696:	4618      	mov	r0, r3
 800f698:	f000 f8de 	bl	800f858 <USBD_Get_USB_Status>
 800f69c:	4603      	mov	r3, r0
 800f69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b084      	sub	sp, #16
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6c4:	78fa      	ldrb	r2, [r7, #3]
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7f4 fd75 	bl	80041b8 <HAL_PCD_EP_ClrStall>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f000 f8bf 	bl	800f858 <USBD_Get_USB_Status>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b085      	sub	sp, #20
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f6fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f700:	2b00      	cmp	r3, #0
 800f702:	da0b      	bge.n	800f71c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f704:	78fb      	ldrb	r3, [r7, #3]
 800f706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f70a:	68f9      	ldr	r1, [r7, #12]
 800f70c:	4613      	mov	r3, r2
 800f70e:	00db      	lsls	r3, r3, #3
 800f710:	4413      	add	r3, r2
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	440b      	add	r3, r1
 800f716:	333e      	adds	r3, #62	; 0x3e
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	e00b      	b.n	800f734 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f71c:	78fb      	ldrb	r3, [r7, #3]
 800f71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f722:	68f9      	ldr	r1, [r7, #12]
 800f724:	4613      	mov	r3, r2
 800f726:	00db      	lsls	r3, r3, #3
 800f728:	4413      	add	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	440b      	add	r3, r1
 800f72e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f732:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f734:	4618      	mov	r0, r3
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	460b      	mov	r3, r1
 800f74a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f74c:	2300      	movs	r3, #0
 800f74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f750:	2300      	movs	r3, #0
 800f752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f75a:	78fa      	ldrb	r2, [r7, #3]
 800f75c:	4611      	mov	r1, r2
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f4 fb42 	bl	8003de8 <HAL_PCD_SetAddress>
 800f764:	4603      	mov	r3, r0
 800f766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f768:	7bfb      	ldrb	r3, [r7, #15]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 f874 	bl	800f858 <USBD_Get_USB_Status>
 800f770:	4603      	mov	r3, r0
 800f772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f774:	7bbb      	ldrb	r3, [r7, #14]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b086      	sub	sp, #24
 800f782:	af00      	add	r7, sp, #0
 800f784:	60f8      	str	r0, [r7, #12]
 800f786:	607a      	str	r2, [r7, #4]
 800f788:	603b      	str	r3, [r7, #0]
 800f78a:	460b      	mov	r3, r1
 800f78c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f78e:	2300      	movs	r3, #0
 800f790:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f792:	2300      	movs	r3, #0
 800f794:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f79c:	7af9      	ldrb	r1, [r7, #11]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	f7f4 fc5b 	bl	800405c <HAL_PCD_EP_Transmit>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7aa:	7dfb      	ldrb	r3, [r7, #23]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f000 f853 	bl	800f858 <USBD_Get_USB_Status>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	607a      	str	r2, [r7, #4]
 800f7ca:	603b      	str	r3, [r7, #0]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7de:	7af9      	ldrb	r1, [r7, #11]
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	f7f4 fbd7 	bl	8003f96 <HAL_PCD_EP_Receive>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7ec:	7dfb      	ldrb	r3, [r7, #23]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f000 f832 	bl	800f858 <USBD_Get_USB_Status>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3718      	adds	r7, #24
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b082      	sub	sp, #8
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	460b      	mov	r3, r1
 800f80c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f814:	78fa      	ldrb	r2, [r7, #3]
 800f816:	4611      	mov	r1, r2
 800f818:	4618      	mov	r0, r3
 800f81a:	f7f4 fc07 	bl	800402c <HAL_PCD_EP_GetRxCount>
 800f81e:	4603      	mov	r3, r0
}
 800f820:	4618      	mov	r0, r3
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f830:	4b03      	ldr	r3, [pc, #12]	; (800f840 <USBD_static_malloc+0x18>)
}
 800f832:	4618      	mov	r0, r3
 800f834:	370c      	adds	r7, #12
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	2001bbdc 	.word	0x2001bbdc

0800f844 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]

}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	4603      	mov	r3, r0
 800f860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f862:	2300      	movs	r3, #0
 800f864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f866:	79fb      	ldrb	r3, [r7, #7]
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d817      	bhi.n	800f89c <USBD_Get_USB_Status+0x44>
 800f86c:	a201      	add	r2, pc, #4	; (adr r2, 800f874 <USBD_Get_USB_Status+0x1c>)
 800f86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f872:	bf00      	nop
 800f874:	0800f885 	.word	0x0800f885
 800f878:	0800f88b 	.word	0x0800f88b
 800f87c:	0800f891 	.word	0x0800f891
 800f880:	0800f897 	.word	0x0800f897
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	73fb      	strb	r3, [r7, #15]
    break;
 800f888:	e00b      	b.n	800f8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f88a:	2303      	movs	r3, #3
 800f88c:	73fb      	strb	r3, [r7, #15]
    break;
 800f88e:	e008      	b.n	800f8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f890:	2301      	movs	r3, #1
 800f892:	73fb      	strb	r3, [r7, #15]
    break;
 800f894:	e005      	b.n	800f8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f896:	2303      	movs	r3, #3
 800f898:	73fb      	strb	r3, [r7, #15]
    break;
 800f89a:	e002      	b.n	800f8a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f89c:	2303      	movs	r3, #3
 800f89e:	73fb      	strb	r3, [r7, #15]
    break;
 800f8a0:	bf00      	nop
  }
  return usb_status;
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3714      	adds	r7, #20
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <__errno>:
 800f8b0:	4b01      	ldr	r3, [pc, #4]	; (800f8b8 <__errno+0x8>)
 800f8b2:	6818      	ldr	r0, [r3, #0]
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	2000016c 	.word	0x2000016c

0800f8bc <__libc_init_array>:
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	4d0d      	ldr	r5, [pc, #52]	; (800f8f4 <__libc_init_array+0x38>)
 800f8c0:	4c0d      	ldr	r4, [pc, #52]	; (800f8f8 <__libc_init_array+0x3c>)
 800f8c2:	1b64      	subs	r4, r4, r5
 800f8c4:	10a4      	asrs	r4, r4, #2
 800f8c6:	2600      	movs	r6, #0
 800f8c8:	42a6      	cmp	r6, r4
 800f8ca:	d109      	bne.n	800f8e0 <__libc_init_array+0x24>
 800f8cc:	4d0b      	ldr	r5, [pc, #44]	; (800f8fc <__libc_init_array+0x40>)
 800f8ce:	4c0c      	ldr	r4, [pc, #48]	; (800f900 <__libc_init_array+0x44>)
 800f8d0:	f000 fd08 	bl	80102e4 <_init>
 800f8d4:	1b64      	subs	r4, r4, r5
 800f8d6:	10a4      	asrs	r4, r4, #2
 800f8d8:	2600      	movs	r6, #0
 800f8da:	42a6      	cmp	r6, r4
 800f8dc:	d105      	bne.n	800f8ea <__libc_init_array+0x2e>
 800f8de:	bd70      	pop	{r4, r5, r6, pc}
 800f8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8e4:	4798      	blx	r3
 800f8e6:	3601      	adds	r6, #1
 800f8e8:	e7ee      	b.n	800f8c8 <__libc_init_array+0xc>
 800f8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8ee:	4798      	blx	r3
 800f8f0:	3601      	adds	r6, #1
 800f8f2:	e7f2      	b.n	800f8da <__libc_init_array+0x1e>
 800f8f4:	08012fe8 	.word	0x08012fe8
 800f8f8:	08012fe8 	.word	0x08012fe8
 800f8fc:	08012fe8 	.word	0x08012fe8
 800f900:	08012fec 	.word	0x08012fec

0800f904 <__retarget_lock_acquire_recursive>:
 800f904:	4770      	bx	lr

0800f906 <__retarget_lock_release_recursive>:
 800f906:	4770      	bx	lr

0800f908 <malloc>:
 800f908:	4b02      	ldr	r3, [pc, #8]	; (800f914 <malloc+0xc>)
 800f90a:	4601      	mov	r1, r0
 800f90c:	6818      	ldr	r0, [r3, #0]
 800f90e:	f000 b88d 	b.w	800fa2c <_malloc_r>
 800f912:	bf00      	nop
 800f914:	2000016c 	.word	0x2000016c

0800f918 <free>:
 800f918:	4b02      	ldr	r3, [pc, #8]	; (800f924 <free+0xc>)
 800f91a:	4601      	mov	r1, r0
 800f91c:	6818      	ldr	r0, [r3, #0]
 800f91e:	f000 b819 	b.w	800f954 <_free_r>
 800f922:	bf00      	nop
 800f924:	2000016c 	.word	0x2000016c

0800f928 <memcpy>:
 800f928:	440a      	add	r2, r1
 800f92a:	4291      	cmp	r1, r2
 800f92c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f930:	d100      	bne.n	800f934 <memcpy+0xc>
 800f932:	4770      	bx	lr
 800f934:	b510      	push	{r4, lr}
 800f936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f93e:	4291      	cmp	r1, r2
 800f940:	d1f9      	bne.n	800f936 <memcpy+0xe>
 800f942:	bd10      	pop	{r4, pc}

0800f944 <memset>:
 800f944:	4402      	add	r2, r0
 800f946:	4603      	mov	r3, r0
 800f948:	4293      	cmp	r3, r2
 800f94a:	d100      	bne.n	800f94e <memset+0xa>
 800f94c:	4770      	bx	lr
 800f94e:	f803 1b01 	strb.w	r1, [r3], #1
 800f952:	e7f9      	b.n	800f948 <memset+0x4>

0800f954 <_free_r>:
 800f954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f956:	2900      	cmp	r1, #0
 800f958:	d044      	beq.n	800f9e4 <_free_r+0x90>
 800f95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f95e:	9001      	str	r0, [sp, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f1a1 0404 	sub.w	r4, r1, #4
 800f966:	bfb8      	it	lt
 800f968:	18e4      	addlt	r4, r4, r3
 800f96a:	f000 f96d 	bl	800fc48 <__malloc_lock>
 800f96e:	4a1e      	ldr	r2, [pc, #120]	; (800f9e8 <_free_r+0x94>)
 800f970:	9801      	ldr	r0, [sp, #4]
 800f972:	6813      	ldr	r3, [r2, #0]
 800f974:	b933      	cbnz	r3, 800f984 <_free_r+0x30>
 800f976:	6063      	str	r3, [r4, #4]
 800f978:	6014      	str	r4, [r2, #0]
 800f97a:	b003      	add	sp, #12
 800f97c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f980:	f000 b968 	b.w	800fc54 <__malloc_unlock>
 800f984:	42a3      	cmp	r3, r4
 800f986:	d908      	bls.n	800f99a <_free_r+0x46>
 800f988:	6825      	ldr	r5, [r4, #0]
 800f98a:	1961      	adds	r1, r4, r5
 800f98c:	428b      	cmp	r3, r1
 800f98e:	bf01      	itttt	eq
 800f990:	6819      	ldreq	r1, [r3, #0]
 800f992:	685b      	ldreq	r3, [r3, #4]
 800f994:	1949      	addeq	r1, r1, r5
 800f996:	6021      	streq	r1, [r4, #0]
 800f998:	e7ed      	b.n	800f976 <_free_r+0x22>
 800f99a:	461a      	mov	r2, r3
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	b10b      	cbz	r3, 800f9a4 <_free_r+0x50>
 800f9a0:	42a3      	cmp	r3, r4
 800f9a2:	d9fa      	bls.n	800f99a <_free_r+0x46>
 800f9a4:	6811      	ldr	r1, [r2, #0]
 800f9a6:	1855      	adds	r5, r2, r1
 800f9a8:	42a5      	cmp	r5, r4
 800f9aa:	d10b      	bne.n	800f9c4 <_free_r+0x70>
 800f9ac:	6824      	ldr	r4, [r4, #0]
 800f9ae:	4421      	add	r1, r4
 800f9b0:	1854      	adds	r4, r2, r1
 800f9b2:	42a3      	cmp	r3, r4
 800f9b4:	6011      	str	r1, [r2, #0]
 800f9b6:	d1e0      	bne.n	800f97a <_free_r+0x26>
 800f9b8:	681c      	ldr	r4, [r3, #0]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	6053      	str	r3, [r2, #4]
 800f9be:	4421      	add	r1, r4
 800f9c0:	6011      	str	r1, [r2, #0]
 800f9c2:	e7da      	b.n	800f97a <_free_r+0x26>
 800f9c4:	d902      	bls.n	800f9cc <_free_r+0x78>
 800f9c6:	230c      	movs	r3, #12
 800f9c8:	6003      	str	r3, [r0, #0]
 800f9ca:	e7d6      	b.n	800f97a <_free_r+0x26>
 800f9cc:	6825      	ldr	r5, [r4, #0]
 800f9ce:	1961      	adds	r1, r4, r5
 800f9d0:	428b      	cmp	r3, r1
 800f9d2:	bf04      	itt	eq
 800f9d4:	6819      	ldreq	r1, [r3, #0]
 800f9d6:	685b      	ldreq	r3, [r3, #4]
 800f9d8:	6063      	str	r3, [r4, #4]
 800f9da:	bf04      	itt	eq
 800f9dc:	1949      	addeq	r1, r1, r5
 800f9de:	6021      	streq	r1, [r4, #0]
 800f9e0:	6054      	str	r4, [r2, #4]
 800f9e2:	e7ca      	b.n	800f97a <_free_r+0x26>
 800f9e4:	b003      	add	sp, #12
 800f9e6:	bd30      	pop	{r4, r5, pc}
 800f9e8:	2001be00 	.word	0x2001be00

0800f9ec <sbrk_aligned>:
 800f9ec:	b570      	push	{r4, r5, r6, lr}
 800f9ee:	4e0e      	ldr	r6, [pc, #56]	; (800fa28 <sbrk_aligned+0x3c>)
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	6831      	ldr	r1, [r6, #0]
 800f9f4:	4605      	mov	r5, r0
 800f9f6:	b911      	cbnz	r1, 800f9fe <sbrk_aligned+0x12>
 800f9f8:	f000 f8f6 	bl	800fbe8 <_sbrk_r>
 800f9fc:	6030      	str	r0, [r6, #0]
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4628      	mov	r0, r5
 800fa02:	f000 f8f1 	bl	800fbe8 <_sbrk_r>
 800fa06:	1c43      	adds	r3, r0, #1
 800fa08:	d00a      	beq.n	800fa20 <sbrk_aligned+0x34>
 800fa0a:	1cc4      	adds	r4, r0, #3
 800fa0c:	f024 0403 	bic.w	r4, r4, #3
 800fa10:	42a0      	cmp	r0, r4
 800fa12:	d007      	beq.n	800fa24 <sbrk_aligned+0x38>
 800fa14:	1a21      	subs	r1, r4, r0
 800fa16:	4628      	mov	r0, r5
 800fa18:	f000 f8e6 	bl	800fbe8 <_sbrk_r>
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	d101      	bne.n	800fa24 <sbrk_aligned+0x38>
 800fa20:	f04f 34ff 	mov.w	r4, #4294967295
 800fa24:	4620      	mov	r0, r4
 800fa26:	bd70      	pop	{r4, r5, r6, pc}
 800fa28:	2001be04 	.word	0x2001be04

0800fa2c <_malloc_r>:
 800fa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa30:	1ccd      	adds	r5, r1, #3
 800fa32:	f025 0503 	bic.w	r5, r5, #3
 800fa36:	3508      	adds	r5, #8
 800fa38:	2d0c      	cmp	r5, #12
 800fa3a:	bf38      	it	cc
 800fa3c:	250c      	movcc	r5, #12
 800fa3e:	2d00      	cmp	r5, #0
 800fa40:	4607      	mov	r7, r0
 800fa42:	db01      	blt.n	800fa48 <_malloc_r+0x1c>
 800fa44:	42a9      	cmp	r1, r5
 800fa46:	d905      	bls.n	800fa54 <_malloc_r+0x28>
 800fa48:	230c      	movs	r3, #12
 800fa4a:	603b      	str	r3, [r7, #0]
 800fa4c:	2600      	movs	r6, #0
 800fa4e:	4630      	mov	r0, r6
 800fa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa54:	4e2e      	ldr	r6, [pc, #184]	; (800fb10 <_malloc_r+0xe4>)
 800fa56:	f000 f8f7 	bl	800fc48 <__malloc_lock>
 800fa5a:	6833      	ldr	r3, [r6, #0]
 800fa5c:	461c      	mov	r4, r3
 800fa5e:	bb34      	cbnz	r4, 800faae <_malloc_r+0x82>
 800fa60:	4629      	mov	r1, r5
 800fa62:	4638      	mov	r0, r7
 800fa64:	f7ff ffc2 	bl	800f9ec <sbrk_aligned>
 800fa68:	1c43      	adds	r3, r0, #1
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	d14d      	bne.n	800fb0a <_malloc_r+0xde>
 800fa6e:	6834      	ldr	r4, [r6, #0]
 800fa70:	4626      	mov	r6, r4
 800fa72:	2e00      	cmp	r6, #0
 800fa74:	d140      	bne.n	800faf8 <_malloc_r+0xcc>
 800fa76:	6823      	ldr	r3, [r4, #0]
 800fa78:	4631      	mov	r1, r6
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	eb04 0803 	add.w	r8, r4, r3
 800fa80:	f000 f8b2 	bl	800fbe8 <_sbrk_r>
 800fa84:	4580      	cmp	r8, r0
 800fa86:	d13a      	bne.n	800fafe <_malloc_r+0xd2>
 800fa88:	6821      	ldr	r1, [r4, #0]
 800fa8a:	3503      	adds	r5, #3
 800fa8c:	1a6d      	subs	r5, r5, r1
 800fa8e:	f025 0503 	bic.w	r5, r5, #3
 800fa92:	3508      	adds	r5, #8
 800fa94:	2d0c      	cmp	r5, #12
 800fa96:	bf38      	it	cc
 800fa98:	250c      	movcc	r5, #12
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	4638      	mov	r0, r7
 800fa9e:	f7ff ffa5 	bl	800f9ec <sbrk_aligned>
 800faa2:	3001      	adds	r0, #1
 800faa4:	d02b      	beq.n	800fafe <_malloc_r+0xd2>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	442b      	add	r3, r5
 800faaa:	6023      	str	r3, [r4, #0]
 800faac:	e00e      	b.n	800facc <_malloc_r+0xa0>
 800faae:	6822      	ldr	r2, [r4, #0]
 800fab0:	1b52      	subs	r2, r2, r5
 800fab2:	d41e      	bmi.n	800faf2 <_malloc_r+0xc6>
 800fab4:	2a0b      	cmp	r2, #11
 800fab6:	d916      	bls.n	800fae6 <_malloc_r+0xba>
 800fab8:	1961      	adds	r1, r4, r5
 800faba:	42a3      	cmp	r3, r4
 800fabc:	6025      	str	r5, [r4, #0]
 800fabe:	bf18      	it	ne
 800fac0:	6059      	strne	r1, [r3, #4]
 800fac2:	6863      	ldr	r3, [r4, #4]
 800fac4:	bf08      	it	eq
 800fac6:	6031      	streq	r1, [r6, #0]
 800fac8:	5162      	str	r2, [r4, r5]
 800faca:	604b      	str	r3, [r1, #4]
 800facc:	4638      	mov	r0, r7
 800face:	f104 060b 	add.w	r6, r4, #11
 800fad2:	f000 f8bf 	bl	800fc54 <__malloc_unlock>
 800fad6:	f026 0607 	bic.w	r6, r6, #7
 800fada:	1d23      	adds	r3, r4, #4
 800fadc:	1af2      	subs	r2, r6, r3
 800fade:	d0b6      	beq.n	800fa4e <_malloc_r+0x22>
 800fae0:	1b9b      	subs	r3, r3, r6
 800fae2:	50a3      	str	r3, [r4, r2]
 800fae4:	e7b3      	b.n	800fa4e <_malloc_r+0x22>
 800fae6:	6862      	ldr	r2, [r4, #4]
 800fae8:	42a3      	cmp	r3, r4
 800faea:	bf0c      	ite	eq
 800faec:	6032      	streq	r2, [r6, #0]
 800faee:	605a      	strne	r2, [r3, #4]
 800faf0:	e7ec      	b.n	800facc <_malloc_r+0xa0>
 800faf2:	4623      	mov	r3, r4
 800faf4:	6864      	ldr	r4, [r4, #4]
 800faf6:	e7b2      	b.n	800fa5e <_malloc_r+0x32>
 800faf8:	4634      	mov	r4, r6
 800fafa:	6876      	ldr	r6, [r6, #4]
 800fafc:	e7b9      	b.n	800fa72 <_malloc_r+0x46>
 800fafe:	230c      	movs	r3, #12
 800fb00:	603b      	str	r3, [r7, #0]
 800fb02:	4638      	mov	r0, r7
 800fb04:	f000 f8a6 	bl	800fc54 <__malloc_unlock>
 800fb08:	e7a1      	b.n	800fa4e <_malloc_r+0x22>
 800fb0a:	6025      	str	r5, [r4, #0]
 800fb0c:	e7de      	b.n	800facc <_malloc_r+0xa0>
 800fb0e:	bf00      	nop
 800fb10:	2001be00 	.word	0x2001be00

0800fb14 <cleanup_glue>:
 800fb14:	b538      	push	{r3, r4, r5, lr}
 800fb16:	460c      	mov	r4, r1
 800fb18:	6809      	ldr	r1, [r1, #0]
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	b109      	cbz	r1, 800fb22 <cleanup_glue+0xe>
 800fb1e:	f7ff fff9 	bl	800fb14 <cleanup_glue>
 800fb22:	4621      	mov	r1, r4
 800fb24:	4628      	mov	r0, r5
 800fb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb2a:	f7ff bf13 	b.w	800f954 <_free_r>
	...

0800fb30 <_reclaim_reent>:
 800fb30:	4b2c      	ldr	r3, [pc, #176]	; (800fbe4 <_reclaim_reent+0xb4>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4283      	cmp	r3, r0
 800fb36:	b570      	push	{r4, r5, r6, lr}
 800fb38:	4604      	mov	r4, r0
 800fb3a:	d051      	beq.n	800fbe0 <_reclaim_reent+0xb0>
 800fb3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb3e:	b143      	cbz	r3, 800fb52 <_reclaim_reent+0x22>
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d14a      	bne.n	800fbdc <_reclaim_reent+0xac>
 800fb46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb48:	6819      	ldr	r1, [r3, #0]
 800fb4a:	b111      	cbz	r1, 800fb52 <_reclaim_reent+0x22>
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f7ff ff01 	bl	800f954 <_free_r>
 800fb52:	6961      	ldr	r1, [r4, #20]
 800fb54:	b111      	cbz	r1, 800fb5c <_reclaim_reent+0x2c>
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7ff fefc 	bl	800f954 <_free_r>
 800fb5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb5e:	b111      	cbz	r1, 800fb66 <_reclaim_reent+0x36>
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7ff fef7 	bl	800f954 <_free_r>
 800fb66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb68:	b111      	cbz	r1, 800fb70 <_reclaim_reent+0x40>
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f7ff fef2 	bl	800f954 <_free_r>
 800fb70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb72:	b111      	cbz	r1, 800fb7a <_reclaim_reent+0x4a>
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7ff feed 	bl	800f954 <_free_r>
 800fb7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fb7c:	b111      	cbz	r1, 800fb84 <_reclaim_reent+0x54>
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f7ff fee8 	bl	800f954 <_free_r>
 800fb84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fb86:	b111      	cbz	r1, 800fb8e <_reclaim_reent+0x5e>
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f7ff fee3 	bl	800f954 <_free_r>
 800fb8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fb90:	b111      	cbz	r1, 800fb98 <_reclaim_reent+0x68>
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7ff fede 	bl	800f954 <_free_r>
 800fb98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb9a:	b111      	cbz	r1, 800fba2 <_reclaim_reent+0x72>
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f7ff fed9 	bl	800f954 <_free_r>
 800fba2:	69a3      	ldr	r3, [r4, #24]
 800fba4:	b1e3      	cbz	r3, 800fbe0 <_reclaim_reent+0xb0>
 800fba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fba8:	4620      	mov	r0, r4
 800fbaa:	4798      	blx	r3
 800fbac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fbae:	b1b9      	cbz	r1, 800fbe0 <_reclaim_reent+0xb0>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbb6:	f7ff bfad 	b.w	800fb14 <cleanup_glue>
 800fbba:	5949      	ldr	r1, [r1, r5]
 800fbbc:	b941      	cbnz	r1, 800fbd0 <_reclaim_reent+0xa0>
 800fbbe:	3504      	adds	r5, #4
 800fbc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbc2:	2d80      	cmp	r5, #128	; 0x80
 800fbc4:	68d9      	ldr	r1, [r3, #12]
 800fbc6:	d1f8      	bne.n	800fbba <_reclaim_reent+0x8a>
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f7ff fec3 	bl	800f954 <_free_r>
 800fbce:	e7ba      	b.n	800fb46 <_reclaim_reent+0x16>
 800fbd0:	680e      	ldr	r6, [r1, #0]
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f7ff febe 	bl	800f954 <_free_r>
 800fbd8:	4631      	mov	r1, r6
 800fbda:	e7ef      	b.n	800fbbc <_reclaim_reent+0x8c>
 800fbdc:	2500      	movs	r5, #0
 800fbde:	e7ef      	b.n	800fbc0 <_reclaim_reent+0x90>
 800fbe0:	bd70      	pop	{r4, r5, r6, pc}
 800fbe2:	bf00      	nop
 800fbe4:	2000016c 	.word	0x2000016c

0800fbe8 <_sbrk_r>:
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	4d06      	ldr	r5, [pc, #24]	; (800fc04 <_sbrk_r+0x1c>)
 800fbec:	2300      	movs	r3, #0
 800fbee:	4604      	mov	r4, r0
 800fbf0:	4608      	mov	r0, r1
 800fbf2:	602b      	str	r3, [r5, #0]
 800fbf4:	f7f1 fe2c 	bl	8001850 <_sbrk>
 800fbf8:	1c43      	adds	r3, r0, #1
 800fbfa:	d102      	bne.n	800fc02 <_sbrk_r+0x1a>
 800fbfc:	682b      	ldr	r3, [r5, #0]
 800fbfe:	b103      	cbz	r3, 800fc02 <_sbrk_r+0x1a>
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	bd38      	pop	{r3, r4, r5, pc}
 800fc04:	2001be08 	.word	0x2001be08

0800fc08 <siprintf>:
 800fc08:	b40e      	push	{r1, r2, r3}
 800fc0a:	b500      	push	{lr}
 800fc0c:	b09c      	sub	sp, #112	; 0x70
 800fc0e:	ab1d      	add	r3, sp, #116	; 0x74
 800fc10:	9002      	str	r0, [sp, #8]
 800fc12:	9006      	str	r0, [sp, #24]
 800fc14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc18:	4809      	ldr	r0, [pc, #36]	; (800fc40 <siprintf+0x38>)
 800fc1a:	9107      	str	r1, [sp, #28]
 800fc1c:	9104      	str	r1, [sp, #16]
 800fc1e:	4909      	ldr	r1, [pc, #36]	; (800fc44 <siprintf+0x3c>)
 800fc20:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc24:	9105      	str	r1, [sp, #20]
 800fc26:	6800      	ldr	r0, [r0, #0]
 800fc28:	9301      	str	r3, [sp, #4]
 800fc2a:	a902      	add	r1, sp, #8
 800fc2c:	f000 f874 	bl	800fd18 <_svfiprintf_r>
 800fc30:	9b02      	ldr	r3, [sp, #8]
 800fc32:	2200      	movs	r2, #0
 800fc34:	701a      	strb	r2, [r3, #0]
 800fc36:	b01c      	add	sp, #112	; 0x70
 800fc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc3c:	b003      	add	sp, #12
 800fc3e:	4770      	bx	lr
 800fc40:	2000016c 	.word	0x2000016c
 800fc44:	ffff0208 	.word	0xffff0208

0800fc48 <__malloc_lock>:
 800fc48:	4801      	ldr	r0, [pc, #4]	; (800fc50 <__malloc_lock+0x8>)
 800fc4a:	f7ff be5b 	b.w	800f904 <__retarget_lock_acquire_recursive>
 800fc4e:	bf00      	nop
 800fc50:	2001bdfc 	.word	0x2001bdfc

0800fc54 <__malloc_unlock>:
 800fc54:	4801      	ldr	r0, [pc, #4]	; (800fc5c <__malloc_unlock+0x8>)
 800fc56:	f7ff be56 	b.w	800f906 <__retarget_lock_release_recursive>
 800fc5a:	bf00      	nop
 800fc5c:	2001bdfc 	.word	0x2001bdfc

0800fc60 <__ssputs_r>:
 800fc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc64:	688e      	ldr	r6, [r1, #8]
 800fc66:	429e      	cmp	r6, r3
 800fc68:	4682      	mov	sl, r0
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	4690      	mov	r8, r2
 800fc6e:	461f      	mov	r7, r3
 800fc70:	d838      	bhi.n	800fce4 <__ssputs_r+0x84>
 800fc72:	898a      	ldrh	r2, [r1, #12]
 800fc74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc78:	d032      	beq.n	800fce0 <__ssputs_r+0x80>
 800fc7a:	6825      	ldr	r5, [r4, #0]
 800fc7c:	6909      	ldr	r1, [r1, #16]
 800fc7e:	eba5 0901 	sub.w	r9, r5, r1
 800fc82:	6965      	ldr	r5, [r4, #20]
 800fc84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	444b      	add	r3, r9
 800fc90:	106d      	asrs	r5, r5, #1
 800fc92:	429d      	cmp	r5, r3
 800fc94:	bf38      	it	cc
 800fc96:	461d      	movcc	r5, r3
 800fc98:	0553      	lsls	r3, r2, #21
 800fc9a:	d531      	bpl.n	800fd00 <__ssputs_r+0xa0>
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	f7ff fec5 	bl	800fa2c <_malloc_r>
 800fca2:	4606      	mov	r6, r0
 800fca4:	b950      	cbnz	r0, 800fcbc <__ssputs_r+0x5c>
 800fca6:	230c      	movs	r3, #12
 800fca8:	f8ca 3000 	str.w	r3, [sl]
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcbc:	6921      	ldr	r1, [r4, #16]
 800fcbe:	464a      	mov	r2, r9
 800fcc0:	f7ff fe32 	bl	800f928 <memcpy>
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcce:	81a3      	strh	r3, [r4, #12]
 800fcd0:	6126      	str	r6, [r4, #16]
 800fcd2:	6165      	str	r5, [r4, #20]
 800fcd4:	444e      	add	r6, r9
 800fcd6:	eba5 0509 	sub.w	r5, r5, r9
 800fcda:	6026      	str	r6, [r4, #0]
 800fcdc:	60a5      	str	r5, [r4, #8]
 800fcde:	463e      	mov	r6, r7
 800fce0:	42be      	cmp	r6, r7
 800fce2:	d900      	bls.n	800fce6 <__ssputs_r+0x86>
 800fce4:	463e      	mov	r6, r7
 800fce6:	6820      	ldr	r0, [r4, #0]
 800fce8:	4632      	mov	r2, r6
 800fcea:	4641      	mov	r1, r8
 800fcec:	f000 faa8 	bl	8010240 <memmove>
 800fcf0:	68a3      	ldr	r3, [r4, #8]
 800fcf2:	1b9b      	subs	r3, r3, r6
 800fcf4:	60a3      	str	r3, [r4, #8]
 800fcf6:	6823      	ldr	r3, [r4, #0]
 800fcf8:	4433      	add	r3, r6
 800fcfa:	6023      	str	r3, [r4, #0]
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e7db      	b.n	800fcb8 <__ssputs_r+0x58>
 800fd00:	462a      	mov	r2, r5
 800fd02:	f000 fab7 	bl	8010274 <_realloc_r>
 800fd06:	4606      	mov	r6, r0
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d1e1      	bne.n	800fcd0 <__ssputs_r+0x70>
 800fd0c:	6921      	ldr	r1, [r4, #16]
 800fd0e:	4650      	mov	r0, sl
 800fd10:	f7ff fe20 	bl	800f954 <_free_r>
 800fd14:	e7c7      	b.n	800fca6 <__ssputs_r+0x46>
	...

0800fd18 <_svfiprintf_r>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	4698      	mov	r8, r3
 800fd1e:	898b      	ldrh	r3, [r1, #12]
 800fd20:	061b      	lsls	r3, r3, #24
 800fd22:	b09d      	sub	sp, #116	; 0x74
 800fd24:	4607      	mov	r7, r0
 800fd26:	460d      	mov	r5, r1
 800fd28:	4614      	mov	r4, r2
 800fd2a:	d50e      	bpl.n	800fd4a <_svfiprintf_r+0x32>
 800fd2c:	690b      	ldr	r3, [r1, #16]
 800fd2e:	b963      	cbnz	r3, 800fd4a <_svfiprintf_r+0x32>
 800fd30:	2140      	movs	r1, #64	; 0x40
 800fd32:	f7ff fe7b 	bl	800fa2c <_malloc_r>
 800fd36:	6028      	str	r0, [r5, #0]
 800fd38:	6128      	str	r0, [r5, #16]
 800fd3a:	b920      	cbnz	r0, 800fd46 <_svfiprintf_r+0x2e>
 800fd3c:	230c      	movs	r3, #12
 800fd3e:	603b      	str	r3, [r7, #0]
 800fd40:	f04f 30ff 	mov.w	r0, #4294967295
 800fd44:	e0d1      	b.n	800feea <_svfiprintf_r+0x1d2>
 800fd46:	2340      	movs	r3, #64	; 0x40
 800fd48:	616b      	str	r3, [r5, #20]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd4e:	2320      	movs	r3, #32
 800fd50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd54:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd58:	2330      	movs	r3, #48	; 0x30
 800fd5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ff04 <_svfiprintf_r+0x1ec>
 800fd5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd62:	f04f 0901 	mov.w	r9, #1
 800fd66:	4623      	mov	r3, r4
 800fd68:	469a      	mov	sl, r3
 800fd6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd6e:	b10a      	cbz	r2, 800fd74 <_svfiprintf_r+0x5c>
 800fd70:	2a25      	cmp	r2, #37	; 0x25
 800fd72:	d1f9      	bne.n	800fd68 <_svfiprintf_r+0x50>
 800fd74:	ebba 0b04 	subs.w	fp, sl, r4
 800fd78:	d00b      	beq.n	800fd92 <_svfiprintf_r+0x7a>
 800fd7a:	465b      	mov	r3, fp
 800fd7c:	4622      	mov	r2, r4
 800fd7e:	4629      	mov	r1, r5
 800fd80:	4638      	mov	r0, r7
 800fd82:	f7ff ff6d 	bl	800fc60 <__ssputs_r>
 800fd86:	3001      	adds	r0, #1
 800fd88:	f000 80aa 	beq.w	800fee0 <_svfiprintf_r+0x1c8>
 800fd8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd8e:	445a      	add	r2, fp
 800fd90:	9209      	str	r2, [sp, #36]	; 0x24
 800fd92:	f89a 3000 	ldrb.w	r3, [sl]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f000 80a2 	beq.w	800fee0 <_svfiprintf_r+0x1c8>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fda2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fda6:	f10a 0a01 	add.w	sl, sl, #1
 800fdaa:	9304      	str	r3, [sp, #16]
 800fdac:	9307      	str	r3, [sp, #28]
 800fdae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdb2:	931a      	str	r3, [sp, #104]	; 0x68
 800fdb4:	4654      	mov	r4, sl
 800fdb6:	2205      	movs	r2, #5
 800fdb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdbc:	4851      	ldr	r0, [pc, #324]	; (800ff04 <_svfiprintf_r+0x1ec>)
 800fdbe:	f7f0 fa0f 	bl	80001e0 <memchr>
 800fdc2:	9a04      	ldr	r2, [sp, #16]
 800fdc4:	b9d8      	cbnz	r0, 800fdfe <_svfiprintf_r+0xe6>
 800fdc6:	06d0      	lsls	r0, r2, #27
 800fdc8:	bf44      	itt	mi
 800fdca:	2320      	movmi	r3, #32
 800fdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdd0:	0711      	lsls	r1, r2, #28
 800fdd2:	bf44      	itt	mi
 800fdd4:	232b      	movmi	r3, #43	; 0x2b
 800fdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdda:	f89a 3000 	ldrb.w	r3, [sl]
 800fdde:	2b2a      	cmp	r3, #42	; 0x2a
 800fde0:	d015      	beq.n	800fe0e <_svfiprintf_r+0xf6>
 800fde2:	9a07      	ldr	r2, [sp, #28]
 800fde4:	4654      	mov	r4, sl
 800fde6:	2000      	movs	r0, #0
 800fde8:	f04f 0c0a 	mov.w	ip, #10
 800fdec:	4621      	mov	r1, r4
 800fdee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdf2:	3b30      	subs	r3, #48	; 0x30
 800fdf4:	2b09      	cmp	r3, #9
 800fdf6:	d94e      	bls.n	800fe96 <_svfiprintf_r+0x17e>
 800fdf8:	b1b0      	cbz	r0, 800fe28 <_svfiprintf_r+0x110>
 800fdfa:	9207      	str	r2, [sp, #28]
 800fdfc:	e014      	b.n	800fe28 <_svfiprintf_r+0x110>
 800fdfe:	eba0 0308 	sub.w	r3, r0, r8
 800fe02:	fa09 f303 	lsl.w	r3, r9, r3
 800fe06:	4313      	orrs	r3, r2
 800fe08:	9304      	str	r3, [sp, #16]
 800fe0a:	46a2      	mov	sl, r4
 800fe0c:	e7d2      	b.n	800fdb4 <_svfiprintf_r+0x9c>
 800fe0e:	9b03      	ldr	r3, [sp, #12]
 800fe10:	1d19      	adds	r1, r3, #4
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	9103      	str	r1, [sp, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bfbb      	ittet	lt
 800fe1a:	425b      	neglt	r3, r3
 800fe1c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe20:	9307      	strge	r3, [sp, #28]
 800fe22:	9307      	strlt	r3, [sp, #28]
 800fe24:	bfb8      	it	lt
 800fe26:	9204      	strlt	r2, [sp, #16]
 800fe28:	7823      	ldrb	r3, [r4, #0]
 800fe2a:	2b2e      	cmp	r3, #46	; 0x2e
 800fe2c:	d10c      	bne.n	800fe48 <_svfiprintf_r+0x130>
 800fe2e:	7863      	ldrb	r3, [r4, #1]
 800fe30:	2b2a      	cmp	r3, #42	; 0x2a
 800fe32:	d135      	bne.n	800fea0 <_svfiprintf_r+0x188>
 800fe34:	9b03      	ldr	r3, [sp, #12]
 800fe36:	1d1a      	adds	r2, r3, #4
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	9203      	str	r2, [sp, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	bfb8      	it	lt
 800fe40:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe44:	3402      	adds	r4, #2
 800fe46:	9305      	str	r3, [sp, #20]
 800fe48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff14 <_svfiprintf_r+0x1fc>
 800fe4c:	7821      	ldrb	r1, [r4, #0]
 800fe4e:	2203      	movs	r2, #3
 800fe50:	4650      	mov	r0, sl
 800fe52:	f7f0 f9c5 	bl	80001e0 <memchr>
 800fe56:	b140      	cbz	r0, 800fe6a <_svfiprintf_r+0x152>
 800fe58:	2340      	movs	r3, #64	; 0x40
 800fe5a:	eba0 000a 	sub.w	r0, r0, sl
 800fe5e:	fa03 f000 	lsl.w	r0, r3, r0
 800fe62:	9b04      	ldr	r3, [sp, #16]
 800fe64:	4303      	orrs	r3, r0
 800fe66:	3401      	adds	r4, #1
 800fe68:	9304      	str	r3, [sp, #16]
 800fe6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe6e:	4826      	ldr	r0, [pc, #152]	; (800ff08 <_svfiprintf_r+0x1f0>)
 800fe70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe74:	2206      	movs	r2, #6
 800fe76:	f7f0 f9b3 	bl	80001e0 <memchr>
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d038      	beq.n	800fef0 <_svfiprintf_r+0x1d8>
 800fe7e:	4b23      	ldr	r3, [pc, #140]	; (800ff0c <_svfiprintf_r+0x1f4>)
 800fe80:	bb1b      	cbnz	r3, 800feca <_svfiprintf_r+0x1b2>
 800fe82:	9b03      	ldr	r3, [sp, #12]
 800fe84:	3307      	adds	r3, #7
 800fe86:	f023 0307 	bic.w	r3, r3, #7
 800fe8a:	3308      	adds	r3, #8
 800fe8c:	9303      	str	r3, [sp, #12]
 800fe8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe90:	4433      	add	r3, r6
 800fe92:	9309      	str	r3, [sp, #36]	; 0x24
 800fe94:	e767      	b.n	800fd66 <_svfiprintf_r+0x4e>
 800fe96:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	e7a5      	b.n	800fdec <_svfiprintf_r+0xd4>
 800fea0:	2300      	movs	r3, #0
 800fea2:	3401      	adds	r4, #1
 800fea4:	9305      	str	r3, [sp, #20]
 800fea6:	4619      	mov	r1, r3
 800fea8:	f04f 0c0a 	mov.w	ip, #10
 800feac:	4620      	mov	r0, r4
 800feae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feb2:	3a30      	subs	r2, #48	; 0x30
 800feb4:	2a09      	cmp	r2, #9
 800feb6:	d903      	bls.n	800fec0 <_svfiprintf_r+0x1a8>
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d0c5      	beq.n	800fe48 <_svfiprintf_r+0x130>
 800febc:	9105      	str	r1, [sp, #20]
 800febe:	e7c3      	b.n	800fe48 <_svfiprintf_r+0x130>
 800fec0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fec4:	4604      	mov	r4, r0
 800fec6:	2301      	movs	r3, #1
 800fec8:	e7f0      	b.n	800feac <_svfiprintf_r+0x194>
 800feca:	ab03      	add	r3, sp, #12
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	462a      	mov	r2, r5
 800fed0:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <_svfiprintf_r+0x1f8>)
 800fed2:	a904      	add	r1, sp, #16
 800fed4:	4638      	mov	r0, r7
 800fed6:	f3af 8000 	nop.w
 800feda:	1c42      	adds	r2, r0, #1
 800fedc:	4606      	mov	r6, r0
 800fede:	d1d6      	bne.n	800fe8e <_svfiprintf_r+0x176>
 800fee0:	89ab      	ldrh	r3, [r5, #12]
 800fee2:	065b      	lsls	r3, r3, #25
 800fee4:	f53f af2c 	bmi.w	800fd40 <_svfiprintf_r+0x28>
 800fee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800feea:	b01d      	add	sp, #116	; 0x74
 800feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef0:	ab03      	add	r3, sp, #12
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	462a      	mov	r2, r5
 800fef6:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <_svfiprintf_r+0x1f8>)
 800fef8:	a904      	add	r1, sp, #16
 800fefa:	4638      	mov	r0, r7
 800fefc:	f000 f87a 	bl	800fff4 <_printf_i>
 800ff00:	e7eb      	b.n	800feda <_svfiprintf_r+0x1c2>
 800ff02:	bf00      	nop
 800ff04:	08012fac 	.word	0x08012fac
 800ff08:	08012fb6 	.word	0x08012fb6
 800ff0c:	00000000 	.word	0x00000000
 800ff10:	0800fc61 	.word	0x0800fc61
 800ff14:	08012fb2 	.word	0x08012fb2

0800ff18 <_printf_common>:
 800ff18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff1c:	4616      	mov	r6, r2
 800ff1e:	4699      	mov	r9, r3
 800ff20:	688a      	ldr	r2, [r1, #8]
 800ff22:	690b      	ldr	r3, [r1, #16]
 800ff24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	bfb8      	it	lt
 800ff2c:	4613      	movlt	r3, r2
 800ff2e:	6033      	str	r3, [r6, #0]
 800ff30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff34:	4607      	mov	r7, r0
 800ff36:	460c      	mov	r4, r1
 800ff38:	b10a      	cbz	r2, 800ff3e <_printf_common+0x26>
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	6033      	str	r3, [r6, #0]
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	0699      	lsls	r1, r3, #26
 800ff42:	bf42      	ittt	mi
 800ff44:	6833      	ldrmi	r3, [r6, #0]
 800ff46:	3302      	addmi	r3, #2
 800ff48:	6033      	strmi	r3, [r6, #0]
 800ff4a:	6825      	ldr	r5, [r4, #0]
 800ff4c:	f015 0506 	ands.w	r5, r5, #6
 800ff50:	d106      	bne.n	800ff60 <_printf_common+0x48>
 800ff52:	f104 0a19 	add.w	sl, r4, #25
 800ff56:	68e3      	ldr	r3, [r4, #12]
 800ff58:	6832      	ldr	r2, [r6, #0]
 800ff5a:	1a9b      	subs	r3, r3, r2
 800ff5c:	42ab      	cmp	r3, r5
 800ff5e:	dc26      	bgt.n	800ffae <_printf_common+0x96>
 800ff60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff64:	1e13      	subs	r3, r2, #0
 800ff66:	6822      	ldr	r2, [r4, #0]
 800ff68:	bf18      	it	ne
 800ff6a:	2301      	movne	r3, #1
 800ff6c:	0692      	lsls	r2, r2, #26
 800ff6e:	d42b      	bmi.n	800ffc8 <_printf_common+0xb0>
 800ff70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff74:	4649      	mov	r1, r9
 800ff76:	4638      	mov	r0, r7
 800ff78:	47c0      	blx	r8
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	d01e      	beq.n	800ffbc <_printf_common+0xa4>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	68e5      	ldr	r5, [r4, #12]
 800ff82:	6832      	ldr	r2, [r6, #0]
 800ff84:	f003 0306 	and.w	r3, r3, #6
 800ff88:	2b04      	cmp	r3, #4
 800ff8a:	bf08      	it	eq
 800ff8c:	1aad      	subeq	r5, r5, r2
 800ff8e:	68a3      	ldr	r3, [r4, #8]
 800ff90:	6922      	ldr	r2, [r4, #16]
 800ff92:	bf0c      	ite	eq
 800ff94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff98:	2500      	movne	r5, #0
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	bfc4      	itt	gt
 800ff9e:	1a9b      	subgt	r3, r3, r2
 800ffa0:	18ed      	addgt	r5, r5, r3
 800ffa2:	2600      	movs	r6, #0
 800ffa4:	341a      	adds	r4, #26
 800ffa6:	42b5      	cmp	r5, r6
 800ffa8:	d11a      	bne.n	800ffe0 <_printf_common+0xc8>
 800ffaa:	2000      	movs	r0, #0
 800ffac:	e008      	b.n	800ffc0 <_printf_common+0xa8>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	4652      	mov	r2, sl
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	47c0      	blx	r8
 800ffb8:	3001      	adds	r0, #1
 800ffba:	d103      	bne.n	800ffc4 <_printf_common+0xac>
 800ffbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc4:	3501      	adds	r5, #1
 800ffc6:	e7c6      	b.n	800ff56 <_printf_common+0x3e>
 800ffc8:	18e1      	adds	r1, r4, r3
 800ffca:	1c5a      	adds	r2, r3, #1
 800ffcc:	2030      	movs	r0, #48	; 0x30
 800ffce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffd2:	4422      	add	r2, r4
 800ffd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffdc:	3302      	adds	r3, #2
 800ffde:	e7c7      	b.n	800ff70 <_printf_common+0x58>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	4622      	mov	r2, r4
 800ffe4:	4649      	mov	r1, r9
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	47c0      	blx	r8
 800ffea:	3001      	adds	r0, #1
 800ffec:	d0e6      	beq.n	800ffbc <_printf_common+0xa4>
 800ffee:	3601      	adds	r6, #1
 800fff0:	e7d9      	b.n	800ffa6 <_printf_common+0x8e>
	...

0800fff4 <_printf_i>:
 800fff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fff8:	7e0f      	ldrb	r7, [r1, #24]
 800fffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fffc:	2f78      	cmp	r7, #120	; 0x78
 800fffe:	4691      	mov	r9, r2
 8010000:	4680      	mov	r8, r0
 8010002:	460c      	mov	r4, r1
 8010004:	469a      	mov	sl, r3
 8010006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801000a:	d807      	bhi.n	801001c <_printf_i+0x28>
 801000c:	2f62      	cmp	r7, #98	; 0x62
 801000e:	d80a      	bhi.n	8010026 <_printf_i+0x32>
 8010010:	2f00      	cmp	r7, #0
 8010012:	f000 80d8 	beq.w	80101c6 <_printf_i+0x1d2>
 8010016:	2f58      	cmp	r7, #88	; 0x58
 8010018:	f000 80a3 	beq.w	8010162 <_printf_i+0x16e>
 801001c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010024:	e03a      	b.n	801009c <_printf_i+0xa8>
 8010026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801002a:	2b15      	cmp	r3, #21
 801002c:	d8f6      	bhi.n	801001c <_printf_i+0x28>
 801002e:	a101      	add	r1, pc, #4	; (adr r1, 8010034 <_printf_i+0x40>)
 8010030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010034:	0801008d 	.word	0x0801008d
 8010038:	080100a1 	.word	0x080100a1
 801003c:	0801001d 	.word	0x0801001d
 8010040:	0801001d 	.word	0x0801001d
 8010044:	0801001d 	.word	0x0801001d
 8010048:	0801001d 	.word	0x0801001d
 801004c:	080100a1 	.word	0x080100a1
 8010050:	0801001d 	.word	0x0801001d
 8010054:	0801001d 	.word	0x0801001d
 8010058:	0801001d 	.word	0x0801001d
 801005c:	0801001d 	.word	0x0801001d
 8010060:	080101ad 	.word	0x080101ad
 8010064:	080100d1 	.word	0x080100d1
 8010068:	0801018f 	.word	0x0801018f
 801006c:	0801001d 	.word	0x0801001d
 8010070:	0801001d 	.word	0x0801001d
 8010074:	080101cf 	.word	0x080101cf
 8010078:	0801001d 	.word	0x0801001d
 801007c:	080100d1 	.word	0x080100d1
 8010080:	0801001d 	.word	0x0801001d
 8010084:	0801001d 	.word	0x0801001d
 8010088:	08010197 	.word	0x08010197
 801008c:	682b      	ldr	r3, [r5, #0]
 801008e:	1d1a      	adds	r2, r3, #4
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	602a      	str	r2, [r5, #0]
 8010094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801009c:	2301      	movs	r3, #1
 801009e:	e0a3      	b.n	80101e8 <_printf_i+0x1f4>
 80100a0:	6820      	ldr	r0, [r4, #0]
 80100a2:	6829      	ldr	r1, [r5, #0]
 80100a4:	0606      	lsls	r6, r0, #24
 80100a6:	f101 0304 	add.w	r3, r1, #4
 80100aa:	d50a      	bpl.n	80100c2 <_printf_i+0xce>
 80100ac:	680e      	ldr	r6, [r1, #0]
 80100ae:	602b      	str	r3, [r5, #0]
 80100b0:	2e00      	cmp	r6, #0
 80100b2:	da03      	bge.n	80100bc <_printf_i+0xc8>
 80100b4:	232d      	movs	r3, #45	; 0x2d
 80100b6:	4276      	negs	r6, r6
 80100b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100bc:	485e      	ldr	r0, [pc, #376]	; (8010238 <_printf_i+0x244>)
 80100be:	230a      	movs	r3, #10
 80100c0:	e019      	b.n	80100f6 <_printf_i+0x102>
 80100c2:	680e      	ldr	r6, [r1, #0]
 80100c4:	602b      	str	r3, [r5, #0]
 80100c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80100ca:	bf18      	it	ne
 80100cc:	b236      	sxthne	r6, r6
 80100ce:	e7ef      	b.n	80100b0 <_printf_i+0xbc>
 80100d0:	682b      	ldr	r3, [r5, #0]
 80100d2:	6820      	ldr	r0, [r4, #0]
 80100d4:	1d19      	adds	r1, r3, #4
 80100d6:	6029      	str	r1, [r5, #0]
 80100d8:	0601      	lsls	r1, r0, #24
 80100da:	d501      	bpl.n	80100e0 <_printf_i+0xec>
 80100dc:	681e      	ldr	r6, [r3, #0]
 80100de:	e002      	b.n	80100e6 <_printf_i+0xf2>
 80100e0:	0646      	lsls	r6, r0, #25
 80100e2:	d5fb      	bpl.n	80100dc <_printf_i+0xe8>
 80100e4:	881e      	ldrh	r6, [r3, #0]
 80100e6:	4854      	ldr	r0, [pc, #336]	; (8010238 <_printf_i+0x244>)
 80100e8:	2f6f      	cmp	r7, #111	; 0x6f
 80100ea:	bf0c      	ite	eq
 80100ec:	2308      	moveq	r3, #8
 80100ee:	230a      	movne	r3, #10
 80100f0:	2100      	movs	r1, #0
 80100f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100f6:	6865      	ldr	r5, [r4, #4]
 80100f8:	60a5      	str	r5, [r4, #8]
 80100fa:	2d00      	cmp	r5, #0
 80100fc:	bfa2      	ittt	ge
 80100fe:	6821      	ldrge	r1, [r4, #0]
 8010100:	f021 0104 	bicge.w	r1, r1, #4
 8010104:	6021      	strge	r1, [r4, #0]
 8010106:	b90e      	cbnz	r6, 801010c <_printf_i+0x118>
 8010108:	2d00      	cmp	r5, #0
 801010a:	d04d      	beq.n	80101a8 <_printf_i+0x1b4>
 801010c:	4615      	mov	r5, r2
 801010e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010112:	fb03 6711 	mls	r7, r3, r1, r6
 8010116:	5dc7      	ldrb	r7, [r0, r7]
 8010118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801011c:	4637      	mov	r7, r6
 801011e:	42bb      	cmp	r3, r7
 8010120:	460e      	mov	r6, r1
 8010122:	d9f4      	bls.n	801010e <_printf_i+0x11a>
 8010124:	2b08      	cmp	r3, #8
 8010126:	d10b      	bne.n	8010140 <_printf_i+0x14c>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	07de      	lsls	r6, r3, #31
 801012c:	d508      	bpl.n	8010140 <_printf_i+0x14c>
 801012e:	6923      	ldr	r3, [r4, #16]
 8010130:	6861      	ldr	r1, [r4, #4]
 8010132:	4299      	cmp	r1, r3
 8010134:	bfde      	ittt	le
 8010136:	2330      	movle	r3, #48	; 0x30
 8010138:	f805 3c01 	strble.w	r3, [r5, #-1]
 801013c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010140:	1b52      	subs	r2, r2, r5
 8010142:	6122      	str	r2, [r4, #16]
 8010144:	f8cd a000 	str.w	sl, [sp]
 8010148:	464b      	mov	r3, r9
 801014a:	aa03      	add	r2, sp, #12
 801014c:	4621      	mov	r1, r4
 801014e:	4640      	mov	r0, r8
 8010150:	f7ff fee2 	bl	800ff18 <_printf_common>
 8010154:	3001      	adds	r0, #1
 8010156:	d14c      	bne.n	80101f2 <_printf_i+0x1fe>
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	b004      	add	sp, #16
 801015e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010162:	4835      	ldr	r0, [pc, #212]	; (8010238 <_printf_i+0x244>)
 8010164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010168:	6829      	ldr	r1, [r5, #0]
 801016a:	6823      	ldr	r3, [r4, #0]
 801016c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010170:	6029      	str	r1, [r5, #0]
 8010172:	061d      	lsls	r5, r3, #24
 8010174:	d514      	bpl.n	80101a0 <_printf_i+0x1ac>
 8010176:	07df      	lsls	r7, r3, #31
 8010178:	bf44      	itt	mi
 801017a:	f043 0320 	orrmi.w	r3, r3, #32
 801017e:	6023      	strmi	r3, [r4, #0]
 8010180:	b91e      	cbnz	r6, 801018a <_printf_i+0x196>
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	f023 0320 	bic.w	r3, r3, #32
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	2310      	movs	r3, #16
 801018c:	e7b0      	b.n	80100f0 <_printf_i+0xfc>
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	f043 0320 	orr.w	r3, r3, #32
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	2378      	movs	r3, #120	; 0x78
 8010198:	4828      	ldr	r0, [pc, #160]	; (801023c <_printf_i+0x248>)
 801019a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801019e:	e7e3      	b.n	8010168 <_printf_i+0x174>
 80101a0:	0659      	lsls	r1, r3, #25
 80101a2:	bf48      	it	mi
 80101a4:	b2b6      	uxthmi	r6, r6
 80101a6:	e7e6      	b.n	8010176 <_printf_i+0x182>
 80101a8:	4615      	mov	r5, r2
 80101aa:	e7bb      	b.n	8010124 <_printf_i+0x130>
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	6826      	ldr	r6, [r4, #0]
 80101b0:	6961      	ldr	r1, [r4, #20]
 80101b2:	1d18      	adds	r0, r3, #4
 80101b4:	6028      	str	r0, [r5, #0]
 80101b6:	0635      	lsls	r5, r6, #24
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	d501      	bpl.n	80101c0 <_printf_i+0x1cc>
 80101bc:	6019      	str	r1, [r3, #0]
 80101be:	e002      	b.n	80101c6 <_printf_i+0x1d2>
 80101c0:	0670      	lsls	r0, r6, #25
 80101c2:	d5fb      	bpl.n	80101bc <_printf_i+0x1c8>
 80101c4:	8019      	strh	r1, [r3, #0]
 80101c6:	2300      	movs	r3, #0
 80101c8:	6123      	str	r3, [r4, #16]
 80101ca:	4615      	mov	r5, r2
 80101cc:	e7ba      	b.n	8010144 <_printf_i+0x150>
 80101ce:	682b      	ldr	r3, [r5, #0]
 80101d0:	1d1a      	adds	r2, r3, #4
 80101d2:	602a      	str	r2, [r5, #0]
 80101d4:	681d      	ldr	r5, [r3, #0]
 80101d6:	6862      	ldr	r2, [r4, #4]
 80101d8:	2100      	movs	r1, #0
 80101da:	4628      	mov	r0, r5
 80101dc:	f7f0 f800 	bl	80001e0 <memchr>
 80101e0:	b108      	cbz	r0, 80101e6 <_printf_i+0x1f2>
 80101e2:	1b40      	subs	r0, r0, r5
 80101e4:	6060      	str	r0, [r4, #4]
 80101e6:	6863      	ldr	r3, [r4, #4]
 80101e8:	6123      	str	r3, [r4, #16]
 80101ea:	2300      	movs	r3, #0
 80101ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f0:	e7a8      	b.n	8010144 <_printf_i+0x150>
 80101f2:	6923      	ldr	r3, [r4, #16]
 80101f4:	462a      	mov	r2, r5
 80101f6:	4649      	mov	r1, r9
 80101f8:	4640      	mov	r0, r8
 80101fa:	47d0      	blx	sl
 80101fc:	3001      	adds	r0, #1
 80101fe:	d0ab      	beq.n	8010158 <_printf_i+0x164>
 8010200:	6823      	ldr	r3, [r4, #0]
 8010202:	079b      	lsls	r3, r3, #30
 8010204:	d413      	bmi.n	801022e <_printf_i+0x23a>
 8010206:	68e0      	ldr	r0, [r4, #12]
 8010208:	9b03      	ldr	r3, [sp, #12]
 801020a:	4298      	cmp	r0, r3
 801020c:	bfb8      	it	lt
 801020e:	4618      	movlt	r0, r3
 8010210:	e7a4      	b.n	801015c <_printf_i+0x168>
 8010212:	2301      	movs	r3, #1
 8010214:	4632      	mov	r2, r6
 8010216:	4649      	mov	r1, r9
 8010218:	4640      	mov	r0, r8
 801021a:	47d0      	blx	sl
 801021c:	3001      	adds	r0, #1
 801021e:	d09b      	beq.n	8010158 <_printf_i+0x164>
 8010220:	3501      	adds	r5, #1
 8010222:	68e3      	ldr	r3, [r4, #12]
 8010224:	9903      	ldr	r1, [sp, #12]
 8010226:	1a5b      	subs	r3, r3, r1
 8010228:	42ab      	cmp	r3, r5
 801022a:	dcf2      	bgt.n	8010212 <_printf_i+0x21e>
 801022c:	e7eb      	b.n	8010206 <_printf_i+0x212>
 801022e:	2500      	movs	r5, #0
 8010230:	f104 0619 	add.w	r6, r4, #25
 8010234:	e7f5      	b.n	8010222 <_printf_i+0x22e>
 8010236:	bf00      	nop
 8010238:	08012fbd 	.word	0x08012fbd
 801023c:	08012fce 	.word	0x08012fce

08010240 <memmove>:
 8010240:	4288      	cmp	r0, r1
 8010242:	b510      	push	{r4, lr}
 8010244:	eb01 0402 	add.w	r4, r1, r2
 8010248:	d902      	bls.n	8010250 <memmove+0x10>
 801024a:	4284      	cmp	r4, r0
 801024c:	4623      	mov	r3, r4
 801024e:	d807      	bhi.n	8010260 <memmove+0x20>
 8010250:	1e43      	subs	r3, r0, #1
 8010252:	42a1      	cmp	r1, r4
 8010254:	d008      	beq.n	8010268 <memmove+0x28>
 8010256:	f811 2b01 	ldrb.w	r2, [r1], #1
 801025a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801025e:	e7f8      	b.n	8010252 <memmove+0x12>
 8010260:	4402      	add	r2, r0
 8010262:	4601      	mov	r1, r0
 8010264:	428a      	cmp	r2, r1
 8010266:	d100      	bne.n	801026a <memmove+0x2a>
 8010268:	bd10      	pop	{r4, pc}
 801026a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801026e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010272:	e7f7      	b.n	8010264 <memmove+0x24>

08010274 <_realloc_r>:
 8010274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010278:	4680      	mov	r8, r0
 801027a:	4614      	mov	r4, r2
 801027c:	460e      	mov	r6, r1
 801027e:	b921      	cbnz	r1, 801028a <_realloc_r+0x16>
 8010280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010284:	4611      	mov	r1, r2
 8010286:	f7ff bbd1 	b.w	800fa2c <_malloc_r>
 801028a:	b92a      	cbnz	r2, 8010298 <_realloc_r+0x24>
 801028c:	f7ff fb62 	bl	800f954 <_free_r>
 8010290:	4625      	mov	r5, r4
 8010292:	4628      	mov	r0, r5
 8010294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010298:	f000 f81b 	bl	80102d2 <_malloc_usable_size_r>
 801029c:	4284      	cmp	r4, r0
 801029e:	4607      	mov	r7, r0
 80102a0:	d802      	bhi.n	80102a8 <_realloc_r+0x34>
 80102a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102a6:	d812      	bhi.n	80102ce <_realloc_r+0x5a>
 80102a8:	4621      	mov	r1, r4
 80102aa:	4640      	mov	r0, r8
 80102ac:	f7ff fbbe 	bl	800fa2c <_malloc_r>
 80102b0:	4605      	mov	r5, r0
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d0ed      	beq.n	8010292 <_realloc_r+0x1e>
 80102b6:	42bc      	cmp	r4, r7
 80102b8:	4622      	mov	r2, r4
 80102ba:	4631      	mov	r1, r6
 80102bc:	bf28      	it	cs
 80102be:	463a      	movcs	r2, r7
 80102c0:	f7ff fb32 	bl	800f928 <memcpy>
 80102c4:	4631      	mov	r1, r6
 80102c6:	4640      	mov	r0, r8
 80102c8:	f7ff fb44 	bl	800f954 <_free_r>
 80102cc:	e7e1      	b.n	8010292 <_realloc_r+0x1e>
 80102ce:	4635      	mov	r5, r6
 80102d0:	e7df      	b.n	8010292 <_realloc_r+0x1e>

080102d2 <_malloc_usable_size_r>:
 80102d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d6:	1f18      	subs	r0, r3, #4
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bfbc      	itt	lt
 80102dc:	580b      	ldrlt	r3, [r1, r0]
 80102de:	18c0      	addlt	r0, r0, r3
 80102e0:	4770      	bx	lr
	...

080102e4 <_init>:
 80102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e6:	bf00      	nop
 80102e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ea:	bc08      	pop	{r3}
 80102ec:	469e      	mov	lr, r3
 80102ee:	4770      	bx	lr

080102f0 <_fini>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	bf00      	nop
 80102f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102f6:	bc08      	pop	{r3}
 80102f8:	469e      	mov	lr, r3
 80102fa:	4770      	bx	lr

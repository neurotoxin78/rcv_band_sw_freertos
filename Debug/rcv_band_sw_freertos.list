
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002378  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc0  0800bcc0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc0  0800bcc0  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcc8  0800bcc8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcc8  0800bcc8  0001bcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800bcd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d14  200000fc  0800bdcc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e10  0800bdcc  00024e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ca3  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e75  00000000  00000000  00040dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00045c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  00047778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c348  00000000  00000000  00049060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022027  00000000  00000000  000653a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1cdb  00000000  00000000  000873cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001290aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007514  00000000  00000000  001290fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000fc 	.word	0x200000fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009930 	.word	0x08009930

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000100 	.word	0x20000100
 80001dc:	08009930 	.word	0x08009930

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	79ba      	ldrb	r2, [r7, #6]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	121b      	asrs	r3, r3, #8
 800059e:	b2db      	uxtb	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4603      	mov	r3, r0
 80005c0:	71bb      	strb	r3, [r7, #6]
 80005c2:	460b      	mov	r3, r1
 80005c4:	717b      	strb	r3, [r7, #5]
 80005c6:	4613      	mov	r3, r2
 80005c8:	713b      	strb	r3, [r7, #4]
#if (NUM_BPP == 4) // SK6812
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	009c      	lsls	r4, r3, #2
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	21b0      	movs	r1, #176	; 0xb0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffd6 	bl	8000584 <scale8>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <led_set_RGB+0x6c>)
 80005de:	551a      	strb	r2, [r3, r4]
  rgb_arr[4 * index + 1] = r;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	3301      	adds	r3, #1
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <led_set_RGB+0x6c>)
 80005e8:	79ba      	ldrb	r2, [r7, #6]
 80005ea:	54ca      	strb	r2, [r1, r3]
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	1c9c      	adds	r4, r3, #2
 80005f2:	793b      	ldrb	r3, [r7, #4]
 80005f4:	21f0      	movs	r1, #240	; 0xf0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc4 	bl	8000584 <scale8>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <led_set_RGB+0x6c>)
 8000602:	551a      	strb	r2, [r3, r4]
  rgb_arr[4 * index + 3] = 0;
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3303      	adds	r3, #3
 800060a:	4a03      	ldr	r2, [pc, #12]	; (8000618 <led_set_RGB+0x6c>)
 800060c:	2100      	movs	r1, #0
 800060e:	54d1      	strb	r1, [r2, r3]
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
  rgb_arr[3 * index + 1] = r;
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
#endif // End SK6812 WS2812B case differentiation
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000118 	.word	0x20000118

0800061c <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim4_ch3.State != HAL_DMA_STATE_READY) {
 8000622:	4b5f      	ldr	r3, [pc, #380]	; (80007a0 <led_render+0x184>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d105      	bne.n	8000636 <led_render+0x1a>
 800062a:	4b5e      	ldr	r3, [pc, #376]	; (80007a4 <led_render+0x188>)
 800062c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b01      	cmp	r3, #1
 8000634:	d014      	beq.n	8000660 <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	e006      	b.n	800064a <led_render+0x2e>
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4a5a      	ldr	r2, [pc, #360]	; (80007a8 <led_render+0x18c>)
 8000640:	2100      	movs	r1, #0
 8000642:	54d1      	strb	r1, [r2, r3]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	3301      	adds	r3, #1
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b3f      	cmp	r3, #63	; 0x3f
 800064e:	d9f5      	bls.n	800063c <led_render+0x20>
    wr_buf_p = 0;
 8000650:	4b53      	ldr	r3, [pc, #332]	; (80007a0 <led_render+0x184>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
 8000656:	2108      	movs	r1, #8
 8000658:	4854      	ldr	r0, [pc, #336]	; (80007ac <led_render+0x190>)
 800065a:	f004 fbd3 	bl	8004e04 <HAL_TIM_PWM_Stop_DMA>
    return;
 800065e:	e09b      	b.n	8000798 <led_render+0x17c>
  }
  // Ooh boi the first data buffer half (and the second!)
#if (NUM_BPP == 4) // SK6812
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	e08b      	b.n	800077e <led_render+0x162>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8000666:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <led_render+0x194>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	2b00      	cmp	r3, #0
 8000678:	dd01      	ble.n	800067e <led_render+0x62>
 800067a:	2126      	movs	r1, #38	; 0x26
 800067c:	e000      	b.n	8000680 <led_render+0x64>
 800067e:	2113      	movs	r1, #19
 8000680:	4a49      	ldr	r2, [pc, #292]	; (80007a8 <led_render+0x18c>)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	4413      	add	r3, r2
 8000686:	460a      	mov	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800068a:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <led_render+0x194>)
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	461a      	mov	r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	2b00      	cmp	r3, #0
 800069c:	dd01      	ble.n	80006a2 <led_render+0x86>
 800069e:	2126      	movs	r1, #38	; 0x26
 80006a0:	e000      	b.n	80006a4 <led_render+0x88>
 80006a2:	2113      	movs	r1, #19
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3308      	adds	r3, #8
 80006a8:	4a3f      	ldr	r2, [pc, #252]	; (80007a8 <led_render+0x18c>)
 80006aa:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <led_render+0x194>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	461a      	mov	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	dd01      	ble.n	80006c4 <led_render+0xa8>
 80006c0:	2126      	movs	r1, #38	; 0x26
 80006c2:	e000      	b.n	80006c6 <led_render+0xaa>
 80006c4:	2113      	movs	r1, #19
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3310      	adds	r3, #16
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <led_render+0x18c>)
 80006cc:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80006ce:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <led_render+0x194>)
 80006d0:	78db      	ldrb	r3, [r3, #3]
 80006d2:	461a      	mov	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd01      	ble.n	80006e6 <led_render+0xca>
 80006e2:	2126      	movs	r1, #38	; 0x26
 80006e4:	e000      	b.n	80006e8 <led_render+0xcc>
 80006e6:	2113      	movs	r1, #19
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3318      	adds	r3, #24
 80006ec:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <led_render+0x18c>)
 80006ee:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80006f0:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <led_render+0x194>)
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	461a      	mov	r2, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	2b00      	cmp	r3, #0
 8000702:	dd01      	ble.n	8000708 <led_render+0xec>
 8000704:	2126      	movs	r1, #38	; 0x26
 8000706:	e000      	b.n	800070a <led_render+0xee>
 8000708:	2113      	movs	r1, #19
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3320      	adds	r3, #32
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <led_render+0x18c>)
 8000710:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <led_render+0x194>)
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	461a      	mov	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	2b00      	cmp	r3, #0
 8000724:	dd01      	ble.n	800072a <led_render+0x10e>
 8000726:	2126      	movs	r1, #38	; 0x26
 8000728:	e000      	b.n	800072c <led_render+0x110>
 800072a:	2113      	movs	r1, #19
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3328      	adds	r3, #40	; 0x28
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <led_render+0x18c>)
 8000732:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <led_render+0x194>)
 8000736:	799b      	ldrb	r3, [r3, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000744:	2b00      	cmp	r3, #0
 8000746:	dd01      	ble.n	800074c <led_render+0x130>
 8000748:	2126      	movs	r1, #38	; 0x26
 800074a:	e000      	b.n	800074e <led_render+0x132>
 800074c:	2113      	movs	r1, #19
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3330      	adds	r3, #48	; 0x30
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <led_render+0x18c>)
 8000754:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <led_render+0x194>)
 8000758:	79db      	ldrb	r3, [r3, #7]
 800075a:	461a      	mov	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	2b00      	cmp	r3, #0
 8000768:	dd01      	ble.n	800076e <led_render+0x152>
 800076a:	2126      	movs	r1, #38	; 0x26
 800076c:	e000      	b.n	8000770 <led_render+0x154>
 800076e:	2113      	movs	r1, #19
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	3338      	adds	r3, #56	; 0x38
 8000774:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <led_render+0x18c>)
 8000776:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b07      	cmp	r3, #7
 8000782:	f67f af70 	bls.w	8000666 <led_render+0x4a>
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
  }
#endif // End SK6812 WS2812B case differentiation

  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)wr_buf, WR_BUF_LEN);
 8000786:	2340      	movs	r3, #64	; 0x40
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <led_render+0x18c>)
 800078a:	2108      	movs	r1, #8
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <led_render+0x190>)
 800078e:	f004 f989 	bl	8004aa4 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <led_render+0x184>)
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000015c 	.word	0x2000015c
 80007a4:	2000038c 	.word	0x2000038c
 80007a8:	2000011c 	.word	0x2000011c
 80007ac:	20000344 	.word	0x20000344
 80007b0:	20000118 	.word	0x20000118

080007b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80007bc:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d162      	bne.n	800088a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd6>
    // We're in. Fill the even buffer
#if (NUM_BPP == 4) // SK6812
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	e056      	b.n	8000878 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc4>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[4 * wr_buf_p    ] << i) & 0x80) > 0);
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dd01      	ble.n	80007e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x34>
 80007e4:	2126      	movs	r1, #38	; 0x26
 80007e6:	e000      	b.n	80007ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x36>
 80007e8:	2113      	movs	r1, #19
 80007ea:	4a38      	ldr	r2, [pc, #224]	; (80008cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
 80007f4:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	461a      	mov	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd01      	ble.n	8000814 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x60>
 8000810:	2126      	movs	r1, #38	; 0x26
 8000812:	e000      	b.n	8000816 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x62>
 8000814:	2113      	movs	r1, #19
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3308      	adds	r3, #8
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 800081c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	3302      	adds	r3, #2
 8000826:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd01      	ble.n	800083e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8a>
 800083a:	2126      	movs	r1, #38	; 0x26
 800083c:	e000      	b.n	8000840 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>
 800083e:	2113      	movs	r1, #19
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3310      	adds	r3, #16
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 8000846:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	3303      	adds	r3, #3
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 8000852:	5cd3      	ldrb	r3, [r2, r3]
 8000854:	461a      	mov	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000860:	2b00      	cmp	r3, #0
 8000862:	dd01      	ble.n	8000868 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb4>
 8000864:	2126      	movs	r1, #38	; 0x26
 8000866:	e000      	b.n	800086a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb6>
 8000868:	2113      	movs	r1, #19
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3318      	adds	r3, #24
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 8000870:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b07      	cmp	r3, #7
 800087c:	d9a5      	bls.n	80007ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000886:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8000888:	e015      	b.n	80008b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x102>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d811      	bhi.n	80008b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x102>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	72fb      	strb	r3, [r7, #11]
 8000896:	e006      	b.n	80008a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf2>
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 800089c:	2100      	movs	r1, #0
 800089e:	54d1      	strb	r1, [r2, r3]
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	3301      	adds	r3, #1
 80008a4:	72fb      	strb	r3, [r7, #11]
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	2b1f      	cmp	r3, #31
 80008aa:	d9f5      	bls.n	8000898 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    wr_buf_p++;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80008b4:	6013      	str	r3, [r2, #0]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000015c 	.word	0x2000015c
 80008c8:	20000118 	.word	0x20000118
 80008cc:	2000011c 	.word	0x2000011c

080008d0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80008d8:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d161      	bne.n	80009a4 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
    // We're in. Fill the odd buffer
#if (NUM_BPP == 4) // SK6812
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e055      	b.n	8000992 <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[4 * wr_buf_p    ] << i) & 0x80) > 0);
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4a3f      	ldr	r2, [pc, #252]	; (80009ec <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dd01      	ble.n	8000904 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
 8000900:	2126      	movs	r1, #38	; 0x26
 8000902:	e000      	b.n	8000906 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 8000904:	2113      	movs	r1, #19
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3320      	adds	r3, #32
 800090a:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 800090c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	3301      	adds	r3, #1
 8000916:	4a35      	ldr	r2, [pc, #212]	; (80009ec <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000918:	5cd3      	ldrb	r3, [r2, r3]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	2b00      	cmp	r3, #0
 8000928:	dd01      	ble.n	800092e <HAL_TIM_PWM_PulseFinishedCallback+0x5e>
 800092a:	2126      	movs	r1, #38	; 0x26
 800092c:	e000      	b.n	8000930 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
 800092e:	2113      	movs	r1, #19
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3328      	adds	r3, #40	; 0x28
 8000934:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000936:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	3302      	adds	r3, #2
 8000940:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	461a      	mov	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000950:	2b00      	cmp	r3, #0
 8000952:	dd01      	ble.n	8000958 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
 8000954:	2126      	movs	r1, #38	; 0x26
 8000956:	e000      	b.n	800095a <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
 8000958:	2113      	movs	r1, #19
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3330      	adds	r3, #48	; 0x30
 800095e:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000960:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3303      	adds	r3, #3
 800096a:	4a20      	ldr	r2, [pc, #128]	; (80009ec <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	2b00      	cmp	r3, #0
 800097c:	dd01      	ble.n	8000982 <HAL_TIM_PWM_PulseFinishedCallback+0xb2>
 800097e:	2126      	movs	r1, #38	; 0x26
 8000980:	e000      	b.n	8000984 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 8000982:	2113      	movs	r1, #19
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3338      	adds	r3, #56	; 0x38
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 800098a:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3301      	adds	r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2b07      	cmp	r3, #7
 8000996:	d9a6      	bls.n	80008e6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009a0:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
  }
}
 80009a2:	e01d      	b.n	80009e0 <HAL_TIM_PWM_PulseFinishedCallback+0x110>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d812      	bhi.n	80009d2 <HAL_TIM_PWM_PulseFinishedCallback+0x102>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80009ac:	2320      	movs	r3, #32
 80009ae:	72fb      	strb	r3, [r7, #11]
 80009b0:	e006      	b.n	80009c0 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 80009b2:	7afb      	ldrb	r3, [r7, #11]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	54d1      	strb	r1, [r2, r3]
 80009ba:	7afb      	ldrb	r3, [r7, #11]
 80009bc:	3301      	adds	r3, #1
 80009be:	72fb      	strb	r3, [r7, #11]
 80009c0:	7afb      	ldrb	r3, [r7, #11]
 80009c2:	2b3f      	cmp	r3, #63	; 0x3f
 80009c4:	d9f5      	bls.n	80009b2 <HAL_TIM_PWM_PulseFinishedCallback+0xe2>
    ++wr_buf_p;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	e006      	b.n	80009e0 <HAL_TIM_PWM_PulseFinishedCallback+0x110>
    wr_buf_p = 0;
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
 80009d8:	2108      	movs	r1, #8
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 80009dc:	f004 fa12 	bl	8004e04 <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000015c 	.word	0x2000015c
 80009ec:	20000118 	.word	0x20000118
 80009f0:	2000011c 	.word	0x2000011c
 80009f4:	20000344 	.word	0x20000344

080009f8 <displayBand>:
const int lastBand = (sizeof band / sizeof(Band)) - 1; // For this case will be 26.
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];

void displayBand(int band_index)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 8000a00:	2304      	movs	r3, #4
 8000a02:	3301      	adds	r3, #1
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	f000 80f6 	beq.w	8000bf8 <displayBand+0x200>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 8000a0c:	f640 0341 	movw	r3, #2113	; 0x841
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2350      	movs	r3, #80	; 0x50
 8000a14:	22a0      	movs	r2, #160	; 0xa0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f839 	bl	8001a90 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,65,160,15,ST7735_COLOR565(50, 50, 50));
 8000a1e:	f243 1386 	movw	r3, #12678	; 0x3186
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	230f      	movs	r3, #15
 8000a26:	22a0      	movs	r2, #160	; 0xa0
 8000a28:	2141      	movs	r1, #65	; 0x41
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 f830 	bl	8001a90 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8000a30:	f243 1386 	movw	r3, #12678	; 0x3186
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	231a      	movs	r3, #26
 8000a38:	22a0      	movs	r2, #160	; 0xa0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f001 f827 	bl	8001a90 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 1, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8000a42:	496f      	ldr	r1, [pc, #444]	; (8000c00 <displayBand+0x208>)
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	6819      	ldr	r1, [r3, #0]
 8000a52:	4b6c      	ldr	r3, [pc, #432]	; (8000c04 <displayBand+0x20c>)
 8000a54:	f243 1286 	movw	r2, #12678	; 0x3186
 8000a58:	9202      	str	r2, [sp, #8]
 8000a5a:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8000a5e:	9201      	str	r2, [sp, #4]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	9200      	str	r2, [sp, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	460a      	mov	r2, r1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 ff53 	bl	8001916 <ST7735_WriteString>
        //ST7735_WriteString(5, 26, "BAND", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
        // Band Frequencies Wide
        if (band[band_index].name == "FM  ")
 8000a70:	4963      	ldr	r1, [pc, #396]	; (8000c00 <displayBand+0x208>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	440b      	add	r3, r1
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a61      	ldr	r2, [pc, #388]	; (8000c08 <displayBand+0x210>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d130      	bne.n	8000ae8 <displayBand+0xf0>
        {
            ST7735_WriteString(75, 1, band[band_index].WminFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(50, 50, 50));
 8000a86:	495e      	ldr	r1, [pc, #376]	; (8000c00 <displayBand+0x208>)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3304      	adds	r3, #4
 8000a96:	6819      	ldr	r1, [r3, #0]
 8000a98:	4b5c      	ldr	r3, [pc, #368]	; (8000c0c <displayBand+0x214>)
 8000a9a:	f243 1286 	movw	r2, #12678	; 0x3186
 8000a9e:	9202      	str	r2, [sp, #8]
 8000aa0:	f244 52df 	movw	r2, #17887	; 0x45df
 8000aa4:	9201      	str	r2, [sp, #4]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	9200      	str	r2, [sp, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	460a      	mov	r2, r1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	204b      	movs	r0, #75	; 0x4b
 8000ab2:	f000 ff30 	bl	8001916 <ST7735_WriteString>
            ST7735_WriteString(75, 19, band[band_index].WmaxFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(50, 50, 50));
 8000ab6:	4952      	ldr	r1, [pc, #328]	; (8000c00 <displayBand+0x208>)
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3308      	adds	r3, #8
 8000ac6:	6819      	ldr	r1, [r3, #0]
 8000ac8:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <displayBand+0x214>)
 8000aca:	f243 1286 	movw	r2, #12678	; 0x3186
 8000ace:	9202      	str	r2, [sp, #8]
 8000ad0:	f244 52df 	movw	r2, #17887	; 0x45df
 8000ad4:	9201      	str	r2, [sp, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	9200      	str	r2, [sp, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	460a      	mov	r2, r1
 8000ade:	2113      	movs	r1, #19
 8000ae0:	204b      	movs	r0, #75	; 0x4b
 8000ae2:	f000 ff18 	bl	8001916 <ST7735_WriteString>
        	ST7735_WriteString(0, 45, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
        }

    }

}
 8000ae6:	e087      	b.n	8000bf8 <displayBand+0x200>
        }else if (band[band_index].name == "AM  ")
 8000ae8:	4945      	ldr	r1, [pc, #276]	; (8000c00 <displayBand+0x208>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	440b      	add	r3, r1
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <displayBand+0x218>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d130      	bne.n	8000b60 <displayBand+0x168>
        	ST7735_WriteString(75, 1, band[band_index].WminFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(50, 50, 50));
 8000afe:	4940      	ldr	r1, [pc, #256]	; (8000c00 <displayBand+0x208>)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <displayBand+0x214>)
 8000b12:	f243 1286 	movw	r2, #12678	; 0x3186
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	f244 52df 	movw	r2, #17887	; 0x45df
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	460a      	mov	r2, r1
 8000b26:	2101      	movs	r1, #1
 8000b28:	204b      	movs	r0, #75	; 0x4b
 8000b2a:	f000 fef4 	bl	8001916 <ST7735_WriteString>
        	ST7735_WriteString(75, 19, band[band_index].WmaxFreq, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(50, 50, 50));
 8000b2e:	4934      	ldr	r1, [pc, #208]	; (8000c00 <displayBand+0x208>)
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <displayBand+0x214>)
 8000b42:	f243 1286 	movw	r2, #12678	; 0x3186
 8000b46:	9202      	str	r2, [sp, #8]
 8000b48:	f244 52df 	movw	r2, #17887	; 0x45df
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	460a      	mov	r2, r1
 8000b56:	2113      	movs	r1, #19
 8000b58:	204b      	movs	r0, #75	; 0x4b
 8000b5a:	f000 fedc 	bl	8001916 <ST7735_WriteString>
}
 8000b5e:	e04b      	b.n	8000bf8 <displayBand+0x200>
        	sprintf(buff, "W:%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8000b60:	4927      	ldr	r1, [pc, #156]	; (8000c00 <displayBand+0x208>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	440b      	add	r3, r1
 8000b6e:	3304      	adds	r3, #4
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	4823      	ldr	r0, [pc, #140]	; (8000c00 <displayBand+0x208>)
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4403      	add	r3, r0
 8000b80:	3308      	adds	r3, #8
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	460a      	mov	r2, r1
 8000b86:	4923      	ldr	r1, [pc, #140]	; (8000c14 <displayBand+0x21c>)
 8000b88:	4823      	ldr	r0, [pc, #140]	; (8000c18 <displayBand+0x220>)
 8000b8a:	f008 fb63 	bl	8009254 <siprintf>
        	ST7735_WriteString(0, 26, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <displayBand+0x214>)
 8000b90:	f640 0241 	movw	r2, #2113	; 0x841
 8000b94:	9202      	str	r2, [sp, #8]
 8000b96:	f244 52df 	movw	r2, #17887	; 0x45df
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <displayBand+0x220>)
 8000ba4:	211a      	movs	r1, #26
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 feb5 	bl	8001916 <ST7735_WriteString>
        	sprintf(buff, "N:%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 8000bac:	4914      	ldr	r1, [pc, #80]	; (8000c00 <displayBand+0x208>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	440b      	add	r3, r1
 8000bba:	330c      	adds	r3, #12
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	4810      	ldr	r0, [pc, #64]	; (8000c00 <displayBand+0x208>)
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4403      	add	r3, r0
 8000bcc:	3310      	adds	r3, #16
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	4912      	ldr	r1, [pc, #72]	; (8000c1c <displayBand+0x224>)
 8000bd4:	4810      	ldr	r0, [pc, #64]	; (8000c18 <displayBand+0x220>)
 8000bd6:	f008 fb3d 	bl	8009254 <siprintf>
        	ST7735_WriteString(0, 45, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <displayBand+0x214>)
 8000bdc:	f640 0241 	movw	r2, #2113	; 0x841
 8000be0:	9202      	str	r2, [sp, #8]
 8000be2:	f244 52df 	movw	r2, #17887	; 0x45df
 8000be6:	9201      	str	r2, [sp, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	9200      	str	r2, [sp, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <displayBand+0x220>)
 8000bf0:	212d      	movs	r1, #45	; 0x2d
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fe8f 	bl	8001916 <ST7735_WriteString>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000080 	.word	0x20000080
 8000c08:	08009948 	.word	0x08009948
 8000c0c:	20000078 	.word	0x20000078
 8000c10:	08009964 	.word	0x08009964
 8000c14:	080099c8 	.word	0x080099c8
 8000c18:	20000160 	.word	0x20000160
 8000c1c:	080099d4 	.word	0x080099d4

08000c20 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_CRC_Init+0x20>)
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <MX_CRC_Init+0x24>)
 8000c28:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_CRC_Init+0x20>)
 8000c2c:	f001 fd52 	bl	80026d4 <HAL_CRC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c36:	f000 fbed 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000174 	.word	0x20000174
 8000c44:	40023000 	.word	0x40023000

08000c48 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <HAL_CRC_MspInit+0x3c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10d      	bne.n	8000c76 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_CRC_MspInit+0x40>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_CRC_MspInit+0x40>)
 8000c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_CRC_MspInit+0x40>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023000 	.word	0x40023000
 8000c88:	40023800 	.word	0x40023800

08000c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	202f      	movs	r0, #47	; 0x2f
 8000cb4:	f001 fce4 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000cb8:	202f      	movs	r0, #47	; 0x2f
 8000cba:	f001 fcfd 	bl	80026b8 <HAL_NVIC_EnableIRQ>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <MX_FREERTOS_Init+0x58>)
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f005 faa2 	bl	800621e <osMessageQueueNew>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MX_FREERTOS_Init+0x5c>)
 8000cde:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_FREERTOS_Init+0x60>)
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	2010      	movs	r0, #16
 8000ce6:	f005 fa9a 	bl	800621e <osMessageQueueNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <MX_FREERTOS_Init+0x64>)
 8000cee:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <MX_FREERTOS_Init+0x68>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <MX_FREERTOS_Init+0x6c>)
 8000cf6:	f005 f9e5 	bl	80060c4 <osThreadNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <MX_FREERTOS_Init+0x70>)
 8000cfe:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <MX_FREERTOS_Init+0x74>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_FREERTOS_Init+0x78>)
 8000d06:	f005 f9dd 	bl	80060c4 <osThreadNew>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <MX_FREERTOS_Init+0x7c>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <MX_FREERTOS_Init+0x80>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <MX_FREERTOS_Init+0x84>)
 8000d16:	f005 f9d5 	bl	80060c4 <osThreadNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <MX_FREERTOS_Init+0x88>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0800bb64 	.word	0x0800bb64
 8000d28:	20000188 	.word	0x20000188
 8000d2c:	0800bb7c 	.word	0x0800bb7c
 8000d30:	2000018c 	.word	0x2000018c
 8000d34:	0800baf8 	.word	0x0800baf8
 8000d38:	08000d59 	.word	0x08000d59
 8000d3c:	2000017c 	.word	0x2000017c
 8000d40:	0800bb1c 	.word	0x0800bb1c
 8000d44:	08000d99 	.word	0x08000d99
 8000d48:	20000180 	.word	0x20000180
 8000d4c:	0800bb40 	.word	0x0800bb40
 8000d50:	08000e49 	.word	0x08000e49
 8000d54:	20000184 	.word	0x20000184

08000d58 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	uint8_t angle = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
	const uint8_t angle_difference = 50;
 8000d64:	2332      	movs	r3, #50	; 0x32
 8000d66:	73bb      	strb	r3, [r7, #14]
	uint32_t rgb_color = hsl_to_rgb(angle + (0 * angle_difference), 125, 255);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	217d      	movs	r1, #125	; 0x7d
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f8c8 	bl	8000f04 <hsl_to_rgb>
 8000d74:	60b8      	str	r0, [r7, #8]
	led_set_RGB(0, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	b2d9      	uxtb	r1, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fc10 	bl	80005ac <led_set_RGB>
	led_render();
 8000d8c:	f7ff fc46 	bl	800061c <led_render>
	for (;;) {

		  // Some delay
		  osDelay(100);
 8000d90:	2064      	movs	r0, #100	; 0x64
 8000d92:	f005 fa29 	bl	80061e8 <osDelay>
 8000d96:	e7fb      	b.n	8000d90 <StartDefaultTask+0x38>

08000d98 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	int32_t counter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
	int16_t button = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	817b      	strh	r3, [r7, #10]
	int32_t last_counter = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
	int16_t max_index = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	827b      	strh	r3, [r7, #18]
	ST7735_FillScreenFast(ST7735_BLACK);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 ff02 	bl	8001bba <ST7735_FillScreenFast>
	displayBand(last_counter);
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff fe1e 	bl	80009f8 <displayBand>
	for (;;) {
		//Encoder Rotate
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <StartDisplayTask+0xa8>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	f107 010c 	add.w	r1, r7, #12
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f005 fafc 	bl	80063c4 <osMessageQueueGet>
		if(counter == 2) {
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d113      	bne.n	8000dfa <StartDisplayTask+0x62>
			if(last_counter != max_index -1)
 8000dd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d005      	beq.n	8000dea <StartDisplayTask+0x52>
			{
				last_counter += 1;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
				counter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e003      	b.n	8000df2 <StartDisplayTask+0x5a>
			} else
			{
				last_counter = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
				counter = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff fe00 	bl	80009f8 <displayBand>
 8000df8:	e014      	b.n	8000e24 <StartDisplayTask+0x8c>
		}else if (counter == 1){
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d111      	bne.n	8000e24 <StartDisplayTask+0x8c>
			if(last_counter != 0)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <StartDisplayTask+0x7a>
			{
				last_counter -= 1;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
				counter = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e005      	b.n	8000e1e <StartDisplayTask+0x86>
			} else
			{
				last_counter = max_index -1;
 8000e12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
				counter = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff fdea 	bl	80009f8 <displayBand>
		}else
		{

		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <StartDisplayTask+0xac>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f107 010a 	add.w	r1, r7, #10
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f005 fac8 	bl	80063c4 <osMessageQueueGet>
		if (button)
		{

		}
		osDelay(1000);
 8000e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e38:	f005 f9d6 	bl	80061e8 <osDelay>
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 8000e3c:	e7be      	b.n	8000dbc <StartDisplayTask+0x24>
 8000e3e:	bf00      	nop
 8000e40:	20000188 	.word	0x20000188
 8000e44:	2000018c 	.word	0x2000018c

08000e48 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <StartEncoderTask+0xac>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	0fda      	lsrs	r2, r3, #31
 8000e70:	4413      	add	r3, r2
 8000e72:	105b      	asrs	r3, r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000e7a:	337f      	adds	r3, #127	; 0x7f
 8000e7c:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d01e      	beq.n	8000ec4 <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dd0a      	ble.n	8000ea4 <StartEncoderTask+0x5c>
				counter = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <StartEncoderTask+0xb0>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	f107 0110 	add.w	r1, r7, #16
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f005 fa31 	bl	8006304 <osMessageQueuePut>
 8000ea2:	e00d      	b.n	8000ec0 <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter){
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	da09      	bge.n	8000ec0 <StartEncoderTask+0x78>
				counter = 2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <StartEncoderTask+0xb0>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f107 0110 	add.w	r1, r7, #16
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f005 fa22 	bl	8006304 <osMessageQueuePut>
			}
			else
			{

			}
			prevCounter = currCounter;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8000ec4:	7efb      	ldrb	r3, [r7, #27]
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <StartEncoderTask+0xb4>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00b      	beq.n	8000ee8 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 8000ed0:	7efb      	ldrb	r3, [r7, #27]
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <StartEncoderTask+0xb4>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <StartEncoderTask+0xb8>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f107 010f 	add.w	r1, r7, #15
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f005 fa0e 	bl	8006304 <osMessageQueuePut>
		}
		osDelay(500);
 8000ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eec:	f005 f97c 	bl	80061e8 <osDelay>
	for (;;) {
 8000ef0:	e7b6      	b.n	8000e60 <StartEncoderTask+0x18>
 8000ef2:	bf00      	nop
 8000ef4:	200002fc 	.word	0x200002fc
 8000ef8:	20000188 	.word	0x20000188
 8000efc:	200002a4 	.word	0x200002a4
 8000f00:	2000018c 	.word	0x2000018c

08000f04 <hsl_to_rgb>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	4613      	mov	r3, r2
 8000f14:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <hsl_to_rgb+0x1c>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e0b1      	b.n	8001084 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3301      	adds	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8000f2a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db09      	blt.n	8000f46 <hsl_to_rgb+0x42>
 8000f32:	89bb      	ldrh	r3, [r7, #12]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	79ba      	ldrb	r2, [r7, #6]
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
 8000f3e:	121b      	asrs	r3, r3, #8
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	74fb      	strb	r3, [r7, #19]
 8000f44:	e00a      	b.n	8000f5c <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	121b      	asrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	0052      	lsls	r2, r2, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8000f74:	7d3b      	ldrb	r3, [r7, #20]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <hsl_to_rgb+0x9c>
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	7cfa      	ldrb	r2, [r7, #19]
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	121b      	asrs	r3, r3, #8
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	74bb      	strb	r3, [r7, #18]
 8000f9e:	e00a      	b.n	8000fb6 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000fa8:	7cfa      	ldrb	r2, [r7, #19]
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	121b      	asrs	r3, r3, #8
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8000fb6:	7cfb      	ldrb	r3, [r7, #19]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	085b      	lsrs	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	797a      	ldrb	r2, [r7, #5]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8000fc6:	897b      	ldrh	r3, [r7, #10]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d839      	bhi.n	8001046 <hsl_to_rgb+0x142>
 8000fd2:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <hsl_to_rgb+0xd4>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	08000fed 	.word	0x08000fed
 8000fdc:	08000fff 	.word	0x08000fff
 8000fe0:	08001011 	.word	0x08001011
 8000fe4:	08001023 	.word	0x08001023
 8000fe8:	08001035 	.word	0x08001035
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	7cbb      	ldrb	r3, [r7, #18]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	75bb      	strb	r3, [r7, #22]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	757b      	strb	r3, [r7, #21]
 8000ffc:	e02c      	b.n	8001058 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000ffe:	7cbb      	ldrb	r3, [r7, #18]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	75fb      	strb	r3, [r7, #23]
 8001004:	7cfb      	ldrb	r3, [r7, #19]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	75bb      	strb	r3, [r7, #22]
 800100a:	2300      	movs	r3, #0
 800100c:	757b      	strb	r3, [r7, #21]
 800100e:	e023      	b.n	8001058 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
 8001014:	7cfb      	ldrb	r3, [r7, #19]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	75bb      	strb	r3, [r7, #22]
 800101a:	7cbb      	ldrb	r3, [r7, #18]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	757b      	strb	r3, [r7, #21]
 8001020:	e01a      	b.n	8001058 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	7cbb      	ldrb	r3, [r7, #18]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	75bb      	strb	r3, [r7, #22]
 800102c:	7cfb      	ldrb	r3, [r7, #19]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	757b      	strb	r3, [r7, #21]
 8001032:	e011      	b.n	8001058 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001034:	7cbb      	ldrb	r3, [r7, #18]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	75fb      	strb	r3, [r7, #23]
 800103a:	2300      	movs	r3, #0
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	7cfb      	ldrb	r3, [r7, #19]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	757b      	strb	r3, [r7, #21]
 8001044:	e008      	b.n	8001058 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001046:	7cfb      	ldrb	r3, [r7, #19]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	75fb      	strb	r3, [r7, #23]
 800104c:	2300      	movs	r3, #0
 800104e:	75bb      	strb	r3, [r7, #22]
 8001050:	7cbb      	ldrb	r3, [r7, #18]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	757b      	strb	r3, [r7, #21]
 8001056:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	7c7b      	ldrb	r3, [r7, #17]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	7c7b      	ldrb	r3, [r7, #17]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	440b      	add	r3, r1
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	431a      	orrs	r2, r3
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	7c7b      	ldrb	r3, [r7, #17]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	440b      	add	r3, r1
 8001082:	4313      	orrs	r3, r2
}
 8001084:	4618      	mov	r0, r3
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a29      	ldr	r2, [pc, #164]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_GPIO_Init+0xe0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_GPIO_Init+0xe0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <MX_GPIO_Init+0xe0>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_GPIO_Init+0xe0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	211c      	movs	r1, #28
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_GPIO_Init+0xe4>)
 800111c:	f002 f80c 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001120:	2301      	movs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001124:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112a:	2302      	movs	r3, #2
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_GPIO_Init+0xe4>)
 8001136:	f001 fe7b 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 800113a:	231c      	movs	r3, #28
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <MX_GPIO_Init+0xe4>)
 8001152:	f001 fe6d 	bl	8002e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2006      	movs	r0, #6
 800115c:	f001 fa90 	bl	8002680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001160:	2006      	movs	r0, #6
 8001162:	f001 faa9 	bl	80026b8 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 fff1 	bl	800319c <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f928 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000190 	.word	0x20000190
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_I2C_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_I2C_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001216:	2312      	movs	r3, #18
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001222:	2304      	movs	r3, #4
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <HAL_I2C_MspInit+0x8c>)
 800122e:	f001 fdff 	bl	8002e30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400

08001264 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af04      	add	r7, sp, #16
    ST7735_Init();
 800126a:	f000 fac3 	bl	80017f4 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 fc92 	bl	8001b98 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <Display_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	9202      	str	r2, [sp, #8]
 800127a:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 800127e:	9201      	str	r2, [sp, #4]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	9200      	str	r2, [sp, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <Display_Init+0x5c>)
 8001288:	2100      	movs	r1, #0
 800128a:	200f      	movs	r0, #15
 800128c:	f000 fb43 	bl	8001916 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <Display_Init+0x60>)
 8001292:	2200      	movs	r2, #0
 8001294:	9202      	str	r2, [sp, #8]
 8001296:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800129a:	9201      	str	r2, [sp, #4]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	9200      	str	r2, [sp, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <Display_Init+0x64>)
 80012a4:	2119      	movs	r1, #25
 80012a6:	2022      	movs	r0, #34	; 0x22
 80012a8:	f000 fb35 	bl	8001916 <ST7735_WriteString>
    HAL_Delay(2000);
 80012ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b0:	f001 f90a 	bl	80024c8 <HAL_Delay>
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000080 	.word	0x20000080
 80012c0:	08009a20 	.word	0x08009a20
 80012c4:	20000078 	.word	0x20000078
 80012c8:	08009a2c 	.word	0x08009a2c

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f001 f8b8 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f822 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f7ff feda 	bl	8001090 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012dc:	f7ff ff4c 	bl	8001178 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012e0:	f000 f924 	bl	800152c <MX_SPI1_Init>
  MX_TIM3_Init();
 80012e4:	f000 fe3e 	bl	8001f64 <MX_TIM3_Init>
  MX_CRC_Init();
 80012e8:	f7ff fc9a 	bl	8000c20 <MX_CRC_Init>
  MX_TIM2_Init();
 80012ec:	f000 fde2 	bl	8001eb4 <MX_TIM2_Init>
  MX_DMA_Init();
 80012f0:	f7ff fccc 	bl	8000c8c <MX_DMA_Init>
  MX_RTC_Init();
 80012f4:	f000 f894 	bl	8001420 <MX_RTC_Init>
  MX_TIM4_Init();
 80012f8:	f000 fe88 	bl	800200c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012fc:	213c      	movs	r1, #60	; 0x3c
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <main+0x4c>)
 8001300:	f003 feec 	bl	80050dc <HAL_TIM_Encoder_Start>
  Display_Init();
 8001304:	f7ff ffae 	bl	8001264 <Display_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001308:	f004 fe92 	bl	8006030 <osKernelInitialize>
  MX_FREERTOS_Init();
 800130c:	f7ff fcde 	bl	8000ccc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001310:	f004 feb2 	bl	8006078 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001314:	e7fe      	b.n	8001314 <main+0x48>
 8001316:	bf00      	nop
 8001318:	200002fc 	.word	0x200002fc

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	; 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fe30 	bl	8008f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <SystemClock_Config+0xcc>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <SystemClock_Config+0xcc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <SystemClock_Config+0xd0>)
 8001366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001378:	2305      	movs	r3, #5
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001382:	2301      	movs	r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001390:	2319      	movs	r3, #25
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800139c:	2303      	movs	r3, #3
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f83d 	bl	8003424 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013b0:	f000 f830 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fa9f 	bl	8003914 <HAL_RCC_ClockConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013dc:	f000 f81a 	bl	8001414 <Error_Handler>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3750      	adds	r7, #80	; 0x50
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001402:	f001 f841 	bl	8002488 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_RTC_Init+0xac>)
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <MX_RTC_Init+0xb0>)
 800143c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_RTC_Init+0xac>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_RTC_Init+0xac>)
 8001446:	227f      	movs	r2, #127	; 0x7f
 8001448:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_RTC_Init+0xac>)
 800144c:	22ff      	movs	r2, #255	; 0xff
 800144e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_RTC_Init+0xac>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_RTC_Init+0xac>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_RTC_Init+0xac>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <MX_RTC_Init+0xac>)
 8001464:	f002 fd58 	bl	8003f18 <HAL_RTC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800146e:	f7ff ffd1 	bl	8001414 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <MX_RTC_Init+0xac>)
 800148e:	f002 fdb9 	bl	8004004 <HAL_RTC_SetTime>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001498:	f7ff ffbc 	bl	8001414 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800149c:	2305      	movs	r3, #5
 800149e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80014a0:	2305      	movs	r3, #5
 80014a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 80014a4:	2307      	movs	r3, #7
 80014a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 80014a8:	2316      	movs	r3, #22
 80014aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_RTC_Init+0xac>)
 80014b4:	f002 fe40 	bl	8004138 <HAL_RTC_SetDate>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014be:	f7ff ffa9 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001e4 	.word	0x200001e4
 80014d0:	40002800 	.word	0x40002800

080014d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_RTC_MspInit+0x50>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d111      	bne.n	800151c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014f8:	2302      	movs	r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001500:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fc16 	bl	8003d38 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001512:	f7ff ff7f 	bl	8001414 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <HAL_RTC_MspInit+0x54>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40002800 	.word	0x40002800
 8001528:	42470e3c 	.word	0x42470e3c

0800152c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_SPI1_Init+0x64>)
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <MX_SPI1_Init+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_SPI1_Init+0x64>)
 8001538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800153c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_SPI1_Init+0x64>)
 8001558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_SPI1_Init+0x64>)
 8001578:	220a      	movs	r2, #10
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_SPI1_Init+0x64>)
 800157e:	f002 ff00 	bl	8004382 <HAL_SPI_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001588:	f7ff ff44 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000204 	.word	0x20000204
 8001594:	40013000 	.word	0x40013000

08001598 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_SPI_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015f2:	23a0      	movs	r3, #160	; 0xa0
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_SPI_MspInit+0x8c>)
 800160e:	f001 fc0f 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40013000 	.word	0x40013000
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2110      	movs	r1, #16
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <ST7735_Select+0x14>)
 8001632:	f001 fd81 	bl	8003138 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020000 	.word	0x40020000

08001640 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2110      	movs	r1, #16
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <ST7735_Unselect+0x14>)
 800164a:	f001 fd75 	bl	8003138 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020000 	.word	0x40020000

08001658 <ST7735_Reset>:

static void ST7735_Reset() {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2108      	movs	r1, #8
 8001660:	4806      	ldr	r0, [pc, #24]	; (800167c <ST7735_Reset+0x24>)
 8001662:	f001 fd69 	bl	8003138 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001666:	2005      	movs	r0, #5
 8001668:	f000 ff2e 	bl	80024c8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2108      	movs	r1, #8
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <ST7735_Reset+0x24>)
 8001672:	f001 fd61 	bl	8003138 <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020000 	.word	0x40020000

08001680 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2104      	movs	r1, #4
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <ST7735_WriteCommand+0x2c>)
 8001690:	f001 fd52 	bl	8003138 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001694:	1df9      	adds	r1, r7, #7
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	2201      	movs	r2, #1
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <ST7735_WriteCommand+0x30>)
 800169e:	f002 fef9 	bl	8004494 <HAL_SPI_Transmit>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020000 	.word	0x40020000
 80016b0:	20000204 	.word	0x20000204

080016b4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2104      	movs	r1, #4
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <ST7735_WriteData+0x2c>)
 80016c4:	f001 fd38 	bl	8003138 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <ST7735_WriteData+0x30>)
 80016d4:	f002 fede 	bl	8004494 <HAL_SPI_Transmit>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40020000 	.word	0x40020000
 80016e4:	20000204 	.word	0x20000204

080016e8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80016fa:	e034      	b.n	8001766 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001706:	7afb      	ldrb	r3, [r7, #11]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ffb9 	bl	8001680 <ST7735_WriteCommand>

        numArgs = *addr++;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001718:	7abb      	ldrb	r3, [r7, #10]
 800171a:	b29b      	uxth	r3, r3
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001722:	7abb      	ldrb	r3, [r7, #10]
 8001724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001728:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800172a:	7abb      	ldrb	r3, [r7, #10]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001730:	7abb      	ldrb	r3, [r7, #10]
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffbd 	bl	80016b4 <ST7735_WriteData>
            addr += numArgs;
 800173a:	7abb      	ldrb	r3, [r7, #10]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001742:	89bb      	ldrh	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00e      	beq.n	8001766 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001752:	89bb      	ldrh	r3, [r7, #12]
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d102      	bne.n	800175e <ST7735_ExecuteCommandList+0x76>
 8001758:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800175c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800175e:	89bb      	ldrh	r3, [r7, #12]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 feb1 	bl	80024c8 <HAL_Delay>
    while(numCommands--) {
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	73fa      	strb	r2, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1c5      	bne.n	80016fc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800177a:	b590      	push	{r4, r7, lr}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	4604      	mov	r4, r0
 8001782:	4608      	mov	r0, r1
 8001784:	4611      	mov	r1, r2
 8001786:	461a      	mov	r2, r3
 8001788:	4623      	mov	r3, r4
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4603      	mov	r3, r0
 800178e:	71bb      	strb	r3, [r7, #6]
 8001790:	460b      	mov	r3, r1
 8001792:	717b      	strb	r3, [r7, #5]
 8001794:	4613      	mov	r3, r2
 8001796:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001798:	202a      	movs	r0, #42	; 0x2a
 800179a:	f7ff ff71 	bl	8001680 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800179e:	2300      	movs	r3, #0
 80017a0:	733b      	strb	r3, [r7, #12]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	737b      	strb	r3, [r7, #13]
 80017aa:	2300      	movs	r3, #0
 80017ac:	73bb      	strb	r3, [r7, #14]
 80017ae:	797b      	ldrb	r3, [r7, #5]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff79 	bl	80016b4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80017c2:	202b      	movs	r0, #43	; 0x2b
 80017c4:	f7ff ff5c 	bl	8001680 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	331a      	adds	r3, #26
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80017d0:	793b      	ldrb	r3, [r7, #4]
 80017d2:	331a      	adds	r3, #26
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2104      	movs	r1, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff68 	bl	80016b4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80017e4:	202c      	movs	r0, #44	; 0x2c
 80017e6:	f7ff ff4b 	bl	8001680 <ST7735_WriteCommand>
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
	...

080017f4 <ST7735_Init>:

void ST7735_Init() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80017f8:	f7ff ff16 	bl	8001628 <ST7735_Select>
    ST7735_Reset();
 80017fc:	f7ff ff2c 	bl	8001658 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001800:	4806      	ldr	r0, [pc, #24]	; (800181c <ST7735_Init+0x28>)
 8001802:	f7ff ff71 	bl	80016e8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <ST7735_Init+0x2c>)
 8001808:	f7ff ff6e 	bl	80016e8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <ST7735_Init+0x30>)
 800180e:	f7ff ff6b 	bl	80016e8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001812:	f7ff ff15 	bl	8001640 <ST7735_Unselect>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0800bb94 	.word	0x0800bb94
 8001820:	0800bbd0 	.word	0x0800bbd0
 8001824:	0800bbe0 	.word	0x0800bbe0

08001828 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001828:	b082      	sub	sp, #8
 800182a:	b590      	push	{r4, r7, lr}
 800182c:	b089      	sub	sp, #36	; 0x24
 800182e:	af00      	add	r7, sp, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	460b      	mov	r3, r1
 8001838:	80bb      	strh	r3, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	b2d8      	uxtb	r0, r3
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	b2d9      	uxtb	r1, r3
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800184e:	4413      	add	r3, r2
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b2dc      	uxtb	r4, r3
 8001856:	88bb      	ldrh	r3, [r7, #4]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4622      	mov	r2, r4
 8001868:	f7ff ff87 	bl	800177a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	e043      	b.n	80018fa <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	3b20      	subs	r3, #32
 8001878:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4619      	mov	r1, r3
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	440b      	add	r3, r1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	e029      	b.n	80018e8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00e      	beq.n	80018c2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80018a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	743b      	strb	r3, [r7, #16]
 80018ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2102      	movs	r1, #2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fefa 	bl	80016b4 <ST7735_WriteData>
 80018c0:	e00f      	b.n	80018e2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80018c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	733b      	strb	r3, [r7, #12]
 80018ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2102      	movs	r1, #2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fee9 	bl	80016b4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018ec:	461a      	mov	r2, r3
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d3cf      	bcc.n	8001894 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3301      	adds	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018fe:	461a      	mov	r2, r3
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4293      	cmp	r3, r2
 8001904:	d3b5      	bcc.n	8001872 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3724      	adds	r7, #36	; 0x24
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001912:	b002      	add	sp, #8
 8001914:	4770      	bx	lr

08001916 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001916:	b082      	sub	sp, #8
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af04      	add	r7, sp, #16
 800191e:	603a      	str	r2, [r7, #0]
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
 8001926:	460b      	mov	r3, r1
 8001928:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800192a:	f7ff fe7d 	bl	8001628 <ST7735_Select>

    while(*str) {
 800192e:	e02d      	b.n	800198c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	7d3a      	ldrb	r2, [r7, #20]
 8001934:	4413      	add	r3, r2
 8001936:	2b9f      	cmp	r3, #159	; 0x9f
 8001938:	dd13      	ble.n	8001962 <ST7735_WriteString+0x4c>
            x = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800193e:	7d7b      	ldrb	r3, [r7, #21]
 8001940:	b29a      	uxth	r2, r3
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	7d7a      	ldrb	r2, [r7, #21]
 800194c:	4413      	add	r3, r2
 800194e:	2b4f      	cmp	r3, #79	; 0x4f
 8001950:	dc21      	bgt.n	8001996 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b20      	cmp	r3, #32
 8001958:	d103      	bne.n	8001962 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	603b      	str	r3, [r7, #0]
                continue;
 8001960:	e014      	b.n	800198c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	88b9      	ldrh	r1, [r7, #4]
 8001968:	88f8      	ldrh	r0, [r7, #6]
 800196a:	8c3b      	ldrh	r3, [r7, #32]
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	8bbb      	ldrh	r3, [r7, #28]
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f7ff ff56 	bl	8001828 <ST7735_WriteChar>
        x += font.width;
 800197c:	7d3b      	ldrb	r3, [r7, #20]
 800197e:	b29a      	uxth	r2, r3
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4413      	add	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
        str++;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1cd      	bne.n	8001930 <ST7735_WriteString+0x1a>
 8001994:	e000      	b.n	8001998 <ST7735_WriteString+0x82>
                break;
 8001996:	bf00      	nop
    }

    ST7735_Unselect();
 8001998:	f7ff fe52 	bl	8001640 <ST7735_Unselect>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b002      	add	sp, #8
 80019a8:	4770      	bx	lr
	...

080019ac <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2b9f      	cmp	r3, #159	; 0x9f
 80019ce:	d857      	bhi.n	8001a80 <ST7735_FillRectangle+0xd4>
 80019d0:	88bb      	ldrh	r3, [r7, #4]
 80019d2:	2b4f      	cmp	r3, #79	; 0x4f
 80019d4:	d854      	bhi.n	8001a80 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80019d6:	88fa      	ldrh	r2, [r7, #6]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4413      	add	r3, r2
 80019dc:	2ba0      	cmp	r3, #160	; 0xa0
 80019de:	dd03      	ble.n	80019e8 <ST7735_FillRectangle+0x3c>
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80019e6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80019e8:	88ba      	ldrh	r2, [r7, #4]
 80019ea:	883b      	ldrh	r3, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	2b50      	cmp	r3, #80	; 0x50
 80019f0:	dd03      	ble.n	80019fa <ST7735_FillRectangle+0x4e>
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80019f8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80019fa:	f7ff fe15 	bl	8001628 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	b2d8      	uxtb	r0, r3
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b2dc      	uxtb	r4, r3
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	883b      	ldrh	r3, [r7, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4622      	mov	r2, r4
 8001a28:	f7ff fea7 	bl	800177a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001a2c:	8c3b      	ldrh	r3, [r7, #32]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	733b      	strb	r3, [r7, #12]
 8001a36:	8c3b      	ldrh	r3, [r7, #32]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <ST7735_FillRectangle+0xdc>)
 8001a42:	f001 fb79 	bl	8003138 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	80bb      	strh	r3, [r7, #4]
 8001a4a:	e013      	b.n	8001a74 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	e00a      	b.n	8001a68 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001a52:	f107 010c 	add.w	r1, r7, #12
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	480b      	ldr	r0, [pc, #44]	; (8001a8c <ST7735_FillRectangle+0xe0>)
 8001a5e:	f002 fd19 	bl	8004494 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	80fb      	strh	r3, [r7, #6]
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f1      	bne.n	8001a52 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	80bb      	strh	r3, [r7, #4]
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e8      	bne.n	8001a4c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001a7a:	f7ff fde1 	bl	8001640 <ST7735_Unselect>
 8001a7e:	e000      	b.n	8001a82 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001a80:	bf00      	nop
}
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	20000204 	.word	0x20000204

08001a90 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	80fb      	strh	r3, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80bb      	strh	r3, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	2b9f      	cmp	r3, #159	; 0x9f
 8001ab2:	d869      	bhi.n	8001b88 <ST7735_FillRectangleFast+0xf8>
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	2b4f      	cmp	r3, #79	; 0x4f
 8001ab8:	d866      	bhi.n	8001b88 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	4413      	add	r3, r2
 8001ac0:	2ba0      	cmp	r3, #160	; 0xa0
 8001ac2:	dd03      	ble.n	8001acc <ST7735_FillRectangleFast+0x3c>
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001aca:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001acc:	88ba      	ldrh	r2, [r7, #4]
 8001ace:	883b      	ldrh	r3, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2b50      	cmp	r3, #80	; 0x50
 8001ad4:	dd03      	ble.n	8001ade <ST7735_FillRectangleFast+0x4e>
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001adc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001ade:	f7ff fda3 	bl	8001628 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2d8      	uxtb	r0, r3
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	b2d9      	uxtb	r1, r3
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2dc      	uxtb	r4, r3
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	883b      	ldrh	r3, [r7, #0]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	f7ff fe35 	bl	800177a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001b10:	8c3b      	ldrh	r3, [r7, #32]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	723b      	strb	r3, [r7, #8]
 8001b1a:	8c3b      	ldrh	r3, [r7, #32]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f007 fa15 	bl	8008f54 <malloc>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	80fb      	strh	r3, [r7, #6]
 8001b32:	e008      	b.n	8001b46 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	893a      	ldrh	r2, [r7, #8]
 8001b3e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	3301      	adds	r3, #1
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3f2      	bcc.n	8001b34 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2104      	movs	r1, #4
 8001b52:	480f      	ldr	r0, [pc, #60]	; (8001b90 <ST7735_FillRectangleFast+0x100>)
 8001b54:	f001 faf0 	bl	8003138 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	80bb      	strh	r3, [r7, #4]
 8001b5c:	e00b      	b.n	8001b76 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	480a      	ldr	r0, [pc, #40]	; (8001b94 <ST7735_FillRectangleFast+0x104>)
 8001b6c:	f002 fc92 	bl	8004494 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	80bb      	strh	r3, [r7, #4]
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <ST7735_FillRectangleFast+0xce>

    free(line);
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f007 f9f1 	bl	8008f64 <free>
    ST7735_Unselect();
 8001b82:	f7ff fd5d 	bl	8001640 <ST7735_Unselect>
 8001b86:	e000      	b.n	8001b8a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001b88:	bf00      	nop
}
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	40020000 	.word	0x40020000
 8001b94:	20000204 	.word	0x20000204

08001b98 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2350      	movs	r3, #80	; 0x50
 8001ba8:	22a0      	movs	r2, #160	; 0xa0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fefd 	bl	80019ac <ST7735_FillRectangle>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af02      	add	r7, sp, #8
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2350      	movs	r3, #80	; 0x50
 8001bca:	22a0      	movs	r2, #160	; 0xa0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ff5e 	bl	8001a90 <ST7735_FillRectangleFast>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_MspInit+0x74>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_MspInit+0x74>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_MspInit+0x74>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_MspInit+0x74>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_MspInit+0x74>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_MspInit+0x74>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	f06f 0001 	mvn.w	r0, #1
 8001c22:	f000 fd2d 	bl	8002680 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2105      	movs	r1, #5
 8001c2a:	2005      	movs	r0, #5
 8001c2c:	f000 fd28 	bl	8002680 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c30:	2005      	movs	r0, #5
 8001c32:	f000 fd41 	bl	80026b8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	2005      	movs	r0, #5
 8001c3c:	f000 fd20 	bl	8002680 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c40:	2005      	movs	r0, #5
 8001c42:	f000 fd39 	bl	80026b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	2019      	movs	r0, #25
 8001c6a:	f000 fd09 	bl	8002680 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c6e:	2019      	movs	r0, #25
 8001c70:	f000 fd22 	bl	80026b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_InitTick+0xa0>)
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_InitTick+0xa0>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6453      	str	r3, [r2, #68]	; 0x44
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_InitTick+0xa0>)
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c90:	f107 0210 	add.w	r2, r7, #16
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 f81a 	bl	8003cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ca0:	f002 f804 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8001ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_InitTick+0xa4>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_InitTick+0xa8>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_InitTick+0xac>)
 8001cb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_InitTick+0xa8>)
 8001cbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_InitTick+0xa8>)
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_InitTick+0xa8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_InitTick+0xa8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <HAL_InitTick+0xa8>)
 8001cd6:	f002 fde3 	bl	80048a0 <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d104      	bne.n	8001cea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <HAL_InitTick+0xa8>)
 8001ce2:	f002 fe2d 	bl	8004940 <HAL_TIM_Base_Start_IT>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	2000025c 	.word	0x2000025c
 8001d00:	40010000 	.word	0x40010000

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <NMI_Handler+0x4>

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <MemManage_Handler+0x4>

08001d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f001 fa12 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d52:	f003 fa51 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000025c 	.word	0x2000025c

08001d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <TIM2_IRQHandler+0x10>)
 8001d66:	f003 fa47 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002b4 	.word	0x200002b4

08001d74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d78:	4808      	ldr	r0, [pc, #32]	; (8001d9c <TIM3_IRQHandler+0x28>)
 8001d7a:	f003 fa3d 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <TIM3_IRQHandler+0x2c>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <TIM3_IRQHandler+0x2c>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <TIM3_IRQHandler+0x2c>)
 8001d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d94:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200002fc 	.word	0x200002fc
 8001da0:	40000400 	.word	0x40000400

08001da4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM4_IRQHandler+0x10>)
 8001daa:	f003 fa25 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000344 	.word	0x20000344

08001db8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Stream7_IRQHandler+0x10>)
 8001dbe:	f000 fdcd 	bl	800295c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000038c 	.word	0x2000038c

08001dcc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8001dd6:	23ff      	movs	r3, #255	; 0xff
 8001dd8:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8001de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db11      	blt.n	8001e10 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001dec:	f000 fb60 	bl	80024b0 <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x50>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b63      	cmp	r3, #99	; 0x63
 8001dfc:	d90a      	bls.n	8001e14 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x50>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_GPIO_EXTI_Callback+0x54>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	54d1      	strb	r1, [r2, r3]
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8001e10:	bf00      	nop
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8001e14:	bf00      	nop
}
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200002ac 	.word	0x200002ac
 8001e20:	200002a4 	.word	0x200002a4

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f007 f852 	bl	8008efc <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20020000 	.word	0x20020000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	200002b0 	.word	0x200002b0
 8001e8c:	20004e10 	.word	0x20004e10

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001efe:	4818      	ldr	r0, [pc, #96]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001f00:	f002 fd80 	bl	8004a04 <HAL_TIM_PWM_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f0a:	f7ff fa83 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4810      	ldr	r0, [pc, #64]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001f1e:	f003 ffc1 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f28:	f7ff fa74 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2c:	2360      	movs	r3, #96	; 0x60
 8001f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2204      	movs	r2, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001f44:	f003 fa60 	bl	8005408 <HAL_TIM_PWM_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f4e:	f7ff fa61 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <MX_TIM2_Init+0xac>)
 8001f54:	f000 f9ec 	bl	8002330 <HAL_TIM_MspPostInit>

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200002b4 	.word	0x200002b4

08001f64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f007 f80c 	bl	8008f90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001f82:	4a21      	ldr	r2, [pc, #132]	; (8002008 <MX_TIM3_Init+0xa4>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001fd2:	f002 ffdd 	bl	8004f90 <HAL_TIM_Encoder_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fdc:	f7ff fa1a 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_TIM3_Init+0xa0>)
 8001fee:	f003 ff59 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ff8:	f7ff fa0c 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200002fc 	.word	0x200002fc
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203c:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <MX_TIM4_Init+0xe4>)
 800203e:	4a2d      	ldr	r2, [pc, #180]	; (80020f4 <MX_TIM4_Init+0xe8>)
 8002040:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <MX_TIM4_Init+0xe4>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <MX_TIM4_Init+0xe4>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59;
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <MX_TIM4_Init+0xe4>)
 8002050:	223b      	movs	r2, #59	; 0x3b
 8002052:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <MX_TIM4_Init+0xe4>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <MX_TIM4_Init+0xe4>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002060:	4823      	ldr	r0, [pc, #140]	; (80020f0 <MX_TIM4_Init+0xe4>)
 8002062:	f002 fc1d 	bl	80048a0 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800206c:	f7ff f9d2 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207a:	4619      	mov	r1, r3
 800207c:	481c      	ldr	r0, [pc, #112]	; (80020f0 <MX_TIM4_Init+0xe4>)
 800207e:	f003 fa85 	bl	800558c <HAL_TIM_ConfigClockSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002088:	f7ff f9c4 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800208c:	4818      	ldr	r0, [pc, #96]	; (80020f0 <MX_TIM4_Init+0xe4>)
 800208e:	f002 fcb9 	bl	8004a04 <HAL_TIM_PWM_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002098:	f7ff f9bc 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	4619      	mov	r1, r3
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <MX_TIM4_Init+0xe4>)
 80020ac:	f003 fefa 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80020b6:	f7ff f9ad 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ba:	2360      	movs	r3, #96	; 0x60
 80020bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2208      	movs	r2, #8
 80020ce:	4619      	mov	r1, r3
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <MX_TIM4_Init+0xe4>)
 80020d2:	f003 f999 	bl	8005408 <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80020dc:	f7ff f99a 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <MX_TIM4_Init+0xe4>)
 80020e2:	f000 f925 	bl	8002330 <HAL_TIM_MspPostInit>

}
 80020e6:	bf00      	nop
 80020e8:	3738      	adds	r7, #56	; 0x38
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000344 	.word	0x20000344
 80020f4:	40000800 	.word	0x40000800

080020f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d115      	bne.n	8002136 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_TIM_PWM_MspInit+0x48>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <HAL_TIM_PWM_MspInit+0x48>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_TIM_PWM_MspInit+0x48>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2105      	movs	r1, #5
 800212a:	201c      	movs	r0, #28
 800212c:	f000 faa8 	bl	8002680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002130:	201c      	movs	r0, #28
 8002132:	f000 fac1 	bl	80026b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d151      	bne.n	800220a <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_TIM_Encoder_MspInit+0xd4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ca:	2302      	movs	r3, #2
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4811      	ldr	r0, [pc, #68]	; (800221c <HAL_TIM_Encoder_MspInit+0xd8>)
 80021d6:	f000 fe2b 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 80021da:	2320      	movs	r3, #32
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ea:	2302      	movs	r3, #2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	480a      	ldr	r0, [pc, #40]	; (8002220 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021f6:	f000 fe1b 	bl	8002e30 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2105      	movs	r1, #5
 80021fe:	201d      	movs	r0, #29
 8002200:	f000 fa3e 	bl	8002680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002204:	201d      	movs	r0, #29
 8002206:	f000 fa57 	bl	80026b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40000400 	.word	0x40000400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400

08002224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a36      	ldr	r2, [pc, #216]	; (800231c <HAL_TIM_Base_MspInit+0xf8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d165      	bne.n	8002312 <HAL_TIM_Base_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_TIM_Base_MspInit+0xfc>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a34      	ldr	r2, [pc, #208]	; (8002320 <HAL_TIM_Base_MspInit+0xfc>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_TIM_Base_MspInit+0xfc>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_TIM_Base_MspInit+0xfc>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <HAL_TIM_Base_MspInit+0xfc>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_TIM_Base_MspInit+0xfc>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = NEOPIXEL_Pin;
 800227e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002290:	2302      	movs	r3, #2
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NEOPIXEL_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4822      	ldr	r0, [pc, #136]	; (8002324 <HAL_TIM_Base_MspInit+0x100>)
 800229c:	f000 fdc8 	bl	8002e30 <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_TIM_Base_MspInit+0x108>)
 80022a4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d6:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022de:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80022e6:	4810      	ldr	r0, [pc, #64]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022e8:	f000 fa10 	bl	800270c <HAL_DMA_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 80022f2:	f7ff f88f 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_TIM_Base_MspInit+0x104>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2105      	movs	r1, #5
 8002306:	201e      	movs	r0, #30
 8002308:	f000 f9ba 	bl	8002680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800230c:	201e      	movs	r0, #30
 800230e:	f000 f9d3 	bl	80026b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40000800 	.word	0x40000800
 8002320:	40023800 	.word	0x40023800
 8002324:	40020400 	.word	0x40020400
 8002328:	2000038c 	.word	0x2000038c
 800232c:	400260b8 	.word	0x400260b8

08002330 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d11e      	bne.n	8002390 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_TIM_MspPostInit+0xb0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_TIM_MspPostInit+0xb0>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_TIM_MspPostInit+0xb0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 800236e:	2302      	movs	r3, #2
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800237e:	2301      	movs	r3, #1
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4816      	ldr	r0, [pc, #88]	; (80023e4 <HAL_TIM_MspPostInit+0xb4>)
 800238a:	f000 fd51 	bl	8002e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800238e:	e023      	b.n	80023d8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_TIM_MspPostInit+0xb8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11e      	bne.n	80023d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_TIM_MspPostInit+0xb0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_TIM_MspPostInit+0xb0>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_TIM_MspPostInit+0xb0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023c8:	2302      	movs	r3, #2
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4806      	ldr	r0, [pc, #24]	; (80023ec <HAL_TIM_MspPostInit+0xbc>)
 80023d4:	f000 fd2c 	bl	8002e30 <HAL_GPIO_Init>
}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40000800 	.word	0x40000800
 80023ec:	40020400 	.word	0x40020400

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800240c:	4c0b      	ldr	r4, [pc, #44]	; (800243c <LoopFillZerobss+0x26>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241a:	f7ff fd39 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f006 fd73 	bl	8008f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7fe ff53 	bl	80012cc <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002434:	0800bcd0 	.word	0x0800bcd0
  ldr r2, =_sbss
 8002438:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800243c:	20004e10 	.word	0x20004e10

08002440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_Init+0x40>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_Init+0x40>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_Init+0x40>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 f8fc 	bl	800266a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	200f      	movs	r0, #15
 8002474:	f7ff fbee 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fbb0 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x20>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_IncTick+0x24>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_IncTick+0x24>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000090 	.word	0x20000090
 80024ac:	200003ec 	.word	0x200003ec

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	200003ec 	.word	0x200003ec

080024c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff ffee 	bl	80024b0 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d005      	beq.n	80024ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_Delay+0x44>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ee:	bf00      	nop
 80024f0:	f7ff ffde 	bl	80024b0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d8f7      	bhi.n	80024f0 <HAL_Delay+0x28>
  {
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000090 	.word	0x20000090

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff4c 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002692:	f7ff ff61 	bl	8002558 <__NVIC_GetPriorityGrouping>
 8002696:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	6978      	ldr	r0, [r7, #20]
 800269e:	f7ff ffb1 	bl	8002604 <NVIC_EncodePriority>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff80 	bl	80025b0 <__NVIC_SetPriority>
}
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff54 	bl	8002574 <__NVIC_EnableIRQ>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	795b      	ldrb	r3, [r3, #5]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe faa6 	bl	8000c48 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff feca 	bl	80024b0 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e099      	b.n	800285c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002748:	e00f      	b.n	800276a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274a:	f7ff feb1 	bl	80024b0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b05      	cmp	r3, #5
 8002756:	d908      	bls.n	800276a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2203      	movs	r2, #3
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e078      	b.n	800285c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e8      	bne.n	800274a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <HAL_DMA_Init+0x158>)
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4313      	orrs	r3, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0307 	bic.w	r3, r3, #7
 80027ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d117      	bne.n	800282e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fa91 	bl	8002d38 <DMA_CheckFifoParam>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800282a:	2301      	movs	r3, #1
 800282c:	e016      	b.n	800285c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa48 	bl	8002ccc <DMA_CalcBaseAndBitshift>
 800283c:	4603      	mov	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	223f      	movs	r2, #63	; 0x3f
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	f010803f 	.word	0xf010803f

08002868 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_DMA_Start_IT+0x26>
 800288a:	2302      	movs	r3, #2
 800288c:	e040      	b.n	8002910 <HAL_DMA_Start_IT+0xa8>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d12f      	bne.n	8002902 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f9da 	bl	8002c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	223f      	movs	r2, #63	; 0x3f
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0216 	orr.w	r2, r2, #22
 80028d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0208 	orr.w	r2, r2, #8
 80028ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e005      	b.n	800290e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d004      	beq.n	8002936 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e00c      	b.n	8002950 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2205      	movs	r2, #5
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002968:	4b8e      	ldr	r3, [pc, #568]	; (8002ba4 <HAL_DMA_IRQHandler+0x248>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a8e      	ldr	r2, [pc, #568]	; (8002ba8 <HAL_DMA_IRQHandler+0x24c>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2208      	movs	r2, #8
 8002988:	409a      	lsls	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0204 	bic.w	r2, r2, #4
 80029ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	2208      	movs	r2, #8
 80029b6:	409a      	lsls	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	2201      	movs	r2, #1
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	2201      	movs	r2, #1
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	2204      	movs	r2, #4
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2204      	movs	r2, #4
 8002a22:	409a      	lsls	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	2210      	movs	r2, #16
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d043      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03c      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2210      	movs	r2, #16
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d024      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
 8002a8a:	e01f      	b.n	8002acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0208 	bic.w	r2, r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 808f 	beq.w	8002bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8087 	beq.w	8002bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	2220      	movs	r2, #32
 8002af4:	409a      	lsls	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d136      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0216 	bic.w	r2, r2, #22
 8002b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x1da>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	223f      	movs	r2, #63	; 0x3f
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d07e      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
        }
        return;
 8002b72:	e079      	b.n	8002c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01d      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10d      	bne.n	8002bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
 8002ba0:	e02c      	b.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
 8002ba2:	bf00      	nop
 8002ba4:	20000088 	.word	0x20000088
 8002ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e01e      	b.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0210 	bic.w	r2, r2, #16
 8002bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d032      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d022      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2205      	movs	r2, #5
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d307      	bcc.n	8002c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f2      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x2cc>
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e000      	b.n	8002c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c68:	bf00      	nop
    }
  }
}
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d108      	bne.n	8002cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cae:	e007      	b.n	8002cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3b10      	subs	r3, #16
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <DMA_CalcBaseAndBitshift+0x64>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d909      	bls.n	8002d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	1d1a      	adds	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d0c:	e007      	b.n	8002d1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	aaaaaaab 	.word	0xaaaaaaab
 8002d34:	0800bc24 	.word	0x0800bc24

08002d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11f      	bne.n	8002d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d856      	bhi.n	8002e06 <DMA_CheckFifoParam+0xce>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <DMA_CheckFifoParam+0x28>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d83 	.word	0x08002d83
 8002d68:	08002d71 	.word	0x08002d71
 8002d6c:	08002e07 	.word	0x08002e07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d046      	beq.n	8002e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d80:	e043      	b.n	8002e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d8a:	d140      	bne.n	8002e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d90:	e03d      	b.n	8002e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d121      	bne.n	8002de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d837      	bhi.n	8002e12 <DMA_CheckFifoParam+0xda>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <DMA_CheckFifoParam+0x70>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dbf 	.word	0x08002dbf
 8002db0:	08002db9 	.word	0x08002db9
 8002db4:	08002dd1 	.word	0x08002dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e030      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d025      	beq.n	8002e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dce:	e022      	b.n	8002e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd8:	d11f      	bne.n	8002e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dde:	e01c      	b.n	8002e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d903      	bls.n	8002dee <DMA_CheckFifoParam+0xb6>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d003      	beq.n	8002df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dec:	e018      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      break;
 8002df2:	e015      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e00b      	b.n	8002e1e <DMA_CheckFifoParam+0xe6>
      break;
 8002e06:	bf00      	nop
 8002e08:	e00a      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e008      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e006      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e004      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e159      	b.n	8003100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8148 	bne.w	80030fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d005      	beq.n	8002e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d130      	bne.n	8002ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0201 	and.w	r2, r3, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d017      	beq.n	8002f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d123      	bne.n	8002f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a2 	beq.w	80030fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b57      	ldr	r3, [pc, #348]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc6:	4b54      	ldr	r3, [pc, #336]	; (8003118 <HAL_GPIO_Init+0x2e8>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd2:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_GPIO_Init+0x2ec>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a49      	ldr	r2, [pc, #292]	; (8003120 <HAL_GPIO_Init+0x2f0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x202>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a48      	ldr	r2, [pc, #288]	; (8003124 <HAL_GPIO_Init+0x2f4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x1fe>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a47      	ldr	r2, [pc, #284]	; (8003128 <HAL_GPIO_Init+0x2f8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x1fa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a46      	ldr	r2, [pc, #280]	; (800312c <HAL_GPIO_Init+0x2fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x1f6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a45      	ldr	r2, [pc, #276]	; (8003130 <HAL_GPIO_Init+0x300>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x1f2>
 800301e:	2304      	movs	r3, #4
 8003020:	e008      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003022:	2307      	movs	r3, #7
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003026:	2303      	movs	r3, #3
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x204>
 800302a:	2302      	movs	r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x204>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x204>
 8003032:	2300      	movs	r3, #0
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f002 0203 	and.w	r2, r2, #3
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	4093      	lsls	r3, r2
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003044:	4935      	ldr	r1, [pc, #212]	; (800311c <HAL_GPIO_Init+0x2ec>)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_GPIO_Init+0x304>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003076:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_GPIO_Init+0x304>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_GPIO_Init+0x304>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a0:	4a24      	ldr	r2, [pc, #144]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ca:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <HAL_GPIO_Init+0x304>)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	f67f aea2 	bls.w	8002e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	40013800 	.word	0x40013800
 8003120:	40020000 	.word	0x40020000
 8003124:	40020400 	.word	0x40020400
 8003128:	40020800 	.word	0x40020800
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40021000 	.word	0x40021000
 8003134:	40013c00 	.word	0x40013c00

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003154:	e003      	b.n	800315e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fe1e 	bl	8001dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013c00 	.word	0x40013c00

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e12b      	b.n	8003406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f806 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003200:	f000 fd40 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8003204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a81      	ldr	r2, [pc, #516]	; (8003410 <HAL_I2C_Init+0x274>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d807      	bhi.n	8003220 <HAL_I2C_Init+0x84>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a80      	ldr	r2, [pc, #512]	; (8003414 <HAL_I2C_Init+0x278>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e006      	b.n	800322e <HAL_I2C_Init+0x92>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a7d      	ldr	r2, [pc, #500]	; (8003418 <HAL_I2C_Init+0x27c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	bf94      	ite	ls
 8003228:	2301      	movls	r3, #1
 800322a:	2300      	movhi	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0e7      	b.n	8003406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a78      	ldr	r2, [pc, #480]	; (800341c <HAL_I2C_Init+0x280>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0c9b      	lsrs	r3, r3, #18
 8003240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <HAL_I2C_Init+0x274>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d802      	bhi.n	8003270 <HAL_I2C_Init+0xd4>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3301      	adds	r3, #1
 800326e:	e009      	b.n	8003284 <HAL_I2C_Init+0xe8>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	4a69      	ldr	r2, [pc, #420]	; (8003420 <HAL_I2C_Init+0x284>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	3301      	adds	r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	495c      	ldr	r1, [pc, #368]	; (8003410 <HAL_I2C_Init+0x274>)
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d819      	bhi.n	80032d8 <HAL_I2C_Init+0x13c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e59      	subs	r1, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032b8:	400b      	ands	r3, r1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_I2C_Init+0x138>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1e59      	subs	r1, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	e051      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e04f      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d111      	bne.n	8003304 <HAL_I2C_Init+0x168>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e58      	subs	r0, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_I2C_Init+0x18e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x196>
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10e      	bne.n	8003358 <HAL_I2C_Init+0x1bc>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e58      	subs	r0, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	440b      	add	r3, r1
 8003348:	fbb0 f3f3 	udiv	r3, r0, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	e00f      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6809      	ldr	r1, [r1, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6911      	ldr	r1, [r2, #16]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	000186a0 	.word	0x000186a0
 8003414:	001e847f 	.word	0x001e847f
 8003418:	003d08ff 	.word	0x003d08ff
 800341c:	431bde83 	.word	0x431bde83
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e267      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d075      	beq.n	800352e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d00c      	beq.n	8003468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d112      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003466:	d10b      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	4b7e      	ldr	r3, [pc, #504]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05b      	beq.n	800352c <HAL_RCC_OscConfig+0x108>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d157      	bne.n	800352c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e242      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x74>
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a75      	ldr	r2, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6f      	ldr	r2, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b6d      	ldr	r3, [pc, #436]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6c      	ldr	r2, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 80034bc:	4b69      	ldr	r3, [pc, #420]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a68      	ldr	r2, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe ffe8 	bl	80024b0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe ffe4 	bl	80024b0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e207      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xc0>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe ffd4 	bl	80024b0 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe ffd0 	bl	80024b0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e1f3      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0xe8>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d063      	beq.n	8003602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e1c7      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4937      	ldr	r1, [pc, #220]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e03a      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_OscConfig+0x244>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe ff89 	bl	80024b0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe ff85 	bl	80024b0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1a8      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4925      	ldr	r1, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]
 80035d4:	e015      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x244>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe ff68 	bl	80024b0 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe ff64 	bl	80024b0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e187      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d036      	beq.n	800367c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x248>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe ff48 	bl	80024b0 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe ff44 	bl	80024b0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e167      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x200>
 8003642:	e01b      	b.n	800367c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_OscConfig+0x248>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe ff31 	bl	80024b0 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	e00e      	b.n	8003670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003652:	f7fe ff2d 	bl	80024b0 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d907      	bls.n	8003670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e150      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
 8003664:	40023800 	.word	0x40023800
 8003668:	42470000 	.word	0x42470000
 800366c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ea      	bne.n	8003652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8097 	beq.w	80037b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	4b7d      	ldr	r3, [pc, #500]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a7c      	ldr	r2, [pc, #496]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b7a      	ldr	r3, [pc, #488]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	4b74      	ldr	r3, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a73      	ldr	r2, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fe feed 	bl	80024b0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fe fee9 	bl	80024b0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e10c      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x2ea>
 8003700:	4b64      	ldr	r3, [pc, #400]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a63      	ldr	r2, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x324>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x30c>
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a5e      	ldr	r2, [pc, #376]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5b      	ldr	r2, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0x324>
 8003730:	4b58      	ldr	r3, [pc, #352]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a57      	ldr	r2, [pc, #348]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a54      	ldr	r2, [pc, #336]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fe feae 	bl	80024b0 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe feaa 	bl	80024b0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0cb      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ee      	beq.n	8003758 <HAL_RCC_OscConfig+0x334>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe fe98 	bl	80024b0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fe fe94 	bl	80024b0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0b5      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ee      	bne.n	8003784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a1 	beq.w	8003904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c2:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d05c      	beq.n	8003888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d141      	bne.n	800385a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCC_OscConfig+0x478>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe fe68 	bl	80024b0 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe fe64 	bl	80024b0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e087      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	491b      	ldr	r1, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x478>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fe fe3d 	bl	80024b0 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe fe39 	bl	80024b0 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e05c      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x416>
 8003858:	e054      	b.n	8003904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_RCC_OscConfig+0x478>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fe26 	bl	80024b0 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fe22 	bl	80024b0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e045      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x444>
 8003886:	e03d      	b.n	8003904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e038      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x4ec>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d028      	beq.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d121      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d11a      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cc      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b68      	ldr	r3, [pc, #416]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d90c      	bls.n	8003950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d044      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e067      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4934      	ldr	r1, [pc, #208]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fd54 	bl	80024b0 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe fd50 	bl	80024b0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20c      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f8ca 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	0800bc0c 	.word	0x0800bc0c
 8003ad8:	20000088 	.word	0x20000088
 8003adc:	2000008c 	.word	0x2000008c

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b090      	sub	sp, #64	; 0x40
 8003ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	2300      	movs	r3, #0
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af0:	2300      	movs	r3, #0
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d00d      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x40>
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	f200 80a1 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b12:	e09b      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b18:	e09b      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1a:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b1e:	e098      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b20:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2a:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d028      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	627a      	str	r2, [r7, #36]	; 0x24
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b4c:	fb03 f201 	mul.w	r2, r3, r1
 8003b50:	2300      	movs	r3, #0
 8003b52:	fb00 f303 	mul.w	r3, r0, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b60:	460a      	mov	r2, r1
 8003b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b66:	4413      	add	r3, r2
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	61fa      	str	r2, [r7, #28]
 8003b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b7a:	f7fc fb81 	bl	8000280 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4613      	mov	r3, r2
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b86:	e053      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	2200      	movs	r2, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	617a      	str	r2, [r7, #20]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b9a:	f04f 0b00 	mov.w	fp, #0
 8003b9e:	4652      	mov	r2, sl
 8003ba0:	465b      	mov	r3, fp
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	0159      	lsls	r1, r3, #5
 8003bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb0:	0150      	lsls	r0, r2, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bba:	eb63 090b 	sbc.w	r9, r3, fp
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	00eb      	lsls	r3, r5, #3
 8003be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be8:	00e2      	lsls	r2, r4, #3
 8003bea:	4614      	mov	r4, r2
 8003bec:	461d      	mov	r5, r3
 8003bee:	eb14 030a 	adds.w	r3, r4, sl
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	eb45 030b 	adc.w	r3, r5, fp
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c06:	4629      	mov	r1, r5
 8003c08:	028b      	lsls	r3, r1, #10
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c10:	4621      	mov	r1, r4
 8003c12:	028a      	lsls	r2, r1, #10
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c24:	f7fc fb2c 	bl	8000280 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3740      	adds	r7, #64	; 0x40
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	017d7840 	.word	0x017d7840

08003c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000088 	.word	0x20000088

08003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	0800bc1c 	.word	0x0800bc1c

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cb0:	f7ff ffdc 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800bc1c 	.word	0x0800bc1c

08003cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	220f      	movs	r2, #15
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0203 	and.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	08db      	lsrs	r3, r3, #3
 8003d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_RCC_GetClockConfig+0x60>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0207 	and.w	r2, r3, #7
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40023c00 	.word	0x40023c00

08003d38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d038      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d60:	4b68      	ldr	r3, [pc, #416]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d66:	f7fe fba3 	bl	80024b0 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d6e:	f7fe fb9f 	bl	80024b0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0bd      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d80:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	495a      	ldr	r1, [pc, #360]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da6:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dac:	f7fe fb80 	bl	80024b0 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003db4:	f7fe fb7c 	bl	80024b0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e09a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dc6:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8083 	beq.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	4a47      	ldr	r2, [pc, #284]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	6413      	str	r3, [r2, #64]	; 0x40
 8003df0:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dfc:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fe fb52 	bl	80024b0 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe fb4e 	bl	80024b0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e06c      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e22:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e36:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02f      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d028      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e54:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d114      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe fb1c 	bl	80024b0 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fe fb18 	bl	80024b0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e034      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ee      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	4911      	ldr	r1, [pc, #68]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
 8003ec6:	e005      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ed2:	6093      	str	r3, [r2, #8]
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee0:	4909      	ldr	r1, [pc, #36]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7d1a      	ldrb	r2, [r3, #20]
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003ef8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	42470068 	.word	0x42470068
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42470e40 	.word	0x42470e40
 8003f14:	424711e0 	.word	0x424711e0

08003f18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e066      	b.n	8003ffc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7f5b      	ldrb	r3, [r3, #29]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fac8 	bl	80014d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	22ca      	movs	r2, #202	; 0xca
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2253      	movs	r2, #83	; 0x53
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f998 	bl	8004290 <RTC_EnterInitMode>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12c      	bne.n	8003fc4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68d2      	ldr	r2, [r2, #12]
 8003fa4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6919      	ldr	r1, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f99f 	bl	80042fe <RTC_ExitInitMode>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	7f1b      	ldrb	r3, [r3, #28]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_RTC_SetTime+0x1c>
 800401c:	2302      	movs	r3, #2
 800401e:	e087      	b.n	8004130 <HAL_RTC_SetTime+0x12c>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d126      	bne.n	8004080 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f97c 	bl	8004348 <RTC_ByteToBcd2>
 8004050:	4603      	mov	r3, r0
 8004052:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f975 	bl	8004348 <RTC_ByteToBcd2>
 800405e:	4603      	mov	r3, r0
 8004060:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004062:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	789b      	ldrb	r3, [r3, #2]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f96d 	bl	8004348 <RTC_ByteToBcd2>
 800406e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004070:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e018      	b.n	80040b2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040a0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80040a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	78db      	ldrb	r3, [r3, #3]
 80040ac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	22ca      	movs	r2, #202	; 0xca
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2253      	movs	r2, #83	; 0x53
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f8e4 	bl	8004290 <RTC_EnterInitMode>
 80040c8:	4603      	mov	r3, r0
 80040ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d120      	bne.n	8004114 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f8f7 	bl	80042fe <RTC_ExitInitMode>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	22ff      	movs	r2, #255	; 0xff
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	771a      	strb	r2, [r3, #28]

  return status;
 800412e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004130:	4618      	mov	r0, r3
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	7f1b      	ldrb	r3, [r3, #28]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_RTC_SetDate+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e071      	b.n	8004238 <HAL_RTC_SetDate+0x100>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10e      	bne.n	8004184 <HAL_RTC_SetDate+0x4c>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	f023 0310 	bic.w	r3, r3, #16
 800417a:	b2db      	uxtb	r3, r3
 800417c:	330a      	adds	r3, #10
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11c      	bne.n	80041c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	78db      	ldrb	r3, [r3, #3]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f8da 	bl	8004348 <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
 8004196:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f8d3 	bl	8004348 <RTC_ByteToBcd2>
 80041a2:	4603      	mov	r3, r0
 80041a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f8cb 	bl	8004348 <RTC_ByteToBcd2>
 80041b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e00e      	b.n	80041e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	78db      	ldrb	r3, [r3, #3]
 80041c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	22ca      	movs	r2, #202	; 0xca
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2253      	movs	r2, #83	; 0x53
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f84c 	bl	8004290 <RTC_EnterInitMode>
 80041f8:	4603      	mov	r3, r0
 80041fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800420c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004210:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f873 	bl	80042fe <RTC_ExitInitMode>
 8004218:	4603      	mov	r3, r0
 800421a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ff      	movs	r2, #255	; 0xff
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]

  return status;
 8004236:	7cfb      	ldrb	r3, [r7, #19]
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}

08004240 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800425a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800425c:	f7fe f928 	bl	80024b0 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004262:	e009      	b.n	8004278 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004264:	f7fe f924 	bl	80024b0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004272:	d901      	bls.n	8004278 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e007      	b.n	8004288 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ee      	beq.n	8004264 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d122      	bne.n	80042f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042be:	f7fe f8f7 	bl	80024b0 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042c4:	e00c      	b.n	80042e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042c6:	f7fe f8f3 	bl	80024b0 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d4:	d904      	bls.n	80042e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <RTC_EnterInitMode+0x64>
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d1e8      	bne.n	80042c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004318:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff89 	bl	8004240 <HAL_RTC_WaitForSynchro>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004356:	e005      	b.n	8004364 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	3301      	adds	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	3b0a      	subs	r3, #10
 8004362:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	2b09      	cmp	r3, #9
 8004368:	d8f6      	bhi.n	8004358 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	b2da      	uxtb	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	4313      	orrs	r3, r2
 8004374:	b2db      	uxtb	r3, r3
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e07b      	b.n	800448c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a4:	d009      	beq.n	80043ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	61da      	str	r2, [r3, #28]
 80043ac:	e005      	b.n	80043ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7fd f8df 	bl	8001598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	ea42 0103 	orr.w	r1, r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	f003 0104 	and.w	r1, r3, #4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0210 	and.w	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Transmit+0x22>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e126      	b.n	8004704 <HAL_SPI_Transmit+0x270>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044be:	f7fd fff7 	bl	80024b0 <HAL_GetTick>
 80044c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
 80044d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d8:	e10b      	b.n	80046f2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_SPI_Transmit+0x52>
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044ea:	e102      	b.n	80046f2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2203      	movs	r2, #3
 80044f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	d10f      	bne.n	8004554 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004542:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004552:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d007      	beq.n	8004572 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457a:	d14b      	bne.n	8004614 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0xf6>
 8004584:	8afb      	ldrh	r3, [r7, #22]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d13e      	bne.n	8004608 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045ae:	e02b      	b.n	8004608 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d112      	bne.n	80045e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	1c9a      	adds	r2, r3, #2
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e2:	e011      	b.n	8004608 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e4:	f7fd ff64 	bl	80024b0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d803      	bhi.n	80045fc <HAL_SPI_Transmit+0x168>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_Transmit+0x16e>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004606:	e074      	b.n	80046f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ce      	bne.n	80045b0 <HAL_SPI_Transmit+0x11c>
 8004612:	e04c      	b.n	80046ae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_Transmit+0x18e>
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d140      	bne.n	80046a4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004648:	e02c      	b.n	80046a4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d113      	bne.n	8004680 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
 800467e:	e011      	b.n	80046a4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004680:	f7fd ff16 	bl	80024b0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d803      	bhi.n	8004698 <HAL_SPI_Transmit+0x204>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d102      	bne.n	800469e <HAL_SPI_Transmit+0x20a>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a2:	e026      	b.n	80046f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1cd      	bne.n	800464a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8b2 	bl	800481c <SPI_EndRxTxTransaction>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e000      	b.n	80046f2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80046f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004702:	7ffb      	ldrb	r3, [r7, #31]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800471c:	f7fd fec8 	bl	80024b0 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800472c:	f7fd fec0 	bl	80024b0 <HAL_GetTick>
 8004730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	0d1b      	lsrs	r3, r3, #20
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004742:	e054      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d050      	beq.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474c:	f7fd feb0 	bl	80024b0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e017      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d19b      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000088 	.word	0x20000088

0800481c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <SPI_EndRxTxTransaction+0x7c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1b      	ldr	r2, [pc, #108]	; (800489c <SPI_EndRxTxTransaction+0x80>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	0d5b      	lsrs	r3, r3, #21
 8004834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004846:	d112      	bne.n	800486e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2200      	movs	r2, #0
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff ff5a 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e00f      	b.n	800488e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3b01      	subs	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d0f2      	beq.n	800486e <SPI_EndRxTxTransaction+0x52>
 8004888:	e000      	b.n	800488c <SPI_EndRxTxTransaction+0x70>
        break;
 800488a:	bf00      	nop
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000088 	.word	0x20000088
 800489c:	165e9f81 	.word	0x165e9f81

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fcac 	bl	8002224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f001 f814 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d001      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e044      	b.n	80049e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x6c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d013      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x6c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x6c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x6c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <HAL_TIM_Base_Start_IT+0xbc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x6c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <HAL_TIM_Base_Start_IT+0xc0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d111      	bne.n	80049d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d010      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	e007      	b.n	80049e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40014000 	.word	0x40014000

08004a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e041      	b.n	8004a9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd fb64 	bl	80020f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 ff62 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e022      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d109      	bne.n	8004aea <HAL_TIM_PWM_Start_DMA+0x46>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e015      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x72>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start_DMA+0x60>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e008      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x72>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e15d      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x94>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e022      	b.n	8004b7e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d109      	bne.n	8004b52 <HAL_TIM_PWM_Start_DMA+0xae>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e015      	b.n	8004b7e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d109      	bne.n	8004b6c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e008      	b.n	8004b7e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d024      	beq.n	8004bcc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start_DMA+0xee>
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e123      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba0:	e016      	b.n	8004bd0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	e00e      	b.n	8004bd0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	e006      	b.n	8004bd0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bca:	e001      	b.n	8004bd0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e104      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	f200 80ae 	bhi.w	8004d34 <HAL_TIM_PWM_Start_DMA+0x290>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004d35 	.word	0x08004d35
 8004be8:	08004d35 	.word	0x08004d35
 8004bec:	08004d35 	.word	0x08004d35
 8004bf0:	08004c5d 	.word	0x08004c5d
 8004bf4:	08004d35 	.word	0x08004d35
 8004bf8:	08004d35 	.word	0x08004d35
 8004bfc:	08004d35 	.word	0x08004d35
 8004c00:	08004ca5 	.word	0x08004ca5
 8004c04:	08004d35 	.word	0x08004d35
 8004c08:	08004d35 	.word	0x08004d35
 8004c0c:	08004d35 	.word	0x08004d35
 8004c10:	08004ced 	.word	0x08004ced
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	4a72      	ldr	r2, [pc, #456]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	4a71      	ldr	r2, [pc, #452]	; (8004de8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	4a70      	ldr	r2, [pc, #448]	; (8004dec <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3334      	adds	r3, #52	; 0x34
 8004c38:	461a      	mov	r2, r3
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	f7fd fe14 	bl	8002868 <HAL_DMA_Start_IT>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0c7      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c58:	60da      	str	r2, [r3, #12]
      break;
 8004c5a:	e06e      	b.n	8004d3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	4a60      	ldr	r2, [pc, #384]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c62:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	4a5f      	ldr	r2, [pc, #380]	; (8004de8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	4a5e      	ldr	r2, [pc, #376]	; (8004dec <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3338      	adds	r3, #56	; 0x38
 8004c80:	461a      	mov	r2, r3
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	f7fd fdf0 	bl	8002868 <HAL_DMA_Start_IT>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0a3      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ca0:	60da      	str	r2, [r3, #12]
      break;
 8004ca2:	e04a      	b.n	8004d3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004caa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a4d      	ldr	r2, [pc, #308]	; (8004de8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a4c      	ldr	r2, [pc, #304]	; (8004dec <HAL_TIM_PWM_Start_DMA+0x348>)
 8004cba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	333c      	adds	r3, #60	; 0x3c
 8004cc8:	461a      	mov	r2, r3
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	f7fd fdcc 	bl	8002868 <HAL_DMA_Start_IT>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce8:	60da      	str	r2, [r3, #12]
      break;
 8004cea:	e026      	b.n	8004d3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <HAL_TIM_PWM_Start_DMA+0x348>)
 8004d02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3340      	adds	r3, #64	; 0x40
 8004d10:	461a      	mov	r2, r3
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	f7fd fda8 	bl	8002868 <HAL_DMA_Start_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e05b      	b.n	8004dda <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d30:	60da      	str	r2, [r3, #12]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
      break;
 8004d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d14b      	bne.n	8004dd8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f885 	bl	8005e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a27      	ldr	r2, [pc, #156]	; (8004df0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d013      	beq.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_TIM_PWM_Start_DMA+0x358>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d010      	beq.n	8004dd8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	e007      	b.n	8004dd8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	080057fd 	.word	0x080057fd
 8004de8:	080058a5 	.word	0x080058a5
 8004dec:	0800576b 	.word	0x0800576b
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40014000 	.word	0x40014000

08004e04 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d855      	bhi.n	8004ec4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004ec5 	.word	0x08004ec5
 8004e28:	08004ec5 	.word	0x08004ec5
 8004e2c:	08004ec5 	.word	0x08004ec5
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004ec5 	.word	0x08004ec5
 8004e38:	08004ec5 	.word	0x08004ec5
 8004e3c:	08004ec5 	.word	0x08004ec5
 8004e40:	08004e8d 	.word	0x08004e8d
 8004e44:	08004ec5 	.word	0x08004ec5
 8004e48:	08004ec5 	.word	0x08004ec5
 8004e4c:	08004ec5 	.word	0x08004ec5
 8004e50:	08004ea9 	.word	0x08004ea9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fd fd55 	bl	8002918 <HAL_DMA_Abort_IT>
      break;
 8004e6e:	e02c      	b.n	8004eca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd fd47 	bl	8002918 <HAL_DMA_Abort_IT>
      break;
 8004e8a:	e01e      	b.n	8004eca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd fd39 	bl	8002918 <HAL_DMA_Abort_IT>
      break;
 8004ea6:	e010      	b.n	8004eca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fd fd2b 	bl	8002918 <HAL_DMA_Abort_IT>
      break;
 8004ec2:	e002      	b.n	8004eca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d157      	bne.n	8004f80 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 ffbd 	bl	8005e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d117      	bne.n	8004f18 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a1a      	ldr	r2, [r3, #32]
 8004efe:	f240 4344 	movw	r3, #1092	; 0x444
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a1a      	ldr	r2, [r3, #32]
 8004f1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10f      	bne.n	8004f48 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	f240 4344 	movw	r3, #1092	; 0x444
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f56:	e013      	b.n	8004f80 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d104      	bne.n	8004f68 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f66:	e00b      	b.n	8004f80 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d104      	bne.n	8004f78 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f76:	e003      	b.n	8004f80 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000

08004f90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e097      	b.n	80050d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fd f8c3 	bl	8002144 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd4:	f023 0307 	bic.w	r3, r3, #7
 8004fd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 fc91 	bl	800590c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	4313      	orrs	r3, r2
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005030:	f023 030c 	bic.w	r3, r3, #12
 8005034:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800503c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	4313      	orrs	r3, r2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	011a      	lsls	r2, r3, #4
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	031b      	lsls	r3, r3, #12
 8005060:	4313      	orrs	r3, r2
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	4313      	orrs	r3, r2
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005104:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d110      	bne.n	800512e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005112:	7b7b      	ldrb	r3, [r7, #13]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d001      	beq.n	800511c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e069      	b.n	80051f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512c:	e031      	b.n	8005192 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b04      	cmp	r3, #4
 8005132:	d110      	bne.n	8005156 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d102      	bne.n	8005140 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800513a:	7b3b      	ldrb	r3, [r7, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e055      	b.n	80051f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005154:	e01d      	b.n	8005192 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d108      	bne.n	800516e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005162:	7b7b      	ldrb	r3, [r7, #13]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d102      	bne.n	800516e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005168:	7b3b      	ldrb	r3, [r7, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e03e      	b.n	80051f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_TIM_Encoder_Start+0xc4>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d008      	beq.n	80051b0 <HAL_TIM_Encoder_Start+0xd4>
 800519e:	e00f      	b.n	80051c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fe55 	bl	8005e58 <TIM_CCxChannelCmd>
      break;
 80051ae:	e016      	b.n	80051de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	2104      	movs	r1, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fe4d 	bl	8005e58 <TIM_CCxChannelCmd>
      break;
 80051be:	e00e      	b.n	80051de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	2100      	movs	r1, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fe45 	bl	8005e58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	2104      	movs	r1, #4
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fe3e 	bl	8005e58 <TIM_CCxChannelCmd>
      break;
 80051dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0202 	mvn.w	r2, #2
 8005224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa77 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa69 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fb fb41 	bl	80008d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d122      	bne.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d11b      	bne.n	80052a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0204 	mvn.w	r2, #4
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa4d 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa3f 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fb fb17 	bl	80008d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0208 	mvn.w	r2, #8
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2204      	movs	r2, #4
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fa23 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa15 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb faed 	bl	80008d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b10      	cmp	r3, #16
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0210 	mvn.w	r2, #16
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2208      	movs	r2, #8
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9f9 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9eb 	bl	800571a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7fb fac3 	bl	80008d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0201 	mvn.w	r2, #1
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc f83a 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d10e      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b80      	cmp	r3, #128	; 0x80
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fdf6 	bl	8005f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d10e      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d107      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f9b7 	bl	8005742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d10e      	bne.n	8005400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d107      	bne.n	8005400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0220 	mvn.w	r2, #32
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fdc0 	bl	8005f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005422:	2302      	movs	r3, #2
 8005424:	e0ae      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	f200 809f 	bhi.w	8005574 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	08005471 	.word	0x08005471
 8005440:	08005575 	.word	0x08005575
 8005444:	08005575 	.word	0x08005575
 8005448:	08005575 	.word	0x08005575
 800544c:	080054b1 	.word	0x080054b1
 8005450:	08005575 	.word	0x08005575
 8005454:	08005575 	.word	0x08005575
 8005458:	08005575 	.word	0x08005575
 800545c:	080054f3 	.word	0x080054f3
 8005460:	08005575 	.word	0x08005575
 8005464:	08005575 	.word	0x08005575
 8005468:	08005575 	.word	0x08005575
 800546c:	08005533 	.word	0x08005533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fac8 	bl	8005a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0208 	orr.w	r2, r2, #8
 800548a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0204 	bic.w	r2, r2, #4
 800549a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6999      	ldr	r1, [r3, #24]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	619a      	str	r2, [r3, #24]
      break;
 80054ae:	e064      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fb0e 	bl	8005ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6999      	ldr	r1, [r3, #24]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	021a      	lsls	r2, r3, #8
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	619a      	str	r2, [r3, #24]
      break;
 80054f0:	e043      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fb59 	bl	8005bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0208 	orr.w	r2, r2, #8
 800550c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0204 	bic.w	r2, r2, #4
 800551c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69d9      	ldr	r1, [r3, #28]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	61da      	str	r2, [r3, #28]
      break;
 8005530:	e023      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fba3 	bl	8005c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800554c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69d9      	ldr	r1, [r3, #28]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	021a      	lsls	r2, r3, #8
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	61da      	str	r2, [r3, #28]
      break;
 8005572:	e002      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
      break;
 8005578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005582:	7dfb      	ldrb	r3, [r7, #23]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIM_ConfigClockSource+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e0b4      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x186>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e0:	d03e      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0xd4>
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e6:	f200 8087 	bhi.w	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ee:	f000 8086 	beq.w	80056fe <HAL_TIM_ConfigClockSource+0x172>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d87f      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b70      	cmp	r3, #112	; 0x70
 80055fa:	d01a      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xa6>
 80055fc:	2b70      	cmp	r3, #112	; 0x70
 80055fe:	d87b      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d050      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005604:	2b60      	cmp	r3, #96	; 0x60
 8005606:	d877      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d03c      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xfa>
 800560c:	2b50      	cmp	r3, #80	; 0x50
 800560e:	d873      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d058      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d86f      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	d064      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b30      	cmp	r3, #48	; 0x30
 800561e:	d86b      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d060      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	2b20      	cmp	r3, #32
 8005626:	d867      	bhi.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d05c      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b10      	cmp	r3, #16
 800562e:	d05a      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005630:	e062      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6899      	ldr	r1, [r3, #8]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f000 fbe9 	bl	8005e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	609a      	str	r2, [r3, #8]
      break;
 800565e:	e04f      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6899      	ldr	r1, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f000 fbd2 	bl	8005e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005682:	609a      	str	r2, [r3, #8]
      break;
 8005684:	e03c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	461a      	mov	r2, r3
 8005694:	f000 fb46 	bl	8005d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2150      	movs	r1, #80	; 0x50
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fb9f 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 80056a4:	e02c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 fb65 	bl	8005d82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2160      	movs	r1, #96	; 0x60
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb8f 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 80056c4:	e01c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 fb26 	bl	8005d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2140      	movs	r1, #64	; 0x40
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fb7f 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 80056e4:	e00c      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 fb76 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 80056f6:	e003      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e000      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d107      	bne.n	8005792 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005790:	e02a      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2202      	movs	r2, #2
 80057a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057aa:	e01d      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d107      	bne.n	80057c6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2204      	movs	r2, #4
 80057ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c4:	e010      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d107      	bne.n	80057e0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2208      	movs	r2, #8
 80057d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057de:	e003      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff ffb4 	bl	8005756 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d10b      	bne.n	800582c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d136      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582a:	e031      	b.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d10b      	bne.n	800584e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2202      	movs	r2, #2
 800583a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d125      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800584c:	e020      	b.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d10b      	bne.n	8005870 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2204      	movs	r2, #4
 800585c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d114      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800586e:	e00f      	b.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d10a      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2208      	movs	r2, #8
 800587e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7fb f81d 	bl	80008d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d103      	bne.n	80058c4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	771a      	strb	r2, [r3, #28]
 80058c2:	e019      	b.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d103      	bne.n	80058d6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2202      	movs	r2, #2
 80058d2:	771a      	strb	r2, [r3, #28]
 80058d4:	e010      	b.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d103      	bne.n	80058e8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2204      	movs	r2, #4
 80058e4:	771a      	strb	r2, [r3, #28]
 80058e6:	e007      	b.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d102      	bne.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2208      	movs	r2, #8
 80058f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7fa ff5b 	bl	80007b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <TIM_Base_SetConfig+0xe4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00f      	beq.n	8005944 <TIM_Base_SetConfig+0x38>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d00b      	beq.n	8005944 <TIM_Base_SetConfig+0x38>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a31      	ldr	r2, [pc, #196]	; (80059f4 <TIM_Base_SetConfig+0xe8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_Base_SetConfig+0x38>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a30      	ldr	r2, [pc, #192]	; (80059f8 <TIM_Base_SetConfig+0xec>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_Base_SetConfig+0x38>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a2f      	ldr	r2, [pc, #188]	; (80059fc <TIM_Base_SetConfig+0xf0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d108      	bne.n	8005956 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <TIM_Base_SetConfig+0xe4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01b      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005964:	d017      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a22      	ldr	r2, [pc, #136]	; (80059f4 <TIM_Base_SetConfig+0xe8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <TIM_Base_SetConfig+0xec>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00f      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a20      	ldr	r2, [pc, #128]	; (80059fc <TIM_Base_SetConfig+0xf0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00b      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <TIM_Base_SetConfig+0xf4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <TIM_Base_SetConfig+0xf8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_Base_SetConfig+0x8a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <TIM_Base_SetConfig+0xfc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d108      	bne.n	80059a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <TIM_Base_SetConfig+0xe4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d103      	bne.n	80059dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	615a      	str	r2, [r3, #20]
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f023 0302 	bic.w	r3, r3, #2
 8005a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <TIM_OC1_SetConfig+0xc8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <TIM_OC1_SetConfig+0xc8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d111      	bne.n	8005aae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40010000 	.word	0x40010000

08005ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0210 	bic.w	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0320 	bic.w	r3, r3, #32
 8005b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <TIM_OC2_SetConfig+0xd4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d10d      	bne.n	8005b54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <TIM_OC2_SetConfig+0xd4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d113      	bne.n	8005b84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000

08005bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <TIM_OC3_SetConfig+0xd0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d10d      	bne.n	8005c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <TIM_OC3_SetConfig+0xd0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d113      	bne.n	8005c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	621a      	str	r2, [r3, #32]
}
 8005c74:	bf00      	nop
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40010000 	.word	0x40010000

08005c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <TIM_OC4_SetConfig+0x9c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d109      	bne.n	8005cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000

08005d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 030a 	bic.w	r3, r3, #10
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0210 	bic.w	r2, r3, #16
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	031b      	lsls	r3, r3, #12
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f043 0307 	orr.w	r3, r3, #7
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	021a      	lsls	r2, r3, #8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e050      	b.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d013      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10c      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40014000 	.word	0x40014000

08005f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <__NVIC_SetPriority>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	db0a      	blt.n	8005fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	490c      	ldr	r1, [pc, #48]	; (8005ff4 <__NVIC_SetPriority+0x4c>)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	0112      	lsls	r2, r2, #4
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fd0:	e00a      	b.n	8005fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	4908      	ldr	r1, [pc, #32]	; (8005ff8 <__NVIC_SetPriority+0x50>)
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	0112      	lsls	r2, r2, #4
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	761a      	strb	r2, [r3, #24]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	e000e100 	.word	0xe000e100
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <SysTick_Handler+0x1c>)
 8006002:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006004:	f001 ff12 	bl	8007e2c <xTaskGetSchedulerState>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800600e:	f002 fcfb 	bl	8008a08 <xPortSysTickHandler>
  }
}
 8006012:	bf00      	nop
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	e000e010 	.word	0xe000e010

0800601c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006020:	2100      	movs	r1, #0
 8006022:	f06f 0004 	mvn.w	r0, #4
 8006026:	f7ff ffbf 	bl	8005fa8 <__NVIC_SetPriority>
#endif
}
 800602a:	bf00      	nop
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006036:	f3ef 8305 	mrs	r3, IPSR
 800603a:	603b      	str	r3, [r7, #0]
  return(result);
 800603c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006042:	f06f 0305 	mvn.w	r3, #5
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	e00c      	b.n	8006064 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <osKernelInitialize+0x44>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <osKernelInitialize+0x44>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006058:	2300      	movs	r3, #0
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	e002      	b.n	8006064 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800605e:	f04f 33ff 	mov.w	r3, #4294967295
 8006062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006064:	687b      	ldr	r3, [r7, #4]
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	200003f0 	.word	0x200003f0

08006078 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800607e:	f3ef 8305 	mrs	r3, IPSR
 8006082:	603b      	str	r3, [r7, #0]
  return(result);
 8006084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <osKernelStart+0x1a>
    stat = osErrorISR;
 800608a:	f06f 0305 	mvn.w	r3, #5
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	e010      	b.n	80060b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <osKernelStart+0x48>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d109      	bne.n	80060ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800609a:	f7ff ffbf 	bl	800601c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <osKernelStart+0x48>)
 80060a0:	2202      	movs	r2, #2
 80060a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80060a4:	f001 fa66 	bl	8007574 <vTaskStartScheduler>
      stat = osOK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	e002      	b.n	80060b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060b4:	687b      	ldr	r3, [r7, #4]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	200003f0 	.word	0x200003f0

080060c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af04      	add	r7, sp, #16
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d4:	f3ef 8305 	mrs	r3, IPSR
 80060d8:	617b      	str	r3, [r7, #20]
  return(result);
 80060da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d17e      	bne.n	80061de <osThreadNew+0x11a>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d07b      	beq.n	80061de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80060ea:	2318      	movs	r3, #24
 80060ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d045      	beq.n	800618a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <osThreadNew+0x48>
        name = attr->name;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <osThreadNew+0x6e>
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b38      	cmp	r3, #56	; 0x38
 8006124:	d805      	bhi.n	8006132 <osThreadNew+0x6e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <osThreadNew+0x72>
        return (NULL);
 8006132:	2300      	movs	r3, #0
 8006134:	e054      	b.n	80061e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00e      	beq.n	800616c <osThreadNew+0xa8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2bbb      	cmp	r3, #187	; 0xbb
 8006154:	d90a      	bls.n	800616c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800615a:	2b00      	cmp	r3, #0
 800615c:	d006      	beq.n	800616c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <osThreadNew+0xa8>
        mem = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	e010      	b.n	800618e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10c      	bne.n	800618e <osThreadNew+0xca>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d108      	bne.n	800618e <osThreadNew+0xca>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <osThreadNew+0xca>
          mem = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e001      	b.n	800618e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d110      	bne.n	80061b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800619c:	9202      	str	r2, [sp, #8]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a3a      	ldr	r2, [r7, #32]
 80061a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fff6 	bl	800719c <xTaskCreateStatic>
 80061b0:	4603      	mov	r3, r0
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	e013      	b.n	80061de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d110      	bne.n	80061de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 f841 	bl	8007256 <xTaskCreate>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d001      	beq.n	80061de <osThreadNew+0x11a>
            hTask = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061de:	693b      	ldr	r3, [r7, #16]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3728      	adds	r7, #40	; 0x28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f0:	f3ef 8305 	mrs	r3, IPSR
 80061f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <osDelay+0x1c>
    stat = osErrorISR;
 80061fc:	f06f 0305 	mvn.w	r3, #5
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e007      	b.n	8006214 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <osDelay+0x2c>
      vTaskDelay(ticks);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f97c 	bl	800750c <vTaskDelay>
    }
  }

  return (stat);
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800621e:	b580      	push	{r7, lr}
 8006220:	b08a      	sub	sp, #40	; 0x28
 8006222:	af02      	add	r7, sp, #8
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800622e:	f3ef 8305 	mrs	r3, IPSR
 8006232:	613b      	str	r3, [r7, #16]
  return(result);
 8006234:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006236:	2b00      	cmp	r3, #0
 8006238:	d15f      	bne.n	80062fa <osMessageQueueNew+0xdc>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05c      	beq.n	80062fa <osMessageQueueNew+0xdc>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d059      	beq.n	80062fa <osMessageQueueNew+0xdc>
    mem = -1;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d029      	beq.n	80062a6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d012      	beq.n	8006280 <osMessageQueueNew+0x62>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b4f      	cmp	r3, #79	; 0x4f
 8006260:	d90e      	bls.n	8006280 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	429a      	cmp	r2, r3
 8006278:	d302      	bcc.n	8006280 <osMessageQueueNew+0x62>
        mem = 1;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e014      	b.n	80062aa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d110      	bne.n	80062aa <osMessageQueueNew+0x8c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10c      	bne.n	80062aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	d108      	bne.n	80062aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <osMessageQueueNew+0x8c>
          mem = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e001      	b.n	80062aa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10b      	bne.n	80062c8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2100      	movs	r1, #0
 80062ba:	9100      	str	r1, [sp, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fa2e 	bl	8006720 <xQueueGenericCreateStatic>
 80062c4:	61f8      	str	r0, [r7, #28]
 80062c6:	e008      	b.n	80062da <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80062ce:	2200      	movs	r2, #0
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa9c 	bl	8006810 <xQueueGenericCreate>
 80062d8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <osMessageQueueNew+0xd0>
        name = attr->name;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e001      	b.n	80062f2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	69f8      	ldr	r0, [r7, #28]
 80062f6:	f000 fef3 	bl	80070e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80062fa:	69fb      	ldr	r3, [r7, #28]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631c:	f3ef 8305 	mrs	r3, IPSR
 8006320:	617b      	str	r3, [r7, #20]
  return(result);
 8006322:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006324:	2b00      	cmp	r3, #0
 8006326:	d028      	beq.n	800637a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <osMessageQueuePut+0x36>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <osMessageQueuePut+0x36>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800633a:	f06f 0303 	mvn.w	r3, #3
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	e038      	b.n	80063b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006346:	f107 0210 	add.w	r2, r7, #16
 800634a:	2300      	movs	r3, #0
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	69b8      	ldr	r0, [r7, #24]
 8006350:	f000 fbba 	bl	8006ac8 <xQueueGenericSendFromISR>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d003      	beq.n	8006362 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800635a:	f06f 0302 	mvn.w	r3, #2
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	e028      	b.n	80063b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d025      	beq.n	80063b4 <osMessageQueuePut+0xb0>
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <osMessageQueuePut+0xbc>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	e01c      	b.n	80063b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <osMessageQueuePut+0x82>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006386:	f06f 0303 	mvn.w	r3, #3
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	e012      	b.n	80063b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800638e:	2300      	movs	r3, #0
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	69b8      	ldr	r0, [r7, #24]
 8006396:	f000 fa99 	bl	80068cc <xQueueGenericSend>
 800639a:	4603      	mov	r3, r0
 800639c:	2b01      	cmp	r3, #1
 800639e:	d009      	beq.n	80063b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80063a6:	f06f 0301 	mvn.w	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e002      	b.n	80063b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80063ae:	f06f 0302 	mvn.w	r3, #2
 80063b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80063b4:	69fb      	ldr	r3, [r7, #28]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063da:	f3ef 8305 	mrs	r3, IPSR
 80063de:	617b      	str	r3, [r7, #20]
  return(result);
 80063e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d028      	beq.n	8006438 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <osMessageQueueGet+0x34>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <osMessageQueueGet+0x34>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80063f8:	f06f 0303 	mvn.w	r3, #3
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	e037      	b.n	8006470 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006404:	f107 0310 	add.w	r3, r7, #16
 8006408:	461a      	mov	r2, r3
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	69b8      	ldr	r0, [r7, #24]
 800640e:	f000 fcd7 	bl	8006dc0 <xQueueReceiveFromISR>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d003      	beq.n	8006420 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006418:	f06f 0302 	mvn.w	r3, #2
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e027      	b.n	8006470 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d024      	beq.n	8006470 <osMessageQueueGet+0xac>
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <osMessageQueueGet+0xb8>)
 8006428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	e01b      	b.n	8006470 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <osMessageQueueGet+0x80>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006444:	f06f 0303 	mvn.w	r3, #3
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	e011      	b.n	8006470 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	69b8      	ldr	r0, [r7, #24]
 8006452:	f000 fbd5 	bl	8006c00 <xQueueReceive>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	d009      	beq.n	8006470 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006462:	f06f 0301 	mvn.w	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e002      	b.n	8006470 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800646a:	f06f 0302 	mvn.w	r3, #2
 800646e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006470:	69fb      	ldr	r3, [r7, #28]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a07      	ldr	r2, [pc, #28]	; (80064ac <vApplicationGetIdleTaskMemory+0x2c>)
 8006490:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <vApplicationGetIdleTaskMemory+0x30>)
 8006496:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	200003f4 	.word	0x200003f4
 80064b0:	200004b0 	.word	0x200004b0

080064b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4a07      	ldr	r2, [pc, #28]	; (80064e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80064c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4a06      	ldr	r2, [pc, #24]	; (80064e4 <vApplicationGetTimerTaskMemory+0x30>)
 80064ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	200006b0 	.word	0x200006b0
 80064e4:	2000076c 	.word	0x2000076c

080064e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f103 0208 	add.w	r2, r3, #8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f103 0208 	add.w	r2, r3, #8
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f103 0208 	add.w	r2, r3, #8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d103      	bne.n	80065aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e00c      	b.n	80065c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3308      	adds	r3, #8
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e002      	b.n	80065b8 <vListInsert+0x2e>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d2f6      	bcs.n	80065b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	601a      	str	r2, [r3, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6892      	ldr	r2, [r2, #8]
 8006612:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d103      	bne.n	8006630 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800667a:	f002 f933 	bl	80088e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	441a      	add	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	3b01      	subs	r3, #1
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	22ff      	movs	r2, #255	; 0xff
 80066c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d114      	bne.n	80066fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01a      	beq.n	800670e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3310      	adds	r3, #16
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 f9e3 	bl	8007aa8 <xTaskRemoveFromEventList>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d012      	beq.n	800670e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <xQueueGenericReset+0xcc>)
 80066ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	e009      	b.n	800670e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3310      	adds	r3, #16
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fef2 	bl	80064e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff feed 	bl	80064e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800670e:	f002 f919 	bl	8008944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006712:	2301      	movs	r3, #1
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	; 0x38
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <xQueueGenericCreateStatic+0x52>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <xQueueGenericCreateStatic+0x56>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <xQueueGenericCreateStatic+0x58>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	623b      	str	r3, [r7, #32]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d102      	bne.n	800679e <xQueueGenericCreateStatic+0x7e>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <xQueueGenericCreateStatic+0x82>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <xQueueGenericCreateStatic+0x84>
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	61fb      	str	r3, [r7, #28]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067be:	2350      	movs	r3, #80	; 0x50
 80067c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b50      	cmp	r3, #80	; 0x50
 80067c6:	d00a      	beq.n	80067de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61bb      	str	r3, [r7, #24]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	4613      	mov	r3, r2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f83f 	bl	8006884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006808:	4618      	mov	r0, r3
 800680a:	3730      	adds	r7, #48	; 0x30
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	; 0x28
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	613b      	str	r3, [r7, #16]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	fb02 f303 	mul.w	r3, r2, r3
 8006842:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	3350      	adds	r3, #80	; 0x50
 8006848:	4618      	mov	r0, r3
 800684a:	f002 f96d 	bl	8008b28 <pvPortMalloc>
 800684e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	3350      	adds	r3, #80	; 0x50
 800685e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006868:	79fa      	ldrb	r2, [r7, #7]
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	4613      	mov	r3, r2
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f805 	bl	8006884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800687a:	69bb      	ldr	r3, [r7, #24]
	}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e002      	b.n	80068a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068b2:	2101      	movs	r1, #1
 80068b4:	69b8      	ldr	r0, [r7, #24]
 80068b6:	f7ff fecb 	bl	8006650 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	78fa      	ldrb	r2, [r7, #3]
 80068be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068da:	2300      	movs	r3, #0
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericSend+0x32>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <xQueueGenericSend+0x40>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <xQueueGenericSend+0x44>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <xQueueGenericSend+0x46>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <xQueueGenericSend+0x60>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d103      	bne.n	800693a <xQueueGenericSend+0x6e>
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <xQueueGenericSend+0x72>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericSend+0x74>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xQueueGenericSend+0x8e>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	623b      	str	r3, [r7, #32]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800695a:	f001 fa67 	bl	8007e2c <xTaskGetSchedulerState>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <xQueueGenericSend+0x9e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <xQueueGenericSend+0xa2>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <xQueueGenericSend+0xa4>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xQueueGenericSend+0xbe>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	61fb      	str	r3, [r7, #28]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800698a:	f001 ffab 	bl	80088e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <xQueueGenericSend+0xd4>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d129      	bne.n	80069f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a6:	f000 fa8b 	bl	8006ec0 <prvCopyDataToQueue>
 80069aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	3324      	adds	r3, #36	; 0x24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 f875 	bl	8007aa8 <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069c4:	4b3f      	ldr	r3, [pc, #252]	; (8006ac4 <xQueueGenericSend+0x1f8>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	e00a      	b.n	80069ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069dc:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <xQueueGenericSend+0x1f8>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069ec:	f001 ffaa 	bl	8008944 <vPortExitCritical>
				return pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e063      	b.n	8006abc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069fa:	f001 ffa3 	bl	8008944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e05c      	b.n	8006abc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f8af 	bl	8007b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a16:	f001 ff95 	bl	8008944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a1a:	f000 fe1b 	bl	8007654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a1e:	f001 ff61 	bl	80088e4 <vPortEnterCritical>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d103      	bne.n	8006a38 <xQueueGenericSend+0x16c>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3e:	b25b      	sxtb	r3, r3
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d103      	bne.n	8006a4e <xQueueGenericSend+0x182>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a4e:	f001 ff79 	bl	8008944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a52:	1d3a      	adds	r2, r7, #4
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f89e 	bl	8007b9c <xTaskCheckForTimeOut>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d124      	bne.n	8006ab0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a68:	f000 fb22 	bl	80070b0 <prvIsQueueFull>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	3310      	adds	r3, #16
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4611      	mov	r1, r2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 ffc4 	bl	8007a08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a82:	f000 faad 	bl	8006fe0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a86:	f000 fdf3 	bl	8007670 <xTaskResumeAll>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f af7c 	bne.w	800698a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <xQueueGenericSend+0x1f8>)
 8006a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	e772      	b.n	800698a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa6:	f000 fa9b 	bl	8006fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aaa:	f000 fde1 	bl	8007670 <xTaskResumeAll>
 8006aae:	e76c      	b.n	800698a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab2:	f000 fa95 	bl	8006fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab6:	f000 fddb 	bl	8007670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3738      	adds	r7, #56	; 0x38
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b090      	sub	sp, #64	; 0x40
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <xQueueGenericSendFromISR+0x3c>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <xQueueGenericSendFromISR+0x40>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <xQueueGenericSendFromISR+0x42>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSendFromISR+0x6a>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSendFromISR+0x6e>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSendFromISR+0x70>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b52:	f001 ffa9 	bl	8008aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b56:	f3ef 8211 	mrs	r2, BASEPRI
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	61fa      	str	r2, [r7, #28]
 8006b6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <xQueueGenericSendFromISR+0xbc>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d12f      	bne.n	8006be4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b9a:	f000 f991 	bl	8006ec0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d112      	bne.n	8006bce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d016      	beq.n	8006bde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	3324      	adds	r3, #36	; 0x24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 ff77 	bl	8007aa8 <xTaskRemoveFromEventList>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e007      	b.n	8006bde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	b25a      	sxtb	r2, r3
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bde:	2301      	movs	r3, #1
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006be2:	e001      	b.n	8006be8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3740      	adds	r7, #64	; 0x40
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	; 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <xQueueReceive+0x30>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	623b      	str	r3, [r7, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <xQueueReceive+0x3e>
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <xQueueReceive+0x42>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <xQueueReceive+0x44>
 8006c42:	2300      	movs	r3, #0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xQueueReceive+0x5e>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	61fb      	str	r3, [r7, #28]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c5e:	f001 f8e5 	bl	8007e2c <xTaskGetSchedulerState>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <xQueueReceive+0x6e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <xQueueReceive+0x72>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <xQueueReceive+0x74>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xQueueReceive+0x8e>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	61bb      	str	r3, [r7, #24]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c8e:	f001 fe29 	bl	80088e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01f      	beq.n	8006cde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca2:	f000 f977 	bl	8006f94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1e5a      	subs	r2, r3, #1
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00f      	beq.n	8006cd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	3310      	adds	r3, #16
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fef4 	bl	8007aa8 <xTaskRemoveFromEventList>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cc6:	4b3d      	ldr	r3, [pc, #244]	; (8006dbc <xQueueReceive+0x1bc>)
 8006cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cd6:	f001 fe35 	bl	8008944 <vPortExitCritical>
				return pdPASS;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e069      	b.n	8006db2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ce4:	f001 fe2e 	bl	8008944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e062      	b.n	8006db2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cf2:	f107 0310 	add.w	r3, r7, #16
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ff3a 	bl	8007b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d00:	f001 fe20 	bl	8008944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d04:	f000 fca6 	bl	8007654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d08:	f001 fdec 	bl	80088e4 <vPortEnterCritical>
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d103      	bne.n	8006d22 <xQueueReceive+0x122>
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d28:	b25b      	sxtb	r3, r3
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d103      	bne.n	8006d38 <xQueueReceive+0x138>
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d38:	f001 fe04 	bl	8008944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d3c:	1d3a      	adds	r2, r7, #4
 8006d3e:	f107 0310 	add.w	r3, r7, #16
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 ff29 	bl	8007b9c <xTaskCheckForTimeOut>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d123      	bne.n	8006d98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d52:	f000 f997 	bl	8007084 <prvIsQueueEmpty>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d017      	beq.n	8006d8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	3324      	adds	r3, #36	; 0x24
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4611      	mov	r1, r2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fe4f 	bl	8007a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6c:	f000 f938 	bl	8006fe0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d70:	f000 fc7e 	bl	8007670 <xTaskResumeAll>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d189      	bne.n	8006c8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <xQueueReceive+0x1bc>)
 8006d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	e780      	b.n	8006c8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d8e:	f000 f927 	bl	8006fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d92:	f000 fc6d 	bl	8007670 <xTaskResumeAll>
 8006d96:	e77a      	b.n	8006c8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9a:	f000 f921 	bl	8006fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d9e:	f000 fc67 	bl	8007670 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da4:	f000 f96e 	bl	8007084 <prvIsQueueEmpty>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f43f af6f 	beq.w	8006c8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006db0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3730      	adds	r7, #48	; 0x30
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08e      	sub	sp, #56	; 0x38
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	623b      	str	r3, [r7, #32]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <xQueueReceiveFromISR+0x3a>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <xQueueReceiveFromISR+0x3e>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <xQueueReceiveFromISR+0x40>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	61fb      	str	r3, [r7, #28]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e1a:	f001 fe45 	bl	8008aa8 <vPortValidateInterruptPriority>
	__asm volatile
 8006e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	61ba      	str	r2, [r7, #24]
 8006e34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02f      	beq.n	8006ea6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e54:	f000 f89e 	bl	8006f94 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d112      	bne.n	8006e90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d016      	beq.n	8006ea0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	3310      	adds	r3, #16
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fe16 	bl	8007aa8 <xTaskRemoveFromEventList>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e007      	b.n	8006ea0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e94:	3301      	adds	r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	b25a      	sxtb	r2, r3
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea4:	e001      	b.n	8006eaa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f383 8811 	msr	BASEPRI, r3
}
 8006eb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3738      	adds	r7, #56	; 0x38
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10d      	bne.n	8006efa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d14d      	bne.n	8006f82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 ffbc 	bl	8007e68 <xTaskPriorityDisinherit>
 8006ef0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	e043      	b.n	8006f82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d119      	bne.n	8006f34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6858      	ldr	r0, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	f002 f832 	bl	8008f74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	441a      	add	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d32b      	bcc.n	8006f82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	e026      	b.n	8006f82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68d8      	ldr	r0, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	f002 f818 	bl	8008f74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	425b      	negs	r3, r3
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d207      	bcs.n	8006f70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	425b      	negs	r3, r3
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d105      	bne.n	8006f82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f8a:	697b      	ldr	r3, [r7, #20]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d018      	beq.n	8006fd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	441a      	add	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d303      	bcc.n	8006fc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68d9      	ldr	r1, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6838      	ldr	r0, [r7, #0]
 8006fd4:	f001 ffce 	bl	8008f74 <memcpy>
	}
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fe8:	f001 fc7c 	bl	80088e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ff4:	e011      	b.n	800701a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d012      	beq.n	8007024 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3324      	adds	r3, #36	; 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fd50 	bl	8007aa8 <xTaskRemoveFromEventList>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800700e:	f000 fe27 	bl	8007c60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	3b01      	subs	r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800701a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dce9      	bgt.n	8006ff6 <prvUnlockQueue+0x16>
 8007022:	e000      	b.n	8007026 <prvUnlockQueue+0x46>
					break;
 8007024:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	22ff      	movs	r2, #255	; 0xff
 800702a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800702e:	f001 fc89 	bl	8008944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007032:	f001 fc57 	bl	80088e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800703c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800703e:	e011      	b.n	8007064 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d012      	beq.n	800706e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3310      	adds	r3, #16
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fd2b 	bl	8007aa8 <xTaskRemoveFromEventList>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007058:	f000 fe02 	bl	8007c60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	3b01      	subs	r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007068:	2b00      	cmp	r3, #0
 800706a:	dce9      	bgt.n	8007040 <prvUnlockQueue+0x60>
 800706c:	e000      	b.n	8007070 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800706e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	22ff      	movs	r2, #255	; 0xff
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007078:	f001 fc64 	bl	8008944 <vPortExitCritical>
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800708c:	f001 fc2a 	bl	80088e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e001      	b.n	80070a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070a2:	f001 fc4f 	bl	8008944 <vPortExitCritical>

	return xReturn;
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070b8:	f001 fc14 	bl	80088e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d102      	bne.n	80070ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070c8:	2301      	movs	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e001      	b.n	80070d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070d2:	f001 fc37 	bl	8008944 <vPortExitCritical>

	return xReturn;
 80070d6:	68fb      	ldr	r3, [r7, #12]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e014      	b.n	800711a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070f0:	4a0f      	ldr	r2, [pc, #60]	; (8007130 <vQueueAddToRegistry+0x50>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070fc:	490c      	ldr	r1, [pc, #48]	; (8007130 <vQueueAddToRegistry+0x50>)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007106:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <vQueueAddToRegistry+0x50>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4413      	add	r3, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007112:	e006      	b.n	8007122 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b07      	cmp	r3, #7
 800711e:	d9e7      	bls.n	80070f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20000b6c 	.word	0x20000b6c

08007134 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007144:	f001 fbce 	bl	80088e4 <vPortEnterCritical>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714e:	b25b      	sxtb	r3, r3
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d103      	bne.n	800715e <vQueueWaitForMessageRestricted+0x2a>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007164:	b25b      	sxtb	r3, r3
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d103      	bne.n	8007174 <vQueueWaitForMessageRestricted+0x40>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007174:	f001 fbe6 	bl	8008944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fc61 	bl	8007a50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800718e:	6978      	ldr	r0, [r7, #20]
 8007190:	f7ff ff26 	bl	8006fe0 <prvUnlockQueue>
	}
 8007194:	bf00      	nop
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08e      	sub	sp, #56	; 0x38
 80071a0:	af04      	add	r7, sp, #16
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	623b      	str	r3, [r7, #32]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	61fb      	str	r3, [r7, #28]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071e2:	23bc      	movs	r3, #188	; 0xbc
 80071e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2bbc      	cmp	r3, #188	; 0xbc
 80071ea:	d00a      	beq.n	8007202 <xTaskCreateStatic+0x66>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	61bb      	str	r3, [r7, #24]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007202:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d01e      	beq.n	8007248 <xTaskCreateStatic+0xac>
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01b      	beq.n	8007248 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	2202      	movs	r2, #2
 800721e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007222:	2300      	movs	r3, #0
 8007224:	9303      	str	r3, [sp, #12]
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	9302      	str	r3, [sp, #8]
 800722a:	f107 0314 	add.w	r3, r7, #20
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f850 	bl	80072e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007242:	f000 f8f3 	bl	800742c <prvAddNewTaskToReadyList>
 8007246:	e001      	b.n	800724c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800724c:	697b      	ldr	r3, [r7, #20]
	}
 800724e:	4618      	mov	r0, r3
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007256:	b580      	push	{r7, lr}
 8007258:	b08c      	sub	sp, #48	; 0x30
 800725a:	af04      	add	r7, sp, #16
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fc5c 	bl	8008b28 <pvPortMalloc>
 8007270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007278:	20bc      	movs	r0, #188	; 0xbc
 800727a:	f001 fc55 	bl	8008b28 <pvPortMalloc>
 800727e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	631a      	str	r2, [r3, #48]	; 0x30
 800728c:	e005      	b.n	800729a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800728e:	6978      	ldr	r0, [r7, #20]
 8007290:	f001 fd16 	bl	8008cc0 <vPortFree>
 8007294:	e001      	b.n	800729a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d017      	beq.n	80072d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072a8:	88fa      	ldrh	r2, [r7, #6]
 80072aa:	2300      	movs	r3, #0
 80072ac:	9303      	str	r3, [sp, #12]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	9302      	str	r3, [sp, #8]
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f80e 	bl	80072e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072c4:	69f8      	ldr	r0, [r7, #28]
 80072c6:	f000 f8b1 	bl	800742c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e002      	b.n	80072d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072d6:	69bb      	ldr	r3, [r7, #24]
	}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	461a      	mov	r2, r3
 80072f8:	21a5      	movs	r1, #165	; 0xa5
 80072fa:	f001 fe49 	bl	8008f90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007308:	3b01      	subs	r3, #1
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f023 0307 	bic.w	r3, r3, #7
 8007316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	617b      	str	r3, [r7, #20]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01f      	beq.n	800737e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	e012      	b.n	800736a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	7819      	ldrb	r1, [r3, #0]
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	3334      	adds	r3, #52	; 0x34
 8007354:	460a      	mov	r2, r1
 8007356:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	4413      	add	r3, r2
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d006      	beq.n	8007372 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3301      	adds	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b0f      	cmp	r3, #15
 800736e:	d9e9      	bls.n	8007344 <prvInitialiseNewTask+0x64>
 8007370:	e000      	b.n	8007374 <prvInitialiseNewTask+0x94>
			{
				break;
 8007372:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800737c:	e003      	b.n	8007386 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	2b37      	cmp	r3, #55	; 0x37
 800738a:	d901      	bls.n	8007390 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800738c:	2337      	movs	r3, #55	; 0x37
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007394:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	2200      	movs	r2, #0
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	3304      	adds	r3, #4
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff f8be 	bl	8006528 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	3318      	adds	r3, #24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff f8b9 	bl	8006528 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	3354      	adds	r3, #84	; 0x54
 80073e0:	2260      	movs	r2, #96	; 0x60
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fdd3 	bl	8008f90 <memset>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	4a0c      	ldr	r2, [pc, #48]	; (8007420 <prvInitialiseNewTask+0x140>)
 80073ee:	659a      	str	r2, [r3, #88]	; 0x58
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <prvInitialiseNewTask+0x144>)
 80073f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	4a0b      	ldr	r2, [pc, #44]	; (8007428 <prvInitialiseNewTask+0x148>)
 80073fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	69b8      	ldr	r0, [r7, #24]
 8007402:	f001 f941 	bl	8008688 <pxPortInitialiseStack>
 8007406:	4602      	mov	r2, r0
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007416:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007418:	bf00      	nop
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	0800bc4c 	.word	0x0800bc4c
 8007424:	0800bc6c 	.word	0x0800bc6c
 8007428:	0800bc2c 	.word	0x0800bc2c

0800742c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007434:	f001 fa56 	bl	80088e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007438:	4b2d      	ldr	r3, [pc, #180]	; (80074f0 <prvAddNewTaskToReadyList+0xc4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <prvAddNewTaskToReadyList+0xc4>)
 8007440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007442:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800744a:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007450:	4b27      	ldr	r3, [pc, #156]	; (80074f0 <prvAddNewTaskToReadyList+0xc4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d110      	bne.n	800747a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007458:	f000 fc26 	bl	8007ca8 <prvInitialiseTaskLists>
 800745c:	e00d      	b.n	800747a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800745e:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <prvAddNewTaskToReadyList+0xcc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007466:	4b23      	ldr	r3, [pc, #140]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	429a      	cmp	r2, r3
 8007472:	d802      	bhi.n	800747a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007474:	4a1f      	ldr	r2, [pc, #124]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800747a:	4b20      	ldr	r3, [pc, #128]	; (80074fc <prvAddNewTaskToReadyList+0xd0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <prvAddNewTaskToReadyList+0xd0>)
 8007482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <prvAddNewTaskToReadyList+0xd0>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <prvAddNewTaskToReadyList+0xd4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d903      	bls.n	80074a0 <prvAddNewTaskToReadyList+0x74>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a18      	ldr	r2, [pc, #96]	; (8007500 <prvAddNewTaskToReadyList+0xd4>)
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4a15      	ldr	r2, [pc, #84]	; (8007504 <prvAddNewTaskToReadyList+0xd8>)
 80074ae:	441a      	add	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7ff f843 	bl	8006542 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074bc:	f001 fa42 	bl	8008944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074c0:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <prvAddNewTaskToReadyList+0xcc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00e      	beq.n	80074e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d207      	bcs.n	80074e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <prvAddNewTaskToReadyList+0xdc>)
 80074d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20001080 	.word	0x20001080
 80074f4:	20000bac 	.word	0x20000bac
 80074f8:	2000108c 	.word	0x2000108c
 80074fc:	2000109c 	.word	0x2000109c
 8007500:	20001088 	.word	0x20001088
 8007504:	20000bb0 	.word	0x20000bb0
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d017      	beq.n	800754e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <vTaskDelay+0x60>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <vTaskDelay+0x30>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800753c:	f000 f88a 	bl	8007654 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007540:	2100      	movs	r1, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fcfe 	bl	8007f44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007548:	f000 f892 	bl	8007670 <xTaskResumeAll>
 800754c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d107      	bne.n	8007564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007554:	4b06      	ldr	r3, [pc, #24]	; (8007570 <vTaskDelay+0x64>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	200010a8 	.word	0x200010a8
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08a      	sub	sp, #40	; 0x28
 8007578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007582:	463a      	mov	r2, r7
 8007584:	1d39      	adds	r1, r7, #4
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe ff78 	bl	8006480 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	9202      	str	r2, [sp, #8]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	2300      	movs	r3, #0
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2300      	movs	r3, #0
 80075a0:	460a      	mov	r2, r1
 80075a2:	4924      	ldr	r1, [pc, #144]	; (8007634 <vTaskStartScheduler+0xc0>)
 80075a4:	4824      	ldr	r0, [pc, #144]	; (8007638 <vTaskStartScheduler+0xc4>)
 80075a6:	f7ff fdf9 	bl	800719c <xTaskCreateStatic>
 80075aa:	4603      	mov	r3, r0
 80075ac:	4a23      	ldr	r2, [pc, #140]	; (800763c <vTaskStartScheduler+0xc8>)
 80075ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075b0:	4b22      	ldr	r3, [pc, #136]	; (800763c <vTaskStartScheduler+0xc8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075b8:	2301      	movs	r3, #1
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e001      	b.n	80075c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d102      	bne.n	80075ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075c8:	f000 fd10 	bl	8007fec <xTimerCreateTimerTask>
 80075cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d11b      	bne.n	800760c <vTaskStartScheduler+0x98>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	613b      	str	r3, [r7, #16]
}
 80075e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075e8:	4b15      	ldr	r3, [pc, #84]	; (8007640 <vTaskStartScheduler+0xcc>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3354      	adds	r3, #84	; 0x54
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <vTaskStartScheduler+0xd0>)
 80075f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075f2:	4b15      	ldr	r3, [pc, #84]	; (8007648 <vTaskStartScheduler+0xd4>)
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075fa:	4b14      	ldr	r3, [pc, #80]	; (800764c <vTaskStartScheduler+0xd8>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007600:	4b13      	ldr	r3, [pc, #76]	; (8007650 <vTaskStartScheduler+0xdc>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007606:	f001 f8cb 	bl	80087a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800760a:	e00e      	b.n	800762a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d10a      	bne.n	800762a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <vTaskStartScheduler+0xb4>
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	08009a38 	.word	0x08009a38
 8007638:	08007c79 	.word	0x08007c79
 800763c:	200010a4 	.word	0x200010a4
 8007640:	20000bac 	.word	0x20000bac
 8007644:	20000098 	.word	0x20000098
 8007648:	200010a0 	.word	0x200010a0
 800764c:	2000108c 	.word	0x2000108c
 8007650:	20001084 	.word	0x20001084

08007654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <vTaskSuspendAll+0x18>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3301      	adds	r3, #1
 800765e:	4a03      	ldr	r2, [pc, #12]	; (800766c <vTaskSuspendAll+0x18>)
 8007660:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007662:	bf00      	nop
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	200010a8 	.word	0x200010a8

08007670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800767a:	2300      	movs	r3, #0
 800767c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800767e:	4b42      	ldr	r3, [pc, #264]	; (8007788 <xTaskResumeAll+0x118>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xTaskResumeAll+0x2c>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	603b      	str	r3, [r7, #0]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800769c:	f001 f922 	bl	80088e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076a0:	4b39      	ldr	r3, [pc, #228]	; (8007788 <xTaskResumeAll+0x118>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	4a38      	ldr	r2, [pc, #224]	; (8007788 <xTaskResumeAll+0x118>)
 80076a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076aa:	4b37      	ldr	r3, [pc, #220]	; (8007788 <xTaskResumeAll+0x118>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d162      	bne.n	8007778 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <xTaskResumeAll+0x11c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d05e      	beq.n	8007778 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ba:	e02f      	b.n	800771c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076bc:	4b34      	ldr	r3, [pc, #208]	; (8007790 <xTaskResumeAll+0x120>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3318      	adds	r3, #24
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe ff97 	bl	80065fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe ff92 	bl	80065fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4b2d      	ldr	r3, [pc, #180]	; (8007794 <xTaskResumeAll+0x124>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d903      	bls.n	80076ec <xTaskResumeAll+0x7c>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <xTaskResumeAll+0x124>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4a27      	ldr	r2, [pc, #156]	; (8007798 <xTaskResumeAll+0x128>)
 80076fa:	441a      	add	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7fe ff1d 	bl	8006542 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770c:	4b23      	ldr	r3, [pc, #140]	; (800779c <xTaskResumeAll+0x12c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007716:	4b22      	ldr	r3, [pc, #136]	; (80077a0 <xTaskResumeAll+0x130>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800771c:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <xTaskResumeAll+0x120>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1cb      	bne.n	80076bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800772a:	f000 fb5f 	bl	8007dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <xTaskResumeAll+0x134>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800773a:	f000 f847 	bl	80077cc <xTaskIncrementTick>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007744:	4b16      	ldr	r3, [pc, #88]	; (80077a0 <xTaskResumeAll+0x130>)
 8007746:	2201      	movs	r2, #1
 8007748:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3b01      	subs	r3, #1
 800774e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f1      	bne.n	800773a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <xTaskResumeAll+0x134>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800775c:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <xTaskResumeAll+0x130>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <xTaskResumeAll+0x138>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007778:	f001 f8e4 	bl	8008944 <vPortExitCritical>

	return xAlreadyYielded;
 800777c:	68bb      	ldr	r3, [r7, #8]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200010a8 	.word	0x200010a8
 800778c:	20001080 	.word	0x20001080
 8007790:	20001040 	.word	0x20001040
 8007794:	20001088 	.word	0x20001088
 8007798:	20000bb0 	.word	0x20000bb0
 800779c:	20000bac 	.word	0x20000bac
 80077a0:	20001094 	.word	0x20001094
 80077a4:	20001090 	.word	0x20001090
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <xTaskGetTickCount+0x1c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077b8:	687b      	ldr	r3, [r7, #4]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20001084 	.word	0x20001084

080077cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d6:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <xTaskIncrementTick+0x148>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 808f 	bne.w	80078fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077e0:	4b4d      	ldr	r3, [pc, #308]	; (8007918 <xTaskIncrementTick+0x14c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077e8:	4a4b      	ldr	r2, [pc, #300]	; (8007918 <xTaskIncrementTick+0x14c>)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d120      	bne.n	8007836 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077f4:	4b49      	ldr	r3, [pc, #292]	; (800791c <xTaskIncrementTick+0x150>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <xTaskIncrementTick+0x48>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	603b      	str	r3, [r7, #0]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <xTaskIncrementTick+0x46>
 8007814:	4b41      	ldr	r3, [pc, #260]	; (800791c <xTaskIncrementTick+0x150>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	4b41      	ldr	r3, [pc, #260]	; (8007920 <xTaskIncrementTick+0x154>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a3f      	ldr	r2, [pc, #252]	; (800791c <xTaskIncrementTick+0x150>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	4a3f      	ldr	r2, [pc, #252]	; (8007920 <xTaskIncrementTick+0x154>)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	4b3e      	ldr	r3, [pc, #248]	; (8007924 <xTaskIncrementTick+0x158>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a3d      	ldr	r2, [pc, #244]	; (8007924 <xTaskIncrementTick+0x158>)
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	f000 fadb 	bl	8007dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007836:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <xTaskIncrementTick+0x15c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	d349      	bcc.n	80078d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007840:	4b36      	ldr	r3, [pc, #216]	; (800791c <xTaskIncrementTick+0x150>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784a:	4b37      	ldr	r3, [pc, #220]	; (8007928 <xTaskIncrementTick+0x15c>)
 800784c:	f04f 32ff 	mov.w	r2, #4294967295
 8007850:	601a      	str	r2, [r3, #0]
					break;
 8007852:	e03f      	b.n	80078d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007854:	4b31      	ldr	r3, [pc, #196]	; (800791c <xTaskIncrementTick+0x150>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d203      	bcs.n	8007874 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800786c:	4a2e      	ldr	r2, [pc, #184]	; (8007928 <xTaskIncrementTick+0x15c>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007872:	e02f      	b.n	80078d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe febf 	bl	80065fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	3318      	adds	r3, #24
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe feb6 	bl	80065fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <xTaskIncrementTick+0x160>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d903      	bls.n	80078a4 <xTaskIncrementTick+0xd8>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a22      	ldr	r2, [pc, #136]	; (800792c <xTaskIncrementTick+0x160>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <xTaskIncrementTick+0x164>)
 80078b2:	441a      	add	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fe41 	bl	8006542 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <xTaskIncrementTick+0x168>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d3b8      	bcc.n	8007840 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078d2:	e7b5      	b.n	8007840 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078d4:	4b17      	ldr	r3, [pc, #92]	; (8007934 <xTaskIncrementTick+0x168>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	4915      	ldr	r1, [pc, #84]	; (8007930 <xTaskIncrementTick+0x164>)
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d901      	bls.n	80078f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078f0:	4b11      	ldr	r3, [pc, #68]	; (8007938 <xTaskIncrementTick+0x16c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078f8:	2301      	movs	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	e004      	b.n	8007908 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <xTaskIncrementTick+0x170>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	4a0d      	ldr	r2, [pc, #52]	; (800793c <xTaskIncrementTick+0x170>)
 8007906:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007908:	697b      	ldr	r3, [r7, #20]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200010a8 	.word	0x200010a8
 8007918:	20001084 	.word	0x20001084
 800791c:	20001038 	.word	0x20001038
 8007920:	2000103c 	.word	0x2000103c
 8007924:	20001098 	.word	0x20001098
 8007928:	200010a0 	.word	0x200010a0
 800792c:	20001088 	.word	0x20001088
 8007930:	20000bb0 	.word	0x20000bb0
 8007934:	20000bac 	.word	0x20000bac
 8007938:	20001094 	.word	0x20001094
 800793c:	20001090 	.word	0x20001090

08007940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007946:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <vTaskSwitchContext+0xb0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800794e:	4b29      	ldr	r3, [pc, #164]	; (80079f4 <vTaskSwitchContext+0xb4>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007954:	e046      	b.n	80079e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007956:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <vTaskSwitchContext+0xb4>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	4b26      	ldr	r3, [pc, #152]	; (80079f8 <vTaskSwitchContext+0xb8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	e010      	b.n	8007986 <vTaskSwitchContext+0x46>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <vTaskSwitchContext+0x40>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vTaskSwitchContext+0x3e>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b01      	subs	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	491d      	ldr	r1, [pc, #116]	; (80079fc <vTaskSwitchContext+0xbc>)
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0e4      	beq.n	8007964 <vTaskSwitchContext+0x24>
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a15      	ldr	r2, [pc, #84]	; (80079fc <vTaskSwitchContext+0xbc>)
 80079a6:	4413      	add	r3, r2
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	605a      	str	r2, [r3, #4]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3308      	adds	r3, #8
 80079bc:	429a      	cmp	r2, r3
 80079be:	d104      	bne.n	80079ca <vTaskSwitchContext+0x8a>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4a0b      	ldr	r2, [pc, #44]	; (8007a00 <vTaskSwitchContext+0xc0>)
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <vTaskSwitchContext+0xb8>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <vTaskSwitchContext+0xc0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3354      	adds	r3, #84	; 0x54
 80079e0:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <vTaskSwitchContext+0xc4>)
 80079e2:	6013      	str	r3, [r2, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	200010a8 	.word	0x200010a8
 80079f4:	20001094 	.word	0x20001094
 80079f8:	20001088 	.word	0x20001088
 80079fc:	20000bb0 	.word	0x20000bb0
 8007a00:	20000bac 	.word	0x20000bac
 8007a04:	20000098 	.word	0x20000098

08007a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <vTaskPlaceOnEventList+0x44>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3318      	adds	r3, #24
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fe fda7 	bl	800658a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	6838      	ldr	r0, [r7, #0]
 8007a40:	f000 fa80 	bl	8007f44 <prvAddCurrentTaskToDelayedList>
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000bac 	.word	0x20000bac

08007a50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	617b      	str	r3, [r7, #20]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3318      	adds	r3, #24
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7fe fd5e 	bl	8006542 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	68b8      	ldr	r0, [r7, #8]
 8007a96:	f000 fa55 	bl	8007f44 <prvAddCurrentTaskToDelayedList>
	}
 8007a9a:	bf00      	nop
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000bac 	.word	0x20000bac

08007aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60fb      	str	r3, [r7, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	3318      	adds	r3, #24
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fd8f 	bl	80065fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ade:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <xTaskRemoveFromEventList+0xb0>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d11d      	bne.n	8007b22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fd86 	bl	80065fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <xTaskRemoveFromEventList+0xb4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d903      	bls.n	8007b04 <xTaskRemoveFromEventList+0x5c>
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	4a16      	ldr	r2, [pc, #88]	; (8007b5c <xTaskRemoveFromEventList+0xb4>)
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4a13      	ldr	r2, [pc, #76]	; (8007b60 <xTaskRemoveFromEventList+0xb8>)
 8007b12:	441a      	add	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7fe fd11 	bl	8006542 <vListInsertEnd>
 8007b20:	e005      	b.n	8007b2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3318      	adds	r3, #24
 8007b26:	4619      	mov	r1, r3
 8007b28:	480e      	ldr	r0, [pc, #56]	; (8007b64 <xTaskRemoveFromEventList+0xbc>)
 8007b2a:	f7fe fd0a 	bl	8006542 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b32:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <xTaskRemoveFromEventList+0xc0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d905      	bls.n	8007b48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <xTaskRemoveFromEventList+0xc4>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	e001      	b.n	8007b4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200010a8 	.word	0x200010a8
 8007b5c:	20001088 	.word	0x20001088
 8007b60:	20000bb0 	.word	0x20000bb0
 8007b64:	20001040 	.word	0x20001040
 8007b68:	20000bac 	.word	0x20000bac
 8007b6c:	20001094 	.word	0x20001094

08007b70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <vTaskInternalSetTimeOutState+0x24>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b80:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <vTaskInternalSetTimeOutState+0x28>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	605a      	str	r2, [r3, #4]
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	20001098 	.word	0x20001098
 8007b98:	20001084 	.word	0x20001084

08007b9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	613b      	str	r3, [r7, #16]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	60fb      	str	r3, [r7, #12]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007bde:	f000 fe81 	bl	80088e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007be2:	4b1d      	ldr	r3, [pc, #116]	; (8007c58 <xTaskCheckForTimeOut+0xbc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d102      	bne.n	8007c02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	e023      	b.n	8007c4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <xTaskCheckForTimeOut+0xc0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d007      	beq.n	8007c1e <xTaskCheckForTimeOut+0x82>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	e015      	b.n	8007c4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d20b      	bcs.n	8007c40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff ff9b 	bl	8007b70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	e004      	b.n	8007c4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c4a:	f000 fe7b 	bl	8008944 <vPortExitCritical>

	return xReturn;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3720      	adds	r7, #32
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20001084 	.word	0x20001084
 8007c5c:	20001098 	.word	0x20001098

08007c60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c64:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <vTaskMissedYield+0x14>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	601a      	str	r2, [r3, #0]
}
 8007c6a:	bf00      	nop
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	20001094 	.word	0x20001094

08007c78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c80:	f000 f852 	bl	8007d28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <prvIdleTask+0x28>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d9f9      	bls.n	8007c80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c8c:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <prvIdleTask+0x2c>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c9c:	e7f0      	b.n	8007c80 <prvIdleTask+0x8>
 8007c9e:	bf00      	nop
 8007ca0:	20000bb0 	.word	0x20000bb0
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cae:	2300      	movs	r3, #0
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	e00c      	b.n	8007cce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <prvInitialiseTaskLists+0x60>)
 8007cc0:	4413      	add	r3, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe fc10 	bl	80064e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	607b      	str	r3, [r7, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b37      	cmp	r3, #55	; 0x37
 8007cd2:	d9ef      	bls.n	8007cb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cd4:	480d      	ldr	r0, [pc, #52]	; (8007d0c <prvInitialiseTaskLists+0x64>)
 8007cd6:	f7fe fc07 	bl	80064e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cda:	480d      	ldr	r0, [pc, #52]	; (8007d10 <prvInitialiseTaskLists+0x68>)
 8007cdc:	f7fe fc04 	bl	80064e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ce0:	480c      	ldr	r0, [pc, #48]	; (8007d14 <prvInitialiseTaskLists+0x6c>)
 8007ce2:	f7fe fc01 	bl	80064e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ce6:	480c      	ldr	r0, [pc, #48]	; (8007d18 <prvInitialiseTaskLists+0x70>)
 8007ce8:	f7fe fbfe 	bl	80064e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cec:	480b      	ldr	r0, [pc, #44]	; (8007d1c <prvInitialiseTaskLists+0x74>)
 8007cee:	f7fe fbfb 	bl	80064e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <prvInitialiseTaskLists+0x78>)
 8007cf4:	4a05      	ldr	r2, [pc, #20]	; (8007d0c <prvInitialiseTaskLists+0x64>)
 8007cf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <prvInitialiseTaskLists+0x7c>)
 8007cfa:	4a05      	ldr	r2, [pc, #20]	; (8007d10 <prvInitialiseTaskLists+0x68>)
 8007cfc:	601a      	str	r2, [r3, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000bb0 	.word	0x20000bb0
 8007d0c:	20001010 	.word	0x20001010
 8007d10:	20001024 	.word	0x20001024
 8007d14:	20001040 	.word	0x20001040
 8007d18:	20001054 	.word	0x20001054
 8007d1c:	2000106c 	.word	0x2000106c
 8007d20:	20001038 	.word	0x20001038
 8007d24:	2000103c 	.word	0x2000103c

08007d28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d2e:	e019      	b.n	8007d64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d30:	f000 fdd8 	bl	80088e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d34:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <prvCheckTasksWaitingTermination+0x50>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fc5b 	bl	80065fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <prvCheckTasksWaitingTermination+0x54>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <prvCheckTasksWaitingTermination+0x54>)
 8007d4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <prvCheckTasksWaitingTermination+0x58>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	4a0a      	ldr	r2, [pc, #40]	; (8007d80 <prvCheckTasksWaitingTermination+0x58>)
 8007d58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d5a:	f000 fdf3 	bl	8008944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f810 	bl	8007d84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <prvCheckTasksWaitingTermination+0x58>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e1      	bne.n	8007d30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20001054 	.word	0x20001054
 8007d7c:	20001080 	.word	0x20001080
 8007d80:	20001068 	.word	0x20001068

08007d84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3354      	adds	r3, #84	; 0x54
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f9f3 	bl	800917c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 ff8b 	bl	8008cc0 <vPortFree>
				vPortFree( pxTCB );
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 ff88 	bl	8008cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007db0:	e018      	b.n	8007de4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d103      	bne.n	8007dc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 ff7f 	bl	8008cc0 <vPortFree>
	}
 8007dc2:	e00f      	b.n	8007de4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d00a      	beq.n	8007de4 <prvDeleteTCB+0x60>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	60fb      	str	r3, [r7, #12]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <prvDeleteTCB+0x5e>
	}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df2:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <prvResetNextTaskUnblockTime+0x38>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <prvResetNextTaskUnblockTime+0x3c>)
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e04:	e008      	b.n	8007e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e06:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <prvResetNextTaskUnblockTime+0x38>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <prvResetNextTaskUnblockTime+0x3c>)
 8007e16:	6013      	str	r3, [r2, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20001038 	.word	0x20001038
 8007e28:	200010a0 	.word	0x200010a0

08007e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <xTaskGetSchedulerState+0x34>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	e008      	b.n	8007e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <xTaskGetSchedulerState+0x38>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	e001      	b.n	8007e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e52:	687b      	ldr	r3, [r7, #4]
	}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	2000108c 	.word	0x2000108c
 8007e64:	200010a8 	.word	0x200010a8

08007e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d056      	beq.n	8007f2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e7e:	4b2e      	ldr	r3, [pc, #184]	; (8007f38 <xTaskPriorityDisinherit+0xd0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d00a      	beq.n	8007e9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	60fb      	str	r3, [r7, #12]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10a      	bne.n	8007ebc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	60bb      	str	r3, [r7, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec0:	1e5a      	subs	r2, r3, #1
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d02c      	beq.n	8007f2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d128      	bne.n	8007f2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fb8c 	bl	80065fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <xTaskPriorityDisinherit+0xd4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d903      	bls.n	8007f0c <xTaskPriorityDisinherit+0xa4>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4a0c      	ldr	r2, [pc, #48]	; (8007f3c <xTaskPriorityDisinherit+0xd4>)
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	4613      	mov	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <xTaskPriorityDisinherit+0xd8>)
 8007f1a:	441a      	add	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f7fe fb0d 	bl	8006542 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f2c:	697b      	ldr	r3, [r7, #20]
	}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000bac 	.word	0x20000bac
 8007f3c:	20001088 	.word	0x20001088
 8007f40:	20000bb0 	.word	0x20000bb0

08007f44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f4e:	4b21      	ldr	r3, [pc, #132]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f54:	4b20      	ldr	r3, [pc, #128]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fb4e 	bl	80065fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d10a      	bne.n	8007f7e <prvAddCurrentTaskToDelayedList+0x3a>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4619      	mov	r1, r3
 8007f76:	4819      	ldr	r0, [pc, #100]	; (8007fdc <prvAddCurrentTaskToDelayedList+0x98>)
 8007f78:	f7fe fae3 	bl	8006542 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f7c:	e026      	b.n	8007fcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d209      	bcs.n	8007faa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7fe faf1 	bl	800658a <vListInsert>
}
 8007fa8:	e010      	b.n	8007fcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007faa:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f7fe fae7 	bl	800658a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d202      	bcs.n	8007fcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fc6:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	6013      	str	r3, [r2, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001084 	.word	0x20001084
 8007fd8:	20000bac 	.word	0x20000bac
 8007fdc:	2000106c 	.word	0x2000106c
 8007fe0:	2000103c 	.word	0x2000103c
 8007fe4:	20001038 	.word	0x20001038
 8007fe8:	200010a0 	.word	0x200010a0

08007fec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ff6:	f000 fb07 	bl	8008608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ffa:	4b1c      	ldr	r3, [pc, #112]	; (800806c <xTimerCreateTimerTask+0x80>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d021      	beq.n	8008046 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800800a:	1d3a      	adds	r2, r7, #4
 800800c:	f107 0108 	add.w	r1, r7, #8
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fa4d 	bl	80064b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	9202      	str	r2, [sp, #8]
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	2302      	movs	r3, #2
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2300      	movs	r3, #0
 800802a:	460a      	mov	r2, r1
 800802c:	4910      	ldr	r1, [pc, #64]	; (8008070 <xTimerCreateTimerTask+0x84>)
 800802e:	4811      	ldr	r0, [pc, #68]	; (8008074 <xTimerCreateTimerTask+0x88>)
 8008030:	f7ff f8b4 	bl	800719c <xTaskCreateStatic>
 8008034:	4603      	mov	r3, r0
 8008036:	4a10      	ldr	r2, [pc, #64]	; (8008078 <xTimerCreateTimerTask+0x8c>)
 8008038:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800803a:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <xTimerCreateTimerTask+0x8c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008042:	2301      	movs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	613b      	str	r3, [r7, #16]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008062:	697b      	ldr	r3, [r7, #20]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200010dc 	.word	0x200010dc
 8008070:	08009a40 	.word	0x08009a40
 8008074:	080081b1 	.word	0x080081b1
 8008078:	200010e0 	.word	0x200010e0

0800807c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800808a:	2300      	movs	r3, #0
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	623b      	str	r3, [r7, #32]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <xTimerGenericCommand+0x98>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d02a      	beq.n	8008108 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b05      	cmp	r3, #5
 80080c2:	dc18      	bgt.n	80080f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080c4:	f7ff feb2 	bl	8007e2c <xTaskGetSchedulerState>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d109      	bne.n	80080e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <xTimerGenericCommand+0x98>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f107 0110 	add.w	r1, r7, #16
 80080d6:	2300      	movs	r3, #0
 80080d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080da:	f7fe fbf7 	bl	80068cc <xQueueGenericSend>
 80080de:	6278      	str	r0, [r7, #36]	; 0x24
 80080e0:	e012      	b.n	8008108 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <xTimerGenericCommand+0x98>)
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f107 0110 	add.w	r1, r7, #16
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	f7fe fbed 	bl	80068cc <xQueueGenericSend>
 80080f2:	6278      	str	r0, [r7, #36]	; 0x24
 80080f4:	e008      	b.n	8008108 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080f6:	4b07      	ldr	r3, [pc, #28]	; (8008114 <xTimerGenericCommand+0x98>)
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f107 0110 	add.w	r1, r7, #16
 80080fe:	2300      	movs	r3, #0
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	f7fe fce1 	bl	8006ac8 <xQueueGenericSendFromISR>
 8008106:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800810a:	4618      	mov	r0, r3
 800810c:	3728      	adds	r7, #40	; 0x28
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200010dc 	.word	0x200010dc

08008118 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af02      	add	r7, sp, #8
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008122:	4b22      	ldr	r3, [pc, #136]	; (80081ac <prvProcessExpiredTimer+0x94>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	3304      	adds	r3, #4
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fa63 	bl	80065fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d022      	beq.n	800818a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	699a      	ldr	r2, [r3, #24]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	18d1      	adds	r1, r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	6978      	ldr	r0, [r7, #20]
 8008152:	f000 f8d1 	bl	80082f8 <prvInsertTimerInActiveList>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01f      	beq.n	800819c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800815c:	2300      	movs	r3, #0
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	2300      	movs	r3, #0
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	2100      	movs	r1, #0
 8008166:	6978      	ldr	r0, [r7, #20]
 8008168:	f7ff ff88 	bl	800807c <xTimerGenericCommand>
 800816c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d113      	bne.n	800819c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	b2da      	uxtb	r2, r3
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	6978      	ldr	r0, [r7, #20]
 80081a2:	4798      	blx	r3
}
 80081a4:	bf00      	nop
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200010d4 	.word	0x200010d4

080081b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081b8:	f107 0308 	add.w	r3, r7, #8
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f857 	bl	8008270 <prvGetNextExpireTime>
 80081c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f803 	bl	80081d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081ce:	f000 f8d5 	bl	800837c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081d2:	e7f1      	b.n	80081b8 <prvTimerTask+0x8>

080081d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081de:	f7ff fa39 	bl	8007654 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081e2:	f107 0308 	add.w	r3, r7, #8
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f866 	bl	80082b8 <prvSampleTimeNow>
 80081ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d130      	bne.n	8008256 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <prvProcessTimerOrBlockTask+0x3c>
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d806      	bhi.n	8008210 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008202:	f7ff fa35 	bl	8007670 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008206:	68f9      	ldr	r1, [r7, #12]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff85 	bl	8008118 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800820e:	e024      	b.n	800825a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <prvProcessTimerOrBlockTask+0x90>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <prvProcessTimerOrBlockTask+0x50>
 8008220:	2301      	movs	r3, #1
 8008222:	e000      	b.n	8008226 <prvProcessTimerOrBlockTask+0x52>
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <prvProcessTimerOrBlockTask+0x94>)
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4619      	mov	r1, r3
 8008236:	f7fe ff7d 	bl	8007134 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800823a:	f7ff fa19 	bl	8007670 <xTaskResumeAll>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008244:	4b09      	ldr	r3, [pc, #36]	; (800826c <prvProcessTimerOrBlockTask+0x98>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
}
 8008254:	e001      	b.n	800825a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008256:	f7ff fa0b 	bl	8007670 <xTaskResumeAll>
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200010d8 	.word	0x200010d8
 8008268:	200010dc 	.word	0x200010dc
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008278:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <prvGetNextExpireTime+0x44>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <prvGetNextExpireTime+0x16>
 8008282:	2201      	movs	r2, #1
 8008284:	e000      	b.n	8008288 <prvGetNextExpireTime+0x18>
 8008286:	2200      	movs	r2, #0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <prvGetNextExpireTime+0x44>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e001      	b.n	80082a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082a4:	68fb      	ldr	r3, [r7, #12]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	200010d4 	.word	0x200010d4

080082b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082c0:	f7ff fa74 	bl	80077ac <xTaskGetTickCount>
 80082c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <prvSampleTimeNow+0x3c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d205      	bcs.n	80082dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082d0:	f000 f936 	bl	8008540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	e002      	b.n	80082e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082e2:	4a04      	ldr	r2, [pc, #16]	; (80082f4 <prvSampleTimeNow+0x3c>)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082e8:	68fb      	ldr	r3, [r7, #12]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200010e4 	.word	0x200010e4

080082f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	429a      	cmp	r2, r3
 800831c:	d812      	bhi.n	8008344 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	1ad2      	subs	r2, r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e01b      	b.n	800836a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008332:	4b10      	ldr	r3, [pc, #64]	; (8008374 <prvInsertTimerInActiveList+0x7c>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3304      	adds	r3, #4
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f7fe f924 	bl	800658a <vListInsert>
 8008342:	e012      	b.n	800836a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d206      	bcs.n	800835a <prvInsertTimerInActiveList+0x62>
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d302      	bcc.n	800835a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e007      	b.n	800836a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <prvInsertTimerInActiveList+0x80>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3304      	adds	r3, #4
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f7fe f910 	bl	800658a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800836a:	697b      	ldr	r3, [r7, #20]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	200010d8 	.word	0x200010d8
 8008378:	200010d4 	.word	0x200010d4

0800837c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08e      	sub	sp, #56	; 0x38
 8008380:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008382:	e0ca      	b.n	800851a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	da18      	bge.n	80083bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	3304      	adds	r3, #4
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	61fb      	str	r3, [r7, #28]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b2:	6850      	ldr	r0, [r2, #4]
 80083b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b6:	6892      	ldr	r2, [r2, #8]
 80083b8:	4611      	mov	r1, r2
 80083ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f2c0 80aa 	blt.w	8008518 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	3304      	adds	r3, #4
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe f911 	bl	80065fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083da:	463b      	mov	r3, r7
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff ff6b 	bl	80082b8 <prvSampleTimeNow>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b09      	cmp	r3, #9
 80083e8:	f200 8097 	bhi.w	800851a <prvProcessReceivedCommands+0x19e>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <prvProcessReceivedCommands+0x78>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	0800841d 	.word	0x0800841d
 8008400:	08008491 	.word	0x08008491
 8008404:	080084a5 	.word	0x080084a5
 8008408:	080084ef 	.word	0x080084ef
 800840c:	0800841d 	.word	0x0800841d
 8008410:	0800841d 	.word	0x0800841d
 8008414:	08008491 	.word	0x08008491
 8008418:	080084a5 	.word	0x080084a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	b2da      	uxtb	r2, r3
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	18d1      	adds	r1, r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843c:	f7ff ff5c 	bl	80082f8 <prvInsertTimerInActiveList>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d069      	beq.n	800851a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800844c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d05e      	beq.n	800851a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	441a      	add	r2, r3
 8008464:	2300      	movs	r3, #0
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	2300      	movs	r3, #0
 800846a:	2100      	movs	r1, #0
 800846c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846e:	f7ff fe05 	bl	800807c <xTimerGenericCommand>
 8008472:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d14f      	bne.n	800851a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	61bb      	str	r3, [r7, #24]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008496:	f023 0301 	bic.w	r3, r3, #1
 800849a:	b2da      	uxtb	r2, r3
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80084a2:	e03a      	b.n	800851a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	617b      	str	r3, [r7, #20]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	18d1      	adds	r1, r2, r3
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e8:	f7ff ff06 	bl	80082f8 <prvInsertTimerInActiveList>
					break;
 80084ec:	e015      	b.n	800851a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80084fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fe:	f000 fbdf 	bl	8008cc0 <vPortFree>
 8008502:	e00a      	b.n	800851a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800850a:	f023 0301 	bic.w	r3, r3, #1
 800850e:	b2da      	uxtb	r2, r3
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008516:	e000      	b.n	800851a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <prvProcessReceivedCommands+0x1c0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	1d39      	adds	r1, r7, #4
 8008520:	2200      	movs	r2, #0
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fb6c 	bl	8006c00 <xQueueReceive>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	f47f af2a 	bne.w	8008384 <prvProcessReceivedCommands+0x8>
	}
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	3730      	adds	r7, #48	; 0x30
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	200010dc 	.word	0x200010dc

08008540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008546:	e048      	b.n	80085da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008548:	4b2d      	ldr	r3, [pc, #180]	; (8008600 <prvSwitchTimerLists+0xc0>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008552:	4b2b      	ldr	r3, [pc, #172]	; (8008600 <prvSwitchTimerLists+0xc0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe f84b 	bl	80065fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02e      	beq.n	80085da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4413      	add	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	429a      	cmp	r2, r3
 800858c:	d90e      	bls.n	80085ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800859a:	4b19      	ldr	r3, [pc, #100]	; (8008600 <prvSwitchTimerLists+0xc0>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f7fd fff0 	bl	800658a <vListInsert>
 80085aa:	e016      	b.n	80085da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085ac:	2300      	movs	r3, #0
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2300      	movs	r3, #0
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	2100      	movs	r1, #0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff fd60 	bl	800807c <xTimerGenericCommand>
 80085bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	603b      	str	r3, [r7, #0]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <prvSwitchTimerLists+0xc0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1b1      	bne.n	8008548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <prvSwitchTimerLists+0xc0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <prvSwitchTimerLists+0xc4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a04      	ldr	r2, [pc, #16]	; (8008600 <prvSwitchTimerLists+0xc0>)
 80085f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085f2:	4a04      	ldr	r2, [pc, #16]	; (8008604 <prvSwitchTimerLists+0xc4>)
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	6013      	str	r3, [r2, #0]
}
 80085f8:	bf00      	nop
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	200010d4 	.word	0x200010d4
 8008604:	200010d8 	.word	0x200010d8

08008608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800860e:	f000 f969 	bl	80088e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <prvCheckForValidListAndQueue+0x60>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d120      	bne.n	800865c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800861a:	4814      	ldr	r0, [pc, #80]	; (800866c <prvCheckForValidListAndQueue+0x64>)
 800861c:	f7fd ff64 	bl	80064e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008620:	4813      	ldr	r0, [pc, #76]	; (8008670 <prvCheckForValidListAndQueue+0x68>)
 8008622:	f7fd ff61 	bl	80064e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <prvCheckForValidListAndQueue+0x6c>)
 8008628:	4a10      	ldr	r2, [pc, #64]	; (800866c <prvCheckForValidListAndQueue+0x64>)
 800862a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800862c:	4b12      	ldr	r3, [pc, #72]	; (8008678 <prvCheckForValidListAndQueue+0x70>)
 800862e:	4a10      	ldr	r2, [pc, #64]	; (8008670 <prvCheckForValidListAndQueue+0x68>)
 8008630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008632:	2300      	movs	r3, #0
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <prvCheckForValidListAndQueue+0x74>)
 8008638:	4a11      	ldr	r2, [pc, #68]	; (8008680 <prvCheckForValidListAndQueue+0x78>)
 800863a:	2110      	movs	r1, #16
 800863c:	200a      	movs	r0, #10
 800863e:	f7fe f86f 	bl	8006720 <xQueueGenericCreateStatic>
 8008642:	4603      	mov	r3, r0
 8008644:	4a08      	ldr	r2, [pc, #32]	; (8008668 <prvCheckForValidListAndQueue+0x60>)
 8008646:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <prvCheckForValidListAndQueue+0x60>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <prvCheckForValidListAndQueue+0x60>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	490b      	ldr	r1, [pc, #44]	; (8008684 <prvCheckForValidListAndQueue+0x7c>)
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fd42 	bl	80070e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800865c:	f000 f972 	bl	8008944 <vPortExitCritical>
}
 8008660:	bf00      	nop
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	200010dc 	.word	0x200010dc
 800866c:	200010ac 	.word	0x200010ac
 8008670:	200010c0 	.word	0x200010c0
 8008674:	200010d4 	.word	0x200010d4
 8008678:	200010d8 	.word	0x200010d8
 800867c:	20001188 	.word	0x20001188
 8008680:	200010e8 	.word	0x200010e8
 8008684:	08009a48 	.word	0x08009a48

08008688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3b04      	subs	r3, #4
 8008698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3b04      	subs	r3, #4
 80086a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f023 0201 	bic.w	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3b04      	subs	r3, #4
 80086b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <pxPortInitialiseStack+0x64>)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3b14      	subs	r3, #20
 80086c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b04      	subs	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f06f 0202 	mvn.w	r2, #2
 80086d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3b20      	subs	r3, #32
 80086dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086de:	68fb      	ldr	r3, [r7, #12]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	080086f1 	.word	0x080086f1

080086f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <prvTaskExitError+0x54>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d00a      	beq.n	800871a <prvTaskExitError+0x2a>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	60fb      	str	r3, [r7, #12]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <prvTaskExitError+0x28>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	60bb      	str	r3, [r7, #8]
}
 800872c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800872e:	bf00      	nop
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0fc      	beq.n	8008730 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	20000094 	.word	0x20000094
	...

08008750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <pxCurrentTCBConst2>)
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	6808      	ldr	r0, [r1, #0]
 8008756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	f380 8809 	msr	PSP, r0
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8811 	msr	BASEPRI, r0
 800876a:	4770      	bx	lr
 800876c:	f3af 8000 	nop.w

08008770 <pxCurrentTCBConst2>:
 8008770:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008778:	4808      	ldr	r0, [pc, #32]	; (800879c <prvPortStartFirstTask+0x24>)
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f380 8808 	msr	MSP, r0
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8814 	msr	CONTROL, r0
 800878a:	b662      	cpsie	i
 800878c:	b661      	cpsie	f
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	df00      	svc	0
 8008798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800879a:	bf00      	nop
 800879c:	e000ed08 	.word	0xe000ed08

080087a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087a6:	4b46      	ldr	r3, [pc, #280]	; (80088c0 <xPortStartScheduler+0x120>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a46      	ldr	r2, [pc, #280]	; (80088c4 <xPortStartScheduler+0x124>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10a      	bne.n	80087c6 <xPortStartScheduler+0x26>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087c6:	4b3e      	ldr	r3, [pc, #248]	; (80088c0 <xPortStartScheduler+0x120>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a3f      	ldr	r2, [pc, #252]	; (80088c8 <xPortStartScheduler+0x128>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10a      	bne.n	80087e6 <xPortStartScheduler+0x46>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	60fb      	str	r3, [r7, #12]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087e6:	4b39      	ldr	r3, [pc, #228]	; (80088cc <xPortStartScheduler+0x12c>)
 80087e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b31      	ldr	r3, [pc, #196]	; (80088d0 <xPortStartScheduler+0x130>)
 800880c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800880e:	4b31      	ldr	r3, [pc, #196]	; (80088d4 <xPortStartScheduler+0x134>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008814:	e009      	b.n	800882a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008816:	4b2f      	ldr	r3, [pc, #188]	; (80088d4 <xPortStartScheduler+0x134>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3b01      	subs	r3, #1
 800881c:	4a2d      	ldr	r2, [pc, #180]	; (80088d4 <xPortStartScheduler+0x134>)
 800881e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	b2db      	uxtb	r3, r3
 8008828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	d0ef      	beq.n	8008816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008836:	4b27      	ldr	r3, [pc, #156]	; (80088d4 <xPortStartScheduler+0x134>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1c3 0307 	rsb	r3, r3, #7
 800883e:	2b04      	cmp	r3, #4
 8008840:	d00a      	beq.n	8008858 <xPortStartScheduler+0xb8>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60bb      	str	r3, [r7, #8]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008858:	4b1e      	ldr	r3, [pc, #120]	; (80088d4 <xPortStartScheduler+0x134>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <xPortStartScheduler+0x134>)
 8008860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <xPortStartScheduler+0x134>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800886a:	4a1a      	ldr	r2, [pc, #104]	; (80088d4 <xPortStartScheduler+0x134>)
 800886c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	b2da      	uxtb	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008876:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <xPortStartScheduler+0x138>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <xPortStartScheduler+0x138>)
 800887c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <xPortStartScheduler+0x138>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a14      	ldr	r2, [pc, #80]	; (80088d8 <xPortStartScheduler+0x138>)
 8008888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800888c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800888e:	f000 f8dd 	bl	8008a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <xPortStartScheduler+0x13c>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008898:	f000 f8fc 	bl	8008a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800889c:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <xPortStartScheduler+0x140>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a0f      	ldr	r2, [pc, #60]	; (80088e0 <xPortStartScheduler+0x140>)
 80088a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80088a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088a8:	f7ff ff66 	bl	8008778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088ac:	f7ff f848 	bl	8007940 <vTaskSwitchContext>
	prvTaskExitError();
 80088b0:	f7ff ff1e 	bl	80086f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	e000ed00 	.word	0xe000ed00
 80088c4:	410fc271 	.word	0x410fc271
 80088c8:	410fc270 	.word	0x410fc270
 80088cc:	e000e400 	.word	0xe000e400
 80088d0:	200011d8 	.word	0x200011d8
 80088d4:	200011dc 	.word	0x200011dc
 80088d8:	e000ed20 	.word	0xe000ed20
 80088dc:	20000094 	.word	0x20000094
 80088e0:	e000ef34 	.word	0xe000ef34

080088e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	607b      	str	r3, [r7, #4]
}
 80088fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088fe:	4b0f      	ldr	r3, [pc, #60]	; (800893c <vPortEnterCritical+0x58>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	4a0d      	ldr	r2, [pc, #52]	; (800893c <vPortEnterCritical+0x58>)
 8008906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008908:	4b0c      	ldr	r3, [pc, #48]	; (800893c <vPortEnterCritical+0x58>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d10f      	bne.n	8008930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <vPortEnterCritical+0x5c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <vPortEnterCritical+0x4c>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	603b      	str	r3, [r7, #0]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <vPortEnterCritical+0x4a>
	}
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	20000094 	.word	0x20000094
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <vPortExitCritical+0x50>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <vPortExitCritical+0x24>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	607b      	str	r3, [r7, #4]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <vPortExitCritical+0x50>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3b01      	subs	r3, #1
 800896e:	4a09      	ldr	r2, [pc, #36]	; (8008994 <vPortExitCritical+0x50>)
 8008970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008972:	4b08      	ldr	r3, [pc, #32]	; (8008994 <vPortExitCritical+0x50>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <vPortExitCritical+0x42>
 800897a:	2300      	movs	r3, #0
 800897c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	f383 8811 	msr	BASEPRI, r3
}
 8008984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000094 	.word	0x20000094
	...

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f01e 0f10 	tst.w	lr, #16
 80089b0:	bf08      	it	eq
 80089b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089c4:	f380 8811 	msr	BASEPRI, r0
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f7fe ffb6 	bl	8007940 <vTaskSwitchContext>
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	f380 8811 	msr	BASEPRI, r0
 80089dc:	bc09      	pop	{r0, r3}
 80089de:	6819      	ldr	r1, [r3, #0]
 80089e0:	6808      	ldr	r0, [r1, #0]
 80089e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e6:	f01e 0f10 	tst.w	lr, #16
 80089ea:	bf08      	it	eq
 80089ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089f0:	f380 8809 	msr	PSP, r0
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst>:
 8008a00:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a22:	f7fe fed3 	bl	80077cc <xTaskIncrementTick>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <xPortSysTickHandler+0x40>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f383 8811 	msr	BASEPRI, r3
}
 8008a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a56:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <vPortSetupTimerInterrupt+0x38>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <vPortSetupTimerInterrupt+0x3c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <vPortSetupTimerInterrupt+0x40>)
 8008a62:	fba2 2303 	umull	r2, r3, r2, r3
 8008a66:	099b      	lsrs	r3, r3, #6
 8008a68:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <vPortSetupTimerInterrupt+0x44>)
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a6e:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a70:	2207      	movs	r2, #7
 8008a72:	601a      	str	r2, [r3, #0]
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	e000e010 	.word	0xe000e010
 8008a84:	e000e018 	.word	0xe000e018
 8008a88:	20000088 	.word	0x20000088
 8008a8c:	10624dd3 	.word	0x10624dd3
 8008a90:	e000e014 	.word	0xe000e014

08008a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008aa4 <vPortEnableVFP+0x10>
 8008a98:	6801      	ldr	r1, [r0, #0]
 8008a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a9e:	6001      	str	r1, [r0, #0]
 8008aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa2:	bf00      	nop
 8008aa4:	e000ed88 	.word	0xe000ed88

08008aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008aae:	f3ef 8305 	mrs	r3, IPSR
 8008ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b0f      	cmp	r3, #15
 8008ab8:	d914      	bls.n	8008ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aba:	4a17      	ldr	r2, [pc, #92]	; (8008b18 <vPortValidateInterruptPriority+0x70>)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ac4:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <vPortValidateInterruptPriority+0x74>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	7afa      	ldrb	r2, [r7, #11]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d20a      	bcs.n	8008ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	607b      	str	r3, [r7, #4]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <vPortValidateInterruptPriority+0x78>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008aec:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <vPortValidateInterruptPriority+0x7c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d90a      	bls.n	8008b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	603b      	str	r3, [r7, #0]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <vPortValidateInterruptPriority+0x60>
	}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	e000e3f0 	.word	0xe000e3f0
 8008b1c:	200011d8 	.word	0x200011d8
 8008b20:	e000ed0c 	.word	0xe000ed0c
 8008b24:	200011dc 	.word	0x200011dc

08008b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	; 0x28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b34:	f7fe fd8e 	bl	8007654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b38:	4b5b      	ldr	r3, [pc, #364]	; (8008ca8 <pvPortMalloc+0x180>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b40:	f000 f920 	bl	8008d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b44:	4b59      	ldr	r3, [pc, #356]	; (8008cac <pvPortMalloc+0x184>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f040 8093 	bne.w	8008c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01d      	beq.n	8008b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b58:	2208      	movs	r2, #8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d014      	beq.n	8008b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	3308      	adds	r3, #8
 8008b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <pvPortMalloc+0x6c>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	617b      	str	r3, [r7, #20]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d06e      	beq.n	8008c78 <pvPortMalloc+0x150>
 8008b9a:	4b45      	ldr	r3, [pc, #276]	; (8008cb0 <pvPortMalloc+0x188>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d869      	bhi.n	8008c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ba4:	4b43      	ldr	r3, [pc, #268]	; (8008cb4 <pvPortMalloc+0x18c>)
 8008ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ba8:	4b42      	ldr	r3, [pc, #264]	; (8008cb4 <pvPortMalloc+0x18c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bae:	e004      	b.n	8008bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d903      	bls.n	8008bcc <pvPortMalloc+0xa4>
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f1      	bne.n	8008bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bcc:	4b36      	ldr	r3, [pc, #216]	; (8008ca8 <pvPortMalloc+0x180>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d050      	beq.n	8008c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2208      	movs	r2, #8
 8008bdc:	4413      	add	r3, r2
 8008bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	1ad2      	subs	r2, r2, r3
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d91f      	bls.n	8008c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <pvPortMalloc+0xf8>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	613b      	str	r3, [r7, #16]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	1ad2      	subs	r2, r2, r3
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c32:	69b8      	ldr	r0, [r7, #24]
 8008c34:	f000 f908 	bl	8008e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c38:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <pvPortMalloc+0x188>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <pvPortMalloc+0x188>)
 8008c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c46:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <pvPortMalloc+0x188>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <pvPortMalloc+0x190>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d203      	bcs.n	8008c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c52:	4b17      	ldr	r3, [pc, #92]	; (8008cb0 <pvPortMalloc+0x188>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <pvPortMalloc+0x190>)
 8008c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	4b13      	ldr	r3, [pc, #76]	; (8008cac <pvPortMalloc+0x184>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c6e:	4b13      	ldr	r3, [pc, #76]	; (8008cbc <pvPortMalloc+0x194>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3301      	adds	r3, #1
 8008c74:	4a11      	ldr	r2, [pc, #68]	; (8008cbc <pvPortMalloc+0x194>)
 8008c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c78:	f7fe fcfa 	bl	8007670 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <pvPortMalloc+0x174>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	60fb      	str	r3, [r7, #12]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <pvPortMalloc+0x172>
	return pvReturn;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3728      	adds	r7, #40	; 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20004de8 	.word	0x20004de8
 8008cac:	20004dfc 	.word	0x20004dfc
 8008cb0:	20004dec 	.word	0x20004dec
 8008cb4:	20004de0 	.word	0x20004de0
 8008cb8:	20004df0 	.word	0x20004df0
 8008cbc:	20004df4 	.word	0x20004df4

08008cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d04d      	beq.n	8008d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	425b      	negs	r3, r3
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4413      	add	r3, r2
 8008cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	4b24      	ldr	r3, [pc, #144]	; (8008d78 <vPortFree+0xb8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <vPortFree+0x44>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	60fb      	str	r3, [r7, #12]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <vPortFree+0x62>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60bb      	str	r3, [r7, #8]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	4b14      	ldr	r3, [pc, #80]	; (8008d78 <vPortFree+0xb8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01e      	beq.n	8008d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d11a      	bne.n	8008d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <vPortFree+0xb8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	43db      	mvns	r3, r3
 8008d42:	401a      	ands	r2, r3
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d48:	f7fe fc84 	bl	8007654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <vPortFree+0xbc>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4413      	add	r3, r2
 8008d56:	4a09      	ldr	r2, [pc, #36]	; (8008d7c <vPortFree+0xbc>)
 8008d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d5a:	6938      	ldr	r0, [r7, #16]
 8008d5c:	f000 f874 	bl	8008e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <vPortFree+0xc0>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3301      	adds	r3, #1
 8008d66:	4a06      	ldr	r2, [pc, #24]	; (8008d80 <vPortFree+0xc0>)
 8008d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d6a:	f7fe fc81 	bl	8007670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d6e:	bf00      	nop
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20004dfc 	.word	0x20004dfc
 8008d7c:	20004dec 	.word	0x20004dec
 8008d80:	20004df8 	.word	0x20004df8

08008d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d90:	4b27      	ldr	r3, [pc, #156]	; (8008e30 <prvHeapInit+0xac>)
 8008d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f003 0307 	and.w	r3, r3, #7
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00c      	beq.n	8008db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3307      	adds	r3, #7
 8008da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	4a1f      	ldr	r2, [pc, #124]	; (8008e30 <prvHeapInit+0xac>)
 8008db4:	4413      	add	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <prvHeapInit+0xb0>)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <prvHeapInit+0xb0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0307 	bic.w	r3, r3, #7
 8008dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <prvHeapInit+0xb4>)
 8008de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <prvHeapInit+0xb4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <prvHeapInit+0xb4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvHeapInit+0xb4>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	4a0a      	ldr	r2, [pc, #40]	; (8008e3c <prvHeapInit+0xb8>)
 8008e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a09      	ldr	r2, [pc, #36]	; (8008e40 <prvHeapInit+0xbc>)
 8008e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <prvHeapInit+0xc0>)
 8008e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e22:	601a      	str	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	200011e0 	.word	0x200011e0
 8008e34:	20004de0 	.word	0x20004de0
 8008e38:	20004de8 	.word	0x20004de8
 8008e3c:	20004df0 	.word	0x20004df0
 8008e40:	20004dec 	.word	0x20004dec
 8008e44:	20004dfc 	.word	0x20004dfc

08008e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <prvInsertBlockIntoFreeList+0xac>)
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e002      	b.n	8008e5c <prvInsertBlockIntoFreeList+0x14>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d8f7      	bhi.n	8008e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	4413      	add	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d108      	bne.n	8008e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d118      	bne.n	8008ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d00d      	beq.n	8008ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	441a      	add	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e008      	b.n	8008ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e003      	b.n	8008ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d002      	beq.n	8008ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20004de0 	.word	0x20004de0
 8008ef8:	20004de8 	.word	0x20004de8

08008efc <__errno>:
 8008efc:	4b01      	ldr	r3, [pc, #4]	; (8008f04 <__errno+0x8>)
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20000098 	.word	0x20000098

08008f08 <__libc_init_array>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	4d0d      	ldr	r5, [pc, #52]	; (8008f40 <__libc_init_array+0x38>)
 8008f0c:	4c0d      	ldr	r4, [pc, #52]	; (8008f44 <__libc_init_array+0x3c>)
 8008f0e:	1b64      	subs	r4, r4, r5
 8008f10:	10a4      	asrs	r4, r4, #2
 8008f12:	2600      	movs	r6, #0
 8008f14:	42a6      	cmp	r6, r4
 8008f16:	d109      	bne.n	8008f2c <__libc_init_array+0x24>
 8008f18:	4d0b      	ldr	r5, [pc, #44]	; (8008f48 <__libc_init_array+0x40>)
 8008f1a:	4c0c      	ldr	r4, [pc, #48]	; (8008f4c <__libc_init_array+0x44>)
 8008f1c:	f000 fd08 	bl	8009930 <_init>
 8008f20:	1b64      	subs	r4, r4, r5
 8008f22:	10a4      	asrs	r4, r4, #2
 8008f24:	2600      	movs	r6, #0
 8008f26:	42a6      	cmp	r6, r4
 8008f28:	d105      	bne.n	8008f36 <__libc_init_array+0x2e>
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f30:	4798      	blx	r3
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7ee      	b.n	8008f14 <__libc_init_array+0xc>
 8008f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3a:	4798      	blx	r3
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	e7f2      	b.n	8008f26 <__libc_init_array+0x1e>
 8008f40:	0800bcc8 	.word	0x0800bcc8
 8008f44:	0800bcc8 	.word	0x0800bcc8
 8008f48:	0800bcc8 	.word	0x0800bcc8
 8008f4c:	0800bccc 	.word	0x0800bccc

08008f50 <__retarget_lock_acquire_recursive>:
 8008f50:	4770      	bx	lr

08008f52 <__retarget_lock_release_recursive>:
 8008f52:	4770      	bx	lr

08008f54 <malloc>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <malloc+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 b88d 	b.w	8009078 <_malloc_r>
 8008f5e:	bf00      	nop
 8008f60:	20000098 	.word	0x20000098

08008f64 <free>:
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <free+0xc>)
 8008f66:	4601      	mov	r1, r0
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	f000 b819 	b.w	8008fa0 <_free_r>
 8008f6e:	bf00      	nop
 8008f70:	20000098 	.word	0x20000098

08008f74 <memcpy>:
 8008f74:	440a      	add	r2, r1
 8008f76:	4291      	cmp	r1, r2
 8008f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f7c:	d100      	bne.n	8008f80 <memcpy+0xc>
 8008f7e:	4770      	bx	lr
 8008f80:	b510      	push	{r4, lr}
 8008f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f8a:	4291      	cmp	r1, r2
 8008f8c:	d1f9      	bne.n	8008f82 <memcpy+0xe>
 8008f8e:	bd10      	pop	{r4, pc}

08008f90 <memset>:
 8008f90:	4402      	add	r2, r0
 8008f92:	4603      	mov	r3, r0
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d100      	bne.n	8008f9a <memset+0xa>
 8008f98:	4770      	bx	lr
 8008f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9e:	e7f9      	b.n	8008f94 <memset+0x4>

08008fa0 <_free_r>:
 8008fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fa2:	2900      	cmp	r1, #0
 8008fa4:	d044      	beq.n	8009030 <_free_r+0x90>
 8008fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008faa:	9001      	str	r0, [sp, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f1a1 0404 	sub.w	r4, r1, #4
 8008fb2:	bfb8      	it	lt
 8008fb4:	18e4      	addlt	r4, r4, r3
 8008fb6:	f000 f96d 	bl	8009294 <__malloc_lock>
 8008fba:	4a1e      	ldr	r2, [pc, #120]	; (8009034 <_free_r+0x94>)
 8008fbc:	9801      	ldr	r0, [sp, #4]
 8008fbe:	6813      	ldr	r3, [r2, #0]
 8008fc0:	b933      	cbnz	r3, 8008fd0 <_free_r+0x30>
 8008fc2:	6063      	str	r3, [r4, #4]
 8008fc4:	6014      	str	r4, [r2, #0]
 8008fc6:	b003      	add	sp, #12
 8008fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fcc:	f000 b968 	b.w	80092a0 <__malloc_unlock>
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	d908      	bls.n	8008fe6 <_free_r+0x46>
 8008fd4:	6825      	ldr	r5, [r4, #0]
 8008fd6:	1961      	adds	r1, r4, r5
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf01      	itttt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	1949      	addeq	r1, r1, r5
 8008fe2:	6021      	streq	r1, [r4, #0]
 8008fe4:	e7ed      	b.n	8008fc2 <_free_r+0x22>
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	b10b      	cbz	r3, 8008ff0 <_free_r+0x50>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d9fa      	bls.n	8008fe6 <_free_r+0x46>
 8008ff0:	6811      	ldr	r1, [r2, #0]
 8008ff2:	1855      	adds	r5, r2, r1
 8008ff4:	42a5      	cmp	r5, r4
 8008ff6:	d10b      	bne.n	8009010 <_free_r+0x70>
 8008ff8:	6824      	ldr	r4, [r4, #0]
 8008ffa:	4421      	add	r1, r4
 8008ffc:	1854      	adds	r4, r2, r1
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	6011      	str	r1, [r2, #0]
 8009002:	d1e0      	bne.n	8008fc6 <_free_r+0x26>
 8009004:	681c      	ldr	r4, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	6053      	str	r3, [r2, #4]
 800900a:	4421      	add	r1, r4
 800900c:	6011      	str	r1, [r2, #0]
 800900e:	e7da      	b.n	8008fc6 <_free_r+0x26>
 8009010:	d902      	bls.n	8009018 <_free_r+0x78>
 8009012:	230c      	movs	r3, #12
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	e7d6      	b.n	8008fc6 <_free_r+0x26>
 8009018:	6825      	ldr	r5, [r4, #0]
 800901a:	1961      	adds	r1, r4, r5
 800901c:	428b      	cmp	r3, r1
 800901e:	bf04      	itt	eq
 8009020:	6819      	ldreq	r1, [r3, #0]
 8009022:	685b      	ldreq	r3, [r3, #4]
 8009024:	6063      	str	r3, [r4, #4]
 8009026:	bf04      	itt	eq
 8009028:	1949      	addeq	r1, r1, r5
 800902a:	6021      	streq	r1, [r4, #0]
 800902c:	6054      	str	r4, [r2, #4]
 800902e:	e7ca      	b.n	8008fc6 <_free_r+0x26>
 8009030:	b003      	add	sp, #12
 8009032:	bd30      	pop	{r4, r5, pc}
 8009034:	20004e04 	.word	0x20004e04

08009038 <sbrk_aligned>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	4e0e      	ldr	r6, [pc, #56]	; (8009074 <sbrk_aligned+0x3c>)
 800903c:	460c      	mov	r4, r1
 800903e:	6831      	ldr	r1, [r6, #0]
 8009040:	4605      	mov	r5, r0
 8009042:	b911      	cbnz	r1, 800904a <sbrk_aligned+0x12>
 8009044:	f000 f8f6 	bl	8009234 <_sbrk_r>
 8009048:	6030      	str	r0, [r6, #0]
 800904a:	4621      	mov	r1, r4
 800904c:	4628      	mov	r0, r5
 800904e:	f000 f8f1 	bl	8009234 <_sbrk_r>
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	d00a      	beq.n	800906c <sbrk_aligned+0x34>
 8009056:	1cc4      	adds	r4, r0, #3
 8009058:	f024 0403 	bic.w	r4, r4, #3
 800905c:	42a0      	cmp	r0, r4
 800905e:	d007      	beq.n	8009070 <sbrk_aligned+0x38>
 8009060:	1a21      	subs	r1, r4, r0
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f8e6 	bl	8009234 <_sbrk_r>
 8009068:	3001      	adds	r0, #1
 800906a:	d101      	bne.n	8009070 <sbrk_aligned+0x38>
 800906c:	f04f 34ff 	mov.w	r4, #4294967295
 8009070:	4620      	mov	r0, r4
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	20004e08 	.word	0x20004e08

08009078 <_malloc_r>:
 8009078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	1ccd      	adds	r5, r1, #3
 800907e:	f025 0503 	bic.w	r5, r5, #3
 8009082:	3508      	adds	r5, #8
 8009084:	2d0c      	cmp	r5, #12
 8009086:	bf38      	it	cc
 8009088:	250c      	movcc	r5, #12
 800908a:	2d00      	cmp	r5, #0
 800908c:	4607      	mov	r7, r0
 800908e:	db01      	blt.n	8009094 <_malloc_r+0x1c>
 8009090:	42a9      	cmp	r1, r5
 8009092:	d905      	bls.n	80090a0 <_malloc_r+0x28>
 8009094:	230c      	movs	r3, #12
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	2600      	movs	r6, #0
 800909a:	4630      	mov	r0, r6
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	4e2e      	ldr	r6, [pc, #184]	; (800915c <_malloc_r+0xe4>)
 80090a2:	f000 f8f7 	bl	8009294 <__malloc_lock>
 80090a6:	6833      	ldr	r3, [r6, #0]
 80090a8:	461c      	mov	r4, r3
 80090aa:	bb34      	cbnz	r4, 80090fa <_malloc_r+0x82>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4638      	mov	r0, r7
 80090b0:	f7ff ffc2 	bl	8009038 <sbrk_aligned>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	4604      	mov	r4, r0
 80090b8:	d14d      	bne.n	8009156 <_malloc_r+0xde>
 80090ba:	6834      	ldr	r4, [r6, #0]
 80090bc:	4626      	mov	r6, r4
 80090be:	2e00      	cmp	r6, #0
 80090c0:	d140      	bne.n	8009144 <_malloc_r+0xcc>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	4631      	mov	r1, r6
 80090c6:	4638      	mov	r0, r7
 80090c8:	eb04 0803 	add.w	r8, r4, r3
 80090cc:	f000 f8b2 	bl	8009234 <_sbrk_r>
 80090d0:	4580      	cmp	r8, r0
 80090d2:	d13a      	bne.n	800914a <_malloc_r+0xd2>
 80090d4:	6821      	ldr	r1, [r4, #0]
 80090d6:	3503      	adds	r5, #3
 80090d8:	1a6d      	subs	r5, r5, r1
 80090da:	f025 0503 	bic.w	r5, r5, #3
 80090de:	3508      	adds	r5, #8
 80090e0:	2d0c      	cmp	r5, #12
 80090e2:	bf38      	it	cc
 80090e4:	250c      	movcc	r5, #12
 80090e6:	4629      	mov	r1, r5
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff ffa5 	bl	8009038 <sbrk_aligned>
 80090ee:	3001      	adds	r0, #1
 80090f0:	d02b      	beq.n	800914a <_malloc_r+0xd2>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	442b      	add	r3, r5
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	e00e      	b.n	8009118 <_malloc_r+0xa0>
 80090fa:	6822      	ldr	r2, [r4, #0]
 80090fc:	1b52      	subs	r2, r2, r5
 80090fe:	d41e      	bmi.n	800913e <_malloc_r+0xc6>
 8009100:	2a0b      	cmp	r2, #11
 8009102:	d916      	bls.n	8009132 <_malloc_r+0xba>
 8009104:	1961      	adds	r1, r4, r5
 8009106:	42a3      	cmp	r3, r4
 8009108:	6025      	str	r5, [r4, #0]
 800910a:	bf18      	it	ne
 800910c:	6059      	strne	r1, [r3, #4]
 800910e:	6863      	ldr	r3, [r4, #4]
 8009110:	bf08      	it	eq
 8009112:	6031      	streq	r1, [r6, #0]
 8009114:	5162      	str	r2, [r4, r5]
 8009116:	604b      	str	r3, [r1, #4]
 8009118:	4638      	mov	r0, r7
 800911a:	f104 060b 	add.w	r6, r4, #11
 800911e:	f000 f8bf 	bl	80092a0 <__malloc_unlock>
 8009122:	f026 0607 	bic.w	r6, r6, #7
 8009126:	1d23      	adds	r3, r4, #4
 8009128:	1af2      	subs	r2, r6, r3
 800912a:	d0b6      	beq.n	800909a <_malloc_r+0x22>
 800912c:	1b9b      	subs	r3, r3, r6
 800912e:	50a3      	str	r3, [r4, r2]
 8009130:	e7b3      	b.n	800909a <_malloc_r+0x22>
 8009132:	6862      	ldr	r2, [r4, #4]
 8009134:	42a3      	cmp	r3, r4
 8009136:	bf0c      	ite	eq
 8009138:	6032      	streq	r2, [r6, #0]
 800913a:	605a      	strne	r2, [r3, #4]
 800913c:	e7ec      	b.n	8009118 <_malloc_r+0xa0>
 800913e:	4623      	mov	r3, r4
 8009140:	6864      	ldr	r4, [r4, #4]
 8009142:	e7b2      	b.n	80090aa <_malloc_r+0x32>
 8009144:	4634      	mov	r4, r6
 8009146:	6876      	ldr	r6, [r6, #4]
 8009148:	e7b9      	b.n	80090be <_malloc_r+0x46>
 800914a:	230c      	movs	r3, #12
 800914c:	603b      	str	r3, [r7, #0]
 800914e:	4638      	mov	r0, r7
 8009150:	f000 f8a6 	bl	80092a0 <__malloc_unlock>
 8009154:	e7a1      	b.n	800909a <_malloc_r+0x22>
 8009156:	6025      	str	r5, [r4, #0]
 8009158:	e7de      	b.n	8009118 <_malloc_r+0xa0>
 800915a:	bf00      	nop
 800915c:	20004e04 	.word	0x20004e04

08009160 <cleanup_glue>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	460c      	mov	r4, r1
 8009164:	6809      	ldr	r1, [r1, #0]
 8009166:	4605      	mov	r5, r0
 8009168:	b109      	cbz	r1, 800916e <cleanup_glue+0xe>
 800916a:	f7ff fff9 	bl	8009160 <cleanup_glue>
 800916e:	4621      	mov	r1, r4
 8009170:	4628      	mov	r0, r5
 8009172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009176:	f7ff bf13 	b.w	8008fa0 <_free_r>
	...

0800917c <_reclaim_reent>:
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <_reclaim_reent+0xb4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4283      	cmp	r3, r0
 8009182:	b570      	push	{r4, r5, r6, lr}
 8009184:	4604      	mov	r4, r0
 8009186:	d051      	beq.n	800922c <_reclaim_reent+0xb0>
 8009188:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800918a:	b143      	cbz	r3, 800919e <_reclaim_reent+0x22>
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d14a      	bne.n	8009228 <_reclaim_reent+0xac>
 8009192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009194:	6819      	ldr	r1, [r3, #0]
 8009196:	b111      	cbz	r1, 800919e <_reclaim_reent+0x22>
 8009198:	4620      	mov	r0, r4
 800919a:	f7ff ff01 	bl	8008fa0 <_free_r>
 800919e:	6961      	ldr	r1, [r4, #20]
 80091a0:	b111      	cbz	r1, 80091a8 <_reclaim_reent+0x2c>
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fefc 	bl	8008fa0 <_free_r>
 80091a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091aa:	b111      	cbz	r1, 80091b2 <_reclaim_reent+0x36>
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7ff fef7 	bl	8008fa0 <_free_r>
 80091b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091b4:	b111      	cbz	r1, 80091bc <_reclaim_reent+0x40>
 80091b6:	4620      	mov	r0, r4
 80091b8:	f7ff fef2 	bl	8008fa0 <_free_r>
 80091bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091be:	b111      	cbz	r1, 80091c6 <_reclaim_reent+0x4a>
 80091c0:	4620      	mov	r0, r4
 80091c2:	f7ff feed 	bl	8008fa0 <_free_r>
 80091c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091c8:	b111      	cbz	r1, 80091d0 <_reclaim_reent+0x54>
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7ff fee8 	bl	8008fa0 <_free_r>
 80091d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80091d2:	b111      	cbz	r1, 80091da <_reclaim_reent+0x5e>
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7ff fee3 	bl	8008fa0 <_free_r>
 80091da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80091dc:	b111      	cbz	r1, 80091e4 <_reclaim_reent+0x68>
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff fede 	bl	8008fa0 <_free_r>
 80091e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e6:	b111      	cbz	r1, 80091ee <_reclaim_reent+0x72>
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7ff fed9 	bl	8008fa0 <_free_r>
 80091ee:	69a3      	ldr	r3, [r4, #24]
 80091f0:	b1e3      	cbz	r3, 800922c <_reclaim_reent+0xb0>
 80091f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091f4:	4620      	mov	r0, r4
 80091f6:	4798      	blx	r3
 80091f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80091fa:	b1b9      	cbz	r1, 800922c <_reclaim_reent+0xb0>
 80091fc:	4620      	mov	r0, r4
 80091fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009202:	f7ff bfad 	b.w	8009160 <cleanup_glue>
 8009206:	5949      	ldr	r1, [r1, r5]
 8009208:	b941      	cbnz	r1, 800921c <_reclaim_reent+0xa0>
 800920a:	3504      	adds	r5, #4
 800920c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800920e:	2d80      	cmp	r5, #128	; 0x80
 8009210:	68d9      	ldr	r1, [r3, #12]
 8009212:	d1f8      	bne.n	8009206 <_reclaim_reent+0x8a>
 8009214:	4620      	mov	r0, r4
 8009216:	f7ff fec3 	bl	8008fa0 <_free_r>
 800921a:	e7ba      	b.n	8009192 <_reclaim_reent+0x16>
 800921c:	680e      	ldr	r6, [r1, #0]
 800921e:	4620      	mov	r0, r4
 8009220:	f7ff febe 	bl	8008fa0 <_free_r>
 8009224:	4631      	mov	r1, r6
 8009226:	e7ef      	b.n	8009208 <_reclaim_reent+0x8c>
 8009228:	2500      	movs	r5, #0
 800922a:	e7ef      	b.n	800920c <_reclaim_reent+0x90>
 800922c:	bd70      	pop	{r4, r5, r6, pc}
 800922e:	bf00      	nop
 8009230:	20000098 	.word	0x20000098

08009234 <_sbrk_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_sbrk_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f8 fdf0 	bl	8001e24 <_sbrk>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_sbrk_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_sbrk_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20004e0c 	.word	0x20004e0c

08009254 <siprintf>:
 8009254:	b40e      	push	{r1, r2, r3}
 8009256:	b500      	push	{lr}
 8009258:	b09c      	sub	sp, #112	; 0x70
 800925a:	ab1d      	add	r3, sp, #116	; 0x74
 800925c:	9002      	str	r0, [sp, #8]
 800925e:	9006      	str	r0, [sp, #24]
 8009260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009264:	4809      	ldr	r0, [pc, #36]	; (800928c <siprintf+0x38>)
 8009266:	9107      	str	r1, [sp, #28]
 8009268:	9104      	str	r1, [sp, #16]
 800926a:	4909      	ldr	r1, [pc, #36]	; (8009290 <siprintf+0x3c>)
 800926c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009270:	9105      	str	r1, [sp, #20]
 8009272:	6800      	ldr	r0, [r0, #0]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	a902      	add	r1, sp, #8
 8009278:	f000 f874 	bl	8009364 <_svfiprintf_r>
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	b01c      	add	sp, #112	; 0x70
 8009284:	f85d eb04 	ldr.w	lr, [sp], #4
 8009288:	b003      	add	sp, #12
 800928a:	4770      	bx	lr
 800928c:	20000098 	.word	0x20000098
 8009290:	ffff0208 	.word	0xffff0208

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f7ff be5b 	b.w	8008f50 <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	20004e00 	.word	0x20004e00

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f7ff be56 	b.w	8008f52 <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	20004e00 	.word	0x20004e00

080092ac <__ssputs_r>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	688e      	ldr	r6, [r1, #8]
 80092b2:	429e      	cmp	r6, r3
 80092b4:	4682      	mov	sl, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4690      	mov	r8, r2
 80092ba:	461f      	mov	r7, r3
 80092bc:	d838      	bhi.n	8009330 <__ssputs_r+0x84>
 80092be:	898a      	ldrh	r2, [r1, #12]
 80092c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c4:	d032      	beq.n	800932c <__ssputs_r+0x80>
 80092c6:	6825      	ldr	r5, [r4, #0]
 80092c8:	6909      	ldr	r1, [r1, #16]
 80092ca:	eba5 0901 	sub.w	r9, r5, r1
 80092ce:	6965      	ldr	r5, [r4, #20]
 80092d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092d8:	3301      	adds	r3, #1
 80092da:	444b      	add	r3, r9
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf38      	it	cc
 80092e2:	461d      	movcc	r5, r3
 80092e4:	0553      	lsls	r3, r2, #21
 80092e6:	d531      	bpl.n	800934c <__ssputs_r+0xa0>
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7ff fec5 	bl	8009078 <_malloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	b950      	cbnz	r0, 8009308 <__ssputs_r+0x5c>
 80092f2:	230c      	movs	r3, #12
 80092f4:	f8ca 3000 	str.w	r3, [sl]
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	6921      	ldr	r1, [r4, #16]
 800930a:	464a      	mov	r2, r9
 800930c:	f7ff fe32 	bl	8008f74 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	6165      	str	r5, [r4, #20]
 8009320:	444e      	add	r6, r9
 8009322:	eba5 0509 	sub.w	r5, r5, r9
 8009326:	6026      	str	r6, [r4, #0]
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	463e      	mov	r6, r7
 800932c:	42be      	cmp	r6, r7
 800932e:	d900      	bls.n	8009332 <__ssputs_r+0x86>
 8009330:	463e      	mov	r6, r7
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	4632      	mov	r2, r6
 8009336:	4641      	mov	r1, r8
 8009338:	f000 faa8 	bl	800988c <memmove>
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	1b9b      	subs	r3, r3, r6
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	4433      	add	r3, r6
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	2000      	movs	r0, #0
 800934a:	e7db      	b.n	8009304 <__ssputs_r+0x58>
 800934c:	462a      	mov	r2, r5
 800934e:	f000 fab7 	bl	80098c0 <_realloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	2800      	cmp	r0, #0
 8009356:	d1e1      	bne.n	800931c <__ssputs_r+0x70>
 8009358:	6921      	ldr	r1, [r4, #16]
 800935a:	4650      	mov	r0, sl
 800935c:	f7ff fe20 	bl	8008fa0 <_free_r>
 8009360:	e7c7      	b.n	80092f2 <__ssputs_r+0x46>
	...

08009364 <_svfiprintf_r>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4698      	mov	r8, r3
 800936a:	898b      	ldrh	r3, [r1, #12]
 800936c:	061b      	lsls	r3, r3, #24
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4607      	mov	r7, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4614      	mov	r4, r2
 8009376:	d50e      	bpl.n	8009396 <_svfiprintf_r+0x32>
 8009378:	690b      	ldr	r3, [r1, #16]
 800937a:	b963      	cbnz	r3, 8009396 <_svfiprintf_r+0x32>
 800937c:	2140      	movs	r1, #64	; 0x40
 800937e:	f7ff fe7b 	bl	8009078 <_malloc_r>
 8009382:	6028      	str	r0, [r5, #0]
 8009384:	6128      	str	r0, [r5, #16]
 8009386:	b920      	cbnz	r0, 8009392 <_svfiprintf_r+0x2e>
 8009388:	230c      	movs	r3, #12
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e0d1      	b.n	8009536 <_svfiprintf_r+0x1d2>
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	616b      	str	r3, [r5, #20]
 8009396:	2300      	movs	r3, #0
 8009398:	9309      	str	r3, [sp, #36]	; 0x24
 800939a:	2320      	movs	r3, #32
 800939c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a4:	2330      	movs	r3, #48	; 0x30
 80093a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009550 <_svfiprintf_r+0x1ec>
 80093aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ae:	f04f 0901 	mov.w	r9, #1
 80093b2:	4623      	mov	r3, r4
 80093b4:	469a      	mov	sl, r3
 80093b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ba:	b10a      	cbz	r2, 80093c0 <_svfiprintf_r+0x5c>
 80093bc:	2a25      	cmp	r2, #37	; 0x25
 80093be:	d1f9      	bne.n	80093b4 <_svfiprintf_r+0x50>
 80093c0:	ebba 0b04 	subs.w	fp, sl, r4
 80093c4:	d00b      	beq.n	80093de <_svfiprintf_r+0x7a>
 80093c6:	465b      	mov	r3, fp
 80093c8:	4622      	mov	r2, r4
 80093ca:	4629      	mov	r1, r5
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ff6d 	bl	80092ac <__ssputs_r>
 80093d2:	3001      	adds	r0, #1
 80093d4:	f000 80aa 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093da:	445a      	add	r2, fp
 80093dc:	9209      	str	r2, [sp, #36]	; 0x24
 80093de:	f89a 3000 	ldrb.w	r3, [sl]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80a2 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093f2:	f10a 0a01 	add.w	sl, sl, #1
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009400:	4654      	mov	r4, sl
 8009402:	2205      	movs	r2, #5
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	4851      	ldr	r0, [pc, #324]	; (8009550 <_svfiprintf_r+0x1ec>)
 800940a:	f7f6 fee9 	bl	80001e0 <memchr>
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	b9d8      	cbnz	r0, 800944a <_svfiprintf_r+0xe6>
 8009412:	06d0      	lsls	r0, r2, #27
 8009414:	bf44      	itt	mi
 8009416:	2320      	movmi	r3, #32
 8009418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941c:	0711      	lsls	r1, r2, #28
 800941e:	bf44      	itt	mi
 8009420:	232b      	movmi	r3, #43	; 0x2b
 8009422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009426:	f89a 3000 	ldrb.w	r3, [sl]
 800942a:	2b2a      	cmp	r3, #42	; 0x2a
 800942c:	d015      	beq.n	800945a <_svfiprintf_r+0xf6>
 800942e:	9a07      	ldr	r2, [sp, #28]
 8009430:	4654      	mov	r4, sl
 8009432:	2000      	movs	r0, #0
 8009434:	f04f 0c0a 	mov.w	ip, #10
 8009438:	4621      	mov	r1, r4
 800943a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	2b09      	cmp	r3, #9
 8009442:	d94e      	bls.n	80094e2 <_svfiprintf_r+0x17e>
 8009444:	b1b0      	cbz	r0, 8009474 <_svfiprintf_r+0x110>
 8009446:	9207      	str	r2, [sp, #28]
 8009448:	e014      	b.n	8009474 <_svfiprintf_r+0x110>
 800944a:	eba0 0308 	sub.w	r3, r0, r8
 800944e:	fa09 f303 	lsl.w	r3, r9, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	46a2      	mov	sl, r4
 8009458:	e7d2      	b.n	8009400 <_svfiprintf_r+0x9c>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	9103      	str	r1, [sp, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	bfbb      	ittet	lt
 8009466:	425b      	neglt	r3, r3
 8009468:	f042 0202 	orrlt.w	r2, r2, #2
 800946c:	9307      	strge	r3, [sp, #28]
 800946e:	9307      	strlt	r3, [sp, #28]
 8009470:	bfb8      	it	lt
 8009472:	9204      	strlt	r2, [sp, #16]
 8009474:	7823      	ldrb	r3, [r4, #0]
 8009476:	2b2e      	cmp	r3, #46	; 0x2e
 8009478:	d10c      	bne.n	8009494 <_svfiprintf_r+0x130>
 800947a:	7863      	ldrb	r3, [r4, #1]
 800947c:	2b2a      	cmp	r3, #42	; 0x2a
 800947e:	d135      	bne.n	80094ec <_svfiprintf_r+0x188>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	9203      	str	r2, [sp, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfb8      	it	lt
 800948c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009490:	3402      	adds	r4, #2
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009560 <_svfiprintf_r+0x1fc>
 8009498:	7821      	ldrb	r1, [r4, #0]
 800949a:	2203      	movs	r2, #3
 800949c:	4650      	mov	r0, sl
 800949e:	f7f6 fe9f 	bl	80001e0 <memchr>
 80094a2:	b140      	cbz	r0, 80094b6 <_svfiprintf_r+0x152>
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	eba0 000a 	sub.w	r0, r0, sl
 80094aa:	fa03 f000 	lsl.w	r0, r3, r0
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	4303      	orrs	r3, r0
 80094b2:	3401      	adds	r4, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ba:	4826      	ldr	r0, [pc, #152]	; (8009554 <_svfiprintf_r+0x1f0>)
 80094bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094c0:	2206      	movs	r2, #6
 80094c2:	f7f6 fe8d 	bl	80001e0 <memchr>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d038      	beq.n	800953c <_svfiprintf_r+0x1d8>
 80094ca:	4b23      	ldr	r3, [pc, #140]	; (8009558 <_svfiprintf_r+0x1f4>)
 80094cc:	bb1b      	cbnz	r3, 8009516 <_svfiprintf_r+0x1b2>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	f023 0307 	bic.w	r3, r3, #7
 80094d6:	3308      	adds	r3, #8
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	4433      	add	r3, r6
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	e767      	b.n	80093b2 <_svfiprintf_r+0x4e>
 80094e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e6:	460c      	mov	r4, r1
 80094e8:	2001      	movs	r0, #1
 80094ea:	e7a5      	b.n	8009438 <_svfiprintf_r+0xd4>
 80094ec:	2300      	movs	r3, #0
 80094ee:	3401      	adds	r4, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	4619      	mov	r1, r3
 80094f4:	f04f 0c0a 	mov.w	ip, #10
 80094f8:	4620      	mov	r0, r4
 80094fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094fe:	3a30      	subs	r2, #48	; 0x30
 8009500:	2a09      	cmp	r2, #9
 8009502:	d903      	bls.n	800950c <_svfiprintf_r+0x1a8>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0c5      	beq.n	8009494 <_svfiprintf_r+0x130>
 8009508:	9105      	str	r1, [sp, #20]
 800950a:	e7c3      	b.n	8009494 <_svfiprintf_r+0x130>
 800950c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009510:	4604      	mov	r4, r0
 8009512:	2301      	movs	r3, #1
 8009514:	e7f0      	b.n	80094f8 <_svfiprintf_r+0x194>
 8009516:	ab03      	add	r3, sp, #12
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	462a      	mov	r2, r5
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <_svfiprintf_r+0x1f8>)
 800951e:	a904      	add	r1, sp, #16
 8009520:	4638      	mov	r0, r7
 8009522:	f3af 8000 	nop.w
 8009526:	1c42      	adds	r2, r0, #1
 8009528:	4606      	mov	r6, r0
 800952a:	d1d6      	bne.n	80094da <_svfiprintf_r+0x176>
 800952c:	89ab      	ldrh	r3, [r5, #12]
 800952e:	065b      	lsls	r3, r3, #25
 8009530:	f53f af2c 	bmi.w	800938c <_svfiprintf_r+0x28>
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	b01d      	add	sp, #116	; 0x74
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	462a      	mov	r2, r5
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <_svfiprintf_r+0x1f8>)
 8009544:	a904      	add	r1, sp, #16
 8009546:	4638      	mov	r0, r7
 8009548:	f000 f87a 	bl	8009640 <_printf_i>
 800954c:	e7eb      	b.n	8009526 <_svfiprintf_r+0x1c2>
 800954e:	bf00      	nop
 8009550:	0800bc8c 	.word	0x0800bc8c
 8009554:	0800bc96 	.word	0x0800bc96
 8009558:	00000000 	.word	0x00000000
 800955c:	080092ad 	.word	0x080092ad
 8009560:	0800bc92 	.word	0x0800bc92

08009564 <_printf_common>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	4616      	mov	r6, r2
 800956a:	4699      	mov	r9, r3
 800956c:	688a      	ldr	r2, [r1, #8]
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009574:	4293      	cmp	r3, r2
 8009576:	bfb8      	it	lt
 8009578:	4613      	movlt	r3, r2
 800957a:	6033      	str	r3, [r6, #0]
 800957c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009580:	4607      	mov	r7, r0
 8009582:	460c      	mov	r4, r1
 8009584:	b10a      	cbz	r2, 800958a <_printf_common+0x26>
 8009586:	3301      	adds	r3, #1
 8009588:	6033      	str	r3, [r6, #0]
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	0699      	lsls	r1, r3, #26
 800958e:	bf42      	ittt	mi
 8009590:	6833      	ldrmi	r3, [r6, #0]
 8009592:	3302      	addmi	r3, #2
 8009594:	6033      	strmi	r3, [r6, #0]
 8009596:	6825      	ldr	r5, [r4, #0]
 8009598:	f015 0506 	ands.w	r5, r5, #6
 800959c:	d106      	bne.n	80095ac <_printf_common+0x48>
 800959e:	f104 0a19 	add.w	sl, r4, #25
 80095a2:	68e3      	ldr	r3, [r4, #12]
 80095a4:	6832      	ldr	r2, [r6, #0]
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	dc26      	bgt.n	80095fa <_printf_common+0x96>
 80095ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b0:	1e13      	subs	r3, r2, #0
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	bf18      	it	ne
 80095b6:	2301      	movne	r3, #1
 80095b8:	0692      	lsls	r2, r2, #26
 80095ba:	d42b      	bmi.n	8009614 <_printf_common+0xb0>
 80095bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c0:	4649      	mov	r1, r9
 80095c2:	4638      	mov	r0, r7
 80095c4:	47c0      	blx	r8
 80095c6:	3001      	adds	r0, #1
 80095c8:	d01e      	beq.n	8009608 <_printf_common+0xa4>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	68e5      	ldr	r5, [r4, #12]
 80095ce:	6832      	ldr	r2, [r6, #0]
 80095d0:	f003 0306 	and.w	r3, r3, #6
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	bf08      	it	eq
 80095d8:	1aad      	subeq	r5, r5, r2
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	6922      	ldr	r2, [r4, #16]
 80095de:	bf0c      	ite	eq
 80095e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e4:	2500      	movne	r5, #0
 80095e6:	4293      	cmp	r3, r2
 80095e8:	bfc4      	itt	gt
 80095ea:	1a9b      	subgt	r3, r3, r2
 80095ec:	18ed      	addgt	r5, r5, r3
 80095ee:	2600      	movs	r6, #0
 80095f0:	341a      	adds	r4, #26
 80095f2:	42b5      	cmp	r5, r6
 80095f4:	d11a      	bne.n	800962c <_printf_common+0xc8>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e008      	b.n	800960c <_printf_common+0xa8>
 80095fa:	2301      	movs	r3, #1
 80095fc:	4652      	mov	r2, sl
 80095fe:	4649      	mov	r1, r9
 8009600:	4638      	mov	r0, r7
 8009602:	47c0      	blx	r8
 8009604:	3001      	adds	r0, #1
 8009606:	d103      	bne.n	8009610 <_printf_common+0xac>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009610:	3501      	adds	r5, #1
 8009612:	e7c6      	b.n	80095a2 <_printf_common+0x3e>
 8009614:	18e1      	adds	r1, r4, r3
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	2030      	movs	r0, #48	; 0x30
 800961a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800961e:	4422      	add	r2, r4
 8009620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009628:	3302      	adds	r3, #2
 800962a:	e7c7      	b.n	80095bc <_printf_common+0x58>
 800962c:	2301      	movs	r3, #1
 800962e:	4622      	mov	r2, r4
 8009630:	4649      	mov	r1, r9
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d0e6      	beq.n	8009608 <_printf_common+0xa4>
 800963a:	3601      	adds	r6, #1
 800963c:	e7d9      	b.n	80095f2 <_printf_common+0x8e>
	...

08009640 <_printf_i>:
 8009640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	7e0f      	ldrb	r7, [r1, #24]
 8009646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009648:	2f78      	cmp	r7, #120	; 0x78
 800964a:	4691      	mov	r9, r2
 800964c:	4680      	mov	r8, r0
 800964e:	460c      	mov	r4, r1
 8009650:	469a      	mov	sl, r3
 8009652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009656:	d807      	bhi.n	8009668 <_printf_i+0x28>
 8009658:	2f62      	cmp	r7, #98	; 0x62
 800965a:	d80a      	bhi.n	8009672 <_printf_i+0x32>
 800965c:	2f00      	cmp	r7, #0
 800965e:	f000 80d8 	beq.w	8009812 <_printf_i+0x1d2>
 8009662:	2f58      	cmp	r7, #88	; 0x58
 8009664:	f000 80a3 	beq.w	80097ae <_printf_i+0x16e>
 8009668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800966c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009670:	e03a      	b.n	80096e8 <_printf_i+0xa8>
 8009672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009676:	2b15      	cmp	r3, #21
 8009678:	d8f6      	bhi.n	8009668 <_printf_i+0x28>
 800967a:	a101      	add	r1, pc, #4	; (adr r1, 8009680 <_printf_i+0x40>)
 800967c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096ed 	.word	0x080096ed
 8009688:	08009669 	.word	0x08009669
 800968c:	08009669 	.word	0x08009669
 8009690:	08009669 	.word	0x08009669
 8009694:	08009669 	.word	0x08009669
 8009698:	080096ed 	.word	0x080096ed
 800969c:	08009669 	.word	0x08009669
 80096a0:	08009669 	.word	0x08009669
 80096a4:	08009669 	.word	0x08009669
 80096a8:	08009669 	.word	0x08009669
 80096ac:	080097f9 	.word	0x080097f9
 80096b0:	0800971d 	.word	0x0800971d
 80096b4:	080097db 	.word	0x080097db
 80096b8:	08009669 	.word	0x08009669
 80096bc:	08009669 	.word	0x08009669
 80096c0:	0800981b 	.word	0x0800981b
 80096c4:	08009669 	.word	0x08009669
 80096c8:	0800971d 	.word	0x0800971d
 80096cc:	08009669 	.word	0x08009669
 80096d0:	08009669 	.word	0x08009669
 80096d4:	080097e3 	.word	0x080097e3
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	602a      	str	r2, [r5, #0]
 80096e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096e8:	2301      	movs	r3, #1
 80096ea:	e0a3      	b.n	8009834 <_printf_i+0x1f4>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	6829      	ldr	r1, [r5, #0]
 80096f0:	0606      	lsls	r6, r0, #24
 80096f2:	f101 0304 	add.w	r3, r1, #4
 80096f6:	d50a      	bpl.n	800970e <_printf_i+0xce>
 80096f8:	680e      	ldr	r6, [r1, #0]
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	2e00      	cmp	r6, #0
 80096fe:	da03      	bge.n	8009708 <_printf_i+0xc8>
 8009700:	232d      	movs	r3, #45	; 0x2d
 8009702:	4276      	negs	r6, r6
 8009704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009708:	485e      	ldr	r0, [pc, #376]	; (8009884 <_printf_i+0x244>)
 800970a:	230a      	movs	r3, #10
 800970c:	e019      	b.n	8009742 <_printf_i+0x102>
 800970e:	680e      	ldr	r6, [r1, #0]
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009716:	bf18      	it	ne
 8009718:	b236      	sxthne	r6, r6
 800971a:	e7ef      	b.n	80096fc <_printf_i+0xbc>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	6820      	ldr	r0, [r4, #0]
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	6029      	str	r1, [r5, #0]
 8009724:	0601      	lsls	r1, r0, #24
 8009726:	d501      	bpl.n	800972c <_printf_i+0xec>
 8009728:	681e      	ldr	r6, [r3, #0]
 800972a:	e002      	b.n	8009732 <_printf_i+0xf2>
 800972c:	0646      	lsls	r6, r0, #25
 800972e:	d5fb      	bpl.n	8009728 <_printf_i+0xe8>
 8009730:	881e      	ldrh	r6, [r3, #0]
 8009732:	4854      	ldr	r0, [pc, #336]	; (8009884 <_printf_i+0x244>)
 8009734:	2f6f      	cmp	r7, #111	; 0x6f
 8009736:	bf0c      	ite	eq
 8009738:	2308      	moveq	r3, #8
 800973a:	230a      	movne	r3, #10
 800973c:	2100      	movs	r1, #0
 800973e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009742:	6865      	ldr	r5, [r4, #4]
 8009744:	60a5      	str	r5, [r4, #8]
 8009746:	2d00      	cmp	r5, #0
 8009748:	bfa2      	ittt	ge
 800974a:	6821      	ldrge	r1, [r4, #0]
 800974c:	f021 0104 	bicge.w	r1, r1, #4
 8009750:	6021      	strge	r1, [r4, #0]
 8009752:	b90e      	cbnz	r6, 8009758 <_printf_i+0x118>
 8009754:	2d00      	cmp	r5, #0
 8009756:	d04d      	beq.n	80097f4 <_printf_i+0x1b4>
 8009758:	4615      	mov	r5, r2
 800975a:	fbb6 f1f3 	udiv	r1, r6, r3
 800975e:	fb03 6711 	mls	r7, r3, r1, r6
 8009762:	5dc7      	ldrb	r7, [r0, r7]
 8009764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009768:	4637      	mov	r7, r6
 800976a:	42bb      	cmp	r3, r7
 800976c:	460e      	mov	r6, r1
 800976e:	d9f4      	bls.n	800975a <_printf_i+0x11a>
 8009770:	2b08      	cmp	r3, #8
 8009772:	d10b      	bne.n	800978c <_printf_i+0x14c>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	07de      	lsls	r6, r3, #31
 8009778:	d508      	bpl.n	800978c <_printf_i+0x14c>
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	6861      	ldr	r1, [r4, #4]
 800977e:	4299      	cmp	r1, r3
 8009780:	bfde      	ittt	le
 8009782:	2330      	movle	r3, #48	; 0x30
 8009784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800978c:	1b52      	subs	r2, r2, r5
 800978e:	6122      	str	r2, [r4, #16]
 8009790:	f8cd a000 	str.w	sl, [sp]
 8009794:	464b      	mov	r3, r9
 8009796:	aa03      	add	r2, sp, #12
 8009798:	4621      	mov	r1, r4
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fee2 	bl	8009564 <_printf_common>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d14c      	bne.n	800983e <_printf_i+0x1fe>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	b004      	add	sp, #16
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	4835      	ldr	r0, [pc, #212]	; (8009884 <_printf_i+0x244>)
 80097b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097b4:	6829      	ldr	r1, [r5, #0]
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097bc:	6029      	str	r1, [r5, #0]
 80097be:	061d      	lsls	r5, r3, #24
 80097c0:	d514      	bpl.n	80097ec <_printf_i+0x1ac>
 80097c2:	07df      	lsls	r7, r3, #31
 80097c4:	bf44      	itt	mi
 80097c6:	f043 0320 	orrmi.w	r3, r3, #32
 80097ca:	6023      	strmi	r3, [r4, #0]
 80097cc:	b91e      	cbnz	r6, 80097d6 <_printf_i+0x196>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	f023 0320 	bic.w	r3, r3, #32
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	2310      	movs	r3, #16
 80097d8:	e7b0      	b.n	800973c <_printf_i+0xfc>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	f043 0320 	orr.w	r3, r3, #32
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	2378      	movs	r3, #120	; 0x78
 80097e4:	4828      	ldr	r0, [pc, #160]	; (8009888 <_printf_i+0x248>)
 80097e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ea:	e7e3      	b.n	80097b4 <_printf_i+0x174>
 80097ec:	0659      	lsls	r1, r3, #25
 80097ee:	bf48      	it	mi
 80097f0:	b2b6      	uxthmi	r6, r6
 80097f2:	e7e6      	b.n	80097c2 <_printf_i+0x182>
 80097f4:	4615      	mov	r5, r2
 80097f6:	e7bb      	b.n	8009770 <_printf_i+0x130>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	6826      	ldr	r6, [r4, #0]
 80097fc:	6961      	ldr	r1, [r4, #20]
 80097fe:	1d18      	adds	r0, r3, #4
 8009800:	6028      	str	r0, [r5, #0]
 8009802:	0635      	lsls	r5, r6, #24
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	d501      	bpl.n	800980c <_printf_i+0x1cc>
 8009808:	6019      	str	r1, [r3, #0]
 800980a:	e002      	b.n	8009812 <_printf_i+0x1d2>
 800980c:	0670      	lsls	r0, r6, #25
 800980e:	d5fb      	bpl.n	8009808 <_printf_i+0x1c8>
 8009810:	8019      	strh	r1, [r3, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	4615      	mov	r5, r2
 8009818:	e7ba      	b.n	8009790 <_printf_i+0x150>
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	602a      	str	r2, [r5, #0]
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	2100      	movs	r1, #0
 8009826:	4628      	mov	r0, r5
 8009828:	f7f6 fcda 	bl	80001e0 <memchr>
 800982c:	b108      	cbz	r0, 8009832 <_printf_i+0x1f2>
 800982e:	1b40      	subs	r0, r0, r5
 8009830:	6060      	str	r0, [r4, #4]
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	2300      	movs	r3, #0
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983c:	e7a8      	b.n	8009790 <_printf_i+0x150>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	462a      	mov	r2, r5
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d0ab      	beq.n	80097a4 <_printf_i+0x164>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	079b      	lsls	r3, r3, #30
 8009850:	d413      	bmi.n	800987a <_printf_i+0x23a>
 8009852:	68e0      	ldr	r0, [r4, #12]
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	4298      	cmp	r0, r3
 8009858:	bfb8      	it	lt
 800985a:	4618      	movlt	r0, r3
 800985c:	e7a4      	b.n	80097a8 <_printf_i+0x168>
 800985e:	2301      	movs	r3, #1
 8009860:	4632      	mov	r2, r6
 8009862:	4649      	mov	r1, r9
 8009864:	4640      	mov	r0, r8
 8009866:	47d0      	blx	sl
 8009868:	3001      	adds	r0, #1
 800986a:	d09b      	beq.n	80097a4 <_printf_i+0x164>
 800986c:	3501      	adds	r5, #1
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	9903      	ldr	r1, [sp, #12]
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	42ab      	cmp	r3, r5
 8009876:	dcf2      	bgt.n	800985e <_printf_i+0x21e>
 8009878:	e7eb      	b.n	8009852 <_printf_i+0x212>
 800987a:	2500      	movs	r5, #0
 800987c:	f104 0619 	add.w	r6, r4, #25
 8009880:	e7f5      	b.n	800986e <_printf_i+0x22e>
 8009882:	bf00      	nop
 8009884:	0800bc9d 	.word	0x0800bc9d
 8009888:	0800bcae 	.word	0x0800bcae

0800988c <memmove>:
 800988c:	4288      	cmp	r0, r1
 800988e:	b510      	push	{r4, lr}
 8009890:	eb01 0402 	add.w	r4, r1, r2
 8009894:	d902      	bls.n	800989c <memmove+0x10>
 8009896:	4284      	cmp	r4, r0
 8009898:	4623      	mov	r3, r4
 800989a:	d807      	bhi.n	80098ac <memmove+0x20>
 800989c:	1e43      	subs	r3, r0, #1
 800989e:	42a1      	cmp	r1, r4
 80098a0:	d008      	beq.n	80098b4 <memmove+0x28>
 80098a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098aa:	e7f8      	b.n	800989e <memmove+0x12>
 80098ac:	4402      	add	r2, r0
 80098ae:	4601      	mov	r1, r0
 80098b0:	428a      	cmp	r2, r1
 80098b2:	d100      	bne.n	80098b6 <memmove+0x2a>
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098be:	e7f7      	b.n	80098b0 <memmove+0x24>

080098c0 <_realloc_r>:
 80098c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c4:	4680      	mov	r8, r0
 80098c6:	4614      	mov	r4, r2
 80098c8:	460e      	mov	r6, r1
 80098ca:	b921      	cbnz	r1, 80098d6 <_realloc_r+0x16>
 80098cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4611      	mov	r1, r2
 80098d2:	f7ff bbd1 	b.w	8009078 <_malloc_r>
 80098d6:	b92a      	cbnz	r2, 80098e4 <_realloc_r+0x24>
 80098d8:	f7ff fb62 	bl	8008fa0 <_free_r>
 80098dc:	4625      	mov	r5, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	f000 f81b 	bl	800991e <_malloc_usable_size_r>
 80098e8:	4284      	cmp	r4, r0
 80098ea:	4607      	mov	r7, r0
 80098ec:	d802      	bhi.n	80098f4 <_realloc_r+0x34>
 80098ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098f2:	d812      	bhi.n	800991a <_realloc_r+0x5a>
 80098f4:	4621      	mov	r1, r4
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7ff fbbe 	bl	8009078 <_malloc_r>
 80098fc:	4605      	mov	r5, r0
 80098fe:	2800      	cmp	r0, #0
 8009900:	d0ed      	beq.n	80098de <_realloc_r+0x1e>
 8009902:	42bc      	cmp	r4, r7
 8009904:	4622      	mov	r2, r4
 8009906:	4631      	mov	r1, r6
 8009908:	bf28      	it	cs
 800990a:	463a      	movcs	r2, r7
 800990c:	f7ff fb32 	bl	8008f74 <memcpy>
 8009910:	4631      	mov	r1, r6
 8009912:	4640      	mov	r0, r8
 8009914:	f7ff fb44 	bl	8008fa0 <_free_r>
 8009918:	e7e1      	b.n	80098de <_realloc_r+0x1e>
 800991a:	4635      	mov	r5, r6
 800991c:	e7df      	b.n	80098de <_realloc_r+0x1e>

0800991e <_malloc_usable_size_r>:
 800991e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009922:	1f18      	subs	r0, r3, #4
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfbc      	itt	lt
 8009928:	580b      	ldrlt	r3, [r1, r0]
 800992a:	18c0      	addlt	r0, r0, r3
 800992c:	4770      	bx	lr
	...

08009930 <_init>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr

0800993c <_fini>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

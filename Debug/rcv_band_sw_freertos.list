
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026a8  08011a5c  08011a5c  00021a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014104  08014104  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014104  08014104  00024104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801410c  0801410c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801410c  0801410c  0002410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014110  08014110  00024110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014114  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069f0  200001f0  08014304  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20006be0  08014304  00036be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1e8  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ebe  00000000  00000000  0005d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e0  00000000  00000000  000642c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c8  00000000  00000000  000666a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a30  00000000  00000000  00068770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032edd  00000000  00000000  0008a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b248c  00000000  00000000  000bd07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a08  00000000  00000000  0016f55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011a44 	.word	0x08011a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08011a44 	.word	0x08011a44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000b96:	f006 f8c5 	bl	8006d24 <HAL_RCC_GetPCLK2Freq>
 8000b9a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <ARGB_Init+0xd8>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <ARGB_Init+0x1c>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <ARGB_Init+0x1e>
 8000bac:	2302      	movs	r3, #2
 8000bae:	461a      	mov	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <ARGB_Init+0xdc>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <ARGB_Init+0xe0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <ARGB_Init+0xe0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2201      	movs	r2, #1
 8000be2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fdb7 	bl	8000758 <__aeabi_ui2d>
 8000bea:	a31b      	add	r3, pc, #108	; (adr r3, 8000c58 <ARGB_Init+0xc8>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fb46 	bl	8000280 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fe26 	bl	800084c <__aeabi_d2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <ARGB_Init+0xe4>)
 8000c0a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fda3 	bl	8000758 <__aeabi_ui2d>
 8000c12:	a313      	add	r3, pc, #76	; (adr r3, 8000c60 <ARGB_Init+0xd0>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fb32 	bl	8000280 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fe12 	bl	800084c <__aeabi_d2uiz>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <ARGB_Init+0xe8>)
 8000c32:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <ARGB_Init+0xec>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <ARGB_Init+0xe0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2108      	movs	r1, #8
 8000c42:	4618      	mov	r0, r3
 8000c44:	f009 f846 	bl	8009cd4 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f002 f94d 	bl	8002ee8 <HAL_Delay>
    return ARGB_OK;
 8000c4e:	2302      	movs	r3, #2
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	3fe1eb85 	.word	0x3fe1eb85
 8000c60:	1eb851ec 	.word	0x1eb851ec
 8000c64:	3fd1eb85 	.word	0x3fd1eb85
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	014f8b59 	.word	0x014f8b59
 8000c70:	20000508 	.word	0x20000508
 8000c74:	2000020c 	.word	0x2000020c
 8000c78:	2000020d 	.word	0x2000020d
 8000c7c:	200002d6 	.word	0x200002d6

08000c80 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f885 	bl	8000d98 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c8e:	2302      	movs	r3, #2
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <ARGB_SetBrightness>:
/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetBrightness(u8_t br) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <ARGB_SetBrightness+0x20>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	7013      	strb	r3, [r2, #0]
    return ARGB_OK;
 8000ca4:	2302      	movs	r3, #2
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	4603      	mov	r3, r0
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	713b      	strb	r3, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000ce0:	88fa      	ldrh	r2, [r7, #6]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <ARGB_SetRGB+0xd8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf8:	797a      	ldrb	r2, [r7, #5]
 8000cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfe:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <ARGB_SetRGB+0xd8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d10:	793a      	ldrb	r2, [r7, #4]
 8000d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d16:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <ARGB_SetRGB+0xd8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2e:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d30:	793b      	ldrb	r3, [r7, #4]
 8000d32:	21b0      	movs	r1, #176	; 0xb0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f9cb 	bl	80010d0 <scale8>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	21f0      	movs	r1, #240	; 0xf0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f9c4 	bl	80010d0 <scale8>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d4c:	793b      	ldrb	r3, [r7, #4]
 8000d4e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <ARGB_SetRGB+0xdc>)
 8000d62:	7b7a      	ldrb	r2, [r7, #13]
 8000d64:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4908      	ldr	r1, [pc, #32]	; (8000d94 <ARGB_SetRGB+0xdc>)
 8000d72:	7b3a      	ldrb	r2, [r7, #12]
 8000d74:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	4904      	ldr	r1, [pc, #16]	; (8000d94 <ARGB_SetRGB+0xdc>)
 8000d82:	7afa      	ldrb	r2, [r7, #11]
 8000d84:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d86:	2302      	movs	r3, #2
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000210 	.word	0x20000210

08000d98 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	460b      	mov	r3, r1
 8000da4:	71bb      	strb	r3, [r7, #6]
 8000da6:	4613      	mov	r3, r2
 8000da8:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	81fb      	strh	r3, [r7, #14]
 8000dae:	e00b      	b.n	8000dc8 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	b298      	uxth	r0, r3
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	79ba      	ldrb	r2, [r7, #6]
 8000db8:	79f9      	ldrb	r1, [r7, #7]
 8000dba:	f7ff ff7d 	bl	8000cb8 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	81fb      	strh	r3, [r7, #14]
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0ef      	beq.n	8000db0 <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000dd0:	2302      	movs	r3, #2
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000de2:	4b9d      	ldr	r3, [pc, #628]	; (8001058 <ARGB_Show+0x27c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000de8:	4b9c      	ldr	r3, [pc, #624]	; (800105c <ARGB_Show+0x280>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <ARGB_Show+0x22>
 8000df2:	4b9b      	ldr	r3, [pc, #620]	; (8001060 <ARGB_Show+0x284>)
 8000df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d001      	beq.n	8000e02 <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e15e      	b.n	80010c0 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	e0a6      	b.n	8000f56 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e08:	4b96      	ldr	r3, [pc, #600]	; (8001064 <ARGB_Show+0x288>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dd04      	ble.n	8000e2a <ARGB_Show+0x4e>
 8000e20:	4b91      	ldr	r3, [pc, #580]	; (8001068 <ARGB_Show+0x28c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	e003      	b.n	8000e32 <ARGB_Show+0x56>
 8000e2a:	4b90      	ldr	r3, [pc, #576]	; (800106c <ARGB_Show+0x290>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	4b8d      	ldr	r3, [pc, #564]	; (8001070 <ARGB_Show+0x294>)
 8000e3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e3e:	4b89      	ldr	r3, [pc, #548]	; (8001064 <ARGB_Show+0x288>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd04      	ble.n	8000e60 <ARGB_Show+0x84>
 8000e56:	4b84      	ldr	r3, [pc, #528]	; (8001068 <ARGB_Show+0x28c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	e003      	b.n	8000e68 <ARGB_Show+0x8c>
 8000e60:	4b82      	ldr	r3, [pc, #520]	; (800106c <ARGB_Show+0x290>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	4a80      	ldr	r2, [pc, #512]	; (8001070 <ARGB_Show+0x294>)
 8000e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e74:	4b7b      	ldr	r3, [pc, #492]	; (8001064 <ARGB_Show+0x288>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dd04      	ble.n	8000e96 <ARGB_Show+0xba>
 8000e8c:	4b76      	ldr	r3, [pc, #472]	; (8001068 <ARGB_Show+0x28c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	e003      	b.n	8000e9e <ARGB_Show+0xc2>
 8000e96:	4b75      	ldr	r3, [pc, #468]	; (800106c <ARGB_Show+0x290>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3310      	adds	r3, #16
 8000ea4:	4a72      	ldr	r2, [pc, #456]	; (8001070 <ARGB_Show+0x294>)
 8000ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <ARGB_Show+0x288>)
 8000eac:	78db      	ldrb	r3, [r3, #3]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dd04      	ble.n	8000ecc <ARGB_Show+0xf0>
 8000ec2:	4b69      	ldr	r3, [pc, #420]	; (8001068 <ARGB_Show+0x28c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	e003      	b.n	8000ed4 <ARGB_Show+0xf8>
 8000ecc:	4b67      	ldr	r3, [pc, #412]	; (800106c <ARGB_Show+0x290>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3318      	adds	r3, #24
 8000eda:	4a65      	ldr	r2, [pc, #404]	; (8001070 <ARGB_Show+0x294>)
 8000edc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ee0:	4b60      	ldr	r3, [pc, #384]	; (8001064 <ARGB_Show+0x288>)
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dd04      	ble.n	8000f02 <ARGB_Show+0x126>
 8000ef8:	4b5b      	ldr	r3, [pc, #364]	; (8001068 <ARGB_Show+0x28c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	e003      	b.n	8000f0a <ARGB_Show+0x12e>
 8000f02:	4b5a      	ldr	r3, [pc, #360]	; (800106c <ARGB_Show+0x290>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4619      	mov	r1, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	3320      	adds	r3, #32
 8000f10:	4a57      	ldr	r2, [pc, #348]	; (8001070 <ARGB_Show+0x294>)
 8000f12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <ARGB_Show+0x288>)
 8000f18:	795b      	ldrb	r3, [r3, #5]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dd04      	ble.n	8000f38 <ARGB_Show+0x15c>
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <ARGB_Show+0x28c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	e003      	b.n	8000f40 <ARGB_Show+0x164>
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <ARGB_Show+0x290>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3328      	adds	r3, #40	; 0x28
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <ARGB_Show+0x294>)
 8000f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	f67f af54 	bls.w	8000e08 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f64:	e0a4      	b.n	80010b0 <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <ARGB_Show+0x298>)
 8000f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d102      	bne.n	8000f78 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f76:	e09b      	b.n	80010b0 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <ARGB_Show+0x298>)
 8000f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d11d      	bne.n	8000fc0 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <ARGB_Show+0x298>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <ARGB_Show+0x298>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	4a39      	ldr	r2, [pc, #228]	; (8001078 <ARGB_Show+0x29c>)
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <ARGB_Show+0x298>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	4a38      	ldr	r2, [pc, #224]	; (800107c <ARGB_Show+0x2a0>)
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <ARGB_Show+0x298>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4a37      	ldr	r2, [pc, #220]	; (8001080 <ARGB_Show+0x2a4>)
 8000fa2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <ARGB_Show+0x298>)
 8000fa6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fa8:	4931      	ldr	r1, [pc, #196]	; (8001070 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <ARGB_Show+0x298>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2330      	movs	r3, #48	; 0x30
 8000fb4:	f002 fef0 	bl	8003d98 <HAL_DMA_Start_IT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <ARGB_Show+0x1f0>
 8000fbe:	e002      	b.n	8000fc6 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fc4:	e074      	b.n	80010b0 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fca:	e071      	b.n	80010b0 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <ARGB_Show+0x298>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <ARGB_Show+0x298>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fda:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <ARGB_Show+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <ARGB_Show+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d107      	bne.n	8000ff6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <ARGB_Show+0x298>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ff4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <ARGB_Show+0x2a8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d018      	beq.n	8001032 <ARGB_Show+0x256>
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <ARGB_Show+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d013      	beq.n	8001032 <ARGB_Show+0x256>
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <ARGB_Show+0x298>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <ARGB_Show+0x2ac>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00e      	beq.n	8001032 <ARGB_Show+0x256>
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <ARGB_Show+0x298>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <ARGB_Show+0x2b0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d009      	beq.n	8001032 <ARGB_Show+0x256>
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <ARGB_Show+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <ARGB_Show+0x2b4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d004      	beq.n	8001032 <ARGB_Show+0x256>
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <ARGB_Show+0x298>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <ARGB_Show+0x2b8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d132      	bne.n	8001098 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <ARGB_Show+0x298>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b06      	cmp	r3, #6
 8001042:	d032      	beq.n	80010aa <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <ARGB_Show+0x298>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <ARGB_Show+0x298>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001054:	e029      	b.n	80010aa <ARGB_Show+0x2ce>
 8001056:	bf00      	nop
 8001058:	200002d6 	.word	0x200002d6
 800105c:	200002d4 	.word	0x200002d4
 8001060:	20000550 	.word	0x20000550
 8001064:	20000210 	.word	0x20000210
 8001068:	2000020c 	.word	0x2000020c
 800106c:	2000020d 	.word	0x2000020d
 8001070:	20000214 	.word	0x20000214
 8001074:	20000508 	.word	0x20000508
 8001078:	080010f9 	.word	0x080010f9
 800107c:	08001379 	.word	0x08001379
 8001080:	080095e1 	.word	0x080095e1
 8001084:	40010000 	.word	0x40010000
 8001088:	40000400 	.word	0x40000400
 800108c:	40000800 	.word	0x40000800
 8001090:	40000c00 	.word	0x40000c00
 8001094:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <ARGB_Show+0x2ec>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <ARGB_Show+0x2ec>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e000      	b.n	80010ac <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010aa:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f af57 	bne.w	8000f66 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <ARGB_Show+0x2f0>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010be:	2302      	movs	r3, #2
    }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000508 	.word	0x20000508
 80010cc:	200002d4 	.word	0x200002d4

080010d0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	79ba      	ldrb	r2, [r7, #6]
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b2db      	uxtb	r3, r3
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001104:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d10b      	bne.n	8001128 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2201      	movs	r2, #1
 8001114:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d136      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001126:	e031      	b.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d10b      	bne.n	800114a <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2202      	movs	r2, #2
 8001136:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d125      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001148:	e020      	b.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d10b      	bne.n	800116c <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2204      	movs	r2, #4
 8001158:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d114      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800116a:	e00f      	b.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d10a      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2208      	movs	r2, #8
 800117a:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800118c:	4b72      	ldr	r3, [pc, #456]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d17b      	bne.n	800128e <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	72fb      	strb	r3, [r7, #11]
 800119a:	e06c      	b.n	8001276 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	4a6c      	ldr	r2, [pc, #432]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dd04      	ble.n	80011cc <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4619      	mov	r1, r3
 80011ca:	e003      	b.n	80011d4 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011cc:	4b65      	ldr	r3, [pc, #404]	; (8001364 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3318      	adds	r3, #24
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011e0:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a5a      	ldr	r2, [pc, #360]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	dd04      	ble.n	8001212 <ARGB_TIM_DMADelayPulseCplt+0x11a>
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	e003      	b.n	800121a <ARGB_TIM_DMADelayPulseCplt+0x122>
 8001212:	4b54      	ldr	r3, [pc, #336]	; (8001364 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4619      	mov	r1, r3
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	3320      	adds	r3, #32
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	3302      	adds	r3, #2
 8001236:	4a49      	ldr	r2, [pc, #292]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	2b00      	cmp	r3, #0
 800124c:	dd04      	ble.n	8001258 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	e003      	b.n	8001260 <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3328      	adds	r3, #40	; 0x28
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	72fb      	strb	r3, [r7, #11]
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b07      	cmp	r3, #7
 800127c:	d98e      	bls.n	800119c <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3301      	adds	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e05d      	b.n	800134a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d80c      	bhi.n	80012b2 <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 8001298:	2260      	movs	r2, #96	; 0x60
 800129a:	2100      	movs	r1, #0
 800129c:	4833      	ldr	r0, [pc, #204]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x274>)
 800129e:	f00f ff01 	bl	80110a4 <memset>
        BUF_COUNTER++;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	e04b      	b.n	800134a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fdc9 	bl	8003e64 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d117      	bne.n	800130c <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10f      	bne.n	800130c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	f240 4344 	movw	r3, #1092	; 0x444
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800130a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a1a      	ldr	r2, [r3, #32]
 8001312:	f241 1311 	movw	r3, #4369	; 0x1111
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	f240 4344 	movw	r3, #1092	; 0x444
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	771a      	strb	r2, [r3, #28]
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200002d4 	.word	0x200002d4
 800135c:	20000210 	.word	0x20000210
 8001360:	2000020c 	.word	0x2000020c
 8001364:	2000020d 	.word	0x2000020d
 8001368:	20000214 	.word	0x20000214
 800136c:	20000274 	.word	0x20000274
 8001370:	40010000 	.word	0x40010000
 8001374:	200002d6 	.word	0x200002d6

08001378 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001384:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 800138a:	4293      	cmp	r3, r2
 800138c:	f040 8098 	bne.w	80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 8093 	bne.w	80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d17b      	bne.n	800149c <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	72fb      	strb	r3, [r7, #11]
 80013a8:	e06c      	b.n	8001484 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd04      	ble.n	80013da <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	e003      	b.n	80013e2 <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	7afb      	ldrb	r3, [r7, #11]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	2b00      	cmp	r3, #0
 8001414:	dd04      	ble.n	8001420 <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	e003      	b.n	8001428 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3308      	adds	r3, #8
 800142e:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	3302      	adds	r3, #2
 8001444:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd04      	ble.n	8001466 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	e003      	b.n	800146e <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3310      	adds	r3, #16
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800147a:	7afb      	ldrb	r3, [r7, #11]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	72fb      	strb	r3, [r7, #11]
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b07      	cmp	r3, #7
 800148a:	d98e      	bls.n	80013aa <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	e012      	b.n	80014c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d80d      	bhi.n	80014c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 80014a6:	2260      	movs	r2, #96	; 0x60
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014ac:	f00f fdfa 	bl	80110a4 <memset>
        BUF_COUNTER++;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	e000      	b.n	80014c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014c0:	bf00      	nop
    }
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000550 	.word	0x20000550
 80014cc:	20000508 	.word	0x20000508
 80014d0:	200002d4 	.word	0x200002d4
 80014d4:	20000210 	.word	0x20000210
 80014d8:	2000020c 	.word	0x2000020c
 80014dc:	2000020d 	.word	0x2000020d
 80014e0:	20000214 	.word	0x20000214

080014e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_ADC1_Init+0x98>)
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <MX_ADC1_Init+0x9c>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_ADC1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_ADC1_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_ADC1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_ADC1_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_ADC1_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_ADC1_Init+0x98>)
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <MX_ADC1_Init+0xa0>)
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_ADC1_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_ADC1_Init+0x98>)
 8001530:	2201      	movs	r2, #1
 8001532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_ADC1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_ADC1_Init+0x98>)
 800153e:	2201      	movs	r2, #1
 8001540:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_ADC1_Init+0x98>)
 8001544:	f001 fcf4 	bl	8002f30 <HAL_ADC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800154e:	f000 fc87 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001552:	2309      	movs	r3, #9
 8001554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0x98>)
 8001564:	f001 fe42 	bl	80031ec <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800156e:	f000 fc77 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002d8 	.word	0x200002d8
 8001580:	40012000 	.word	0x40012000
 8001584:	0f000001 	.word	0x0f000001

08001588 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_ADC_MspInit+0x7c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d127      	bne.n	80015fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015e2:	2302      	movs	r3, #2
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e6:	2303      	movs	r3, #3
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_ADC_MspInit+0x84>)
 80015f6:	f002 fec1 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40012000 	.word	0x40012000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400

08001610 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 8001618:	2304      	movs	r3, #4
 800161a:	3301      	adds	r3, #1
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d07d      	beq.n	800171e <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 8001622:	f640 0341 	movw	r3, #2113	; 0x841
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2350      	movs	r3, #80	; 0x50
 800162a:	22a0      	movs	r2, #160	; 0xa0
 800162c:	2100      	movs	r1, #0
 800162e:	2000      	movs	r0, #0
 8001630:	f000 ff5e 	bl	80024f0 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,65,160,15,ST7735_COLOR565(50, 50, 50));
 8001634:	f243 1386 	movw	r3, #12678	; 0x3186
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	230f      	movs	r3, #15
 800163c:	22a0      	movs	r2, #160	; 0xa0
 800163e:	2141      	movs	r1, #65	; 0x41
 8001640:	2000      	movs	r0, #0
 8001642:	f000 ff55 	bl	80024f0 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8001646:	f243 1386 	movw	r3, #12678	; 0x3186
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	231a      	movs	r3, #26
 800164e:	22a0      	movs	r2, #160	; 0xa0
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f000 ff4c 	bl	80024f0 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 1, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8001658:	4933      	ldr	r1, [pc, #204]	; (8001728 <displayBand+0x118>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	4b30      	ldr	r3, [pc, #192]	; (800172c <displayBand+0x11c>)
 800166a:	f243 1286 	movw	r2, #12678	; 0x3186
 800166e:	9202      	str	r2, [sp, #8]
 8001670:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001674:	9201      	str	r2, [sp, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	9200      	str	r2, [sp, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	460a      	mov	r2, r1
 800167e:	2101      	movs	r1, #1
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fe78 	bl	8002376 <ST7735_WriteString>
        //ST7735_WriteString(5, 26, "BAND", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
        // Band Frequencies Wide
       	//ST7735_WriteString(5, 26, "    ", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
       	sprintf(buff, "W:%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8001686:	4928      	ldr	r1, [pc, #160]	; (8001728 <displayBand+0x118>)
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3304      	adds	r3, #4
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	4823      	ldr	r0, [pc, #140]	; (8001728 <displayBand+0x118>)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4403      	add	r3, r0
 80016a6:	3308      	adds	r3, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	460a      	mov	r2, r1
 80016ac:	4920      	ldr	r1, [pc, #128]	; (8001730 <displayBand+0x120>)
 80016ae:	4821      	ldr	r0, [pc, #132]	; (8001734 <displayBand+0x124>)
 80016b0:	f00f fe5a 	bl	8011368 <siprintf>
       	ST7735_WriteString(0, 26, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <displayBand+0x128>)
 80016b6:	f640 0241 	movw	r2, #2113	; 0x841
 80016ba:	9202      	str	r2, [sp, #8]
 80016bc:	f244 52df 	movw	r2, #17887	; 0x45df
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <displayBand+0x124>)
 80016ca:	211a      	movs	r1, #26
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fe52 	bl	8002376 <ST7735_WriteString>
       	sprintf(buff, "N:%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 80016d2:	4915      	ldr	r1, [pc, #84]	; (8001728 <displayBand+0x118>)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	330c      	adds	r3, #12
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <displayBand+0x118>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4403      	add	r3, r0
 80016f2:	3310      	adds	r3, #16
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	460a      	mov	r2, r1
 80016f8:	4910      	ldr	r1, [pc, #64]	; (800173c <displayBand+0x12c>)
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <displayBand+0x124>)
 80016fc:	f00f fe34 	bl	8011368 <siprintf>
       	ST7735_WriteString(0, 45, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <displayBand+0x128>)
 8001702:	f640 0241 	movw	r2, #2113	; 0x841
 8001706:	9202      	str	r2, [sp, #8]
 8001708:	f244 52df 	movw	r2, #17887	; 0x45df
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <displayBand+0x124>)
 8001716:	212d      	movs	r1, #45	; 0x2d
 8001718:	2000      	movs	r0, #0
 800171a:	f000 fe2c 	bl	8002376 <ST7735_WriteString>
    }

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000004 	.word	0x20000004
 800172c:	20000084 	.word	0x20000084
 8001730:	08011ad4 	.word	0x08011ad4
 8001734:	20000320 	.word	0x20000320
 8001738:	2000007c 	.word	0x2000007c
 800173c:	08011ae0 	.word	0x08011ae0

08001740 <setBand>:

void setBand(int band_index)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af04      	add	r7, sp, #16
 8001746:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks + START_RESISTANCE_KOM;
 8001748:	4912      	ldr	r1, [pc, #72]	; (8001794 <setBand+0x54>)
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3314      	adds	r3, #20
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3339      	adds	r3, #57	; 0x39
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <setBand+0x58>)
 800175e:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <setBand+0x58>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <setBand+0x5c>)
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <setBand+0x60>)
 800176a:	f00f fdfd 	bl	8011368 <siprintf>
	ST7735_WriteString(0, 62, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <setBand+0x64>)
 8001770:	f243 1286 	movw	r2, #12678	; 0x3186
 8001774:	9202      	str	r2, [sp, #8]
 8001776:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <setBand+0x60>)
 8001784:	213e      	movs	r1, #62	; 0x3e
 8001786:	2000      	movs	r0, #0
 8001788:	f000 fdf5 	bl	8002376 <ST7735_WriteString>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000004 	.word	0x20000004
 8001798:	20000334 	.word	0x20000334
 800179c:	08011aec 	.word	0x08011aec
 80017a0:	20000320 	.word	0x20000320
 80017a4:	2000007c 	.word	0x2000007c

080017a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_CRC_Init+0x20>)
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <MX_CRC_Init+0x24>)
 80017b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_CRC_Init+0x20>)
 80017b4:	f002 f8ac 	bl	8003910 <HAL_CRC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017be:	f000 fb4f 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000338 	.word	0x20000338
 80017cc:	40023000 	.word	0x40023000

080017d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_CRC_MspInit+0x3c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10d      	bne.n	80017fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_CRC_MspInit+0x40>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_CRC_MspInit+0x40>)
 80017ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_CRC_MspInit+0x40>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023000 	.word	0x40023000
 8001810:	40023800 	.word	0x40023800

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <MX_DMA_Init+0x3c>)
 8001824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_DMA_Init+0x3c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2105      	movs	r1, #5
 800183a:	202f      	movs	r0, #47	; 0x2f
 800183c:	f002 f824 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001840:	202f      	movs	r0, #47	; 0x2f
 8001842:	f002 f84d 	bl	80038e0 <HAL_NVIC_EnableIRQ>

}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <MX_FREERTOS_Init+0x58>)
 800185a:	2102      	movs	r1, #2
 800185c:	2010      	movs	r0, #16
 800185e:	f00c f882 	bl	800d966 <osMessageQueueNew>
 8001862:	4603      	mov	r3, r0
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <MX_FREERTOS_Init+0x5c>)
 8001866:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_FREERTOS_Init+0x60>)
 800186a:	2102      	movs	r1, #2
 800186c:	2010      	movs	r0, #16
 800186e:	f00c f87a 	bl	800d966 <osMessageQueueNew>
 8001872:	4603      	mov	r3, r0
 8001874:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <MX_FREERTOS_Init+0x64>)
 8001876:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001878:	4a10      	ldr	r2, [pc, #64]	; (80018bc <MX_FREERTOS_Init+0x68>)
 800187a:	2100      	movs	r1, #0
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <MX_FREERTOS_Init+0x6c>)
 800187e:	f00b ffc5 	bl	800d80c <osThreadNew>
 8001882:	4603      	mov	r3, r0
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <MX_FREERTOS_Init+0x70>)
 8001886:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <MX_FREERTOS_Init+0x74>)
 800188a:	2100      	movs	r1, #0
 800188c:	480f      	ldr	r0, [pc, #60]	; (80018cc <MX_FREERTOS_Init+0x78>)
 800188e:	f00b ffbd 	bl	800d80c <osThreadNew>
 8001892:	4603      	mov	r3, r0
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <MX_FREERTOS_Init+0x7c>)
 8001896:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <MX_FREERTOS_Init+0x80>)
 800189a:	2100      	movs	r1, #0
 800189c:	480e      	ldr	r0, [pc, #56]	; (80018d8 <MX_FREERTOS_Init+0x84>)
 800189e:	f00b ffb5 	bl	800d80c <osThreadNew>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <MX_FREERTOS_Init+0x88>)
 80018a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08013fa8 	.word	0x08013fa8
 80018b0:	2000034c 	.word	0x2000034c
 80018b4:	08013fc0 	.word	0x08013fc0
 80018b8:	20000350 	.word	0x20000350
 80018bc:	08013f3c 	.word	0x08013f3c
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	20000340 	.word	0x20000340
 80018c8:	08013f60 	.word	0x08013f60
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	20000344 	.word	0x20000344
 80018d4:	08013f84 	.word	0x08013f84
 80018d8:	080019b1 	.word	0x080019b1
 80018dc:	20000348 	.word	0x20000348

080018e0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018e8:	f00e fea8 	bl	801063c <MX_USB_DEVICE_Init>
	/* Infinite loop */

	for (;;) {

		  // Some delay
		  osDelay(100);
 80018ec:	2064      	movs	r0, #100	; 0x64
 80018ee:	f00c f81f 	bl	800d930 <osDelay>
 80018f2:	e7fb      	b.n	80018ec <StartDefaultTask+0xc>

080018f4 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	int32_t counter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
	int16_t button = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	817b      	strh	r3, [r7, #10]
	int32_t last_counter = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
	int16_t max_index = 5;
 8001908:	2305      	movs	r3, #5
 800190a:	827b      	strh	r3, [r7, #18]
	ST7735_FillScreenFast(ST7735_BLACK);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 fe84 	bl	800261a <ST7735_FillScreenFast>
	displayBand(last_counter);
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff fe7c 	bl	8001610 <displayBand>
	for (;;) {
		//Encoder Rotate
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <StartDisplayTask+0xb4>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	f107 010c 	add.w	r1, r7, #12
 8001920:	2300      	movs	r3, #0
 8001922:	2200      	movs	r2, #0
 8001924:	f00c f8f2 	bl	800db0c <osMessageQueueGet>
		if(counter == 2) {
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d116      	bne.n	800195c <StartDisplayTask+0x68>
			if(last_counter != max_index -1)
 800192e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001932:	3b01      	subs	r3, #1
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	429a      	cmp	r2, r3
 8001938:	d005      	beq.n	8001946 <StartDisplayTask+0x52>
			{
				last_counter += 1;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
				counter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e003      	b.n	800194e <StartDisplayTask+0x5a>
			} else
			{
				last_counter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
				counter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff fe5e 	bl	8001610 <displayBand>
			setBand(last_counter);
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7ff fef3 	bl	8001740 <setBand>
 800195a:	e017      	b.n	800198c <StartDisplayTask+0x98>
		}else if (counter == 1){
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d114      	bne.n	800198c <StartDisplayTask+0x98>
			if(last_counter != 0)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <StartDisplayTask+0x80>
			{
				last_counter -= 1;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3b01      	subs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
				counter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e005      	b.n	8001980 <StartDisplayTask+0x8c>
			} else
			{
				last_counter = max_index -1;
 8001974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001978:	3b01      	subs	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
				counter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 8001980:	6978      	ldr	r0, [r7, #20]
 8001982:	f7ff fe45 	bl	8001610 <displayBand>
			setBand(last_counter);
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff feda 	bl	8001740 <setBand>
		}else
		{

		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <StartDisplayTask+0xb8>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f107 010a 	add.w	r1, r7, #10
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	f00c f8b8 	bl	800db0c <osMessageQueueGet>
		if (button)
		{

		}
		osDelay(1000);
 800199c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a0:	f00b ffc6 	bl	800d930 <osDelay>
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 80019a4:	e7b8      	b.n	8001918 <StartDisplayTask+0x24>
 80019a6:	bf00      	nop
 80019a8:	2000034c 	.word	0x2000034c
 80019ac:	20000350 	.word	0x20000350

080019b0 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <StartEncoderTask+0xac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	0fda      	lsrs	r2, r3, #31
 80019d8:	4413      	add	r3, r2
 80019da:	105b      	asrs	r3, r3, #1
 80019dc:	425b      	negs	r3, r3
 80019de:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80019e2:	337f      	adds	r3, #127	; 0x7f
 80019e4:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d01e      	beq.n	8001a2c <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd0a      	ble.n	8001a0c <StartEncoderTask+0x5c>
				counter = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <StartEncoderTask+0xb0>)
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	f107 0110 	add.w	r1, r7, #16
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	f00c f821 	bl	800da4c <osMessageQueuePut>
 8001a0a:	e00d      	b.n	8001a28 <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter){
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	da09      	bge.n	8001a28 <StartEncoderTask+0x78>
				counter = 2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <StartEncoderTask+0xb0>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	f107 0110 	add.w	r1, r7, #16
 8001a20:	2300      	movs	r3, #0
 8001a22:	2200      	movs	r2, #0
 8001a24:	f00c f812 	bl	800da4c <osMessageQueuePut>
			}
			else
			{

			}
			prevCounter = currCounter;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8001a2c:	7efb      	ldrb	r3, [r7, #27]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <StartEncoderTask+0xb4>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 8001a38:	7efb      	ldrb	r3, [r7, #27]
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <StartEncoderTask+0xb4>)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <StartEncoderTask+0xb8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f107 010f 	add.w	r1, r7, #15
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f00b fffe 	bl	800da4c <osMessageQueuePut>
		}
		osDelay(500);
 8001a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a54:	f00b ff6c 	bl	800d930 <osDelay>
	for (;;) {
 8001a58:	e7b6      	b.n	80019c8 <StartEncoderTask+0x18>
 8001a5a:	bf00      	nop
 8001a5c:	200004c0 	.word	0x200004c0
 8001a60:	2000034c 	.word	0x2000034c
 8001a64:	20000468 	.word	0x20000468
 8001a68:	20000350 	.word	0x20000350

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	211c      	movs	r1, #28
 8001af6:	4820      	ldr	r0, [pc, #128]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001af8:	f002 feda 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b02:	481e      	ldr	r0, [pc, #120]	; (8001b7c <MX_GPIO_Init+0x110>)
 8001b04:	f002 fed4 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4816      	ldr	r0, [pc, #88]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001b1e:	f002 fc2d 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001b22:	231c      	movs	r3, #28
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480f      	ldr	r0, [pc, #60]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001b3a:	f002 fc1f 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001b3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_GPIO_Init+0x110>)
 8001b58:	f002 fc10 	bl	800437c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2006      	movs	r0, #6
 8001b62:	f001 fe91 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b66:	2006      	movs	r0, #6
 8001b68:	f001 feba 	bl	80038e0 <HAL_NVIC_EnableIRQ>

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400

08001b80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <MX_I2C1_Init+0x54>)
 8001b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_I2C1_Init+0x58>)
 8001b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bbe:	f002 fec1 	bl	8004944 <HAL_I2C_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc8:	f000 f94a 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000354 	.word	0x20000354
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	000186a0 	.word	0x000186a0

08001bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_I2C_MspInit+0x84>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12b      	bne.n	8001c56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1e:	2312      	movs	r3, #18
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_I2C_MspInit+0x8c>)
 8001c36:	f002 fba1 	bl	800437c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40005400 	.word	0x40005400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <pixel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pixel(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001c70:	f7fe ff8e 	bl	8000b90 <ARGB_Init>

    ARGB_Clear(); // Clear stirp
 8001c74:	f7ff f804 	bl	8000c80 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001c78:	bf00      	nop
 8001c7a:	f7ff f8af 	bl	8000ddc <ARGB_Show>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d1fa      	bne.n	8001c7a <pixel+0xe>

    ARGB_SetBrightness(50);  // Set global brightness to 40%
 8001c84:	2032      	movs	r0, #50	; 0x32
 8001c86:	f7ff f805 	bl	8000c94 <ARGB_SetBrightness>

    ARGB_FillRGB(25, 0, 100); // Fill all the strip with Red
 8001c8a:	2264      	movs	r2, #100	; 0x64
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2019      	movs	r0, #25
 8001c90:	f7ff f882 	bl	8000d98 <ARGB_FillRGB>
    while (!ARGB_Show());
 8001c94:	bf00      	nop
 8001c96:	f7ff f8a1 	bl	8000ddc <ARGB_Show>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0fa      	beq.n	8001c96 <pixel+0x2a>
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <Display_Init>:

void Display_Init() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001cae:	f000 fad1 	bl	8002254 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 fca0 	bl	80025f8 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <Display_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	9202      	str	r2, [sp, #8]
 8001cbe:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001cc2:	9201      	str	r2, [sp, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	9200      	str	r2, [sp, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <Display_Init+0x5c>)
 8001ccc:	2100      	movs	r1, #0
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f000 fb51 	bl	8002376 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <Display_Init+0x60>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	9202      	str	r2, [sp, #8]
 8001cda:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001cde:	9201      	str	r2, [sp, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	9200      	str	r2, [sp, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <Display_Init+0x64>)
 8001ce8:	2119      	movs	r1, #25
 8001cea:	2022      	movs	r0, #34	; 0x22
 8001cec:	f000 fb43 	bl	8002376 <ST7735_WriteString>
    HAL_Delay(2000);
 8001cf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cf4:	f001 f8f8 	bl	8002ee8 <HAL_Delay>
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000084 	.word	0x20000084
 8001d04:	08011b34 	.word	0x08011b34
 8001d08:	2000007c 	.word	0x2000007c
 8001d0c:	08011b40 	.word	0x08011b40

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f001 f8a6 	bl	8002e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f826 	bl	8001d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1c:	f7ff fea6 	bl	8001a6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d20:	f7ff ff2e 	bl	8001b80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d24:	f000 f932 	bl	8001f8c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d28:	f000 fe56 	bl	80029d8 <MX_TIM3_Init>
  MX_CRC_Init();
 8001d2c:	f7ff fd3c 	bl	80017a8 <MX_CRC_Init>
  MX_TIM2_Init();
 8001d30:	f000 fdfa 	bl	8002928 <MX_TIM2_Init>
  MX_DMA_Init();
 8001d34:	f7ff fd6e 	bl	8001814 <MX_DMA_Init>
  MX_RTC_Init();
 8001d38:	f000 f8a2 	bl	8001e80 <MX_RTC_Init>
  MX_TIM4_Init();
 8001d3c:	f000 fea0 	bl	8002a80 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001d40:	f7ff fbd0 	bl	80014e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d44:	213c      	movs	r1, #60	; 0x3c
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <main+0x54>)
 8001d48:	f006 fd9c 	bl	8008884 <HAL_TIM_Encoder_Start>
  pixel();
 8001d4c:	f7ff ff8e 	bl	8001c6c <pixel>
  Display_Init();
 8001d50:	f7ff ffaa 	bl	8001ca8 <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d54:	f00b fd10 	bl	800d778 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d58:	f7ff fd7c 	bl	8001854 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d5c:	f00b fd30 	bl	800d7c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <main+0x50>
 8001d62:	bf00      	nop
 8001d64:	200004c0 	.word	0x200004c0

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b094      	sub	sp, #80	; 0x50
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2230      	movs	r2, #48	; 0x30
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f00f f994 	bl	80110a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <SystemClock_Config+0xd0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <SystemClock_Config+0xd0>)
 8001db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <SystemClock_Config+0xd0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ddc:	2319      	movs	r3, #25
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001de8:	2304      	movs	r3, #4
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f9fb 	bl	80061ec <HAL_RCC_OscConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dfc:	f000 f830 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e00:	230f      	movs	r3, #15
 8001e02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 fd0d 	bl	800683c <HAL_RCC_ClockConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e28:	f000 f81a 	bl	8001e60 <Error_Handler>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3750      	adds	r7, #80	; 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000

08001e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4e:	f001 f82b 	bl	8002ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>

08001e6a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_RTC_Init+0xac>)
 8001e9a:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <MX_RTC_Init+0xb0>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <MX_RTC_Init+0xac>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_RTC_Init+0xac>)
 8001ea6:	227f      	movs	r2, #127	; 0x7f
 8001ea8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <MX_RTC_Init+0xac>)
 8001eac:	22ff      	movs	r2, #255	; 0xff
 8001eae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <MX_RTC_Init+0xac>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_RTC_Init+0xac>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <MX_RTC_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec2:	481a      	ldr	r0, [pc, #104]	; (8001f2c <MX_RTC_Init+0xac>)
 8001ec4:	f005 f98a 	bl	80071dc <HAL_RTC_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ece:	f7ff ffc7 	bl	8001e60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	480f      	ldr	r0, [pc, #60]	; (8001f2c <MX_RTC_Init+0xac>)
 8001eee:	f005 fa4d 	bl	800738c <HAL_RTC_SetTime>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ef8:	f7ff ffb2 	bl	8001e60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001efc:	2305      	movs	r3, #5
 8001efe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001f00:	2305      	movs	r3, #5
 8001f02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001f04:	2307      	movs	r3, #7
 8001f06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001f08:	2316      	movs	r3, #22
 8001f0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <MX_RTC_Init+0xac>)
 8001f14:	f005 fb82 	bl	800761c <HAL_RTC_SetDate>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f1e:	f7ff ff9f 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200003a8 	.word	0x200003a8
 8001f30:	40002800 	.word	0x40002800

08001f34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_RTC_MspInit+0x50>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f60:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f62:	f107 0308 	add.w	r3, r7, #8
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 ff22 	bl	8006db0 <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f72:	f7ff ff75 	bl	8001e60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_RTC_MspInit+0x54>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40002800 	.word	0x40002800
 8001f88:	42470e3c 	.word	0x42470e3c

08001f8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fd8:	220a      	movs	r2, #10
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fde:	f005 fce7 	bl	80079b0 <HAL_SPI_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f7ff ff3a 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200003c8 	.word	0x200003c8
 8001ff4:	40013000 	.word	0x40013000

08001ff8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_SPI_MspInit+0x84>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12b      	bne.n	8002072 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_SPI_MspInit+0x88>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_SPI_MspInit+0x88>)
 8002024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_SPI_MspInit+0x88>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_SPI_MspInit+0x88>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_SPI_MspInit+0x88>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_SPI_MspInit+0x88>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002052:	23a0      	movs	r3, #160	; 0xa0
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002062:	2305      	movs	r3, #5
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_SPI_MspInit+0x8c>)
 800206e:	f002 f985 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013000 	.word	0x40013000
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000

08002088 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2110      	movs	r1, #16
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <ST7735_Select+0x14>)
 8002092:	f002 fc0d 	bl	80048b0 <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40020000 	.word	0x40020000

080020a0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2110      	movs	r1, #16
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <ST7735_Unselect+0x14>)
 80020aa:	f002 fc01 	bl	80048b0 <HAL_GPIO_WritePin>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40020000 	.word	0x40020000

080020b8 <ST7735_Reset>:

static void ST7735_Reset() {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	2108      	movs	r1, #8
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <ST7735_Reset+0x24>)
 80020c2:	f002 fbf5 	bl	80048b0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80020c6:	2005      	movs	r0, #5
 80020c8:	f000 ff0e 	bl	8002ee8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	2108      	movs	r1, #8
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <ST7735_Reset+0x24>)
 80020d2:	f002 fbed 	bl	80048b0 <HAL_GPIO_WritePin>
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40020000 	.word	0x40020000

080020e0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2104      	movs	r1, #4
 80020ee:	4807      	ldr	r0, [pc, #28]	; (800210c <ST7735_WriteCommand+0x2c>)
 80020f0:	f002 fbde 	bl	80048b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80020f4:	1df9      	adds	r1, r7, #7
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	2201      	movs	r2, #1
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <ST7735_WriteCommand+0x30>)
 80020fe:	f005 fdf3 	bl	8007ce8 <HAL_SPI_Transmit>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020000 	.word	0x40020000
 8002110:	200003c8 	.word	0x200003c8

08002114 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	2104      	movs	r1, #4
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <ST7735_WriteData+0x2c>)
 8002124:	f002 fbc4 	bl	80048b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b29a      	uxth	r2, r3
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <ST7735_WriteData+0x30>)
 8002134:	f005 fdd8 	bl	8007ce8 <HAL_SPI_Transmit>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40020000 	.word	0x40020000
 8002144:	200003c8 	.word	0x200003c8

08002148 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800215a:	e034      	b.n	80021c6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ffb9 	bl	80020e0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002178:	7abb      	ldrb	r3, [r7, #10]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002180:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002182:	7abb      	ldrb	r3, [r7, #10]
 8002184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002188:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800218a:	7abb      	ldrb	r3, [r7, #10]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002190:	7abb      	ldrb	r3, [r7, #10]
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffbd 	bl	8002114 <ST7735_WriteData>
            addr += numArgs;
 800219a:	7abb      	ldrb	r3, [r7, #10]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80021a2:	89bb      	ldrh	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	2bff      	cmp	r3, #255	; 0xff
 80021b6:	d102      	bne.n	80021be <ST7735_ExecuteCommandList+0x76>
 80021b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021bc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80021be:	89bb      	ldrh	r3, [r7, #12]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fe91 	bl	8002ee8 <HAL_Delay>
    while(numCommands--) {
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	73fa      	strb	r2, [r7, #15]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1c5      	bne.n	800215c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4604      	mov	r4, r0
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4623      	mov	r3, r4
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4603      	mov	r3, r0
 80021ee:	71bb      	strb	r3, [r7, #6]
 80021f0:	460b      	mov	r3, r1
 80021f2:	717b      	strb	r3, [r7, #5]
 80021f4:	4613      	mov	r3, r2
 80021f6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80021f8:	202a      	movs	r0, #42	; 0x2a
 80021fa:	f7ff ff71 	bl	80020e0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80021fe:	2300      	movs	r3, #0
 8002200:	733b      	strb	r3, [r7, #12]
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	3301      	adds	r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	737b      	strb	r3, [r7, #13]
 800220a:	2300      	movs	r3, #0
 800220c:	73bb      	strb	r3, [r7, #14]
 800220e:	797b      	ldrb	r3, [r7, #5]
 8002210:	3301      	adds	r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	2104      	movs	r1, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff79 	bl	8002114 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002222:	202b      	movs	r0, #43	; 0x2b
 8002224:	f7ff ff5c 	bl	80020e0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	331a      	adds	r3, #26
 800222c:	b2db      	uxtb	r3, r3
 800222e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002230:	793b      	ldrb	r3, [r7, #4]
 8002232:	331a      	adds	r3, #26
 8002234:	b2db      	uxtb	r3, r3
 8002236:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2104      	movs	r1, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff68 	bl	8002114 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002244:	202c      	movs	r0, #44	; 0x2c
 8002246:	f7ff ff4b 	bl	80020e0 <ST7735_WriteCommand>
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
	...

08002254 <ST7735_Init>:

void ST7735_Init() {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002258:	f7ff ff16 	bl	8002088 <ST7735_Select>
    ST7735_Reset();
 800225c:	f7ff ff2c 	bl	80020b8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002260:	4806      	ldr	r0, [pc, #24]	; (800227c <ST7735_Init+0x28>)
 8002262:	f7ff ff71 	bl	8002148 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <ST7735_Init+0x2c>)
 8002268:	f7ff ff6e 	bl	8002148 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <ST7735_Init+0x30>)
 800226e:	f7ff ff6b 	bl	8002148 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002272:	f7ff ff15 	bl	80020a0 <ST7735_Unselect>
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	08013fd8 	.word	0x08013fd8
 8002280:	08014014 	.word	0x08014014
 8002284:	08014024 	.word	0x08014024

08002288 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002288:	b082      	sub	sp, #8
 800228a:	b590      	push	{r4, r7, lr}
 800228c:	b089      	sub	sp, #36	; 0x24
 800228e:	af00      	add	r7, sp, #0
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
 8002296:	460b      	mov	r3, r1
 8002298:	80bb      	strh	r3, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	b2d8      	uxtb	r0, r3
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	b2d9      	uxtb	r1, r3
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ae:	4413      	add	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b2dc      	uxtb	r4, r3
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022be:	4413      	add	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4622      	mov	r2, r4
 80022c8:	f7ff ff87 	bl	80021da <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e043      	b.n	800235a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80022d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	3b20      	subs	r3, #32
 80022d8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	440b      	add	r3, r1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e029      	b.n	8002348 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00e      	beq.n	8002322 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	743b      	strb	r3, [r7, #16]
 800230e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002310:	b2db      	uxtb	r3, r3
 8002312:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	2102      	movs	r1, #2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fefa 	bl	8002114 <ST7735_WriteData>
 8002320:	e00f      	b.n	8002342 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002322:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	733b      	strb	r3, [r7, #12]
 800232e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002332:	b2db      	uxtb	r3, r3
 8002334:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fee9 	bl	8002114 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3301      	adds	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800234c:	461a      	mov	r2, r3
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4293      	cmp	r3, r2
 8002352:	d3cf      	bcc.n	80022f4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3301      	adds	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800235e:	461a      	mov	r2, r3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4293      	cmp	r3, r2
 8002364:	d3b5      	bcc.n	80022d2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	3724      	adds	r7, #36	; 0x24
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002372:	b002      	add	sp, #8
 8002374:	4770      	bx	lr

08002376 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002376:	b082      	sub	sp, #8
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af04      	add	r7, sp, #16
 800237e:	603a      	str	r2, [r7, #0]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
 8002386:	460b      	mov	r3, r1
 8002388:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800238a:	f7ff fe7d 	bl	8002088 <ST7735_Select>

    while(*str) {
 800238e:	e02d      	b.n	80023ec <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	7d3a      	ldrb	r2, [r7, #20]
 8002394:	4413      	add	r3, r2
 8002396:	2b9f      	cmp	r3, #159	; 0x9f
 8002398:	dd13      	ble.n	80023c2 <ST7735_WriteString+0x4c>
            x = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800239e:	7d7b      	ldrb	r3, [r7, #21]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	88bb      	ldrh	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	7d7a      	ldrb	r2, [r7, #21]
 80023ac:	4413      	add	r3, r2
 80023ae:	2b4f      	cmp	r3, #79	; 0x4f
 80023b0:	dc21      	bgt.n	80023f6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d103      	bne.n	80023c2 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	603b      	str	r3, [r7, #0]
                continue;
 80023c0:	e014      	b.n	80023ec <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	88b9      	ldrh	r1, [r7, #4]
 80023c8:	88f8      	ldrh	r0, [r7, #6]
 80023ca:	8c3b      	ldrh	r3, [r7, #32]
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	8bbb      	ldrh	r3, [r7, #28]
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f7ff ff56 	bl	8002288 <ST7735_WriteChar>
        x += font.width;
 80023dc:	7d3b      	ldrb	r3, [r7, #20]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	4413      	add	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
        str++;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	603b      	str	r3, [r7, #0]
    while(*str) {
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1cd      	bne.n	8002390 <ST7735_WriteString+0x1a>
 80023f4:	e000      	b.n	80023f8 <ST7735_WriteString+0x82>
                break;
 80023f6:	bf00      	nop
    }

    ST7735_Unselect();
 80023f8:	f7ff fe52 	bl	80020a0 <ST7735_Unselect>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002406:	b002      	add	sp, #8
 8002408:	4770      	bx	lr
	...

0800240c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	4603      	mov	r3, r0
 8002420:	80bb      	strh	r3, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
 8002426:	4613      	mov	r3, r2
 8002428:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b9f      	cmp	r3, #159	; 0x9f
 800242e:	d857      	bhi.n	80024e0 <ST7735_FillRectangle+0xd4>
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	2b4f      	cmp	r3, #79	; 0x4f
 8002434:	d854      	bhi.n	80024e0 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	4413      	add	r3, r2
 800243c:	2ba0      	cmp	r3, #160	; 0xa0
 800243e:	dd03      	ble.n	8002448 <ST7735_FillRectangle+0x3c>
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002446:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002448:	88ba      	ldrh	r2, [r7, #4]
 800244a:	883b      	ldrh	r3, [r7, #0]
 800244c:	4413      	add	r3, r2
 800244e:	2b50      	cmp	r3, #80	; 0x50
 8002450:	dd03      	ble.n	800245a <ST7735_FillRectangle+0x4e>
 8002452:	88bb      	ldrh	r3, [r7, #4]
 8002454:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8002458:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800245a:	f7ff fe15 	bl	8002088 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	b2d8      	uxtb	r0, r3
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	b2d9      	uxtb	r1, r3
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4413      	add	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b2dc      	uxtb	r4, r3
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	883b      	ldrh	r3, [r7, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4413      	add	r3, r2
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4622      	mov	r2, r4
 8002488:	f7ff fea7 	bl	80021da <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800248c:	8c3b      	ldrh	r3, [r7, #32]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	b29b      	uxth	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	733b      	strb	r3, [r7, #12]
 8002496:	8c3b      	ldrh	r3, [r7, #32]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800249c:	2201      	movs	r2, #1
 800249e:	2104      	movs	r1, #4
 80024a0:	4811      	ldr	r0, [pc, #68]	; (80024e8 <ST7735_FillRectangle+0xdc>)
 80024a2:	f002 fa05 	bl	80048b0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80024a6:	883b      	ldrh	r3, [r7, #0]
 80024a8:	80bb      	strh	r3, [r7, #4]
 80024aa:	e013      	b.n	80024d4 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	80fb      	strh	r3, [r7, #6]
 80024b0:	e00a      	b.n	80024c8 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80024b2:	f107 010c 	add.w	r1, r7, #12
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	2202      	movs	r2, #2
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <ST7735_FillRectangle+0xe0>)
 80024be:	f005 fc13 	bl	8007ce8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	80fb      	strh	r3, [r7, #6]
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f1      	bne.n	80024b2 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80024ce:	88bb      	ldrh	r3, [r7, #4]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	80bb      	strh	r3, [r7, #4]
 80024d4:	88bb      	ldrh	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e8      	bne.n	80024ac <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 80024da:	f7ff fde1 	bl	80020a0 <ST7735_Unselect>
 80024de:	e000      	b.n	80024e2 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024e0:	bf00      	nop
}
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}
 80024e8:	40020000 	.word	0x40020000
 80024ec:	200003c8 	.word	0x200003c8

080024f0 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4604      	mov	r4, r0
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	80fb      	strh	r3, [r7, #6]
 8002502:	4603      	mov	r3, r0
 8002504:	80bb      	strh	r3, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	807b      	strh	r3, [r7, #2]
 800250a:	4613      	mov	r3, r2
 800250c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b9f      	cmp	r3, #159	; 0x9f
 8002512:	d869      	bhi.n	80025e8 <ST7735_FillRectangleFast+0xf8>
 8002514:	88bb      	ldrh	r3, [r7, #4]
 8002516:	2b4f      	cmp	r3, #79	; 0x4f
 8002518:	d866      	bhi.n	80025e8 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4413      	add	r3, r2
 8002520:	2ba0      	cmp	r3, #160	; 0xa0
 8002522:	dd03      	ble.n	800252c <ST7735_FillRectangleFast+0x3c>
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800252a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800252c:	88ba      	ldrh	r2, [r7, #4]
 800252e:	883b      	ldrh	r3, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	2b50      	cmp	r3, #80	; 0x50
 8002534:	dd03      	ble.n	800253e <ST7735_FillRectangleFast+0x4e>
 8002536:	88bb      	ldrh	r3, [r7, #4]
 8002538:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800253c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800253e:	f7ff fda3 	bl	8002088 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	b2d8      	uxtb	r0, r3
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	b2d9      	uxtb	r1, r3
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4413      	add	r3, r2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b2dc      	uxtb	r4, r3
 800255a:	88bb      	ldrh	r3, [r7, #4]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	883b      	ldrh	r3, [r7, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	4622      	mov	r2, r4
 800256c:	f7ff fe35 	bl	80021da <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8002570:	8c3b      	ldrh	r3, [r7, #32]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	723b      	strb	r3, [r7, #8]
 800257a:	8c3b      	ldrh	r3, [r7, #32]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f00e fd6f 	bl	8011068 <malloc>
 800258a:	4603      	mov	r3, r0
 800258c:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800258e:	2300      	movs	r3, #0
 8002590:	80fb      	strh	r3, [r7, #6]
 8002592:	e008      	b.n	80025a6 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	893a      	ldrh	r2, [r7, #8]
 800259e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	3301      	adds	r3, #1
 80025a4:	80fb      	strh	r3, [r7, #6]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3f2      	bcc.n	8002594 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80025ae:	2201      	movs	r2, #1
 80025b0:	2104      	movs	r1, #4
 80025b2:	480f      	ldr	r0, [pc, #60]	; (80025f0 <ST7735_FillRectangleFast+0x100>)
 80025b4:	f002 f97c 	bl	80048b0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80025b8:	883b      	ldrh	r3, [r7, #0]
 80025ba:	80bb      	strh	r3, [r7, #4]
 80025bc:	e00b      	b.n	80025d6 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <ST7735_FillRectangleFast+0x104>)
 80025cc:	f005 fb8c 	bl	8007ce8 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80025d0:	88bb      	ldrh	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	80bb      	strh	r3, [r7, #4]
 80025d6:	88bb      	ldrh	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <ST7735_FillRectangleFast+0xce>

    free(line);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f00e fd4b 	bl	8011078 <free>
    ST7735_Unselect();
 80025e2:	f7ff fd5d 	bl	80020a0 <ST7735_Unselect>
 80025e6:	e000      	b.n	80025ea <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80025e8:	bf00      	nop
}
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	40020000 	.word	0x40020000
 80025f4:	200003c8 	.word	0x200003c8

080025f8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2350      	movs	r3, #80	; 0x50
 8002608:	22a0      	movs	r2, #160	; 0xa0
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fefd 	bl	800240c <ST7735_FillRectangle>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af02      	add	r7, sp, #8
 8002620:	4603      	mov	r3, r0
 8002622:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2350      	movs	r3, #80	; 0x50
 800262a:	22a0      	movs	r2, #160	; 0xa0
 800262c:	2100      	movs	r1, #0
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff ff5e 	bl	80024f0 <ST7735_FillRectangleFast>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_MspInit+0x74>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_MspInit+0x74>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_MspInit+0x74>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_MspInit+0x74>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_MspInit+0x74>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_MspInit+0x74>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	210f      	movs	r1, #15
 800267e:	f06f 0001 	mvn.w	r0, #1
 8002682:	f001 f901 	bl	8003888 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	2005      	movs	r0, #5
 800268c:	f001 f8fc 	bl	8003888 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002690:	2005      	movs	r0, #5
 8002692:	f001 f925 	bl	80038e0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2105      	movs	r1, #5
 800269a:	2005      	movs	r0, #5
 800269c:	f001 f8f4 	bl	8003888 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80026a0:	2005      	movs	r0, #5
 80026a2:	f001 f91d 	bl	80038e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	2019      	movs	r0, #25
 80026ca:	f001 f8dd 	bl	8003888 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026ce:	2019      	movs	r0, #25
 80026d0:	f001 f906 	bl	80038e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_InitTick+0xa0>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <HAL_InitTick+0xa0>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6453      	str	r3, [r2, #68]	; 0x44
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_InitTick+0xa0>)
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026f0:	f107 0210 	add.w	r2, r7, #16
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fb26 	bl	8006d4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002700:	f004 fb10 	bl	8006d24 <HAL_RCC_GetPCLK2Freq>
 8002704:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_InitTick+0xa4>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	3b01      	subs	r3, #1
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_InitTick+0xa8>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_InitTick+0xac>)
 8002718:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_InitTick+0xa8>)
 800271c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002720:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_InitTick+0xa8>)
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_InitTick+0xa8>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_InitTick+0xa8>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <HAL_InitTick+0xa8>)
 8002736:	f005 fced 	bl	8008114 <HAL_TIM_Base_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002740:	4806      	ldr	r0, [pc, #24]	; (800275c <HAL_InitTick+0xa8>)
 8002742:	f005 fdad 	bl	80082a0 <HAL_TIM_Base_Start_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	e000      	b.n	800274c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	3730      	adds	r7, #48	; 0x30
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	431bde83 	.word	0x431bde83
 800275c:	20000420 	.word	0x20000420
 8002760:	40010000 	.word	0x40010000

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <NMI_Handler+0x4>

0800276a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <HardFault_Handler+0x4>

08002770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <MemManage_Handler+0x4>

08002776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <BusFault_Handler+0x4>

0800277c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler+0x4>

08002782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f002 f8b6 	bl	8004914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027b2:	f006 f925 	bl	8008a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000420 	.word	0x20000420

080027c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM2_IRQHandler+0x10>)
 80027c6:	f006 f91b 	bl	8008a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000478 	.word	0x20000478

080027d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <TIM3_IRQHandler+0x28>)
 80027da:	f006 f911 	bl	8008a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <TIM3_IRQHandler+0x2c>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <TIM3_IRQHandler+0x2c>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <TIM3_IRQHandler+0x2c>)
 80027f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f4:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200004c0 	.word	0x200004c0
 8002800:	40000400 	.word	0x40000400

08002804 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <TIM4_IRQHandler+0x10>)
 800280a:	f006 f8f9 	bl	8008a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000508 	.word	0x20000508

08002818 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <DMA1_Stream7_IRQHandler+0x10>)
 800281e:	f001 fb43 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000550 	.word	0x20000550

0800282c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <OTG_FS_IRQHandler+0x10>)
 8002832:	f002 fbae 	bl	8004f92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200064a4 	.word	0x200064a4

08002840 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800284a:	23ff      	movs	r3, #255	; 0xff
 800284c:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db11      	blt.n	8002884 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8002860:	f000 fb36 	bl	8002ed0 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_GPIO_EXTI_Callback+0x50>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b63      	cmp	r3, #99	; 0x63
 8002870:	d90a      	bls.n	8002888 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_GPIO_EXTI_Callback+0x50>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8002878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_GPIO_EXTI_Callback+0x54>)
 800287e:	2101      	movs	r1, #1
 8002880:	54d1      	strb	r1, [r2, r3]
 8002882:	e002      	b.n	800288a <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8002888:	bf00      	nop
}
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000470 	.word	0x20000470
 8002894:	20000468 	.word	0x20000468

08002898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c8:	f00e fba2 	bl	8011010 <__errno>
 80028cc:	4603      	mov	r3, r0
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e009      	b.n	80028ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x64>)
 80028e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20020000 	.word	0x20020000
 80028f8:	00000800 	.word	0x00000800
 80028fc:	20000474 	.word	0x20000474
 8002900:	20006be0 	.word	0x20006be0

08002904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <SystemInit+0x20>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <SystemInit+0x20>)
 8002910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	615a      	str	r2, [r3, #20]
 8002948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <MX_TIM2_Init+0xac>)
 800294c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <MX_TIM2_Init+0xac>)
 8002954:	2200      	movs	r2, #0
 8002956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <MX_TIM2_Init+0xac>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <MX_TIM2_Init+0xac>)
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <MX_TIM2_Init+0xac>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_TIM2_Init+0xac>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002972:	4818      	ldr	r0, [pc, #96]	; (80029d4 <MX_TIM2_Init+0xac>)
 8002974:	f005 fd26 	bl	80083c4 <HAL_TIM_PWM_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800297e:	f7ff fa6f 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298a:	f107 0320 	add.w	r3, r7, #32
 800298e:	4619      	mov	r1, r3
 8002990:	4810      	ldr	r0, [pc, #64]	; (80029d4 <MX_TIM2_Init+0xac>)
 8002992:	f007 fa0b 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800299c:	f7ff fa60 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a0:	2360      	movs	r3, #96	; 0x60
 80029a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2204      	movs	r2, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4807      	ldr	r0, [pc, #28]	; (80029d4 <MX_TIM2_Init+0xac>)
 80029b8:	f006 f92a 	bl	8008c10 <HAL_TIM_PWM_ConfigChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80029c2:	f7ff fa4d 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029c6:	4803      	ldr	r0, [pc, #12]	; (80029d4 <MX_TIM2_Init+0xac>)
 80029c8:	f000 f9c2 	bl	8002d50 <HAL_TIM_MspPostInit>

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000478 	.word	0x20000478

080029d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00e fb5c 	bl	80110a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <MX_TIM3_Init+0xa0>)
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <MX_TIM3_Init+0xa4>)
 80029f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <MX_TIM3_Init+0xa0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	4619      	mov	r1, r3
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a46:	f005 fd83 	bl	8008550 <HAL_TIM_Encoder_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a50:	f7ff fa06 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_TIM3_Init+0xa0>)
 8002a62:	f007 f9a3 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a6c:	f7ff f9f8 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	3730      	adds	r7, #48	; 0x30
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200004c0 	.word	0x200004c0
 8002a7c:	40000400 	.word	0x40000400

08002a80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
 8002aac:	615a      	str	r2, [r3, #20]
 8002aae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	; (8002b68 <MX_TIM4_Init+0xe8>)
 8002ab4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002ac4:	223c      	movs	r2, #60	; 0x3c
 8002ac6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ad4:	4823      	ldr	r0, [pc, #140]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002ad6:	f005 fb1d 	bl	8008114 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002ae0:	f7ff f9be 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aee:	4619      	mov	r1, r3
 8002af0:	481c      	ldr	r0, [pc, #112]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002af2:	f006 fa33 	bl	8008f5c <HAL_TIM_ConfigClockSource>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002afc:	f7ff f9b0 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b00:	4818      	ldr	r0, [pc, #96]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002b02:	f005 fc5f 	bl	80083c4 <HAL_TIM_PWM_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002b0c:	f7ff f9a8 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b18:	f107 0320 	add.w	r3, r7, #32
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4811      	ldr	r0, [pc, #68]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002b20:	f007 f944 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002b2a:	f7ff f999 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b2e:	2360      	movs	r3, #96	; 0x60
 8002b30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2208      	movs	r2, #8
 8002b42:	4619      	mov	r1, r3
 8002b44:	4807      	ldr	r0, [pc, #28]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002b46:	f006 f863 	bl	8008c10 <HAL_TIM_PWM_ConfigChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002b50:	f7ff f986 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b54:	4803      	ldr	r0, [pc, #12]	; (8002b64 <MX_TIM4_Init+0xe4>)
 8002b56:	f000 f8fb 	bl	8002d50 <HAL_TIM_MspPostInit>

}
 8002b5a:	bf00      	nop
 8002b5c:	3738      	adds	r7, #56	; 0x38
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000508 	.word	0x20000508
 8002b68:	40000800 	.word	0x40000800

08002b6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d115      	bne.n	8002baa <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x48>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x48>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x48>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2105      	movs	r1, #5
 8002b9e:	201c      	movs	r0, #28
 8002ba0:	f000 fe72 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ba4:	201c      	movs	r0, #28
 8002ba6:	f000 fe9b 	bl	80038e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d151      	bne.n	8002c7e <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002c2e:	2340      	movs	r3, #64	; 0x40
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	4619      	mov	r1, r3
 8002c48:	4811      	ldr	r0, [pc, #68]	; (8002c90 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002c4a:	f001 fb97 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	480a      	ldr	r0, [pc, #40]	; (8002c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002c6a:	f001 fb87 	bl	800437c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2105      	movs	r1, #5
 8002c72:	201d      	movs	r0, #29
 8002c74:	f000 fe08 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c78:	201d      	movs	r0, #29
 8002c7a:	f000 fe31 	bl	80038e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	; 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400

08002c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_TIM_Base_MspInit+0xa8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d146      	bne.n	8002d38 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_TIM_Base_MspInit+0xac>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_TIM_Base_MspInit+0xac>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_TIM_Base_MspInit+0xac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_TIM_Base_MspInit+0xb4>)
 8002cca:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cd2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cee:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002d00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d04:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002d0e:	f000 fe29 	bl	8003964 <HAL_DMA_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002d18:	f7ff f8a2 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_TIM_Base_MspInit+0xb0>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2105      	movs	r1, #5
 8002d2c:	201e      	movs	r0, #30
 8002d2e:	f000 fdab 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d32:	201e      	movs	r0, #30
 8002d34:	f000 fdd4 	bl	80038e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40023800 	.word	0x40023800
 8002d48:	20000550 	.word	0x20000550
 8002d4c:	400260b8 	.word	0x400260b8

08002d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d11e      	bne.n	8002db0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_TIM_MspPostInit+0xb0>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <HAL_TIM_MspPostInit+0xb0>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <HAL_TIM_MspPostInit+0xb0>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	4816      	ldr	r0, [pc, #88]	; (8002e04 <HAL_TIM_MspPostInit+0xb4>)
 8002daa:	f001 fae7 	bl	800437c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002dae:	e023      	b.n	8002df8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <HAL_TIM_MspPostInit+0xb8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d11e      	bne.n	8002df8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_TIM_MspPostInit+0xb0>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <HAL_TIM_MspPostInit+0xb0>)
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_TIM_MspPostInit+0xb0>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002de8:	2302      	movs	r3, #2
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	4806      	ldr	r0, [pc, #24]	; (8002e0c <HAL_TIM_MspPostInit+0xbc>)
 8002df4:	f001 fac2 	bl	800437c <HAL_GPIO_Init>
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40020400 	.word	0x40020400

08002e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e16:	490e      	ldr	r1, [pc, #56]	; (8002e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e1c:	e002      	b.n	8002e24 <LoopCopyDataInit>

08002e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e22:	3304      	adds	r3, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e28:	d3f9      	bcc.n	8002e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e2c:	4c0b      	ldr	r4, [pc, #44]	; (8002e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e30:	e001      	b.n	8002e36 <LoopFillZerobss>

08002e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e34:	3204      	adds	r2, #4

08002e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e38:	d3fb      	bcc.n	8002e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e3a:	f7ff fd63 	bl	8002904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f00e f8ed 	bl	801101c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e42:	f7fe ff65 	bl	8001d10 <main>
  bx  lr    
 8002e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e50:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002e54:	08014114 	.word	0x08014114
  ldr r2, =_sbss
 8002e58:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002e5c:	20006be0 	.word	0x20006be0

08002e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC_IRQHandler>
	...

08002e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_Init+0x40>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <HAL_Init+0x40>)
 8002e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_Init+0x40>)
 8002e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_Init+0x40>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f000 fcdb 	bl	8003848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e92:	200f      	movs	r0, #15
 8002e94:	f7ff fc0e 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e98:	f7ff fbd0 	bl	800263c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023c00 	.word	0x40023c00

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000094 	.word	0x20000094
 8002ecc:	200005b0 	.word	0x200005b0

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	200005b0 	.word	0x200005b0

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d005      	beq.n	8002f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_Delay+0x44>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f0e:	bf00      	nop
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d8f7      	bhi.n	8002f10 <HAL_Delay+0x28>
  {
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000094 	.word	0x20000094

08002f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e14e      	b.n	80031e4 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a90      	ldr	r2, [pc, #576]	; (800318c <HAL_ADC_Init+0x25c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_ADC_Init+0x2a>
 8002f50:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002f54:	488e      	ldr	r0, [pc, #568]	; (8003190 <HAL_ADC_Init+0x260>)
 8002f56:	f7fe ff88 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d013      	beq.n	8002f8a <HAL_ADC_Init+0x5a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d00e      	beq.n	8002f8a <HAL_ADC_Init+0x5a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f74:	d009      	beq.n	8002f8a <HAL_ADC_Init+0x5a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_Init+0x5a>
 8002f80:	f240 1143 	movw	r1, #323	; 0x143
 8002f84:	4882      	ldr	r0, [pc, #520]	; (8003190 <HAL_ADC_Init+0x260>)
 8002f86:	f7fe ff70 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d013      	beq.n	8002fba <HAL_ADC_Init+0x8a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f9a:	d00e      	beq.n	8002fba <HAL_ADC_Init+0x8a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fa4:	d009      	beq.n	8002fba <HAL_ADC_Init+0x8a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fae:	d004      	beq.n	8002fba <HAL_ADC_Init+0x8a>
 8002fb0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002fb4:	4876      	ldr	r0, [pc, #472]	; (8003190 <HAL_ADC_Init+0x260>)
 8002fb6:	f7fe ff58 	bl	8001e6a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_ADC_Init+0xa4>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_Init+0xa4>
 8002fca:	f240 1145 	movw	r1, #325	; 0x145
 8002fce:	4870      	ldr	r0, [pc, #448]	; (8003190 <HAL_ADC_Init+0x260>)
 8002fd0:	f7fe ff4b 	bl	8001e6a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7e1b      	ldrb	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_ADC_Init+0xbe>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7e1b      	ldrb	r3, [r3, #24]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_Init+0xbe>
 8002fe4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002fe8:	4869      	ldr	r0, [pc, #420]	; (8003190 <HAL_ADC_Init+0x260>)
 8002fea:	f7fe ff3e 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d054      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffe:	d04f      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003008:	d04a      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003012:	d045      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301c:	d040      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003026:	d03b      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003030:	d036      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800303a:	d031      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003044:	d02c      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800304e:	d027      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003058:	d022      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003062:	d01d      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800306c:	d018      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003076:	d013      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003080:	d00e      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800308a:	d009      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	4a40      	ldr	r2, [pc, #256]	; (8003194 <HAL_ADC_Init+0x264>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_ADC_Init+0x170>
 8003096:	f240 1147 	movw	r1, #327	; 0x147
 800309a:	483d      	ldr	r0, [pc, #244]	; (8003190 <HAL_ADC_Init+0x260>)
 800309c:	f7fe fee5 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <HAL_ADC_Init+0x18c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b0:	d004      	beq.n	80030bc <HAL_ADC_Init+0x18c>
 80030b2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80030b6:	4836      	ldr	r0, [pc, #216]	; (8003190 <HAL_ADC_Init+0x260>)
 80030b8:	f7fe fed7 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_ADC_Init+0x19c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d904      	bls.n	80030d6 <HAL_ADC_Init+0x1a6>
 80030cc:	f240 1149 	movw	r1, #329	; 0x149
 80030d0:	482f      	ldr	r0, [pc, #188]	; (8003190 <HAL_ADC_Init+0x260>)
 80030d2:	f7fe feca 	bl	8001e6a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_ADC_Init+0x1c4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d004      	beq.n	80030f4 <HAL_ADC_Init+0x1c4>
 80030ea:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80030ee:	4828      	ldr	r0, [pc, #160]	; (8003190 <HAL_ADC_Init+0x260>)
 80030f0:	f7fe febb 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d00c      	beq.n	8003116 <HAL_ADC_Init+0x1e6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_ADC_Init+0x1e6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d004      	beq.n	8003116 <HAL_ADC_Init+0x1e6>
 800310c:	f240 114b 	movw	r1, #331	; 0x14b
 8003110:	481f      	ldr	r0, [pc, #124]	; (8003190 <HAL_ADC_Init+0x260>)
 8003112:	f7fe feaa 	bl	8001e6a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_ADC_Init+0x204>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d004      	beq.n	8003134 <HAL_ADC_Init+0x204>
 800312a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800312e:	4818      	ldr	r0, [pc, #96]	; (8003190 <HAL_ADC_Init+0x260>)
 8003130:	f7fe fe9b 	bl	8001e6a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_ADC_Init+0x264>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d017      	beq.n	800316e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <HAL_ADC_Init+0x23e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800314e:	d00e      	beq.n	800316e <HAL_ADC_Init+0x23e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003158:	d009      	beq.n	800316e <HAL_ADC_Init+0x23e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003162:	d004      	beq.n	800316e <HAL_ADC_Init+0x23e>
 8003164:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003168:	4809      	ldr	r0, [pc, #36]	; (8003190 <HAL_ADC_Init+0x260>)
 800316a:	f7fe fe7e 	bl	8001e6a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d110      	bne.n	8003198 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe fa06 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800318a:	e005      	b.n	8003198 <HAL_ADC_Init+0x268>
 800318c:	40012000 	.word	0x40012000
 8003190:	08011b4c 	.word	0x08011b4c
 8003194:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d118      	bne.n	80031d6 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ac:	f023 0302 	bic.w	r3, r3, #2
 80031b0:	f043 0202 	orr.w	r2, r3, #2
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f98d 	bl	80034d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f023 0303 	bic.w	r3, r3, #3
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
 80031d4:	e001      	b.n	80031da <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d909      	bls.n	8003216 <HAL_ADC_ConfigChannel+0x2a>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a72      	ldr	r2, [pc, #456]	; (80033d0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x2a>
 800320c:	f240 618b 	movw	r1, #1675	; 0x68b
 8003210:	4870      	ldr	r0, [pc, #448]	; (80033d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003212:	f7fe fe2a 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x3a>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d904      	bls.n	8003230 <HAL_ADC_ConfigChannel+0x44>
 8003226:	f240 618c 	movw	r1, #1676	; 0x68c
 800322a:	486a      	ldr	r0, [pc, #424]	; (80033d4 <HAL_ADC_ConfigChannel+0x1e8>)
 800322c:	f7fe fe1d 	bl	8001e6a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d01c      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d018      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d014      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d010      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d00c      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d008      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b07      	cmp	r3, #7
 800326e:	d004      	beq.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003270:	f240 618d 	movw	r1, #1677	; 0x68d
 8003274:	4857      	ldr	r0, [pc, #348]	; (80033d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003276:	f7fe fdf8 	bl	8001e6a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x9c>
 8003284:	2302      	movs	r3, #2
 8003286:	e118      	b.n	80034ba <HAL_ADC_ConfigChannel+0x2ce>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b09      	cmp	r3, #9
 8003296:	d925      	bls.n	80032e4 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68d9      	ldr	r1, [r3, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	3b1e      	subs	r3, #30
 80032ae:	2207      	movs	r2, #7
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43da      	mvns	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	400a      	ands	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4403      	add	r3, r0
 80032d6:	3b1e      	subs	r3, #30
 80032d8:	409a      	lsls	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e022      	b.n	800332a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	4618      	mov	r0, r3
 800331a:	4603      	mov	r3, r0
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4403      	add	r3, r0
 8003320:	409a      	lsls	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d824      	bhi.n	800337c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3b05      	subs	r3, #5
 8003344:	221f      	movs	r2, #31
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	400a      	ands	r2, r1
 8003352:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b05      	subs	r3, #5
 800336e:	fa00 f203 	lsl.w	r2, r0, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	635a      	str	r2, [r3, #52]	; 0x34
 800337a:	e051      	b.n	8003420 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d829      	bhi.n	80033d8 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b23      	subs	r3, #35	; 0x23
 8003396:	221f      	movs	r2, #31
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43da      	mvns	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	400a      	ands	r2, r1
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b23      	subs	r3, #35	; 0x23
 80033c0:	fa00 f203 	lsl.w	r2, r0, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
 80033cc:	e028      	b.n	8003420 <HAL_ADC_ConfigChannel+0x234>
 80033ce:	bf00      	nop
 80033d0:	10000012 	.word	0x10000012
 80033d4:	08011b4c 	.word	0x08011b4c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b41      	subs	r3, #65	; 0x41
 80033ea:	221f      	movs	r2, #31
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43da      	mvns	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	400a      	ands	r2, r1
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	4618      	mov	r0, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b41      	subs	r3, #65	; 0x41
 8003414:	fa00 f203 	lsl.w	r2, r0, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003420:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <HAL_ADC_ConfigChannel+0x2d8>)
 8003422:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <HAL_ADC_ConfigChannel+0x2dc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10f      	bne.n	800344e <HAL_ADC_ConfigChannel+0x262>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b12      	cmp	r3, #18
 8003434:	d10b      	bne.n	800344e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_ADC_ConfigChannel+0x2dc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d12b      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x2c4>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_ADC_ConfigChannel+0x2e0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <HAL_ADC_ConfigChannel+0x27e>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b11      	cmp	r3, #17
 8003468:	d122      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_ADC_ConfigChannel+0x2e0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_ADC_ConfigChannel+0x2e4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <HAL_ADC_ConfigChannel+0x2e8>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0c9a      	lsrs	r2, r3, #18
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034a2:	e002      	b.n	80034aa <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f9      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40012300 	.word	0x40012300
 80034c8:	40012000 	.word	0x40012000
 80034cc:	10000012 	.word	0x10000012
 80034d0:	2000008c 	.word	0x2000008c
 80034d4:	431bde83 	.word	0x431bde83

080034d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e0:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <ADC_Init+0x208>)
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800350c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	4a5e      	ldr	r2, [pc, #376]	; (80036e4 <ADC_Init+0x20c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800357e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	e00f      	b.n	80035d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0202 	bic.w	r2, r2, #2
 80035e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7e1b      	ldrb	r3, [r3, #24]
 80035f0:	005a      	lsls	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d028      	beq.n	8003656 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <ADC_Init+0x13c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b08      	cmp	r3, #8
 8003612:	d904      	bls.n	800361e <ADC_Init+0x146>
 8003614:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003618:	4833      	ldr	r0, [pc, #204]	; (80036e8 <ADC_Init+0x210>)
 800361a:	f7fe fc26 	bl	8001e6a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800363c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	3b01      	subs	r3, #1
 800364a:	035a      	lsls	r2, r3, #13
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	e007      	b.n	8003666 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003664:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	3b01      	subs	r3, #1
 8003682:	051a      	lsls	r2, r3, #20
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800369a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036a8:	025a      	lsls	r2, r3, #9
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6899      	ldr	r1, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	029a      	lsls	r2, r3, #10
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012300 	.word	0x40012300
 80036e4:	0f000001 	.word	0x0f000001
 80036e8:	08011b4c 	.word	0x08011b4c

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60d3      	str	r3, [r2, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db0b      	blt.n	800377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4907      	ldr	r1, [pc, #28]	; (8003788 <__NVIC_EnableIRQ+0x38>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	; (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
         );
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b07      	cmp	r3, #7
 8003854:	d00f      	beq.n	8003876 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d00c      	beq.n	8003876 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d009      	beq.n	8003876 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d006      	beq.n	8003876 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d003      	beq.n	8003876 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800386e:	2190      	movs	r1, #144	; 0x90
 8003870:	4804      	ldr	r0, [pc, #16]	; (8003884 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003872:	f7fe fafa 	bl	8001e6a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff38 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	08011b84 	.word	0x08011b84

08003888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d903      	bls.n	80038a8 <HAL_NVIC_SetPriority+0x20>
 80038a0:	21a8      	movs	r1, #168	; 0xa8
 80038a2:	480e      	ldr	r0, [pc, #56]	; (80038dc <HAL_NVIC_SetPriority+0x54>)
 80038a4:	f7fe fae1 	bl	8001e6a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	d903      	bls.n	80038b6 <HAL_NVIC_SetPriority+0x2e>
 80038ae:	21a9      	movs	r1, #169	; 0xa9
 80038b0:	480a      	ldr	r0, [pc, #40]	; (80038dc <HAL_NVIC_SetPriority+0x54>)
 80038b2:	f7fe fada 	bl	8001e6a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b6:	f7ff ff3d 	bl	8003734 <__NVIC_GetPriorityGrouping>
 80038ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	6978      	ldr	r0, [r7, #20]
 80038c2:	f7ff ff8d 	bl	80037e0 <NVIC_EncodePriority>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff5c 	bl	800378c <__NVIC_SetPriority>
}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	08011b84 	.word	0x08011b84

080038e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da03      	bge.n	80038fa <HAL_NVIC_EnableIRQ+0x1a>
 80038f2:	21bc      	movs	r1, #188	; 0xbc
 80038f4:	4805      	ldr	r0, [pc, #20]	; (800390c <HAL_NVIC_EnableIRQ+0x2c>)
 80038f6:	f7fe fab8 	bl	8001e6a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff26 	bl	8003750 <__NVIC_EnableIRQ>
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08011b84 	.word	0x08011b84

08003910 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e017      	b.n	8003952 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a0d      	ldr	r2, [pc, #52]	; (800395c <HAL_CRC_Init+0x4c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <HAL_CRC_Init+0x24>
 800392c:	2168      	movs	r1, #104	; 0x68
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <HAL_CRC_Init+0x50>)
 8003930:	f7fe fa9b 	bl	8001e6a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	795b      	ldrb	r3, [r3, #5]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d105      	bne.n	800394a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fd ff43 	bl	80017d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023000 	.word	0x40023000
 8003960:	08011bc0 	.word	0x08011bc0

08003964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff faae 	bl	8002ed0 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e203      	b.n	8003d88 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a8b      	ldr	r2, [pc, #556]	; (8003bb4 <HAL_DMA_Init+0x250>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04e      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a8a      	ldr	r2, [pc, #552]	; (8003bb8 <HAL_DMA_Init+0x254>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d049      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a88      	ldr	r2, [pc, #544]	; (8003bbc <HAL_DMA_Init+0x258>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d044      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a87      	ldr	r2, [pc, #540]	; (8003bc0 <HAL_DMA_Init+0x25c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03f      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a85      	ldr	r2, [pc, #532]	; (8003bc4 <HAL_DMA_Init+0x260>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03a      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a84      	ldr	r2, [pc, #528]	; (8003bc8 <HAL_DMA_Init+0x264>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d035      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a82      	ldr	r2, [pc, #520]	; (8003bcc <HAL_DMA_Init+0x268>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d030      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a81      	ldr	r2, [pc, #516]	; (8003bd0 <HAL_DMA_Init+0x26c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02b      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a7f      	ldr	r2, [pc, #508]	; (8003bd4 <HAL_DMA_Init+0x270>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d026      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_DMA_Init+0x274>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d021      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <HAL_DMA_Init+0x278>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01c      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7b      	ldr	r2, [pc, #492]	; (8003be0 <HAL_DMA_Init+0x27c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d017      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a79      	ldr	r2, [pc, #484]	; (8003be4 <HAL_DMA_Init+0x280>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d012      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a78      	ldr	r2, [pc, #480]	; (8003be8 <HAL_DMA_Init+0x284>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00d      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a76      	ldr	r2, [pc, #472]	; (8003bec <HAL_DMA_Init+0x288>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d008      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <HAL_DMA_Init+0x28c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <HAL_DMA_Init+0xc4>
 8003a20:	21b7      	movs	r1, #183	; 0xb7
 8003a22:	4874      	ldr	r0, [pc, #464]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003a24:	f7fe fa21 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d026      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a38:	d021      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a42:	d01c      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a4c:	d017      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a56:	d012      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003a60:	d00d      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003a6a:	d008      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003a74:	d003      	beq.n	8003a7e <HAL_DMA_Init+0x11a>
 8003a76:	21b8      	movs	r1, #184	; 0xb8
 8003a78:	485e      	ldr	r0, [pc, #376]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003a7a:	f7fe f9f6 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_DMA_Init+0x13a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d007      	beq.n	8003a9e <HAL_DMA_Init+0x13a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d003      	beq.n	8003a9e <HAL_DMA_Init+0x13a>
 8003a96:	21b9      	movs	r1, #185	; 0xb9
 8003a98:	4856      	ldr	r0, [pc, #344]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003a9a:	f7fe f9e6 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa6:	d007      	beq.n	8003ab8 <HAL_DMA_Init+0x154>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_Init+0x154>
 8003ab0:	21ba      	movs	r1, #186	; 0xba
 8003ab2:	4850      	ldr	r0, [pc, #320]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003ab4:	f7fe f9d9 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d007      	beq.n	8003ad2 <HAL_DMA_Init+0x16e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_DMA_Init+0x16e>
 8003aca:	21bb      	movs	r1, #187	; 0xbb
 8003acc:	4849      	ldr	r0, [pc, #292]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003ace:	f7fe f9cc 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <HAL_DMA_Init+0x192>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d008      	beq.n	8003af6 <HAL_DMA_Init+0x192>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d003      	beq.n	8003af6 <HAL_DMA_Init+0x192>
 8003aee:	21bc      	movs	r1, #188	; 0xbc
 8003af0:	4840      	ldr	r0, [pc, #256]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003af2:	f7fe f9ba 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00d      	beq.n	8003b1a <HAL_DMA_Init+0x1b6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b06:	d008      	beq.n	8003b1a <HAL_DMA_Init+0x1b6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b10:	d003      	beq.n	8003b1a <HAL_DMA_Init+0x1b6>
 8003b12:	21bd      	movs	r1, #189	; 0xbd
 8003b14:	4837      	ldr	r0, [pc, #220]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003b16:	f7fe f9a8 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_DMA_Init+0x1d8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2a:	d007      	beq.n	8003b3c <HAL_DMA_Init+0x1d8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_Init+0x1d8>
 8003b34:	21be      	movs	r1, #190	; 0xbe
 8003b36:	482f      	ldr	r0, [pc, #188]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003b38:	f7fe f997 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_DMA_Init+0x206>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d00d      	beq.n	8003b6a <HAL_DMA_Init+0x206>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Init+0x206>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b60:	d003      	beq.n	8003b6a <HAL_DMA_Init+0x206>
 8003b62:	21bf      	movs	r1, #191	; 0xbf
 8003b64:	4823      	ldr	r0, [pc, #140]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003b66:	f7fe f980 	bl	8001e6a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_DMA_Init+0x21e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d003      	beq.n	8003b82 <HAL_DMA_Init+0x21e>
 8003b7a:	21c0      	movs	r1, #192	; 0xc0
 8003b7c:	481d      	ldr	r0, [pc, #116]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003b7e:	f7fe f974 	bl	8001e6a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d064      	beq.n	8003c54 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d032      	beq.n	8003bf8 <HAL_DMA_Init+0x294>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d02e      	beq.n	8003bf8 <HAL_DMA_Init+0x294>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d02a      	beq.n	8003bf8 <HAL_DMA_Init+0x294>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d026      	beq.n	8003bf8 <HAL_DMA_Init+0x294>
 8003baa:	21c5      	movs	r1, #197	; 0xc5
 8003bac:	4811      	ldr	r0, [pc, #68]	; (8003bf4 <HAL_DMA_Init+0x290>)
 8003bae:	f7fe f95c 	bl	8001e6a <assert_failed>
 8003bb2:	e021      	b.n	8003bf8 <HAL_DMA_Init+0x294>
 8003bb4:	40026010 	.word	0x40026010
 8003bb8:	40026028 	.word	0x40026028
 8003bbc:	40026040 	.word	0x40026040
 8003bc0:	40026058 	.word	0x40026058
 8003bc4:	40026070 	.word	0x40026070
 8003bc8:	40026088 	.word	0x40026088
 8003bcc:	400260a0 	.word	0x400260a0
 8003bd0:	400260b8 	.word	0x400260b8
 8003bd4:	40026410 	.word	0x40026410
 8003bd8:	40026428 	.word	0x40026428
 8003bdc:	40026440 	.word	0x40026440
 8003be0:	40026458 	.word	0x40026458
 8003be4:	40026470 	.word	0x40026470
 8003be8:	40026488 	.word	0x40026488
 8003bec:	400264a0 	.word	0x400264a0
 8003bf0:	400264b8 	.word	0x400264b8
 8003bf4:	08011bf8 	.word	0x08011bf8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <HAL_DMA_Init+0x2c2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c08:	d00d      	beq.n	8003c26 <HAL_DMA_Init+0x2c2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Init+0x2c2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1c:	d003      	beq.n	8003c26 <HAL_DMA_Init+0x2c2>
 8003c1e:	21c6      	movs	r1, #198	; 0xc6
 8003c20:	485b      	ldr	r0, [pc, #364]	; (8003d90 <HAL_DMA_Init+0x42c>)
 8003c22:	f7fe f922 	bl	8001e6a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d012      	beq.n	8003c54 <HAL_DMA_Init+0x2f0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c36:	d00d      	beq.n	8003c54 <HAL_DMA_Init+0x2f0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c40:	d008      	beq.n	8003c54 <HAL_DMA_Init+0x2f0>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA_Init+0x2f0>
 8003c4c:	21c7      	movs	r1, #199	; 0xc7
 8003c4e:	4850      	ldr	r0, [pc, #320]	; (8003d90 <HAL_DMA_Init+0x42c>)
 8003c50:	f7fe f90b 	bl	8001e6a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c74:	e00f      	b.n	8003c96 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c76:	f7ff f92b 	bl	8002ed0 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d908      	bls.n	8003c96 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e078      	b.n	8003d88 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e8      	bne.n	8003c76 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_DMA_Init+0x430>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0307 	bic.w	r3, r3, #7
 8003d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d117      	bne.n	8003d5a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 faa1 	bl	8004284 <DMA_CheckFifoParam>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d56:	2301      	movs	r3, #1
 8003d58:	e016      	b.n	8003d88 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa58 	bl	8004218 <DMA_CalcBaseAndBitshift>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	223f      	movs	r2, #63	; 0x3f
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	08011bf8 	.word	0x08011bf8
 8003d94:	f010803f 	.word	0xf010803f

08003d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_DMA_Start_IT+0x26>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d304      	bcc.n	8003dc8 <HAL_DMA_Start_IT+0x30>
 8003dbe:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003dc2:	4827      	ldr	r0, [pc, #156]	; (8003e60 <HAL_DMA_Start_IT+0xc8>)
 8003dc4:	f7fe f851 	bl	8001e6a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA_Start_IT+0x3e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e040      	b.n	8003e58 <HAL_DMA_Start_IT+0xc0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d12f      	bne.n	8003e4a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f9dc 	bl	80041bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	223f      	movs	r2, #63	; 0x3f
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0216 	orr.w	r2, r2, #22
 8003e1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0208 	orr.w	r2, r2, #8
 8003e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e005      	b.n	8003e56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	08011bf8 	.word	0x08011bf8

08003e64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00c      	b.n	8003e9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2205      	movs	r2, #5
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eb4:	4b8e      	ldr	r3, [pc, #568]	; (80040f0 <HAL_DMA_IRQHandler+0x248>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a8e      	ldr	r2, [pc, #568]	; (80040f4 <HAL_DMA_IRQHandler+0x24c>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0a9b      	lsrs	r3, r3, #10
 8003ec0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01a      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d013      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0204 	bic.w	r2, r2, #4
 8003efa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	2208      	movs	r2, #8
 8003f02:	409a      	lsls	r2, r3
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	2201      	movs	r2, #1
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d012      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	2201      	movs	r2, #1
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0202 	orr.w	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	2204      	movs	r2, #4
 8003f50:	409a      	lsls	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d012      	beq.n	8003f80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f043 0204 	orr.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	2210      	movs	r2, #16
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d043      	beq.n	8004018 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d03c      	beq.n	8004018 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d024      	beq.n	8004018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
 8003fd6:	e01f      	b.n	8004018 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
 8003fe8:	e016      	b.n	8004018 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0208 	bic.w	r2, r2, #8
 8004006:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	2220      	movs	r2, #32
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 808f 	beq.w	8004148 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8087 	beq.w	8004148 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	2220      	movs	r2, #32
 8004040:	409a      	lsls	r2, r3
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b05      	cmp	r3, #5
 8004050:	d136      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0216 	bic.w	r2, r2, #22
 8004060:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004070:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_DMA_IRQHandler+0x1da>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0208 	bic.w	r2, r2, #8
 8004090:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	223f      	movs	r2, #63	; 0x3f
 8004098:	409a      	lsls	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d07e      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
        }
        return;
 80040be:	e079      	b.n	80041b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01d      	beq.n	800410a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10d      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
 80040ec:	e02c      	b.n	8004148 <HAL_DMA_IRQHandler+0x2a0>
 80040ee:	bf00      	nop
 80040f0:	2000008c 	.word	0x2000008c
 80040f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d023      	beq.n	8004148 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
 8004108:	e01e      	b.n	8004148 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10f      	bne.n	8004138 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0210 	bic.w	r2, r2, #16
 8004126:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	2b00      	cmp	r3, #0
 800414e:	d032      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d022      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2205      	movs	r2, #5
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	3301      	adds	r3, #1
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	429a      	cmp	r2, r3
 800417e:	d307      	bcc.n	8004190 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f2      	bne.n	8004174 <HAL_DMA_IRQHandler+0x2cc>
 800418e:	e000      	b.n	8004192 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004190:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
 80041b2:	e000      	b.n	80041b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80041b4:	bf00      	nop
    }
  }
}
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d108      	bne.n	80041fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041fa:	e007      	b.n	800420c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	3b10      	subs	r3, #16
 8004228:	4a14      	ldr	r2, [pc, #80]	; (800427c <DMA_CalcBaseAndBitshift+0x64>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004232:	4a13      	ldr	r2, [pc, #76]	; (8004280 <DMA_CalcBaseAndBitshift+0x68>)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d909      	bls.n	800425a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
 8004258:	e007      	b.n	800426a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	aaaaaaab 	.word	0xaaaaaaab
 8004280:	08014068 	.word	0x08014068

08004284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11f      	bne.n	80042de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d856      	bhi.n	8004352 <DMA_CheckFifoParam+0xce>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <DMA_CheckFifoParam+0x28>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042cf 	.word	0x080042cf
 80042b4:	080042bd 	.word	0x080042bd
 80042b8:	08004353 	.word	0x08004353
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d046      	beq.n	8004356 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042cc:	e043      	b.n	8004356 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042d6:	d140      	bne.n	800435a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042dc:	e03d      	b.n	800435a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e6:	d121      	bne.n	800432c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d837      	bhi.n	800435e <DMA_CheckFifoParam+0xda>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <DMA_CheckFifoParam+0x70>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004305 	.word	0x08004305
 80042f8:	0800430b 	.word	0x0800430b
 80042fc:	08004305 	.word	0x08004305
 8004300:	0800431d 	.word	0x0800431d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e030      	b.n	800436c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d025      	beq.n	8004362 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800431a:	e022      	b.n	8004362 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004324:	d11f      	bne.n	8004366 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800432a:	e01c      	b.n	8004366 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d903      	bls.n	800433a <DMA_CheckFifoParam+0xb6>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d003      	beq.n	8004340 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004338:	e018      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      break;
 800433e:	e015      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      break;
 8004350:	e00b      	b.n	800436a <DMA_CheckFifoParam+0xe6>
      break;
 8004352:	bf00      	nop
 8004354:	e00a      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
 8004358:	e008      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800435a:	bf00      	nop
 800435c:	e006      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;   
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800436a:	bf00      	nop
    }
  } 
  
  return status; 
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a33      	ldr	r2, [pc, #204]	; (8004464 <HAL_GPIO_Init+0xe8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d017      	beq.n	80043ca <HAL_GPIO_Init+0x4e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a32      	ldr	r2, [pc, #200]	; (8004468 <HAL_GPIO_Init+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_GPIO_Init+0x4e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <HAL_GPIO_Init+0xf0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00f      	beq.n	80043ca <HAL_GPIO_Init+0x4e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a30      	ldr	r2, [pc, #192]	; (8004470 <HAL_GPIO_Init+0xf4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00b      	beq.n	80043ca <HAL_GPIO_Init+0x4e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <HAL_GPIO_Init+0xf8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <HAL_GPIO_Init+0x4e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2e      	ldr	r2, [pc, #184]	; (8004478 <HAL_GPIO_Init+0xfc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_Init+0x4e>
 80043c2:	21ac      	movs	r1, #172	; 0xac
 80043c4:	482d      	ldr	r0, [pc, #180]	; (800447c <HAL_GPIO_Init+0x100>)
 80043c6:	f7fd fd50 	bl	8001e6a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_GPIO_Init+0x64>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x6c>
 80043e0:	21ad      	movs	r1, #173	; 0xad
 80043e2:	4826      	ldr	r0, [pc, #152]	; (800447c <HAL_GPIO_Init+0x100>)
 80043e4:	f7fd fd41 	bl	8001e6a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d035      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d031      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b11      	cmp	r3, #17
 80043fe:	d02d      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d029      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b12      	cmp	r3, #18
 800440e:	d025      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004418:	d020      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004422:	d01b      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800442c:	d016      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004436:	d011      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004440:	d00c      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800444a:	d007      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0xe0>
 8004454:	21ae      	movs	r1, #174	; 0xae
 8004456:	4809      	ldr	r0, [pc, #36]	; (800447c <HAL_GPIO_Init+0x100>)
 8004458:	f7fd fd07 	bl	8001e6a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e20c      	b.n	800487c <HAL_GPIO_Init+0x500>
 8004462:	bf00      	nop
 8004464:	40020000 	.word	0x40020000
 8004468:	40020400 	.word	0x40020400
 800446c:	40020800 	.word	0x40020800
 8004470:	40020c00 	.word	0x40020c00
 8004474:	40021000 	.word	0x40021000
 8004478:	40021c00 	.word	0x40021c00
 800447c:	08011c30 	.word	0x08011c30
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004480:	2201      	movs	r2, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	429a      	cmp	r2, r3
 800449a:	f040 81ec 	bne.w	8004876 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d005      	beq.n	80044b6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d144      	bne.n	8004540 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00f      	beq.n	80044de <HAL_GPIO_Init+0x162>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d00b      	beq.n	80044de <HAL_GPIO_Init+0x162>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d007      	beq.n	80044de <HAL_GPIO_Init+0x162>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x162>
 80044d6:	21c0      	movs	r1, #192	; 0xc0
 80044d8:	4884      	ldr	r0, [pc, #528]	; (80046ec <HAL_GPIO_Init+0x370>)
 80044da:	f7fd fcc6 	bl	8001e6a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004514:	2201      	movs	r2, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 0201 	and.w	r2, r3, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b03      	cmp	r3, #3
 800454a:	d027      	beq.n	800459c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_GPIO_Init+0x1f0>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d007      	beq.n	800456c <HAL_GPIO_Init+0x1f0>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x1f0>
 8004564:	21d1      	movs	r1, #209	; 0xd1
 8004566:	4861      	ldr	r0, [pc, #388]	; (80046ec <HAL_GPIO_Init+0x370>)
 8004568:	f7fd fc7f 	bl	8001e6a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f040 80a3 	bne.w	80046f0 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d077      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d073      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d06f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d067      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d05f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d05b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d057      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d053      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d04f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d04b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d047      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d043      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b05      	cmp	r3, #5
 8004620:	d03f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d03b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d037      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d033      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d02f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d02b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d027      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b07      	cmp	r3, #7
 8004658:	d023      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b07      	cmp	r3, #7
 8004660:	d01f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b07      	cmp	r3, #7
 8004668:	d01b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b08      	cmp	r3, #8
 8004670:	d017      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b0a      	cmp	r3, #10
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b09      	cmp	r3, #9
 8004680:	d00f      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b09      	cmp	r3, #9
 8004688:	d00b      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d007      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x326>
 800469a:	21de      	movs	r1, #222	; 0xde
 800469c:	4813      	ldr	r0, [pc, #76]	; (80046ec <HAL_GPIO_Init+0x370>)
 800469e:	f7fd fbe4 	bl	8001e6a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	08da      	lsrs	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3208      	adds	r2, #8
 80046aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	220f      	movs	r2, #15
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	08da      	lsrs	r2, r3, #3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3208      	adds	r2, #8
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80046ea:	e001      	b.n	80046f0 <HAL_GPIO_Init+0x374>
 80046ec:	08011c30 	.word	0x08011c30
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	2203      	movs	r2, #3
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0203 	and.w	r2, r3, #3
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a2 	beq.w	8004876 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b56      	ldr	r3, [pc, #344]	; (8004890 <HAL_GPIO_Init+0x514>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	4a55      	ldr	r2, [pc, #340]	; (8004890 <HAL_GPIO_Init+0x514>)
 800473c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004740:	6453      	str	r3, [r2, #68]	; 0x44
 8004742:	4b53      	ldr	r3, [pc, #332]	; (8004890 <HAL_GPIO_Init+0x514>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800474e:	4a51      	ldr	r2, [pc, #324]	; (8004894 <HAL_GPIO_Init+0x518>)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	3302      	adds	r3, #2
 8004756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	220f      	movs	r2, #15
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a48      	ldr	r2, [pc, #288]	; (8004898 <HAL_GPIO_Init+0x51c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d019      	beq.n	80047ae <HAL_GPIO_Init+0x432>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a47      	ldr	r2, [pc, #284]	; (800489c <HAL_GPIO_Init+0x520>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_GPIO_Init+0x42e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a46      	ldr	r2, [pc, #280]	; (80048a0 <HAL_GPIO_Init+0x524>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00d      	beq.n	80047a6 <HAL_GPIO_Init+0x42a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a45      	ldr	r2, [pc, #276]	; (80048a4 <HAL_GPIO_Init+0x528>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <HAL_GPIO_Init+0x426>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a44      	ldr	r2, [pc, #272]	; (80048a8 <HAL_GPIO_Init+0x52c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d101      	bne.n	800479e <HAL_GPIO_Init+0x422>
 800479a:	2304      	movs	r3, #4
 800479c:	e008      	b.n	80047b0 <HAL_GPIO_Init+0x434>
 800479e:	2307      	movs	r3, #7
 80047a0:	e006      	b.n	80047b0 <HAL_GPIO_Init+0x434>
 80047a2:	2303      	movs	r3, #3
 80047a4:	e004      	b.n	80047b0 <HAL_GPIO_Init+0x434>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e002      	b.n	80047b0 <HAL_GPIO_Init+0x434>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_GPIO_Init+0x434>
 80047ae:	2300      	movs	r3, #0
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	f002 0203 	and.w	r2, r2, #3
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	4093      	lsls	r3, r2
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c0:	4934      	ldr	r1, [pc, #208]	; (8004894 <HAL_GPIO_Init+0x518>)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	3302      	adds	r3, #2
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <HAL_GPIO_Init+0x530>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047f2:	4a2e      	ldr	r2, [pc, #184]	; (80048ac <HAL_GPIO_Init+0x530>)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047f8:	4b2c      	ldr	r3, [pc, #176]	; (80048ac <HAL_GPIO_Init+0x530>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800481c:	4a23      	ldr	r2, [pc, #140]	; (80048ac <HAL_GPIO_Init+0x530>)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004822:	4b22      	ldr	r3, [pc, #136]	; (80048ac <HAL_GPIO_Init+0x530>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004846:	4a19      	ldr	r2, [pc, #100]	; (80048ac <HAL_GPIO_Init+0x530>)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800484c:	4b17      	ldr	r3, [pc, #92]	; (80048ac <HAL_GPIO_Init+0x530>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004870:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <HAL_GPIO_Init+0x530>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	f67f adfe 	bls.w	8004480 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	40013800 	.word	0x40013800
 8004898:	40020000 	.word	0x40020000
 800489c:	40020400 	.word	0x40020400
 80048a0:	40020800 	.word	0x40020800
 80048a4:	40020c00 	.word	0x40020c00
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40013c00 	.word	0x40013c00

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <HAL_GPIO_WritePin+0x20>
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_GPIO_WritePin+0x2a>
 80048d0:	f240 119d 	movw	r1, #413	; 0x19d
 80048d4:	480e      	ldr	r0, [pc, #56]	; (8004910 <HAL_GPIO_WritePin+0x60>)
 80048d6:	f7fd fac8 	bl	8001e6a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80048da:	787b      	ldrb	r3, [r7, #1]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_GPIO_WritePin+0x40>
 80048e0:	787b      	ldrb	r3, [r7, #1]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d004      	beq.n	80048f0 <HAL_GPIO_WritePin+0x40>
 80048e6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80048ea:	4809      	ldr	r0, [pc, #36]	; (8004910 <HAL_GPIO_WritePin+0x60>)
 80048ec:	f7fd fabd 	bl	8001e6a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80048f0:	787b      	ldrb	r3, [r7, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048fc:	e003      	b.n	8004906 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	041a      	lsls	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	619a      	str	r2, [r3, #24]
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	08011c30 	.word	0x08011c30

08004914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800492a:	4a05      	ldr	r2, [pc, #20]	; (8004940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd ff84 	bl	8002840 <HAL_GPIO_EXTI_Callback>
  }
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40013c00 	.word	0x40013c00

08004944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1bd      	b.n	8004cd2 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a93      	ldr	r2, [pc, #588]	; (8004ba8 <HAL_I2C_Init+0x264>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_I2C_Init+0x3a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a91      	ldr	r2, [pc, #580]	; (8004bac <HAL_I2C_Init+0x268>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_I2C_Init+0x3a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a90      	ldr	r2, [pc, #576]	; (8004bb0 <HAL_I2C_Init+0x26c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_I2C_Init+0x3a>
 8004974:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8004978:	488e      	ldr	r0, [pc, #568]	; (8004bb4 <HAL_I2C_Init+0x270>)
 800497a:	f7fd fa76 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_I2C_Init+0x4c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4a8b      	ldr	r2, [pc, #556]	; (8004bb8 <HAL_I2C_Init+0x274>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d904      	bls.n	800499a <HAL_I2C_Init+0x56>
 8004990:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004994:	4887      	ldr	r0, [pc, #540]	; (8004bb4 <HAL_I2C_Init+0x270>)
 8004996:	f7fd fa68 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_I2C_Init+0x72>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d004      	beq.n	80049b6 <HAL_I2C_Init+0x72>
 80049ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80049b0:	4880      	ldr	r0, [pc, #512]	; (8004bb4 <HAL_I2C_Init+0x270>)
 80049b2:	f7fd fa5a 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <HAL_I2C_Init+0x8c>
 80049c6:	f240 11c1 	movw	r1, #449	; 0x1c1
 80049ca:	487a      	ldr	r0, [pc, #488]	; (8004bb4 <HAL_I2C_Init+0x270>)
 80049cc:	f7fd fa4d 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d8:	d009      	beq.n	80049ee <HAL_I2C_Init+0xaa>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049e2:	d004      	beq.n	80049ee <HAL_I2C_Init+0xaa>
 80049e4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80049e8:	4872      	ldr	r0, [pc, #456]	; (8004bb4 <HAL_I2C_Init+0x270>)
 80049ea:	f7fd fa3e 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_I2C_Init+0xc4>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d004      	beq.n	8004a08 <HAL_I2C_Init+0xc4>
 80049fe:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004a02:	486c      	ldr	r0, [pc, #432]	; (8004bb4 <HAL_I2C_Init+0x270>)
 8004a04:	f7fd fa31 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <HAL_I2C_Init+0xda>
 8004a14:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004a18:	4866      	ldr	r0, [pc, #408]	; (8004bb4 <HAL_I2C_Init+0x270>)
 8004a1a:	f7fd fa26 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_I2C_Init+0xf4>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d004      	beq.n	8004a38 <HAL_I2C_Init+0xf4>
 8004a2e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004a32:	4860      	ldr	r0, [pc, #384]	; (8004bb4 <HAL_I2C_Init+0x270>)
 8004a34:	f7fd fa19 	bl	8001e6a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_I2C_Init+0x10e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d004      	beq.n	8004a52 <HAL_I2C_Init+0x10e>
 8004a48:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004a4c:	4859      	ldr	r0, [pc, #356]	; (8004bb4 <HAL_I2C_Init+0x270>)
 8004a4e:	f7fd fa0c 	bl	8001e6a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fd f8b8 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	; 0x24
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f002 f92a 	bl	8006cfc <HAL_RCC_GetPCLK1Freq>
 8004aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4a43      	ldr	r2, [pc, #268]	; (8004bbc <HAL_I2C_Init+0x278>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d807      	bhi.n	8004ac4 <HAL_I2C_Init+0x180>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a42      	ldr	r2, [pc, #264]	; (8004bc0 <HAL_I2C_Init+0x27c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e006      	b.n	8004ad2 <HAL_I2C_Init+0x18e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a3f      	ldr	r2, [pc, #252]	; (8004bc4 <HAL_I2C_Init+0x280>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	bf94      	ite	ls
 8004acc:	2301      	movls	r3, #1
 8004ace:	2300      	movhi	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0fb      	b.n	8004cd2 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_I2C_Init+0x284>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a2c      	ldr	r2, [pc, #176]	; (8004bbc <HAL_I2C_Init+0x278>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <HAL_I2C_Init+0x1d0>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3301      	adds	r3, #1
 8004b12:	e009      	b.n	8004b28 <HAL_I2C_Init+0x1e4>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	4a2b      	ldr	r2, [pc, #172]	; (8004bcc <HAL_I2C_Init+0x288>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	3301      	adds	r3, #1
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	491e      	ldr	r1, [pc, #120]	; (8004bbc <HAL_I2C_Init+0x278>)
 8004b44:	428b      	cmp	r3, r1
 8004b46:	d819      	bhi.n	8004b7c <HAL_I2C_Init+0x238>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1e59      	subs	r1, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_I2C_Init+0x234>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e59      	subs	r1, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	e065      	b.n	8004c44 <HAL_I2C_Init+0x300>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e063      	b.n	8004c44 <HAL_I2C_Init+0x300>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d125      	bne.n	8004bd0 <HAL_I2C_Init+0x28c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e026      	b.n	8004bf6 <HAL_I2C_Init+0x2b2>
 8004ba8:	40005400 	.word	0x40005400
 8004bac:	40005800 	.word	0x40005800
 8004bb0:	40005c00 	.word	0x40005c00
 8004bb4:	08011c6c 	.word	0x08011c6c
 8004bb8:	00061a80 	.word	0x00061a80
 8004bbc:	000186a0 	.word	0x000186a0
 8004bc0:	001e847f 	.word	0x001e847f
 8004bc4:	003d08ff 	.word	0x003d08ff
 8004bc8:	431bde83 	.word	0x431bde83
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1e58      	subs	r0, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6859      	ldr	r1, [r3, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	0099      	lsls	r1, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Init+0x2ba>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e022      	b.n	8004c44 <HAL_I2C_Init+0x300>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10e      	bne.n	8004c24 <HAL_I2C_Init+0x2e0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1e58      	subs	r0, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	440b      	add	r3, r1
 8004c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	e00f      	b.n	8004c44 <HAL_I2C_Init+0x300>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1e58      	subs	r0, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6859      	ldr	r1, [r3, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	0099      	lsls	r1, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	6809      	ldr	r1, [r1, #0]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6911      	ldr	r1, [r2, #16]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68d2      	ldr	r2, [r2, #12]
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop

08004cdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cde:	b08f      	sub	sp, #60	; 0x3c
 8004ce0:	af0a      	add	r7, sp, #40	; 0x28
 8004ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e118      	b.n	8004f20 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf6:	d003      	beq.n	8004d00 <HAL_PCD_Init+0x24>
 8004cf8:	2187      	movs	r1, #135	; 0x87
 8004cfa:	488b      	ldr	r0, [pc, #556]	; (8004f28 <HAL_PCD_Init+0x24c>)
 8004cfc:	f7fd f8b5 	bl	8001e6a <assert_failed>

  USBx = hpcd->Instance;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f00b fe6e 	bl	80109fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2203      	movs	r2, #3
 8004d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f005 fa1b 	bl	800a17a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	687e      	ldr	r6, [r7, #4]
 8004d4c:	466d      	mov	r5, sp
 8004d4e:	f106 0410 	add.w	r4, r6, #16
 8004d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d62:	1d33      	adds	r3, r6, #4
 8004d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d66:	6838      	ldr	r0, [r7, #0]
 8004d68:	f005 f8f2 	bl	8009f50 <USB_CoreInit>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e0d0      	b.n	8004f20 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 fa09 	bl	800a19c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e04a      	b.n	8004e26 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	333d      	adds	r3, #61	; 0x3d
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	333c      	adds	r3, #60	; 0x3c
 8004db4:	7bfa      	ldrb	r2, [r7, #15]
 8004db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	b298      	uxth	r0, r3
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	3344      	adds	r3, #68	; 0x44
 8004dcc:	4602      	mov	r2, r0
 8004dce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3340      	adds	r3, #64	; 0x40
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3348      	adds	r3, #72	; 0x48
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004df8:	7bfa      	ldrb	r2, [r7, #15]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	334c      	adds	r3, #76	; 0x4c
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	3354      	adds	r3, #84	; 0x54
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3af      	bcc.n	8004d90 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e30:	2300      	movs	r3, #0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e044      	b.n	8004ec0 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e5e:	7bfa      	ldrb	r2, [r7, #15]
 8004e60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	7bfa      	ldrb	r2, [r7, #15]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3b5      	bcc.n	8004e36 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	687e      	ldr	r6, [r7, #4]
 8004ed2:	466d      	mov	r5, sp
 8004ed4:	f106 0410 	add.w	r4, r6, #16
 8004ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ee8:	1d33      	adds	r3, r6, #4
 8004eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	f005 f9a1 	bl	800a234 <USB_DevInit>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e00d      	b.n	8004f20 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f006 faf0 	bl	800b4fe <USB_DevDisconnect>

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f28:	08011ca4 	.word	0x08011ca4

08004f2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_PCD_Start+0x1c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e020      	b.n	8004f8a <HAL_PCD_Start+0x5e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d109      	bne.n	8004f6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d005      	beq.n	8004f6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f005 f8f1 	bl	800a158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f006 fa9e 	bl	800b4bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f92:	b590      	push	{r4, r7, lr}
 8004f94:	b08d      	sub	sp, #52	; 0x34
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f006 fb5c 	bl	800b666 <USB_GetMode>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 848a 	bne.w	80058ca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f006 fac0 	bl	800b540 <USB_ReadInterrupts>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8480 	beq.w	80058c8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f006 faad 	bl	800b540 <USB_ReadInterrupts>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d107      	bne.n	8005000 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f002 0202 	and.w	r2, r2, #2
 8004ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f006 fa9b 	bl	800b540 <USB_ReadInterrupts>
 800500a:	4603      	mov	r3, r0
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b10      	cmp	r3, #16
 8005012:	d161      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0210 	bic.w	r2, r2, #16
 8005022:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f003 020f 	and.w	r2, r3, #15
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	0c5b      	lsrs	r3, r3, #17
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	2b02      	cmp	r3, #2
 800504e:	d124      	bne.n	800509a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d035      	beq.n	80050c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800506a:	b29b      	uxth	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	6a38      	ldr	r0, [r7, #32]
 8005070:	f006 f8d2 	bl	800b218 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005080:	441a      	add	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005092:	441a      	add	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	e016      	b.n	80050c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	0c5b      	lsrs	r3, r3, #17
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d110      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050ac:	2208      	movs	r2, #8
 80050ae:	4619      	mov	r1, r3
 80050b0:	6a38      	ldr	r0, [r7, #32]
 80050b2:	f006 f8b1 	bl	800b218 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	6a1a      	ldr	r2, [r3, #32]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c2:	441a      	add	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0210 	orr.w	r2, r2, #16
 80050d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f006 fa2f 	bl	800b540 <USB_ReadInterrupts>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050ec:	f040 80a7 	bne.w	800523e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f006 fa34 	bl	800b566 <USB_ReadDevAllOutEpInterrupt>
 80050fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005100:	e099      	b.n	8005236 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 808e 	beq.w	800522a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f006 fa58 	bl	800b5ce <USB_ReadDevOutEPInterrupt>
 800511e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	461a      	mov	r2, r3
 8005138:	2301      	movs	r3, #1
 800513a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800513c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fec2 	bl	8005ec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	461a      	mov	r2, r3
 800515c:	2308      	movs	r3, #8
 800515e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 ff98 	bl	8006098 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	461a      	mov	r2, r3
 8005180:	2310      	movs	r3, #16
 8005182:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d030      	beq.n	80051f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b80      	cmp	r3, #128	; 0x80
 8005198:	d109      	bne.n	80051ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	3304      	adds	r3, #4
 80051c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	78db      	ldrb	r3, [r3, #3]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d108      	bne.n	80051de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f00b fd0b 	bl	8010bf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	2302      	movs	r3, #2
 80051ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	2320      	movs	r3, #32
 800520a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005228:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	3301      	adds	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af62 	bne.w	8005102 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f006 f97c 	bl	800b540 <USB_ReadInterrupts>
 8005248:	4603      	mov	r3, r0
 800524a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800524e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005252:	f040 80db 	bne.w	800540c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f006 f99d 	bl	800b59a <USB_ReadDevAllInEpInterrupt>
 8005260:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005266:	e0cd      	b.n	8005404 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80c2 	beq.w	80053f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f006 f9c3 	bl	800b60a <USB_ReadDevInEPInterrupt>
 8005284:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d057      	beq.n	8005340 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	2201      	movs	r2, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b0:	4013      	ands	r3, r2
 80052b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	461a      	mov	r2, r3
 80052c2:	2301      	movs	r3, #1
 80052c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d132      	bne.n	8005334 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	334c      	adds	r3, #76	; 0x4c
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4403      	add	r3, r0
 80052ee:	3348      	adds	r3, #72	; 0x48
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4419      	add	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4403      	add	r3, r0
 8005302:	334c      	adds	r3, #76	; 0x4c
 8005304:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <HAL_PCD_IRQHandler+0x3a2>
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3354      	adds	r3, #84	; 0x54
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800532c:	461a      	mov	r2, r3
 800532e:	2101      	movs	r1, #1
 8005330:	f006 f9ca 	bl	800b6c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	b2db      	uxtb	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f00b fbdf 	bl	8010afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	461a      	mov	r2, r3
 8005358:	2308      	movs	r3, #8
 800535a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	461a      	mov	r2, r3
 8005374:	2310      	movs	r3, #16
 8005376:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	461a      	mov	r2, r3
 8005390:	2340      	movs	r3, #64	; 0x40
 8005392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800539e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a0:	6a38      	ldr	r0, [r7, #32]
 80053a2:	f005 f8ab 	bl	800a4fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	4613      	mov	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	3338      	adds	r3, #56	; 0x38
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	4413      	add	r3, r2
 80053b6:	3304      	adds	r3, #4
 80053b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	78db      	ldrb	r3, [r3, #3]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d108      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f00b fc22 	bl	8010c18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	2302      	movs	r3, #2
 80053e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fcdb 	bl	8005dae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	3301      	adds	r3, #1
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	f47f af2e 	bne.w	8005268 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f006 f895 	bl	800b540 <USB_ReadInterrupts>
 8005416:	4603      	mov	r3, r0
 8005418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800541c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005420:	d122      	bne.n	8005468 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800543c:	2b01      	cmp	r3, #1
 800543e:	d108      	bne.n	8005452 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005448:	2100      	movs	r1, #0
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fec2 	bl	80061d4 <HAL_PCDEx_LPM_Callback>
 8005450:	e002      	b.n	8005458 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f00b fbc0 	bl	8010bd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f006 f867 	bl	800b540 <USB_ReadInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547c:	d112      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d102      	bne.n	8005494 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f00b fb7c 	bl	8010b8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f006 f849 	bl	800b540 <USB_ReadInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b8:	f040 80b7 	bne.w	800562a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2110      	movs	r1, #16
 80054d6:	4618      	mov	r0, r3
 80054d8:	f005 f810 	bl	800a4fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054dc:	2300      	movs	r3, #0
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e0:	e046      	b.n	8005570 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	461a      	mov	r2, r3
 80054f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005510:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005514:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005522:	461a      	mov	r2, r3
 8005524:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005528:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005548:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005564:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005568:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	3301      	adds	r3, #1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005576:	429a      	cmp	r2, r3
 8005578:	d3b3      	bcc.n	80054e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005588:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800558c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a6:	f043 030b 	orr.w	r3, r3, #11
 80055aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055bc:	f043 030b 	orr.w	r3, r3, #11
 80055c0:	6453      	str	r3, [r2, #68]	; 0x44
 80055c2:	e015      	b.n	80055f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f043 030b 	orr.w	r3, r3, #11
 80055ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005602:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005614:	461a      	mov	r2, r3
 8005616:	f006 f857 	bl	800b6c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f005 ff86 	bl	800b540 <USB_ReadInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563e:	d124      	bne.n	800568a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f006 f81c 	bl	800b682 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f004 ffd1 	bl	800a5f6 <USB_GetDevSpeed>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681c      	ldr	r4, [r3, #0]
 8005660:	f001 fb40 	bl	8006ce4 <HAL_RCC_GetHCLKFreq>
 8005664:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	4620      	mov	r0, r4
 8005670:	f004 fcd0 	bl	800a014 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f00b fa6a 	bl	8010b4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005688:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f005 ff56 	bl	800b540 <USB_ReadInterrupts>
 8005694:	4603      	mov	r3, r0
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d10a      	bne.n	80056b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f00b fa47 	bl	8010b32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f002 0208 	and.w	r2, r2, #8
 80056b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f005 ff41 	bl	800b540 <USB_ReadInterrupts>
 80056be:	4603      	mov	r3, r0
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d122      	bne.n	800570e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056d4:	2301      	movs	r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
 80056d8:	e014      	b.n	8005704 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d105      	bne.n	80056fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb27 	bl	8005d4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	3301      	adds	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	429a      	cmp	r2, r3
 800570c:	d3e5      	bcc.n	80056da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f005 ff14 	bl	800b540 <USB_ReadInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005722:	d13b      	bne.n	800579c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005724:	2301      	movs	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
 8005728:	e02b      	b.n	8005782 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3340      	adds	r3, #64	; 0x40
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d115      	bne.n	800577c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005750:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005752:	2b00      	cmp	r3, #0
 8005754:	da12      	bge.n	800577c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	333f      	adds	r3, #63	; 0x3f
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005772:	b2db      	uxtb	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fae8 	bl	8005d4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	3301      	adds	r3, #1
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	429a      	cmp	r2, r3
 800578a:	d3ce      	bcc.n	800572a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800579a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f005 fecd 	bl	800b540 <USB_ReadInterrupts>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057b0:	d155      	bne.n	800585e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057b2:	2301      	movs	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
 80057b6:	e045      	b.n	8005844 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d12e      	bne.n	800583e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da2b      	bge.n	800583e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d121      	bne.n	800583e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800583a:	6053      	str	r3, [r2, #4]
            break;
 800583c:	e007      	b.n	800584e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	3301      	adds	r3, #1
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	429a      	cmp	r2, r3
 800584c:	d3b4      	bcc.n	80057b8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800585c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f005 fe6c 	bl	800b540 <USB_ReadInterrupts>
 8005868:	4603      	mov	r3, r0
 800586a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d10a      	bne.n	800588a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f00b f9e1 	bl	8010c3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f005 fe56 	bl	800b540 <USB_ReadInterrupts>
 8005894:	4603      	mov	r3, r0
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d115      	bne.n	80058ca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f00b f9d1 	bl	8010c58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6859      	ldr	r1, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	e000      	b.n	80058ca <HAL_PCD_IRQHandler+0x938>
      return;
 80058c8:	bf00      	nop
    }
  }
}
 80058ca:	3734      	adds	r7, #52	; 0x34
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}

080058d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_PCD_SetAddress+0x1a>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e013      	b.n	8005912 <HAL_PCD_SetAddress+0x42>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	4611      	mov	r1, r2
 8005902:	4618      	mov	r0, r3
 8005904:	f005 fdb4 	bl	800b470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	4608      	mov	r0, r1
 8005924:	4611      	mov	r1, r2
 8005926:	461a      	mov	r2, r3
 8005928:	4603      	mov	r3, r0
 800592a:	70fb      	strb	r3, [r7, #3]
 800592c:	460b      	mov	r3, r1
 800592e:	803b      	strh	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da0f      	bge.n	8005960 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	f003 020f 	and.w	r2, r3, #15
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	3338      	adds	r3, #56	; 0x38
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	3304      	adds	r3, #4
 8005956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	705a      	strb	r2, [r3, #1]
 800595e:	e00f      	b.n	8005980 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	3304      	adds	r3, #4
 8005978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800598c:	883a      	ldrh	r2, [r7, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	78ba      	ldrb	r2, [r7, #2]
 8005996:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059aa:	78bb      	ldrb	r3, [r7, #2]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d102      	bne.n	80059b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_PCD_EP_Open+0xaa>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e00e      	b.n	80059e2 <HAL_PCD_EP_Open+0xc8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 fe34 	bl	800a640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059e0:	7afb      	ldrb	r3, [r7, #11]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da0f      	bge.n	8005a1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	3338      	adds	r3, #56	; 0x38
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	3304      	adds	r3, #4
 8005a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	705a      	strb	r2, [r3, #1]
 8005a1c:	e00f      	b.n	8005a3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f003 020f 	and.w	r2, r3, #15
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	3304      	adds	r3, #4
 8005a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_PCD_EP_Close+0x6e>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e00e      	b.n	8005a76 <HAL_PCD_EP_Close+0x8c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f004 fe72 	bl	800a750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	f005 f951 	bl	800ad98 <USB_EP0StartXfer>
 8005af6:	e008      	b.n	8005b0a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	f004 feff 	bl	800a908 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b36:	681b      	ldr	r3, [r3, #0]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	460b      	mov	r3, r1
 8005b52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	f003 020f 	and.w	r2, r3, #15
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	3338      	adds	r3, #56	; 0x38
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	3304      	adds	r3, #4
 8005b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2201      	movs	r2, #1
 8005b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d102      	bne.n	8005b9e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6979      	ldr	r1, [r7, #20]
 8005bb6:	f005 f8ef 	bl	800ad98 <USB_EP0StartXfer>
 8005bba:	e008      	b.n	8005bce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6979      	ldr	r1, [r7, #20]
 8005bca:	f004 fe9d 	bl	800a908 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	f003 020f 	and.w	r2, r3, #15
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d901      	bls.n	8005bf6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e050      	b.n	8005c98 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da0f      	bge.n	8005c1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	3338      	adds	r3, #56	; 0x38
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	3304      	adds	r3, #4
 8005c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	705a      	strb	r2, [r3, #1]
 8005c1c:	e00d      	b.n	8005c3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	4613      	mov	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_PCD_EP_SetStall+0x82>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e01e      	b.n	8005c98 <HAL_PCD_EP_SetStall+0xc0>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f005 fb2d 	bl	800b2c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	b2d9      	uxtb	r1, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f005 fd1d 	bl	800b6c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d901      	bls.n	8005cbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e042      	b.n	8005d44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da0f      	bge.n	8005ce6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	3338      	adds	r3, #56	; 0x38
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3304      	adds	r3, #4
 8005cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	705a      	strb	r2, [r3, #1]
 8005ce4:	e00f      	b.n	8005d06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_PCD_EP_ClrStall+0x86>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e00e      	b.n	8005d44 <HAL_PCD_EP_ClrStall+0xa4>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f005 fb35 	bl	800b3a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	da0c      	bge.n	8005d7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	4613      	mov	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	3338      	adds	r3, #56	; 0x38
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	3304      	adds	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e00c      	b.n	8005d94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	f003 020f 	and.w	r2, r3, #15
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68f9      	ldr	r1, [r7, #12]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f005 f954 	bl	800b048 <USB_EPStopXfer>
 8005da0:	4603      	mov	r3, r0
 8005da2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b08a      	sub	sp, #40	; 0x28
 8005db2:	af02      	add	r7, sp, #8
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	3338      	adds	r3, #56	; 0x38
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1a      	ldr	r2, [r3, #32]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e06c      	b.n	8005ec0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d902      	bls.n	8005e02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3303      	adds	r3, #3
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e0a:	e02b      	b.n	8005e64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d902      	bls.n	8005e28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3303      	adds	r3, #3
 8005e2c:	089b      	lsrs	r3, r3, #2
 8005e2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6919      	ldr	r1, [r3, #16]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	4603      	mov	r3, r0
 8005e46:	6978      	ldr	r0, [r7, #20]
 8005e48:	f005 f9a8 	bl	800b19c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	441a      	add	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d809      	bhi.n	8005e8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d203      	bcs.n	8005e8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1be      	bne.n	8005e0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d811      	bhi.n	8005ebe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	6939      	ldr	r1, [r7, #16]
 8005eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eba:	4013      	ands	r3, r2
 8005ebc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	333c      	adds	r3, #60	; 0x3c
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d17b      	bne.n	8005ff6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4a61      	ldr	r2, [pc, #388]	; (8006090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	f240 80b9 	bls.w	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80b3 	beq.w	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f30:	6093      	str	r3, [r2, #8]
 8005f32:	e0a7      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	6093      	str	r3, [r2, #8]
 8005f50:	e098      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8093 	bne.w	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4a4b      	ldr	r2, [pc, #300]	; (8006090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d90f      	bls.n	8005f86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	6093      	str	r3, [r2, #8]
 8005f84:	e07e      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4413      	add	r3, r2
 8005f98:	3304      	adds	r3, #4
 8005f9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	0159      	lsls	r1, r3, #5
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	440b      	add	r3, r1
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb2:	1ad2      	subs	r2, r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d114      	bne.n	8005fe8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	f005 fb78 	bl	800b6c8 <USB_EP0_OutStart>
 8005fd8:	e006      	b.n	8005fe8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f00a fd6a 	bl	8010ac8 <HAL_PCD_DataOutStageCallback>
 8005ff4:	e046      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4a26      	ldr	r2, [pc, #152]	; (8006094 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d124      	bne.n	8006048 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	461a      	mov	r2, r3
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	6093      	str	r3, [r2, #8]
 800601c:	e032      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	461a      	mov	r2, r3
 8006036:	2320      	movs	r3, #32
 8006038:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f00a fd41 	bl	8010ac8 <HAL_PCD_DataOutStageCallback>
 8006046:	e01d      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d114      	bne.n	8006078 <PCD_EP_OutXfrComplete_int+0x1b0>
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006070:	461a      	mov	r2, r3
 8006072:	2100      	movs	r1, #0
 8006074:	f005 fb28 	bl	800b6c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f00a fd22 	bl	8010ac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	4f54300a 	.word	0x4f54300a
 8006094:	4f54310a 	.word	0x4f54310a

08006098 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	333c      	adds	r3, #60	; 0x3c
 80060b0:	3304      	adds	r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a15      	ldr	r2, [pc, #84]	; (8006120 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d90e      	bls.n	80060ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e4:	461a      	mov	r2, r3
 80060e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f00a fcd9 	bl	8010aa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <PCD_EP_OutSetupPacket_int+0x88>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d90c      	bls.n	8006114 <PCD_EP_OutSetupPacket_int+0x7c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d108      	bne.n	8006114 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800610c:	461a      	mov	r2, r3
 800610e:	2101      	movs	r1, #1
 8006110:	f005 fada 	bl	800b6c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	4f54300a 	.word	0x4f54300a

08006124 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
 8006130:	4613      	mov	r3, r2
 8006132:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006142:	883b      	ldrh	r3, [r7, #0]
 8006144:	0419      	lsls	r1, r3, #16
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	430a      	orrs	r2, r1
 800614e:	629a      	str	r2, [r3, #40]	; 0x28
 8006150:	e028      	b.n	80061a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e00d      	b.n	8006182 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	3340      	adds	r3, #64	; 0x40
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	3301      	adds	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
 8006182:	7bfa      	ldrb	r2, [r7, #15]
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	3b01      	subs	r3, #1
 8006188:	429a      	cmp	r2, r3
 800618a:	d3ec      	bcc.n	8006166 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800618c:	883b      	ldrh	r3, [r7, #0]
 800618e:	0418      	lsls	r0, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	3b01      	subs	r3, #1
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	4302      	orrs	r2, r0
 800619c:	3340      	adds	r3, #64	; 0x40
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	887a      	ldrh	r2, [r7, #2]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e314      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d903      	bls.n	800620e <HAL_RCC_OscConfig+0x22>
 8006206:	21e6      	movs	r1, #230	; 0xe6
 8006208:	4897      	ldr	r0, [pc, #604]	; (8006468 <HAL_RCC_OscConfig+0x27c>)
 800620a:	f7fb fe2e 	bl	8001e6a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8088 	beq.w	800632c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <HAL_RCC_OscConfig+0x54>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622c:	d008      	beq.n	8006240 <HAL_RCC_OscConfig+0x54>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006236:	d003      	beq.n	8006240 <HAL_RCC_OscConfig+0x54>
 8006238:	21eb      	movs	r1, #235	; 0xeb
 800623a:	488b      	ldr	r0, [pc, #556]	; (8006468 <HAL_RCC_OscConfig+0x27c>)
 800623c:	f7fb fe15 	bl	8001e6a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006240:	4b8a      	ldr	r3, [pc, #552]	; (800646c <HAL_RCC_OscConfig+0x280>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b04      	cmp	r3, #4
 800624a:	d00c      	beq.n	8006266 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800624c:	4b87      	ldr	r3, [pc, #540]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006254:	2b08      	cmp	r3, #8
 8006256:	d112      	bne.n	800627e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006258:	4b84      	ldr	r3, [pc, #528]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006264:	d10b      	bne.n	800627e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006266:	4b81      	ldr	r3, [pc, #516]	; (800646c <HAL_RCC_OscConfig+0x280>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d05b      	beq.n	800632a <HAL_RCC_OscConfig+0x13e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d157      	bne.n	800632a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e2d4      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006286:	d106      	bne.n	8006296 <HAL_RCC_OscConfig+0xaa>
 8006288:	4b78      	ldr	r3, [pc, #480]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a77      	ldr	r2, [pc, #476]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800628e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e01d      	b.n	80062d2 <HAL_RCC_OscConfig+0xe6>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800629e:	d10c      	bne.n	80062ba <HAL_RCC_OscConfig+0xce>
 80062a0:	4b72      	ldr	r3, [pc, #456]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a71      	ldr	r2, [pc, #452]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b6f      	ldr	r3, [pc, #444]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a6e      	ldr	r2, [pc, #440]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	e00b      	b.n	80062d2 <HAL_RCC_OscConfig+0xe6>
 80062ba:	4b6c      	ldr	r3, [pc, #432]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6b      	ldr	r2, [pc, #428]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4b69      	ldr	r3, [pc, #420]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a68      	ldr	r2, [pc, #416]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d013      	beq.n	8006302 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062da:	f7fc fdf9 	bl	8002ed0 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e2:	f7fc fdf5 	bl	8002ed0 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b64      	cmp	r3, #100	; 0x64
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e299      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f4:	4b5d      	ldr	r3, [pc, #372]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0xf6>
 8006300:	e014      	b.n	800632c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006302:	f7fc fde5 	bl	8002ed0 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800630a:	f7fc fde1 	bl	8002ed0 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b64      	cmp	r3, #100	; 0x64
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e285      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800631c:	4b53      	ldr	r3, [pc, #332]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f0      	bne.n	800630a <HAL_RCC_OscConfig+0x11e>
 8006328:	e000      	b.n	800632c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d079      	beq.n	800642c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_RCC_OscConfig+0x166>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d004      	beq.n	8006352 <HAL_RCC_OscConfig+0x166>
 8006348:	f240 111d 	movw	r1, #285	; 0x11d
 800634c:	4846      	ldr	r0, [pc, #280]	; (8006468 <HAL_RCC_OscConfig+0x27c>)
 800634e:	f7fb fd8c 	bl	8001e6a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b1f      	cmp	r3, #31
 8006358:	d904      	bls.n	8006364 <HAL_RCC_OscConfig+0x178>
 800635a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800635e:	4842      	ldr	r0, [pc, #264]	; (8006468 <HAL_RCC_OscConfig+0x27c>)
 8006360:	f7fb fd83 	bl	8001e6a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006364:	4b41      	ldr	r3, [pc, #260]	; (800646c <HAL_RCC_OscConfig+0x280>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006370:	4b3e      	ldr	r3, [pc, #248]	; (800646c <HAL_RCC_OscConfig+0x280>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006378:	2b08      	cmp	r3, #8
 800637a:	d11c      	bne.n	80063b6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800637c:	4b3b      	ldr	r3, [pc, #236]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d116      	bne.n	80063b6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006388:	4b38      	ldr	r3, [pc, #224]	; (800646c <HAL_RCC_OscConfig+0x280>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_RCC_OscConfig+0x1b4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e243      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a0:	4b32      	ldr	r3, [pc, #200]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	492f      	ldr	r1, [pc, #188]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b4:	e03a      	b.n	800642c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d020      	beq.n	8006400 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063be:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <HAL_RCC_OscConfig+0x284>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fc fd84 	bl	8002ed0 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fc fd80 	bl	8002ed0 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e224      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063de:	4b23      	ldr	r3, [pc, #140]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	491c      	ldr	r1, [pc, #112]	; (800646c <HAL_RCC_OscConfig+0x280>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
 80063fe:	e015      	b.n	800642c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006400:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <HAL_RCC_OscConfig+0x284>)
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006406:	f7fc fd63 	bl	8002ed0 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640e:	f7fc fd5f 	bl	8002ed0 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e203      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006420:	4b12      	ldr	r3, [pc, #72]	; (800646c <HAL_RCC_OscConfig+0x280>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f0      	bne.n	800640e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d045      	beq.n	80064c4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_OscConfig+0x266>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d004      	beq.n	8006452 <HAL_RCC_OscConfig+0x266>
 8006448:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800644c:	4806      	ldr	r0, [pc, #24]	; (8006468 <HAL_RCC_OscConfig+0x27c>)
 800644e:	f7fb fd0c 	bl	8001e6a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01e      	beq.n	8006498 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <HAL_RCC_OscConfig+0x288>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fc fd36 	bl	8002ed0 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	e010      	b.n	800648a <HAL_RCC_OscConfig+0x29e>
 8006468:	08011cdc 	.word	0x08011cdc
 800646c:	40023800 	.word	0x40023800
 8006470:	42470000 	.word	0x42470000
 8006474:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006478:	f7fc fd2a 	bl	8002ed0 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e1ce      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	4b5e      	ldr	r3, [pc, #376]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 800648c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x28c>
 8006496:	e015      	b.n	80064c4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006498:	4b5b      	ldr	r3, [pc, #364]	; (8006608 <HAL_RCC_OscConfig+0x41c>)
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649e:	f7fc fd17 	bl	8002ed0 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a6:	f7fc fd13 	bl	8002ed0 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e1b7      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	4b52      	ldr	r3, [pc, #328]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 80064ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f0      	bne.n	80064a6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80b0 	beq.w	8006632 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00c      	beq.n	80064f8 <HAL_RCC_OscConfig+0x30c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d008      	beq.n	80064f8 <HAL_RCC_OscConfig+0x30c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	d004      	beq.n	80064f8 <HAL_RCC_OscConfig+0x30c>
 80064ee:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80064f2:	4846      	ldr	r0, [pc, #280]	; (800660c <HAL_RCC_OscConfig+0x420>)
 80064f4:	f7fb fcb9 	bl	8001e6a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f8:	4b42      	ldr	r3, [pc, #264]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006504:	2300      	movs	r3, #0
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	4b3e      	ldr	r3, [pc, #248]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	4a3d      	ldr	r2, [pc, #244]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 800650e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006512:	6413      	str	r3, [r2, #64]	; 0x40
 8006514:	4b3b      	ldr	r3, [pc, #236]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006524:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <HAL_RCC_OscConfig+0x424>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652c:	2b00      	cmp	r3, #0
 800652e:	d118      	bne.n	8006562 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006530:	4b37      	ldr	r3, [pc, #220]	; (8006610 <HAL_RCC_OscConfig+0x424>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a36      	ldr	r2, [pc, #216]	; (8006610 <HAL_RCC_OscConfig+0x424>)
 8006536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653c:	f7fc fcc8 	bl	8002ed0 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006544:	f7fc fcc4 	bl	8002ed0 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e168      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006556:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <HAL_RCC_OscConfig+0x424>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f0      	beq.n	8006544 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d106      	bne.n	8006578 <HAL_RCC_OscConfig+0x38c>
 800656a:	4b26      	ldr	r3, [pc, #152]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4a25      	ldr	r2, [pc, #148]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6713      	str	r3, [r2, #112]	; 0x70
 8006576:	e01c      	b.n	80065b2 <HAL_RCC_OscConfig+0x3c6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b05      	cmp	r3, #5
 800657e:	d10c      	bne.n	800659a <HAL_RCC_OscConfig+0x3ae>
 8006580:	4b20      	ldr	r3, [pc, #128]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 8006582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 8006586:	f043 0304 	orr.w	r3, r3, #4
 800658a:	6713      	str	r3, [r2, #112]	; 0x70
 800658c:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6713      	str	r3, [r2, #112]	; 0x70
 8006598:	e00b      	b.n	80065b2 <HAL_RCC_OscConfig+0x3c6>
 800659a:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4a19      	ldr	r2, [pc, #100]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 80065ac:	f023 0304 	bic.w	r3, r3, #4
 80065b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d015      	beq.n	80065e6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ba:	f7fc fc89 	bl	8002ed0 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fc fc85 	bl	8002ed0 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e127      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <HAL_RCC_OscConfig+0x418>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ee      	beq.n	80065c2 <HAL_RCC_OscConfig+0x3d6>
 80065e4:	e01c      	b.n	8006620 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e6:	f7fc fc73 	bl	8002ed0 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ec:	e012      	b.n	8006614 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ee:	f7fc fc6f 	bl	8002ed0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d909      	bls.n	8006614 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e111      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
 8006604:	40023800 	.word	0x40023800
 8006608:	42470e80 	.word	0x42470e80
 800660c:	08011cdc 	.word	0x08011cdc
 8006610:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006614:	4b86      	ldr	r3, [pc, #536]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e6      	bne.n	80065ee <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d105      	bne.n	8006632 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006626:	4b82      	ldr	r3, [pc, #520]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	4a81      	ldr	r2, [pc, #516]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 800662c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_RCC_OscConfig+0x468>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d008      	beq.n	8006654 <HAL_RCC_OscConfig+0x468>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d004      	beq.n	8006654 <HAL_RCC_OscConfig+0x468>
 800664a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800664e:	4879      	ldr	r0, [pc, #484]	; (8006834 <HAL_RCC_OscConfig+0x648>)
 8006650:	f7fb fc0b 	bl	8001e6a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80e4 	beq.w	8006826 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665e:	4b74      	ldr	r3, [pc, #464]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b08      	cmp	r3, #8
 8006668:	f000 80a5 	beq.w	80067b6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b02      	cmp	r3, #2
 8006672:	f040 8089 	bne.w	8006788 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_RCC_OscConfig+0x4a6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006686:	d004      	beq.n	8006692 <HAL_RCC_OscConfig+0x4a6>
 8006688:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800668c:	4869      	ldr	r0, [pc, #420]	; (8006834 <HAL_RCC_OscConfig+0x648>)
 800668e:	f7fb fbec 	bl	8001e6a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	2b3f      	cmp	r3, #63	; 0x3f
 8006698:	d904      	bls.n	80066a4 <HAL_RCC_OscConfig+0x4b8>
 800669a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800669e:	4865      	ldr	r0, [pc, #404]	; (8006834 <HAL_RCC_OscConfig+0x648>)
 80066a0:	f7fb fbe3 	bl	8001e6a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b31      	cmp	r3, #49	; 0x31
 80066aa:	d904      	bls.n	80066b6 <HAL_RCC_OscConfig+0x4ca>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80066b4:	d904      	bls.n	80066c0 <HAL_RCC_OscConfig+0x4d4>
 80066b6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80066ba:	485e      	ldr	r0, [pc, #376]	; (8006834 <HAL_RCC_OscConfig+0x648>)
 80066bc:	f7fb fbd5 	bl	8001e6a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d010      	beq.n	80066ea <HAL_RCC_OscConfig+0x4fe>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d00c      	beq.n	80066ea <HAL_RCC_OscConfig+0x4fe>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d008      	beq.n	80066ea <HAL_RCC_OscConfig+0x4fe>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d004      	beq.n	80066ea <HAL_RCC_OscConfig+0x4fe>
 80066e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066e4:	4853      	ldr	r0, [pc, #332]	; (8006834 <HAL_RCC_OscConfig+0x648>)
 80066e6:	f7fb fbc0 	bl	8001e6a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d903      	bls.n	80066fa <HAL_RCC_OscConfig+0x50e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	2b0f      	cmp	r3, #15
 80066f8:	d904      	bls.n	8006704 <HAL_RCC_OscConfig+0x518>
 80066fa:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80066fe:	484d      	ldr	r0, [pc, #308]	; (8006834 <HAL_RCC_OscConfig+0x648>)
 8006700:	f7fb fbb3 	bl	8001e6a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006704:	4b4c      	ldr	r3, [pc, #304]	; (8006838 <HAL_RCC_OscConfig+0x64c>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670a:	f7fc fbe1 	bl	8002ed0 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006712:	f7fc fbdd 	bl	8002ed0 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e081      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006724:	4b42      	ldr	r3, [pc, #264]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1f0      	bne.n	8006712 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	019b      	lsls	r3, r3, #6
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	3b01      	subs	r3, #1
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	061b      	lsls	r3, r3, #24
 8006754:	4936      	ldr	r1, [pc, #216]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 8006756:	4313      	orrs	r3, r2
 8006758:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800675a:	4b37      	ldr	r3, [pc, #220]	; (8006838 <HAL_RCC_OscConfig+0x64c>)
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fc fbb6 	bl	8002ed0 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006768:	f7fc fbb2 	bl	8002ed0 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e056      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677a:	4b2d      	ldr	r3, [pc, #180]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x57c>
 8006786:	e04e      	b.n	8006826 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006788:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <HAL_RCC_OscConfig+0x64c>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678e:	f7fc fb9f 	bl	8002ed0 <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006796:	f7fc fb9b 	bl	8002ed0 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e03f      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a8:	4b21      	ldr	r3, [pc, #132]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f0      	bne.n	8006796 <HAL_RCC_OscConfig+0x5aa>
 80067b4:	e037      	b.n	8006826 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e032      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067c2:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <HAL_RCC_OscConfig+0x644>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d028      	beq.n	8006822 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067da:	429a      	cmp	r2, r3
 80067dc:	d121      	bne.n	8006822 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d11a      	bne.n	8006822 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067f2:	4013      	ands	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d111      	bne.n	8006822 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	3b01      	subs	r3, #1
 800680c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800680e:	429a      	cmp	r2, r3
 8006810:	d107      	bne.n	8006822 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d001      	beq.n	8006826 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40023800 	.word	0x40023800
 8006834:	08011cdc 	.word	0x08011cdc
 8006838:	42470060 	.word	0x42470060

0800683c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e174      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_RCC_ClockConfig+0x24>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b0f      	cmp	r3, #15
 800685e:	d904      	bls.n	800686a <HAL_RCC_ClockConfig+0x2e>
 8006860:	f240 215a 	movw	r1, #602	; 0x25a
 8006864:	487b      	ldr	r0, [pc, #492]	; (8006a54 <HAL_RCC_ClockConfig+0x218>)
 8006866:	f7fb fb00 	bl	8001e6a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d019      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d016      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d013      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b03      	cmp	r3, #3
 8006880:	d010      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d00d      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b05      	cmp	r3, #5
 800688c:	d00a      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b06      	cmp	r3, #6
 8006892:	d007      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b07      	cmp	r3, #7
 8006898:	d004      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
 800689a:	f240 215b 	movw	r1, #603	; 0x25b
 800689e:	486d      	ldr	r0, [pc, #436]	; (8006a54 <HAL_RCC_ClockConfig+0x218>)
 80068a0:	f7fb fae3 	bl	8001e6a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a4:	4b6c      	ldr	r3, [pc, #432]	; (8006a58 <HAL_RCC_ClockConfig+0x21c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d90c      	bls.n	80068cc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b2:	4b69      	ldr	r3, [pc, #420]	; (8006a58 <HAL_RCC_ClockConfig+0x21c>)
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ba:	4b67      	ldr	r3, [pc, #412]	; (8006a58 <HAL_RCC_ClockConfig+0x21c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e136      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d049      	beq.n	800696c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e4:	4b5d      	ldr	r3, [pc, #372]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4a5c      	ldr	r2, [pc, #368]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80068ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068fc:	4b57      	ldr	r3, [pc, #348]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4a56      	ldr	r2, [pc, #344]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 8006902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d024      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d020      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b90      	cmp	r3, #144	; 0x90
 800691e:	d01c      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2ba0      	cmp	r3, #160	; 0xa0
 8006926:	d018      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2bb0      	cmp	r3, #176	; 0xb0
 800692e:	d014      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2bc0      	cmp	r3, #192	; 0xc0
 8006936:	d010      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2bd0      	cmp	r3, #208	; 0xd0
 800693e:	d00c      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2be0      	cmp	r3, #224	; 0xe0
 8006946:	d008      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2bf0      	cmp	r3, #240	; 0xf0
 800694e:	d004      	beq.n	800695a <HAL_RCC_ClockConfig+0x11e>
 8006950:	f240 217e 	movw	r1, #638	; 0x27e
 8006954:	483f      	ldr	r0, [pc, #252]	; (8006a54 <HAL_RCC_ClockConfig+0x218>)
 8006956:	f7fb fa88 	bl	8001e6a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800695a:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	493d      	ldr	r1, [pc, #244]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 8006968:	4313      	orrs	r3, r2
 800696a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d059      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x166>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d00c      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x166>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d008      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x166>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b03      	cmp	r3, #3
 8006996:	d004      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x166>
 8006998:	f240 2185 	movw	r1, #645	; 0x285
 800699c:	482d      	ldr	r0, [pc, #180]	; (8006a54 <HAL_RCC_ClockConfig+0x218>)
 800699e:	f7fb fa64 	bl	8001e6a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069aa:	4b2c      	ldr	r3, [pc, #176]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d119      	bne.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0bf      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d003      	beq.n	80069ca <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e0af      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069da:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e0a7      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ea:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f023 0203 	bic.w	r2, r3, #3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4919      	ldr	r1, [pc, #100]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069fc:	f7fc fa68 	bl	8002ed0 <HAL_GetTick>
 8006a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a02:	e00a      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a04:	f7fc fa64 	bl	8002ed0 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e08f      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1a:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <HAL_RCC_ClockConfig+0x220>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 020c 	and.w	r2, r3, #12
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d1eb      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <HAL_RCC_ClockConfig+0x21c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d212      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <HAL_RCC_ClockConfig+0x21c>)
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <HAL_RCC_ClockConfig+0x21c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d007      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e072      	b.n	8006b3a <HAL_RCC_ClockConfig+0x2fe>
 8006a54:	08011cdc 	.word	0x08011cdc
 8006a58:	40023c00 	.word	0x40023c00
 8006a5c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d025      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d018      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x26a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7c:	d013      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x26a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a86:	d00e      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x26a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006a90:	d009      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x26a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006a9a:	d004      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x26a>
 8006a9c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006aa0:	4828      	ldr	r0, [pc, #160]	; (8006b44 <HAL_RCC_ClockConfig+0x308>)
 8006aa2:	f7fb f9e2 	bl	8001e6a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa6:	4b28      	ldr	r3, [pc, #160]	; (8006b48 <HAL_RCC_ClockConfig+0x30c>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	4925      	ldr	r1, [pc, #148]	; (8006b48 <HAL_RCC_ClockConfig+0x30c>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d026      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d018      	beq.n	8006afe <HAL_RCC_ClockConfig+0x2c2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad4:	d013      	beq.n	8006afe <HAL_RCC_ClockConfig+0x2c2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ade:	d00e      	beq.n	8006afe <HAL_RCC_ClockConfig+0x2c2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006ae8:	d009      	beq.n	8006afe <HAL_RCC_ClockConfig+0x2c2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006af2:	d004      	beq.n	8006afe <HAL_RCC_ClockConfig+0x2c2>
 8006af4:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006af8:	4812      	ldr	r0, [pc, #72]	; (8006b44 <HAL_RCC_ClockConfig+0x308>)
 8006afa:	f7fb f9b6 	bl	8001e6a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <HAL_RCC_ClockConfig+0x30c>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	490e      	ldr	r1, [pc, #56]	; (8006b48 <HAL_RCC_ClockConfig+0x30c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b12:	f000 f821 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006b16:	4602      	mov	r2, r0
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_ClockConfig+0x30c>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	490a      	ldr	r1, [pc, #40]	; (8006b4c <HAL_RCC_ClockConfig+0x310>)
 8006b24:	5ccb      	ldrb	r3, [r1, r3]
 8006b26:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <HAL_RCC_ClockConfig+0x314>)
 8006b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b2e:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <HAL_RCC_ClockConfig+0x318>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fb fdbe 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	08011cdc 	.word	0x08011cdc
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	08014050 	.word	0x08014050
 8006b50:	2000008c 	.word	0x2000008c
 8006b54:	20000090 	.word	0x20000090

08006b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b5c:	b090      	sub	sp, #64	; 0x40
 8006b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	2300      	movs	r3, #0
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b68:	2300      	movs	r3, #0
 8006b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b70:	4b59      	ldr	r3, [pc, #356]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 030c 	and.w	r3, r3, #12
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d00d      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x40>
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	f200 80a1 	bhi.w	8006cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_RCC_GetSysClockFreq+0x34>
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d003      	beq.n	8006b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b8a:	e09b      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b8c:	4b53      	ldr	r3, [pc, #332]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8006b8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006b90:	e09b      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b92:	4b53      	ldr	r3, [pc, #332]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b96:	e098      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b98:	4b4f      	ldr	r3, [pc, #316]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ba2:	4b4d      	ldr	r3, [pc, #308]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d028      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bae:	4b4a      	ldr	r3, [pc, #296]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	623b      	str	r3, [r7, #32]
 8006bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4b47      	ldr	r3, [pc, #284]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006bc4:	fb03 f201 	mul.w	r2, r3, r1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	fb00 f303 	mul.w	r3, r0, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	4a43      	ldr	r2, [pc, #268]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8006bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bd8:	460a      	mov	r2, r1
 8006bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bde:	4413      	add	r3, r2
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	2200      	movs	r2, #0
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	61fa      	str	r2, [r7, #28]
 8006bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006bf2:	f7f9 fe4b 	bl	800088c <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfe:	e053      	b.n	8006ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c00:	4b35      	ldr	r3, [pc, #212]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	099b      	lsrs	r3, r3, #6
 8006c06:	2200      	movs	r2, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	617a      	str	r2, [r7, #20]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c12:	f04f 0b00 	mov.w	fp, #0
 8006c16:	4652      	mov	r2, sl
 8006c18:	465b      	mov	r3, fp
 8006c1a:	f04f 0000 	mov.w	r0, #0
 8006c1e:	f04f 0100 	mov.w	r1, #0
 8006c22:	0159      	lsls	r1, r3, #5
 8006c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c28:	0150      	lsls	r0, r2, #5
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8006c32:	eb63 090b 	sbc.w	r9, r3, fp
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8006c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	00eb      	lsls	r3, r5, #3
 8006c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c60:	00e2      	lsls	r2, r4, #3
 8006c62:	4614      	mov	r4, r2
 8006c64:	461d      	mov	r5, r3
 8006c66:	eb14 030a 	adds.w	r3, r4, sl
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	eb45 030b 	adc.w	r3, r5, fp
 8006c70:	607b      	str	r3, [r7, #4]
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c7e:	4629      	mov	r1, r5
 8006c80:	028b      	lsls	r3, r1, #10
 8006c82:	4621      	mov	r1, r4
 8006c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c88:	4621      	mov	r1, r4
 8006c8a:	028a      	lsls	r2, r1, #10
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c92:	2200      	movs	r2, #0
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	60fa      	str	r2, [r7, #12]
 8006c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c9c:	f7f9 fdf6 	bl	800088c <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cc2:	e002      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8006cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3740      	adds	r7, #64	; 0x40
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	00f42400 	.word	0x00f42400
 8006ce0:	017d7840 	.word	0x017d7840

08006ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ce8:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cea:	681b      	ldr	r3, [r3, #0]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	2000008c 	.word	0x2000008c

08006cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d00:	f7ff fff0 	bl	8006ce4 <HAL_RCC_GetHCLKFreq>
 8006d04:	4602      	mov	r2, r0
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	0a9b      	lsrs	r3, r3, #10
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	4903      	ldr	r1, [pc, #12]	; (8006d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d12:	5ccb      	ldrb	r3, [r1, r3]
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	08014060 	.word	0x08014060

08006d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d28:	f7ff ffdc 	bl	8006ce4 <HAL_RCC_GetHCLKFreq>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	0b5b      	lsrs	r3, r3, #13
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	4903      	ldr	r1, [pc, #12]	; (8006d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d3a:	5ccb      	ldrb	r3, [r1, r3]
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40023800 	.word	0x40023800
 8006d48:	08014060 	.word	0x08014060

08006d4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	220f      	movs	r2, #15
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d5c:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 0203 	and.w	r2, r3, #3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d80:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	08db      	lsrs	r3, r3, #3
 8006d86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <HAL_RCC_GetClockConfig+0x60>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0207 	and.w	r2, r3, #7
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40023c00 	.word	0x40023c00

08006db0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d904      	bls.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006dd0:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8006dd4:	4834      	ldr	r0, [pc, #208]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006dd6:	f7fb f848 	bl	8001e6a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d066      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d903      	bls.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b07      	cmp	r3, #7
 8006e00:	d904      	bls.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e02:	f640 11de 	movw	r1, #2526	; 0x9de
 8006e06:	4828      	ldr	r0, [pc, #160]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006e08:	f7fb f82f 	bl	8001e6a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b31      	cmp	r3, #49	; 0x31
 8006e12:	d904      	bls.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006e1c:	d904      	bls.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e1e:	f640 11df 	movw	r1, #2527	; 0x9df
 8006e22:	4821      	ldr	r0, [pc, #132]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006e24:	f7fb f821 	bl	8001e6a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d903      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b3f      	cmp	r3, #63	; 0x3f
 8006e36:	d904      	bls.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006e38:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006e3c:	481a      	ldr	r0, [pc, #104]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006e3e:	f7fb f814 	bl	8001e6a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e42:	4b1a      	ldr	r3, [pc, #104]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e48:	f7fc f842 	bl	8002ed0 <HAL_GetTick>
 8006e4c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e50:	f7fc f83e 	bl	8002ed0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e1b3      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	019b      	lsls	r3, r3, #6
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	071b      	lsls	r3, r3, #28
 8006e80:	490b      	ldr	r1, [pc, #44]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e88:	4b08      	ldr	r3, [pc, #32]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e8e:	f7fc f81f 	bl	8002ed0 <HAL_GetTick>
 8006e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e94:	e00e      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e96:	f7fc f81b 	bl	8002ed0 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d907      	bls.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e190      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ea8:	08011d14 	.word	0x08011d14
 8006eac:	42470068 	.word	0x42470068
 8006eb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eb4:	4b88      	ldr	r3, [pc, #544]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ea      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8173 	beq.w	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	f000 80a6 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee2:	f000 80a0 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	4a7c      	ldr	r2, [pc, #496]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	f000 809a 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	4a7a      	ldr	r2, [pc, #488]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	f000 8094 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	4a78      	ldr	r2, [pc, #480]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	f000 808e 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	4a76      	ldr	r2, [pc, #472]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	f000 8088 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	4a74      	ldr	r2, [pc, #464]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	f000 8082 	beq.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	4a72      	ldr	r2, [pc, #456]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d07c      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	4a70      	ldr	r2, [pc, #448]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d077      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	4a6f      	ldr	r2, [pc, #444]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d072      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	4a6d      	ldr	r2, [pc, #436]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d06d      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	4a6c      	ldr	r2, [pc, #432]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d068      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	4a6a      	ldr	r2, [pc, #424]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d063      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	4a69      	ldr	r2, [pc, #420]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d05e      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	4a67      	ldr	r2, [pc, #412]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d059      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	4a66      	ldr	r2, [pc, #408]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d054      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	4a64      	ldr	r2, [pc, #400]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d04f      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	4a63      	ldr	r2, [pc, #396]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d04a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	4a61      	ldr	r2, [pc, #388]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d045      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	4a60      	ldr	r2, [pc, #384]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d040      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	4a5e      	ldr	r2, [pc, #376]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d03b      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	4a5d      	ldr	r2, [pc, #372]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d036      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4a5b      	ldr	r2, [pc, #364]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d031      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	4a5a      	ldr	r2, [pc, #360]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d02c      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	4a58      	ldr	r2, [pc, #352]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d027      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	4a57      	ldr	r2, [pc, #348]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d022      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	4a55      	ldr	r2, [pc, #340]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01d      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	4a54      	ldr	r2, [pc, #336]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4a52      	ldr	r2, [pc, #328]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	4a51      	ldr	r2, [pc, #324]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	4a4f      	ldr	r2, [pc, #316]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	4a4e      	ldr	r2, [pc, #312]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800701c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8007020:	484c      	ldr	r0, [pc, #304]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8007022:	f7fa ff22 	bl	8001e6a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007034:	6413      	str	r3, [r2, #64]	; 0x40
 8007036:	4b28      	ldr	r3, [pc, #160]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007042:	4b45      	ldr	r3, [pc, #276]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a44      	ldr	r2, [pc, #272]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800704e:	f7fb ff3f 	bl	8002ed0 <HAL_GetTick>
 8007052:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007054:	e008      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007056:	f7fb ff3b 	bl	8002ed0 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e0b0      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007068:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0f0      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007074:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d073      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d06c      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800709c:	4b2f      	ldr	r3, [pc, #188]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070a2:	4b2e      	ldr	r3, [pc, #184]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070a8:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d158      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070ba:	f7fb ff09 	bl	8002ed0 <HAL_GetTick>
 80070be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c0:	e04e      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fb ff05 	bl	8002ed0 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d945      	bls.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e078      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070d8:	40023800 	.word	0x40023800
 80070dc:	00020300 	.word	0x00020300
 80070e0:	00030300 	.word	0x00030300
 80070e4:	00040300 	.word	0x00040300
 80070e8:	00050300 	.word	0x00050300
 80070ec:	00060300 	.word	0x00060300
 80070f0:	00070300 	.word	0x00070300
 80070f4:	00080300 	.word	0x00080300
 80070f8:	00090300 	.word	0x00090300
 80070fc:	000a0300 	.word	0x000a0300
 8007100:	000b0300 	.word	0x000b0300
 8007104:	000c0300 	.word	0x000c0300
 8007108:	000d0300 	.word	0x000d0300
 800710c:	000e0300 	.word	0x000e0300
 8007110:	000f0300 	.word	0x000f0300
 8007114:	00100300 	.word	0x00100300
 8007118:	00110300 	.word	0x00110300
 800711c:	00120300 	.word	0x00120300
 8007120:	00130300 	.word	0x00130300
 8007124:	00140300 	.word	0x00140300
 8007128:	00150300 	.word	0x00150300
 800712c:	00160300 	.word	0x00160300
 8007130:	00170300 	.word	0x00170300
 8007134:	00180300 	.word	0x00180300
 8007138:	00190300 	.word	0x00190300
 800713c:	001a0300 	.word	0x001a0300
 8007140:	001b0300 	.word	0x001b0300
 8007144:	001c0300 	.word	0x001c0300
 8007148:	001d0300 	.word	0x001d0300
 800714c:	001e0300 	.word	0x001e0300
 8007150:	001f0300 	.word	0x001f0300
 8007154:	08011d14 	.word	0x08011d14
 8007158:	40007000 	.word	0x40007000
 800715c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007160:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0aa      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007178:	d10d      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800717a:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800718a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718e:	4911      	ldr	r1, [pc, #68]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007190:	4313      	orrs	r3, r2
 8007192:	608b      	str	r3, [r1, #8]
 8007194:	e005      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	4a0e      	ldr	r2, [pc, #56]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800719c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071a0:	6093      	str	r3, [r2, #8]
 80071a2:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80071a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ae:	4909      	ldr	r1, [pc, #36]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7d1a      	ldrb	r2, [r3, #20]
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80071c6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40023800 	.word	0x40023800
 80071d8:	424711e0 	.word	0x424711e0

080071dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e0c4      	b.n	800737c <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a63      	ldr	r2, [pc, #396]	; (8007384 <HAL_RTC_Init+0x1a8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_RTC_Init+0x2a>
 80071fc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007200:	4861      	ldr	r0, [pc, #388]	; (8007388 <HAL_RTC_Init+0x1ac>)
 8007202:	f7fa fe32 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d008      	beq.n	8007220 <HAL_RTC_Init+0x44>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <HAL_RTC_Init+0x44>
 8007216:	f240 1105 	movw	r1, #261	; 0x105
 800721a:	485b      	ldr	r0, [pc, #364]	; (8007388 <HAL_RTC_Init+0x1ac>)
 800721c:	f7fa fe25 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b7f      	cmp	r3, #127	; 0x7f
 8007226:	d904      	bls.n	8007232 <HAL_RTC_Init+0x56>
 8007228:	f44f 7183 	mov.w	r1, #262	; 0x106
 800722c:	4856      	ldr	r0, [pc, #344]	; (8007388 <HAL_RTC_Init+0x1ac>)
 800722e:	f7fa fe1c 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800723a:	d304      	bcc.n	8007246 <HAL_RTC_Init+0x6a>
 800723c:	f240 1107 	movw	r1, #263	; 0x107
 8007240:	4851      	ldr	r0, [pc, #324]	; (8007388 <HAL_RTC_Init+0x1ac>)
 8007242:	f7fa fe12 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d013      	beq.n	8007276 <HAL_RTC_Init+0x9a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007256:	d00e      	beq.n	8007276 <HAL_RTC_Init+0x9a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007260:	d009      	beq.n	8007276 <HAL_RTC_Init+0x9a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800726a:	d004      	beq.n	8007276 <HAL_RTC_Init+0x9a>
 800726c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8007270:	4845      	ldr	r0, [pc, #276]	; (8007388 <HAL_RTC_Init+0x1ac>)
 8007272:	f7fa fdfa 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <HAL_RTC_Init+0xb6>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007286:	d004      	beq.n	8007292 <HAL_RTC_Init+0xb6>
 8007288:	f240 1109 	movw	r1, #265	; 0x109
 800728c:	483e      	ldr	r0, [pc, #248]	; (8007388 <HAL_RTC_Init+0x1ac>)
 800728e:	f7fa fdec 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_RTC_Init+0xd2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072a2:	d004      	beq.n	80072ae <HAL_RTC_Init+0xd2>
 80072a4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80072a8:	4837      	ldr	r0, [pc, #220]	; (8007388 <HAL_RTC_Init+0x1ac>)
 80072aa:	f7fa fdde 	bl	8001e6a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7f5b      	ldrb	r3, [r3, #29]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fa fe38 	bl	8001f34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	22ca      	movs	r2, #202	; 0xca
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2253      	movs	r2, #83	; 0x53
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fad2 	bl	8007884 <RTC_EnterInitMode>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d12c      	bne.n	8007344 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6899      	ldr	r1, [r3, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	68d2      	ldr	r2, [r2, #12]
 8007324:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6919      	ldr	r1, [r3, #16]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	041a      	lsls	r2, r3, #16
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fad9 	bl	80078f2 <RTC_ExitInitMode>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d113      	bne.n	8007372 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	22ff      	movs	r2, #255	; 0xff
 8007378:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40002800 	.word	0x40002800
 8007388:	08011d50 	.word	0x08011d50

0800738c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <HAL_RTC_SetTime+0x26>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d004      	beq.n	80073b2 <HAL_RTC_SetTime+0x26>
 80073a8:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80073ac:	489a      	ldr	r0, [pc, #616]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 80073ae:	f7fa fd5c 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ba:	d00d      	beq.n	80073d8 <HAL_RTC_SetTime+0x4c>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c4:	d008      	beq.n	80073d8 <HAL_RTC_SetTime+0x4c>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <HAL_RTC_SetTime+0x4c>
 80073ce:	f240 21b5 	movw	r1, #693	; 0x2b5
 80073d2:	4891      	ldr	r0, [pc, #580]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 80073d4:	f7fa fd49 	bl	8001e6a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <HAL_RTC_SetTime+0x68>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073e8:	d004      	beq.n	80073f4 <HAL_RTC_SetTime+0x68>
 80073ea:	f240 21b6 	movw	r1, #694	; 0x2b6
 80073ee:	488a      	ldr	r0, [pc, #552]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 80073f0:	f7fa fd3b 	bl	8001e6a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	7f1b      	ldrb	r3, [r3, #28]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_RTC_SetTime+0x74>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e107      	b.n	8007610 <HAL_RTC_SetTime+0x284>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2202      	movs	r2, #2
 800740a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d15c      	bne.n	80074cc <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01a      	beq.n	8007456 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_RTC_SetTime+0xa4>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d904      	bls.n	800743a <HAL_RTC_SetTime+0xae>
 8007430:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007434:	4878      	ldr	r0, [pc, #480]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 8007436:	f7fa fd18 	bl	8001e6a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	78db      	ldrb	r3, [r3, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d015      	beq.n	800746e <HAL_RTC_SetTime+0xe2>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	78db      	ldrb	r3, [r3, #3]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d011      	beq.n	800746e <HAL_RTC_SetTime+0xe2>
 800744a:	f240 21c2 	movw	r1, #706	; 0x2c2
 800744e:	4872      	ldr	r0, [pc, #456]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 8007450:	f7fa fd0b 	bl	8001e6a <assert_failed>
 8007454:	e00b      	b.n	800746e <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b17      	cmp	r3, #23
 8007462:	d904      	bls.n	800746e <HAL_RTC_SetTime+0xe2>
 8007464:	f240 21c7 	movw	r1, #711	; 0x2c7
 8007468:	486b      	ldr	r0, [pc, #428]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 800746a:	f7fa fcfe 	bl	8001e6a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b3b      	cmp	r3, #59	; 0x3b
 8007474:	d904      	bls.n	8007480 <HAL_RTC_SetTime+0xf4>
 8007476:	f240 21c9 	movw	r1, #713	; 0x2c9
 800747a:	4867      	ldr	r0, [pc, #412]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 800747c:	f7fa fcf5 	bl	8001e6a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	789b      	ldrb	r3, [r3, #2]
 8007484:	2b3b      	cmp	r3, #59	; 0x3b
 8007486:	d904      	bls.n	8007492 <HAL_RTC_SetTime+0x106>
 8007488:	f240 21ca 	movw	r1, #714	; 0x2ca
 800748c:	4862      	ldr	r0, [pc, #392]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 800748e:	f7fa fcec 	bl	8001e6a <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fa50 	bl	800793c <RTC_ByteToBcd2>
 800749c:	4603      	mov	r3, r0
 800749e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fa49 	bl	800793c <RTC_ByteToBcd2>
 80074aa:	4603      	mov	r3, r0
 80074ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074ae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	789b      	ldrb	r3, [r3, #2]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fa41 	bl	800793c <RTC_ByteToBcd2>
 80074ba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80074bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e062      	b.n	8007592 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d022      	beq.n	8007520 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa49 	bl	8007976 <RTC_Bcd2ToByte>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d007      	beq.n	80074fa <HAL_RTC_SetTime+0x16e>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fa41 	bl	8007976 <RTC_Bcd2ToByte>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b0c      	cmp	r3, #12
 80074f8:	d904      	bls.n	8007504 <HAL_RTC_SetTime+0x178>
 80074fa:	f240 21d5 	movw	r1, #725	; 0x2d5
 80074fe:	4846      	ldr	r0, [pc, #280]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 8007500:	f7fa fcb3 	bl	8001e6a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	78db      	ldrb	r3, [r3, #3]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d019      	beq.n	8007540 <HAL_RTC_SetTime+0x1b4>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	78db      	ldrb	r3, [r3, #3]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d015      	beq.n	8007540 <HAL_RTC_SetTime+0x1b4>
 8007514:	f240 21d6 	movw	r1, #726	; 0x2d6
 8007518:	483f      	ldr	r0, [pc, #252]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 800751a:	f7fa fca6 	bl	8001e6a <assert_failed>
 800751e:	e00f      	b.n	8007540 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fa23 	bl	8007976 <RTC_Bcd2ToByte>
 8007530:	4603      	mov	r3, r0
 8007532:	2b17      	cmp	r3, #23
 8007534:	d904      	bls.n	8007540 <HAL_RTC_SetTime+0x1b4>
 8007536:	f240 21db 	movw	r1, #731	; 0x2db
 800753a:	4837      	ldr	r0, [pc, #220]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 800753c:	f7fa fc95 	bl	8001e6a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fa16 	bl	8007976 <RTC_Bcd2ToByte>
 800754a:	4603      	mov	r3, r0
 800754c:	2b3b      	cmp	r3, #59	; 0x3b
 800754e:	d904      	bls.n	800755a <HAL_RTC_SetTime+0x1ce>
 8007550:	f240 21dd 	movw	r1, #733	; 0x2dd
 8007554:	4830      	ldr	r0, [pc, #192]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 8007556:	f7fa fc88 	bl	8001e6a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fa09 	bl	8007976 <RTC_Bcd2ToByte>
 8007564:	4603      	mov	r3, r0
 8007566:	2b3b      	cmp	r3, #59	; 0x3b
 8007568:	d904      	bls.n	8007574 <HAL_RTC_SetTime+0x1e8>
 800756a:	f240 21de 	movw	r1, #734	; 0x2de
 800756e:	482a      	ldr	r0, [pc, #168]	; (8007618 <HAL_RTC_SetTime+0x28c>)
 8007570:	f7fa fc7b 	bl	8001e6a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007580:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007586:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	78db      	ldrb	r3, [r3, #3]
 800758c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	22ca      	movs	r2, #202	; 0xca
 8007598:	625a      	str	r2, [r3, #36]	; 0x24
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2253      	movs	r2, #83	; 0x53
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f96e 	bl	8007884 <RTC_EnterInitMode>
 80075a8:	4603      	mov	r3, r0
 80075aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80075ac:	7cfb      	ldrb	r3, [r7, #19]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d120      	bne.n	80075f4 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80075bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80075c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6899      	ldr	r1, [r3, #8]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f981 	bl	80078f2 <RTC_ExitInitMode>
 80075f0:	4603      	mov	r3, r0
 80075f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80075f4:	7cfb      	ldrb	r3, [r7, #19]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d102      	bne.n	8007600 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	771a      	strb	r2, [r3, #28]

  return status;
 800760e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	bd90      	pop	{r4, r7, pc}
 8007618:	08011d50 	.word	0x08011d50

0800761c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <HAL_RTC_SetDate+0x26>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d004      	beq.n	8007642 <HAL_RTC_SetDate+0x26>
 8007638:	f240 3153 	movw	r1, #851	; 0x353
 800763c:	487c      	ldr	r0, [pc, #496]	; (8007830 <HAL_RTC_SetDate+0x214>)
 800763e:	f7fa fc14 	bl	8001e6a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	7f1b      	ldrb	r3, [r3, #28]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_RTC_SetDate+0x32>
 800764a:	2302      	movs	r3, #2
 800764c:	e0ec      	b.n	8007828 <HAL_RTC_SetDate+0x20c>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2202      	movs	r2, #2
 8007658:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10e      	bne.n	800767e <HAL_RTC_SetDate+0x62>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	f023 0310 	bic.w	r3, r3, #16
 8007674:	b2db      	uxtb	r3, r3
 8007676:	330a      	adds	r3, #10
 8007678:	b2da      	uxtb	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d01c      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d018      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b03      	cmp	r3, #3
 8007694:	d014      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d010      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	d00c      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d008      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b07      	cmp	r3, #7
 80076b4:	d004      	beq.n	80076c0 <HAL_RTC_SetDate+0xa4>
 80076b6:	f240 315f 	movw	r1, #863	; 0x35f
 80076ba:	485d      	ldr	r0, [pc, #372]	; (8007830 <HAL_RTC_SetDate+0x214>)
 80076bc:	f7fa fbd5 	bl	8001e6a <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d13f      	bne.n	8007746 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	78db      	ldrb	r3, [r3, #3]
 80076ca:	2b63      	cmp	r3, #99	; 0x63
 80076cc:	d904      	bls.n	80076d8 <HAL_RTC_SetDate+0xbc>
 80076ce:	f240 3163 	movw	r1, #867	; 0x363
 80076d2:	4857      	ldr	r0, [pc, #348]	; (8007830 <HAL_RTC_SetDate+0x214>)
 80076d4:	f7fa fbc9 	bl	8001e6a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_RTC_SetDate+0xcc>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b0c      	cmp	r3, #12
 80076e6:	d904      	bls.n	80076f2 <HAL_RTC_SetDate+0xd6>
 80076e8:	f44f 7159 	mov.w	r1, #868	; 0x364
 80076ec:	4850      	ldr	r0, [pc, #320]	; (8007830 <HAL_RTC_SetDate+0x214>)
 80076ee:	f7fa fbbc 	bl	8001e6a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_RTC_SetDate+0xe6>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	2b1f      	cmp	r3, #31
 8007700:	d904      	bls.n	800770c <HAL_RTC_SetDate+0xf0>
 8007702:	f240 3165 	movw	r1, #869	; 0x365
 8007706:	484a      	ldr	r0, [pc, #296]	; (8007830 <HAL_RTC_SetDate+0x214>)
 8007708:	f7fa fbaf 	bl	8001e6a <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	78db      	ldrb	r3, [r3, #3]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f913 	bl	800793c <RTC_ByteToBcd2>
 8007716:	4603      	mov	r3, r0
 8007718:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f90c 	bl	800793c <RTC_ByteToBcd2>
 8007724:	4603      	mov	r3, r0
 8007726:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007728:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	789b      	ldrb	r3, [r3, #2]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f904 	bl	800793c <RTC_ByteToBcd2>
 8007734:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007736:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007740:	4313      	orrs	r3, r2
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e045      	b.n	80077d2 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	78db      	ldrb	r3, [r3, #3]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f913 	bl	8007976 <RTC_Bcd2ToByte>
 8007750:	4603      	mov	r3, r0
 8007752:	2b63      	cmp	r3, #99	; 0x63
 8007754:	d904      	bls.n	8007760 <HAL_RTC_SetDate+0x144>
 8007756:	f240 316e 	movw	r1, #878	; 0x36e
 800775a:	4835      	ldr	r0, [pc, #212]	; (8007830 <HAL_RTC_SetDate+0x214>)
 800775c:	f7fa fb85 	bl	8001e6a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f906 	bl	8007976 <RTC_Bcd2ToByte>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_RTC_SetDate+0x164>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f8fe 	bl	8007976 <RTC_Bcd2ToByte>
 800777a:	4603      	mov	r3, r0
 800777c:	2b0c      	cmp	r3, #12
 800777e:	d904      	bls.n	800778a <HAL_RTC_SetDate+0x16e>
 8007780:	f240 316f 	movw	r1, #879	; 0x36f
 8007784:	482a      	ldr	r0, [pc, #168]	; (8007830 <HAL_RTC_SetDate+0x214>)
 8007786:	f7fa fb70 	bl	8001e6a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	789b      	ldrb	r3, [r3, #2]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f8f1 	bl	8007976 <RTC_Bcd2ToByte>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d007      	beq.n	80077aa <HAL_RTC_SetDate+0x18e>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	789b      	ldrb	r3, [r3, #2]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f8e9 	bl	8007976 <RTC_Bcd2ToByte>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b1f      	cmp	r3, #31
 80077a8:	d904      	bls.n	80077b4 <HAL_RTC_SetDate+0x198>
 80077aa:	f44f 715c 	mov.w	r1, #880	; 0x370
 80077ae:	4820      	ldr	r0, [pc, #128]	; (8007830 <HAL_RTC_SetDate+0x214>)
 80077b0:	f7fa fb5b 	bl	8001e6a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	78db      	ldrb	r3, [r3, #3]
 80077b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077c0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80077c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	22ca      	movs	r2, #202	; 0xca
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2253      	movs	r2, #83	; 0x53
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f84e 	bl	8007884 <RTC_EnterInitMode>
 80077e8:	4603      	mov	r3, r0
 80077ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80077ec:	7cfb      	ldrb	r3, [r7, #19]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10c      	bne.n	800780c <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007800:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f875 	bl	80078f2 <RTC_ExitInitMode>
 8007808:	4603      	mov	r3, r0
 800780a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	22ff      	movs	r2, #255	; 0xff
 800781e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	771a      	strb	r2, [r3, #28]

  return status;
 8007826:	7cfb      	ldrb	r3, [r7, #19]
}
 8007828:	4618      	mov	r0, r3
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	bd90      	pop	{r4, r7, pc}
 8007830:	08011d50 	.word	0x08011d50

08007834 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800784e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007850:	f7fb fb3e 	bl	8002ed0 <HAL_GetTick>
 8007854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007856:	e009      	b.n	800786c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007858:	f7fb fb3a 	bl	8002ed0 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007866:	d901      	bls.n	800786c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e007      	b.n	800787c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0ee      	beq.n	8007858 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d122      	bne.n	80078e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078b2:	f7fb fb0d 	bl	8002ed0 <HAL_GetTick>
 80078b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078b8:	e00c      	b.n	80078d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078ba:	f7fb fb09 	bl	8002ed0 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078c8:	d904      	bls.n	80078d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2204      	movs	r2, #4
 80078ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <RTC_EnterInitMode+0x64>
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d1e8      	bne.n	80078ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff89 	bl	8007834 <HAL_RTC_WaitForSynchro>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2204      	movs	r2, #4
 800792c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800794a:	e005      	b.n	8007958 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	3301      	adds	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	3b0a      	subs	r3, #10
 8007956:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	2b09      	cmp	r3, #9
 800795c:	d8f6      	bhi.n	800794c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	b2da      	uxtb	r2, r3
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	4313      	orrs	r3, r2
 8007968:	b2db      	uxtb	r3, r3
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	4603      	mov	r3, r0
 800797e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	091b      	lsrs	r3, r3, #4
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	0092      	lsls	r2, r2, #2
 800798e:	4413      	add	r3, r2
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	b2da      	uxtb	r2, r3
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	4413      	add	r3, r2
 80079a0:	b2db      	uxtb	r3, r3
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e18c      	b.n	8007cdc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a75      	ldr	r2, [pc, #468]	; (8007b9c <HAL_SPI_Init+0x1ec>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d018      	beq.n	80079fe <HAL_SPI_Init+0x4e>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a73      	ldr	r2, [pc, #460]	; (8007ba0 <HAL_SPI_Init+0x1f0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d013      	beq.n	80079fe <HAL_SPI_Init+0x4e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a72      	ldr	r2, [pc, #456]	; (8007ba4 <HAL_SPI_Init+0x1f4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00e      	beq.n	80079fe <HAL_SPI_Init+0x4e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a70      	ldr	r2, [pc, #448]	; (8007ba8 <HAL_SPI_Init+0x1f8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d009      	beq.n	80079fe <HAL_SPI_Init+0x4e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a6f      	ldr	r2, [pc, #444]	; (8007bac <HAL_SPI_Init+0x1fc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_SPI_Init+0x4e>
 80079f4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079f8:	486d      	ldr	r0, [pc, #436]	; (8007bb0 <HAL_SPI_Init+0x200>)
 80079fa:	f7fa fa36 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <HAL_SPI_Init+0x6a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0e:	d004      	beq.n	8007a1a <HAL_SPI_Init+0x6a>
 8007a10:	f240 1141 	movw	r1, #321	; 0x141
 8007a14:	4866      	ldr	r0, [pc, #408]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007a16:	f7fa fa28 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00e      	beq.n	8007a40 <HAL_SPI_Init+0x90>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2a:	d009      	beq.n	8007a40 <HAL_SPI_Init+0x90>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a34:	d004      	beq.n	8007a40 <HAL_SPI_Init+0x90>
 8007a36:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007a3a:	485d      	ldr	r0, [pc, #372]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007a3c:	f7fa fa15 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a48:	d008      	beq.n	8007a5c <HAL_SPI_Init+0xac>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <HAL_SPI_Init+0xac>
 8007a52:	f240 1143 	movw	r1, #323	; 0x143
 8007a56:	4856      	ldr	r0, [pc, #344]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007a58:	f7fa fa07 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a64:	d00d      	beq.n	8007a82 <HAL_SPI_Init+0xd2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_SPI_Init+0xd2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a76:	d004      	beq.n	8007a82 <HAL_SPI_Init+0xd2>
 8007a78:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007a7c:	484c      	ldr	r0, [pc, #304]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007a7e:	f7fa f9f4 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d020      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d01c      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d018      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	2b18      	cmp	r3, #24
 8007aa0:	d014      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d010      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	2b28      	cmp	r3, #40	; 0x28
 8007ab0:	d00c      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	2b30      	cmp	r3, #48	; 0x30
 8007ab8:	d008      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	2b38      	cmp	r3, #56	; 0x38
 8007ac0:	d004      	beq.n	8007acc <HAL_SPI_Init+0x11c>
 8007ac2:	f240 1145 	movw	r1, #325	; 0x145
 8007ac6:	483a      	ldr	r0, [pc, #232]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007ac8:	f7fa f9cf 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_SPI_Init+0x136>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d004      	beq.n	8007ae6 <HAL_SPI_Init+0x136>
 8007adc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007ae0:	4833      	ldr	r0, [pc, #204]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007ae2:	f7fa f9c2 	bl	8001e6a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d008      	beq.n	8007b00 <HAL_SPI_Init+0x150>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d004      	beq.n	8007b00 <HAL_SPI_Init+0x150>
 8007af6:	f240 1147 	movw	r1, #327	; 0x147
 8007afa:	482d      	ldr	r0, [pc, #180]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007afc:	f7fa f9b5 	bl	8001e6a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d155      	bne.n	8007bb4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d008      	beq.n	8007b22 <HAL_SPI_Init+0x172>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d004      	beq.n	8007b22 <HAL_SPI_Init+0x172>
 8007b18:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007b1c:	4824      	ldr	r0, [pc, #144]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007b1e:	f7fa f9a4 	bl	8001e6a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d008      	beq.n	8007b3c <HAL_SPI_Init+0x18c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d004      	beq.n	8007b3c <HAL_SPI_Init+0x18c>
 8007b32:	f240 114b 	movw	r1, #331	; 0x14b
 8007b36:	481e      	ldr	r0, [pc, #120]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007b38:	f7fa f997 	bl	8001e6a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b44:	d125      	bne.n	8007b92 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d05d      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d059      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d055      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	2b18      	cmp	r3, #24
 8007b64:	d051      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d04d      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	2b28      	cmp	r3, #40	; 0x28
 8007b74:	d049      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	2b30      	cmp	r3, #48	; 0x30
 8007b7c:	d045      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b38      	cmp	r3, #56	; 0x38
 8007b84:	d041      	beq.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b86:	f240 114f 	movw	r1, #335	; 0x14f
 8007b8a:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <HAL_SPI_Init+0x200>)
 8007b8c:	f7fa f96d 	bl	8001e6a <assert_failed>
 8007b90:	e03b      	b.n	8007c0a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	61da      	str	r2, [r3, #28]
 8007b98:	e037      	b.n	8007c0a <HAL_SPI_Init+0x25a>
 8007b9a:	bf00      	nop
 8007b9c:	40013000 	.word	0x40013000
 8007ba0:	40003800 	.word	0x40003800
 8007ba4:	40003c00 	.word	0x40003c00
 8007ba8:	40013400 	.word	0x40013400
 8007bac:	40015000 	.word	0x40015000
 8007bb0:	08011d88 	.word	0x08011d88
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d020      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d01c      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d018      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	2b18      	cmp	r3, #24
 8007bd2:	d014      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d010      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	2b28      	cmp	r3, #40	; 0x28
 8007be2:	d00c      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	2b30      	cmp	r3, #48	; 0x30
 8007bea:	d008      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	2b38      	cmp	r3, #56	; 0x38
 8007bf2:	d004      	beq.n	8007bfe <HAL_SPI_Init+0x24e>
 8007bf4:	f240 1159 	movw	r1, #345	; 0x159
 8007bf8:	483a      	ldr	r0, [pc, #232]	; (8007ce4 <HAL_SPI_Init+0x334>)
 8007bfa:	f7fa f936 	bl	8001e6a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7fa f9e7 	bl	8001ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c84:	431a      	orrs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8e:	ea42 0103 	orr.w	r1, r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	f003 0104 	and.w	r1, r3, #4
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	f003 0210 	and.w	r2, r3, #16
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69da      	ldr	r2, [r3, #28]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	08011d88 	.word	0x08011d88

08007ce8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <HAL_SPI_Transmit+0x30>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d0c:	d004      	beq.n	8007d18 <HAL_SPI_Transmit+0x30>
 8007d0e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007d12:	4880      	ldr	r0, [pc, #512]	; (8007f14 <HAL_SPI_Transmit+0x22c>)
 8007d14:	f7fa f8a9 	bl	8001e6a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_SPI_Transmit+0x3e>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e128      	b.n	8007f78 <HAL_SPI_Transmit+0x290>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d2e:	f7fb f8cf 	bl	8002ed0 <HAL_GetTick>
 8007d32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d002      	beq.n	8007d4a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007d44:	2302      	movs	r3, #2
 8007d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d48:	e10d      	b.n	8007f66 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <HAL_SPI_Transmit+0x6e>
 8007d50:	88fb      	ldrh	r3, [r7, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d5a:	e104      	b.n	8007f66 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2203      	movs	r2, #3
 8007d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da2:	d10f      	bne.n	8007dc4 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d007      	beq.n	8007de2 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dea:	d14b      	bne.n	8007e84 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <HAL_SPI_Transmit+0x112>
 8007df4:	8afb      	ldrh	r3, [r7, #22]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d13e      	bne.n	8007e78 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	881a      	ldrh	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	1c9a      	adds	r2, r3, #2
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e1e:	e02b      	b.n	8007e78 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d112      	bne.n	8007e54 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	881a      	ldrh	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	1c9a      	adds	r2, r3, #2
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e52:	e011      	b.n	8007e78 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e54:	f7fb f83c 	bl	8002ed0 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d803      	bhi.n	8007e6c <HAL_SPI_Transmit+0x184>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d102      	bne.n	8007e72 <HAL_SPI_Transmit+0x18a>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d102      	bne.n	8007e78 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e76:	e076      	b.n	8007f66 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1ce      	bne.n	8007e20 <HAL_SPI_Transmit+0x138>
 8007e82:	e04e      	b.n	8007f22 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_SPI_Transmit+0x1aa>
 8007e8c:	8afb      	ldrh	r3, [r7, #22]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d142      	bne.n	8007f18 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	7812      	ldrb	r2, [r2, #0]
 8007e9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007eb8:	e02e      	b.n	8007f18 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d113      	bne.n	8007ef0 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	7812      	ldrb	r2, [r2, #0]
 8007ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	86da      	strh	r2, [r3, #54]	; 0x36
 8007eee:	e013      	b.n	8007f18 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ef0:	f7fa ffee 	bl	8002ed0 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d803      	bhi.n	8007f08 <HAL_SPI_Transmit+0x220>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d102      	bne.n	8007f0e <HAL_SPI_Transmit+0x226>
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f12:	e028      	b.n	8007f66 <HAL_SPI_Transmit+0x27e>
 8007f14:	08011d88 	.word	0x08011d88
    while (hspi->TxXferCount > 0U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1cb      	bne.n	8007eba <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f8b2 	bl	8008090 <SPI_EndRxTxTransaction>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2220      	movs	r2, #32
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f40:	2300      	movs	r3, #0
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	77fb      	strb	r3, [r7, #31]
 8007f62:	e000      	b.n	8007f66 <HAL_SPI_Transmit+0x27e>
  }

error:
 8007f64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3720      	adds	r7, #32
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f90:	f7fa ff9e 	bl	8002ed0 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fa0:	f7fa ff96 	bl	8002ed0 <HAL_GetTick>
 8007fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fa6:	4b39      	ldr	r3, [pc, #228]	; (800808c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	015b      	lsls	r3, r3, #5
 8007fac:	0d1b      	lsrs	r3, r3, #20
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb6:	e054      	b.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d050      	beq.n	8008062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fc0:	f7fa ff86 	bl	8002ed0 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d902      	bls.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d13d      	bne.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fee:	d111      	bne.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff8:	d004      	beq.n	8008004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008002:	d107      	bne.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801c:	d10f      	bne.n	800803e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800803c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e017      	b.n	8008082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	3b01      	subs	r3, #1
 8008060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4013      	ands	r3, r2
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	429a      	cmp	r2, r3
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d19b      	bne.n	8007fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	2000008c 	.word	0x2000008c

08008090 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <SPI_EndRxTxTransaction+0x7c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1b      	ldr	r2, [pc, #108]	; (8008110 <SPI_EndRxTxTransaction+0x80>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	0d5b      	lsrs	r3, r3, #21
 80080a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ba:	d112      	bne.n	80080e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	2180      	movs	r1, #128	; 0x80
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff ff5a 	bl	8007f80 <SPI_WaitFlagStateUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d016      	beq.n	8008100 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d6:	f043 0220 	orr.w	r2, r3, #32
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e00f      	b.n	8008102 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f8:	2b80      	cmp	r3, #128	; 0x80
 80080fa:	d0f2      	beq.n	80080e2 <SPI_EndRxTxTransaction+0x52>
 80080fc:	e000      	b.n	8008100 <SPI_EndRxTxTransaction+0x70>
        break;
 80080fe:	bf00      	nop
  }

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	2000008c 	.word	0x2000008c
 8008110:	165e9f81 	.word	0x165e9f81

08008114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e0a7      	b.n	8008276 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a55      	ldr	r2, [pc, #340]	; (8008280 <HAL_TIM_Base_Init+0x16c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d027      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008138:	d022      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a51      	ldr	r2, [pc, #324]	; (8008284 <HAL_TIM_Base_Init+0x170>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d01d      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a4f      	ldr	r2, [pc, #316]	; (8008288 <HAL_TIM_Base_Init+0x174>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d018      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a4e      	ldr	r2, [pc, #312]	; (800828c <HAL_TIM_Base_Init+0x178>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d013      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a4c      	ldr	r2, [pc, #304]	; (8008290 <HAL_TIM_Base_Init+0x17c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00e      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a4b      	ldr	r2, [pc, #300]	; (8008294 <HAL_TIM_Base_Init+0x180>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a49      	ldr	r2, [pc, #292]	; (8008298 <HAL_TIM_Base_Init+0x184>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d004      	beq.n	8008180 <HAL_TIM_Base_Init+0x6c>
 8008176:	f240 1113 	movw	r1, #275	; 0x113
 800817a:	4848      	ldr	r0, [pc, #288]	; (800829c <HAL_TIM_Base_Init+0x188>)
 800817c:	f7f9 fe75 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d014      	beq.n	80081b2 <HAL_TIM_Base_Init+0x9e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b10      	cmp	r3, #16
 800818e:	d010      	beq.n	80081b2 <HAL_TIM_Base_Init+0x9e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b20      	cmp	r3, #32
 8008196:	d00c      	beq.n	80081b2 <HAL_TIM_Base_Init+0x9e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	d008      	beq.n	80081b2 <HAL_TIM_Base_Init+0x9e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b60      	cmp	r3, #96	; 0x60
 80081a6:	d004      	beq.n	80081b2 <HAL_TIM_Base_Init+0x9e>
 80081a8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80081ac:	483b      	ldr	r0, [pc, #236]	; (800829c <HAL_TIM_Base_Init+0x188>)
 80081ae:	f7f9 fe5c 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00e      	beq.n	80081d8 <HAL_TIM_Base_Init+0xc4>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c2:	d009      	beq.n	80081d8 <HAL_TIM_Base_Init+0xc4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081cc:	d004      	beq.n	80081d8 <HAL_TIM_Base_Init+0xc4>
 80081ce:	f240 1115 	movw	r1, #277	; 0x115
 80081d2:	4832      	ldr	r0, [pc, #200]	; (800829c <HAL_TIM_Base_Init+0x188>)
 80081d4:	f7f9 fe49 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <HAL_TIM_Base_Init+0xde>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b80      	cmp	r3, #128	; 0x80
 80081e6:	d004      	beq.n	80081f2 <HAL_TIM_Base_Init+0xde>
 80081e8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80081ec:	482b      	ldr	r0, [pc, #172]	; (800829c <HAL_TIM_Base_Init+0x188>)
 80081ee:	f7f9 fe3c 	bl	8001e6a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7fa fd46 	bl	8002c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f001 fa28 	bl	8009674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40010000 	.word	0x40010000
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800
 800829c:	08011dc0 	.word	0x08011dc0

080082a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a3d      	ldr	r2, [pc, #244]	; (80083a4 <HAL_TIM_Base_Start_IT+0x104>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d027      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ba:	d022      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a39      	ldr	r2, [pc, #228]	; (80083a8 <HAL_TIM_Base_Start_IT+0x108>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01d      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a38      	ldr	r2, [pc, #224]	; (80083ac <HAL_TIM_Base_Start_IT+0x10c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d018      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a36      	ldr	r2, [pc, #216]	; (80083b0 <HAL_TIM_Base_Start_IT+0x110>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d013      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a35      	ldr	r2, [pc, #212]	; (80083b4 <HAL_TIM_Base_Start_IT+0x114>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00e      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a33      	ldr	r2, [pc, #204]	; (80083b8 <HAL_TIM_Base_Start_IT+0x118>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d009      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a32      	ldr	r2, [pc, #200]	; (80083bc <HAL_TIM_Base_Start_IT+0x11c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d004      	beq.n	8008302 <HAL_TIM_Base_Start_IT+0x62>
 80082f8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80082fc:	4830      	ldr	r0, [pc, #192]	; (80083c0 <HAL_TIM_Base_Start_IT+0x120>)
 80082fe:	f7f9 fdb4 	bl	8001e6a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b01      	cmp	r3, #1
 800830c:	d001      	beq.n	8008312 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e044      	b.n	800839c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0201 	orr.w	r2, r2, #1
 8008328:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <HAL_TIM_Base_Start_IT+0x104>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_TIM_Base_Start_IT+0xc6>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833c:	d013      	beq.n	8008366 <HAL_TIM_Base_Start_IT+0xc6>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <HAL_TIM_Base_Start_IT+0x108>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_TIM_Base_Start_IT+0xc6>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a17      	ldr	r2, [pc, #92]	; (80083ac <HAL_TIM_Base_Start_IT+0x10c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_TIM_Base_Start_IT+0xc6>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <HAL_TIM_Base_Start_IT+0x110>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_TIM_Base_Start_IT+0xc6>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a14      	ldr	r2, [pc, #80]	; (80083b4 <HAL_TIM_Base_Start_IT+0x114>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d111      	bne.n	800838a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b06      	cmp	r3, #6
 8008376:	d010      	beq.n	800839a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008388:	e007      	b.n	800839a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f042 0201 	orr.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40010000 	.word	0x40010000
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000800 	.word	0x40000800
 80083b0:	40000c00 	.word	0x40000c00
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400
 80083bc:	40014800 	.word	0x40014800
 80083c0:	08011dc0 	.word	0x08011dc0

080083c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e0a7      	b.n	8008526 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a55      	ldr	r2, [pc, #340]	; (8008530 <HAL_TIM_PWM_Init+0x16c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d027      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e8:	d022      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a51      	ldr	r2, [pc, #324]	; (8008534 <HAL_TIM_PWM_Init+0x170>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d01d      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a4f      	ldr	r2, [pc, #316]	; (8008538 <HAL_TIM_PWM_Init+0x174>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d018      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a4e      	ldr	r2, [pc, #312]	; (800853c <HAL_TIM_PWM_Init+0x178>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d013      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a4c      	ldr	r2, [pc, #304]	; (8008540 <HAL_TIM_PWM_Init+0x17c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00e      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a4b      	ldr	r2, [pc, #300]	; (8008544 <HAL_TIM_PWM_Init+0x180>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d009      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a49      	ldr	r2, [pc, #292]	; (8008548 <HAL_TIM_PWM_Init+0x184>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIM_PWM_Init+0x6c>
 8008426:	f240 5129 	movw	r1, #1321	; 0x529
 800842a:	4848      	ldr	r0, [pc, #288]	; (800854c <HAL_TIM_PWM_Init+0x188>)
 800842c:	f7f9 fd1d 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <HAL_TIM_PWM_Init+0x9e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b10      	cmp	r3, #16
 800843e:	d010      	beq.n	8008462 <HAL_TIM_PWM_Init+0x9e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b20      	cmp	r3, #32
 8008446:	d00c      	beq.n	8008462 <HAL_TIM_PWM_Init+0x9e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	2b40      	cmp	r3, #64	; 0x40
 800844e:	d008      	beq.n	8008462 <HAL_TIM_PWM_Init+0x9e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	2b60      	cmp	r3, #96	; 0x60
 8008456:	d004      	beq.n	8008462 <HAL_TIM_PWM_Init+0x9e>
 8008458:	f240 512a 	movw	r1, #1322	; 0x52a
 800845c:	483b      	ldr	r0, [pc, #236]	; (800854c <HAL_TIM_PWM_Init+0x188>)
 800845e:	f7f9 fd04 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00e      	beq.n	8008488 <HAL_TIM_PWM_Init+0xc4>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008472:	d009      	beq.n	8008488 <HAL_TIM_PWM_Init+0xc4>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847c:	d004      	beq.n	8008488 <HAL_TIM_PWM_Init+0xc4>
 800847e:	f240 512b 	movw	r1, #1323	; 0x52b
 8008482:	4832      	ldr	r0, [pc, #200]	; (800854c <HAL_TIM_PWM_Init+0x188>)
 8008484:	f7f9 fcf1 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d008      	beq.n	80084a2 <HAL_TIM_PWM_Init+0xde>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d004      	beq.n	80084a2 <HAL_TIM_PWM_Init+0xde>
 8008498:	f240 512c 	movw	r1, #1324	; 0x52c
 800849c:	482b      	ldr	r0, [pc, #172]	; (800854c <HAL_TIM_PWM_Init+0x188>)
 800849e:	f7f9 fce4 	bl	8001e6a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fa fb58 	bl	8002b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3304      	adds	r3, #4
 80084cc:	4619      	mov	r1, r3
 80084ce:	4610      	mov	r0, r2
 80084d0:	f001 f8d0 	bl	8009674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40010000 	.word	0x40010000
 8008534:	40000400 	.word	0x40000400
 8008538:	40000800 	.word	0x40000800
 800853c:	40000c00 	.word	0x40000c00
 8008540:	40014000 	.word	0x40014000
 8008544:	40014400 	.word	0x40014400
 8008548:	40014800 	.word	0x40014800
 800854c:	08011dc0 	.word	0x08011dc0

08008550 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e18a      	b.n	800887a <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a78      	ldr	r2, [pc, #480]	; (800874c <HAL_TIM_Encoder_Init+0x1fc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d01d      	beq.n	80085aa <HAL_TIM_Encoder_Init+0x5a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008576:	d018      	beq.n	80085aa <HAL_TIM_Encoder_Init+0x5a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a74      	ldr	r2, [pc, #464]	; (8008750 <HAL_TIM_Encoder_Init+0x200>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d013      	beq.n	80085aa <HAL_TIM_Encoder_Init+0x5a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a73      	ldr	r2, [pc, #460]	; (8008754 <HAL_TIM_Encoder_Init+0x204>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00e      	beq.n	80085aa <HAL_TIM_Encoder_Init+0x5a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a71      	ldr	r2, [pc, #452]	; (8008758 <HAL_TIM_Encoder_Init+0x208>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d009      	beq.n	80085aa <HAL_TIM_Encoder_Init+0x5a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a70      	ldr	r2, [pc, #448]	; (800875c <HAL_TIM_Encoder_Init+0x20c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d004      	beq.n	80085aa <HAL_TIM_Encoder_Init+0x5a>
 80085a0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 80085a4:	486e      	ldr	r0, [pc, #440]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 80085a6:	f7f9 fc60 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d014      	beq.n	80085dc <HAL_TIM_Encoder_Init+0x8c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d010      	beq.n	80085dc <HAL_TIM_Encoder_Init+0x8c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d00c      	beq.n	80085dc <HAL_TIM_Encoder_Init+0x8c>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d008      	beq.n	80085dc <HAL_TIM_Encoder_Init+0x8c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b60      	cmp	r3, #96	; 0x60
 80085d0:	d004      	beq.n	80085dc <HAL_TIM_Encoder_Init+0x8c>
 80085d2:	f640 31d2 	movw	r1, #3026	; 0xbd2
 80085d6:	4862      	ldr	r0, [pc, #392]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 80085d8:	f7f9 fc47 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00e      	beq.n	8008602 <HAL_TIM_Encoder_Init+0xb2>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ec:	d009      	beq.n	8008602 <HAL_TIM_Encoder_Init+0xb2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f6:	d004      	beq.n	8008602 <HAL_TIM_Encoder_Init+0xb2>
 80085f8:	f640 31d3 	movw	r1, #3027	; 0xbd3
 80085fc:	4858      	ldr	r0, [pc, #352]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 80085fe:	f7f9 fc34 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_TIM_Encoder_Init+0xcc>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	2b80      	cmp	r3, #128	; 0x80
 8008610:	d004      	beq.n	800861c <HAL_TIM_Encoder_Init+0xcc>
 8008612:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8008616:	4852      	ldr	r0, [pc, #328]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 8008618:	f7f9 fc27 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d00c      	beq.n	800863e <HAL_TIM_Encoder_Init+0xee>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d008      	beq.n	800863e <HAL_TIM_Encoder_Init+0xee>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d004      	beq.n	800863e <HAL_TIM_Encoder_Init+0xee>
 8008634:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8008638:	4849      	ldr	r0, [pc, #292]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 800863a:	f7f9 fc16 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d00c      	beq.n	8008660 <HAL_TIM_Encoder_Init+0x110>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d008      	beq.n	8008660 <HAL_TIM_Encoder_Init+0x110>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b03      	cmp	r3, #3
 8008654:	d004      	beq.n	8008660 <HAL_TIM_Encoder_Init+0x110>
 8008656:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800865a:	4841      	ldr	r0, [pc, #260]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 800865c:	f7f9 fc05 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d00c      	beq.n	8008682 <HAL_TIM_Encoder_Init+0x132>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d008      	beq.n	8008682 <HAL_TIM_Encoder_Init+0x132>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d004      	beq.n	8008682 <HAL_TIM_Encoder_Init+0x132>
 8008678:	f640 31d7 	movw	r1, #3031	; 0xbd7
 800867c:	4838      	ldr	r0, [pc, #224]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 800867e:	f7f9 fbf4 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d008      	beq.n	800869c <HAL_TIM_Encoder_Init+0x14c>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d004      	beq.n	800869c <HAL_TIM_Encoder_Init+0x14c>
 8008692:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8008696:	4832      	ldr	r0, [pc, #200]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 8008698:	f7f9 fbe7 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <HAL_TIM_Encoder_Init+0x166>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d004      	beq.n	80086b6 <HAL_TIM_Encoder_Init+0x166>
 80086ac:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80086b0:	482b      	ldr	r0, [pc, #172]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 80086b2:	f7f9 fbda 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d010      	beq.n	80086e0 <HAL_TIM_Encoder_Init+0x190>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d00c      	beq.n	80086e0 <HAL_TIM_Encoder_Init+0x190>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	d008      	beq.n	80086e0 <HAL_TIM_Encoder_Init+0x190>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	2b0c      	cmp	r3, #12
 80086d4:	d004      	beq.n	80086e0 <HAL_TIM_Encoder_Init+0x190>
 80086d6:	f640 31da 	movw	r1, #3034	; 0xbda
 80086da:	4821      	ldr	r0, [pc, #132]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 80086dc:	f7f9 fbc5 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d010      	beq.n	800870a <HAL_TIM_Encoder_Init+0x1ba>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d00c      	beq.n	800870a <HAL_TIM_Encoder_Init+0x1ba>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d008      	beq.n	800870a <HAL_TIM_Encoder_Init+0x1ba>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	2b0c      	cmp	r3, #12
 80086fe:	d004      	beq.n	800870a <HAL_TIM_Encoder_Init+0x1ba>
 8008700:	f640 31db 	movw	r1, #3035	; 0xbdb
 8008704:	4816      	ldr	r0, [pc, #88]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 8008706:	f7f9 fbb0 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b0f      	cmp	r3, #15
 8008710:	d904      	bls.n	800871c <HAL_TIM_Encoder_Init+0x1cc>
 8008712:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8008716:	4812      	ldr	r0, [pc, #72]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 8008718:	f7f9 fba7 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	2b0f      	cmp	r3, #15
 8008722:	d904      	bls.n	800872e <HAL_TIM_Encoder_Init+0x1de>
 8008724:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8008728:	480d      	ldr	r0, [pc, #52]	; (8008760 <HAL_TIM_Encoder_Init+0x210>)
 800872a:	f7f9 fb9e 	bl	8001e6a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d114      	bne.n	8008764 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fa fa38 	bl	8002bb8 <HAL_TIM_Encoder_MspInit>
 8008748:	e00c      	b.n	8008764 <HAL_TIM_Encoder_Init+0x214>
 800874a:	bf00      	nop
 800874c:	40010000 	.word	0x40010000
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	40000c00 	.word	0x40000c00
 800875c:	40014000 	.word	0x40014000
 8008760:	08011dc0 	.word	0x08011dc0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6812      	ldr	r2, [r2, #0]
 8008776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800877a:	f023 0307 	bic.w	r3, r3, #7
 800877e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3304      	adds	r3, #4
 8008788:	4619      	mov	r1, r3
 800878a:	4610      	mov	r0, r2
 800878c:	f000 ff72 	bl	8009674 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	4313      	orrs	r3, r2
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80087d6:	f023 030c 	bic.w	r3, r3, #12
 80087da:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	4313      	orrs	r3, r2
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	011a      	lsls	r2, r3, #4
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	031b      	lsls	r3, r3, #12
 8008806:	4313      	orrs	r3, r2
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008814:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800881c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	011b      	lsls	r3, r3, #4
 8008828:	4313      	orrs	r3, r2
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop

08008884 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008894:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800889c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a4d      	ldr	r2, [pc, #308]	; (80089e8 <HAL_TIM_Encoder_Start+0x164>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d01d      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0x70>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c0:	d018      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0x70>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a49      	ldr	r2, [pc, #292]	; (80089ec <HAL_TIM_Encoder_Start+0x168>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d013      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0x70>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a47      	ldr	r2, [pc, #284]	; (80089f0 <HAL_TIM_Encoder_Start+0x16c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00e      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0x70>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a46      	ldr	r2, [pc, #280]	; (80089f4 <HAL_TIM_Encoder_Start+0x170>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d009      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0x70>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a44      	ldr	r2, [pc, #272]	; (80089f8 <HAL_TIM_Encoder_Start+0x174>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d004      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0x70>
 80088ea:	f640 418e 	movw	r1, #3214	; 0xc8e
 80088ee:	4843      	ldr	r0, [pc, #268]	; (80089fc <HAL_TIM_Encoder_Start+0x178>)
 80088f0:	f7f9 fabb 	bl	8001e6a <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d110      	bne.n	800891c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d102      	bne.n	8008906 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008900:	7b7b      	ldrb	r3, [r7, #13]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d001      	beq.n	800890a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e069      	b.n	80089de <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2202      	movs	r2, #2
 8008916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800891a:	e031      	b.n	8008980 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b04      	cmp	r3, #4
 8008920:	d110      	bne.n	8008944 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d102      	bne.n	800892e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008928:	7b3b      	ldrb	r3, [r7, #12]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d001      	beq.n	8008932 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e055      	b.n	80089de <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2202      	movs	r2, #2
 800893e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008942:	e01d      	b.n	8008980 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d105      	bne.n	800895c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008950:	7b7b      	ldrb	r3, [r7, #13]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d102      	bne.n	800895c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008956:	7b3b      	ldrb	r3, [r7, #12]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d001      	beq.n	8008960 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e03e      	b.n	80089de <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_Encoder_Start+0x10a>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d008      	beq.n	800899e <HAL_TIM_Encoder_Start+0x11a>
 800898c:	e00f      	b.n	80089ae <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f001 f99c 	bl	8009cd4 <TIM_CCxChannelCmd>
      break;
 800899c:	e016      	b.n	80089cc <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2201      	movs	r2, #1
 80089a4:	2104      	movs	r1, #4
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 f994 	bl	8009cd4 <TIM_CCxChannelCmd>
      break;
 80089ac:	e00e      	b.n	80089cc <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2201      	movs	r2, #1
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 f98c 	bl	8009cd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2201      	movs	r2, #1
 80089c2:	2104      	movs	r1, #4
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 f985 	bl	8009cd4 <TIM_CCxChannelCmd>
      break;
 80089ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40014000 	.word	0x40014000
 80089fc:	08011dc0 	.word	0x08011dc0

08008a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d122      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d11b      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0202 	mvn.w	r2, #2
 8008a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fda4 	bl	8009590 <HAL_TIM_IC_CaptureCallback>
 8008a48:	e005      	b.n	8008a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fd96 	bl	800957c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fda7 	bl	80095a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f003 0304 	and.w	r3, r3, #4
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d122      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d11b      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0204 	mvn.w	r2, #4
 8008a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fd7a 	bl	8009590 <HAL_TIM_IC_CaptureCallback>
 8008a9c:	e005      	b.n	8008aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fd6c 	bl	800957c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fd7d 	bl	80095a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b08      	cmp	r3, #8
 8008abc:	d122      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d11b      	bne.n	8008b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f06f 0208 	mvn.w	r2, #8
 8008ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fd50 	bl	8009590 <HAL_TIM_IC_CaptureCallback>
 8008af0:	e005      	b.n	8008afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fd42 	bl	800957c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fd53 	bl	80095a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0310 	and.w	r3, r3, #16
 8008b0e:	2b10      	cmp	r3, #16
 8008b10:	d122      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d11b      	bne.n	8008b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0210 	mvn.w	r2, #16
 8008b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fd26 	bl	8009590 <HAL_TIM_IC_CaptureCallback>
 8008b44:	e005      	b.n	8008b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fd18 	bl	800957c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fd29 	bl	80095a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d10e      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d107      	bne.n	8008b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f06f 0201 	mvn.w	r2, #1
 8008b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f9 f95c 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8e:	2b80      	cmp	r3, #128	; 0x80
 8008b90:	d10e      	bne.n	8008bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d107      	bne.n	8008bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f9c6 	bl	8009f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	d10e      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc8:	2b40      	cmp	r3, #64	; 0x40
 8008bca:	d107      	bne.n	8008bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fcee 	bl	80095b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d10e      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d107      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0220 	mvn.w	r2, #32
 8008c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 f990 	bl	8009f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d010      	beq.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d00d      	beq.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b08      	cmp	r3, #8
 8008c30:	d00a      	beq.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b0c      	cmp	r3, #12
 8008c36:	d007      	beq.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b3c      	cmp	r3, #60	; 0x3c
 8008c3c:	d004      	beq.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c3e:	f241 0177 	movw	r1, #4215	; 0x1077
 8008c42:	4893      	ldr	r0, [pc, #588]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008c44:	f7f9 f911 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b60      	cmp	r3, #96	; 0x60
 8008c4e:	d008      	beq.n	8008c62 <HAL_TIM_PWM_ConfigChannel+0x52>
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b70      	cmp	r3, #112	; 0x70
 8008c56:	d004      	beq.n	8008c62 <HAL_TIM_PWM_ConfigChannel+0x52>
 8008c58:	f241 0178 	movw	r1, #4216	; 0x1078
 8008c5c:	488c      	ldr	r0, [pc, #560]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008c5e:	f7f9 f904 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d004      	beq.n	8008c7c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008c72:	f241 0179 	movw	r1, #4217	; 0x1079
 8008c76:	4886      	ldr	r0, [pc, #536]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008c78:	f7f9 f8f7 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d008      	beq.n	8008c96 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d004      	beq.n	8008c96 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008c8c:	f241 017a 	movw	r1, #4218	; 0x107a
 8008c90:	487f      	ldr	r0, [pc, #508]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008c92:	f7f9 f8ea 	bl	8001e6a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e14c      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x32e>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b0c      	cmp	r3, #12
 8008cb0:	f200 813d 	bhi.w	8008f2e <HAL_TIM_PWM_ConfigChannel+0x31e>
 8008cb4:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cba:	bf00      	nop
 8008cbc:	08008cf1 	.word	0x08008cf1
 8008cc0:	08008f2f 	.word	0x08008f2f
 8008cc4:	08008f2f 	.word	0x08008f2f
 8008cc8:	08008f2f 	.word	0x08008f2f
 8008ccc:	08008d8b 	.word	0x08008d8b
 8008cd0:	08008f2f 	.word	0x08008f2f
 8008cd4:	08008f2f 	.word	0x08008f2f
 8008cd8:	08008f2f 	.word	0x08008f2f
 8008cdc:	08008e13 	.word	0x08008e13
 8008ce0:	08008f2f 	.word	0x08008f2f
 8008ce4:	08008f2f 	.word	0x08008f2f
 8008ce8:	08008f2f 	.word	0x08008f2f
 8008cec:	08008eb1 	.word	0x08008eb1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a67      	ldr	r2, [pc, #412]	; (8008e94 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d027      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d02:	d022      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a63      	ldr	r2, [pc, #396]	; (8008e98 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d01d      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a62      	ldr	r2, [pc, #392]	; (8008e9c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d018      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a60      	ldr	r2, [pc, #384]	; (8008ea0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d013      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a5f      	ldr	r2, [pc, #380]	; (8008ea4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00e      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a5d      	ldr	r2, [pc, #372]	; (8008ea8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d009      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a5c      	ldr	r2, [pc, #368]	; (8008eac <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d004      	beq.n	8008d4a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d40:	f241 0184 	movw	r1, #4228	; 0x1084
 8008d44:	4852      	ldr	r0, [pc, #328]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008d46:	f7f9 f890 	bl	8001e6a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fd0f 	bl	8009774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	699a      	ldr	r2, [r3, #24]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0208 	orr.w	r2, r2, #8
 8008d64:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0204 	bic.w	r2, r2, #4
 8008d74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6999      	ldr	r1, [r3, #24]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	619a      	str	r2, [r3, #24]
      break;
 8008d88:	e0d4      	b.n	8008f34 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a41      	ldr	r2, [pc, #260]	; (8008e94 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d01d      	beq.n	8008dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9c:	d018      	beq.n	8008dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a3d      	ldr	r2, [pc, #244]	; (8008e98 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d013      	beq.n	8008dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a3b      	ldr	r2, [pc, #236]	; (8008e9c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00e      	beq.n	8008dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a3a      	ldr	r2, [pc, #232]	; (8008ea0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d009      	beq.n	8008dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a38      	ldr	r2, [pc, #224]	; (8008ea4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008dc6:	f241 0195 	movw	r1, #4245	; 0x1095
 8008dca:	4831      	ldr	r0, [pc, #196]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008dcc:	f7f9 f84d 	bl	8001e6a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fd5c 	bl	8009894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699a      	ldr	r2, [r3, #24]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6999      	ldr	r1, [r3, #24]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	619a      	str	r2, [r3, #24]
      break;
 8008e10:	e090      	b.n	8008f34 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d018      	beq.n	8008e4e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e24:	d013      	beq.n	8008e4e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a1b      	ldr	r2, [pc, #108]	; (8008e98 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00e      	beq.n	8008e4e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a19      	ldr	r2, [pc, #100]	; (8008e9c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d009      	beq.n	8008e4e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d004      	beq.n	8008e4e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e44:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8008e48:	4811      	ldr	r0, [pc, #68]	; (8008e90 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008e4a:	f7f9 f80e 	bl	8001e6a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fdb1 	bl	80099bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0208 	orr.w	r2, r2, #8
 8008e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0204 	bic.w	r2, r2, #4
 8008e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69d9      	ldr	r1, [r3, #28]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	61da      	str	r2, [r3, #28]
      break;
 8008e8c:	e052      	b.n	8008f34 <HAL_TIM_PWM_ConfigChannel+0x324>
 8008e8e:	bf00      	nop
 8008e90:	08011dc0 	.word	0x08011dc0
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	40014400 	.word	0x40014400
 8008eac:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a24      	ldr	r2, [pc, #144]	; (8008f48 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d018      	beq.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec2:	d013      	beq.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a20      	ldr	r2, [pc, #128]	; (8008f4c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00e      	beq.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d009      	beq.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1d      	ldr	r2, [pc, #116]	; (8008f54 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008ee2:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008ee6:	481c      	ldr	r0, [pc, #112]	; (8008f58 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8008ee8:	f7f8 ffbf 	bl	8001e6a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fdf6 	bl	8009ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69da      	ldr	r2, [r3, #28]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69da      	ldr	r2, [r3, #28]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69d9      	ldr	r1, [r3, #28]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	021a      	lsls	r2, r3, #8
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	61da      	str	r2, [r3, #28]
      break;
 8008f2c:	e002      	b.n	8008f34 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
      break;
 8008f32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	40000400 	.word	0x40000400
 8008f50:	40000800 	.word	0x40000800
 8008f54:	40000c00 	.word	0x40000c00
 8008f58:	08011dc0 	.word	0x08011dc0

08008f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_TIM_ConfigClockSource+0x1c>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e2f0      	b.n	800955a <HAL_TIM_ConfigClockSource+0x5fe>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f90:	d029      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b70      	cmp	r3, #112	; 0x70
 8008f98:	d025      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa2:	d020      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d01c      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b50      	cmp	r3, #80	; 0x50
 8008fb2:	d018      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b60      	cmp	r3, #96	; 0x60
 8008fba:	d014      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d010      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d00c      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d008      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b30      	cmp	r3, #48	; 0x30
 8008fda:	d004      	beq.n	8008fe6 <HAL_TIM_ConfigClockSource+0x8a>
 8008fdc:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8008fe0:	487c      	ldr	r0, [pc, #496]	; (80091d4 <HAL_TIM_ConfigClockSource+0x278>)
 8008fe2:	f7f8 ff42 	bl	8001e6a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ff4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ffc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900e:	f000 80f1 	beq.w	80091f4 <HAL_TIM_ConfigClockSource+0x298>
 8009012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009016:	f200 8293 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d02d      	beq.n	800907c <HAL_TIM_ConfigClockSource+0x120>
 8009020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009024:	f200 828c 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 8009028:	2b70      	cmp	r3, #112	; 0x70
 800902a:	d05d      	beq.n	80090e8 <HAL_TIM_ConfigClockSource+0x18c>
 800902c:	2b70      	cmp	r3, #112	; 0x70
 800902e:	f200 8287 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 8009032:	2b60      	cmp	r3, #96	; 0x60
 8009034:	f000 81a0 	beq.w	8009378 <HAL_TIM_ConfigClockSource+0x41c>
 8009038:	2b60      	cmp	r3, #96	; 0x60
 800903a:	f200 8281 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 800903e:	2b50      	cmp	r3, #80	; 0x50
 8009040:	f000 8144 	beq.w	80092cc <HAL_TIM_ConfigClockSource+0x370>
 8009044:	2b50      	cmp	r3, #80	; 0x50
 8009046:	f200 827b 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 800904a:	2b40      	cmp	r3, #64	; 0x40
 800904c:	f000 81f6 	beq.w	800943c <HAL_TIM_ConfigClockSource+0x4e0>
 8009050:	2b40      	cmp	r3, #64	; 0x40
 8009052:	f200 8275 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 8009056:	2b30      	cmp	r3, #48	; 0x30
 8009058:	f000 8246 	beq.w	80094e8 <HAL_TIM_ConfigClockSource+0x58c>
 800905c:	2b30      	cmp	r3, #48	; 0x30
 800905e:	f200 826f 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 8009062:	2b20      	cmp	r3, #32
 8009064:	f000 8240 	beq.w	80094e8 <HAL_TIM_ConfigClockSource+0x58c>
 8009068:	2b20      	cmp	r3, #32
 800906a:	f200 8269 	bhi.w	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 823a 	beq.w	80094e8 <HAL_TIM_ConfigClockSource+0x58c>
 8009074:	2b10      	cmp	r3, #16
 8009076:	f000 8237 	beq.w	80094e8 <HAL_TIM_ConfigClockSource+0x58c>
 800907a:	e261      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a55      	ldr	r2, [pc, #340]	; (80091d8 <HAL_TIM_ConfigClockSource+0x27c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	f000 825f 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009090:	f000 8259 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a50      	ldr	r2, [pc, #320]	; (80091dc <HAL_TIM_ConfigClockSource+0x280>)
 800909a:	4293      	cmp	r3, r2
 800909c:	f000 8253 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a4e      	ldr	r2, [pc, #312]	; (80091e0 <HAL_TIM_ConfigClockSource+0x284>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	f000 824d 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a4c      	ldr	r2, [pc, #304]	; (80091e4 <HAL_TIM_ConfigClockSource+0x288>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	f000 8247 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a4a      	ldr	r2, [pc, #296]	; (80091e8 <HAL_TIM_ConfigClockSource+0x28c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	f000 8241 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a48      	ldr	r2, [pc, #288]	; (80091ec <HAL_TIM_ConfigClockSource+0x290>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	f000 823b 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a46      	ldr	r2, [pc, #280]	; (80091f0 <HAL_TIM_ConfigClockSource+0x294>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	f000 8235 	beq.w	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
 80090dc:	f241 41c3 	movw	r1, #5315	; 0x14c3
 80090e0:	483c      	ldr	r0, [pc, #240]	; (80091d4 <HAL_TIM_ConfigClockSource+0x278>)
 80090e2:	f7f8 fec2 	bl	8001e6a <assert_failed>
      break;
 80090e6:	e22e      	b.n	8009546 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a3a      	ldr	r2, [pc, #232]	; (80091d8 <HAL_TIM_ConfigClockSource+0x27c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d01d      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x1d2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fa:	d018      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x1d2>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a36      	ldr	r2, [pc, #216]	; (80091dc <HAL_TIM_ConfigClockSource+0x280>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d013      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x1d2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a35      	ldr	r2, [pc, #212]	; (80091e0 <HAL_TIM_ConfigClockSource+0x284>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00e      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x1d2>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a33      	ldr	r2, [pc, #204]	; (80091e4 <HAL_TIM_ConfigClockSource+0x288>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d009      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x1d2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a32      	ldr	r2, [pc, #200]	; (80091e8 <HAL_TIM_ConfigClockSource+0x28c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d004      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x1d2>
 8009124:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8009128:	482a      	ldr	r0, [pc, #168]	; (80091d4 <HAL_TIM_ConfigClockSource+0x278>)
 800912a:	f7f8 fe9e 	bl	8001e6a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d013      	beq.n	800915e <HAL_TIM_ConfigClockSource+0x202>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800913e:	d00e      	beq.n	800915e <HAL_TIM_ConfigClockSource+0x202>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009148:	d009      	beq.n	800915e <HAL_TIM_ConfigClockSource+0x202>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009152:	d004      	beq.n	800915e <HAL_TIM_ConfigClockSource+0x202>
 8009154:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8009158:	481e      	ldr	r0, [pc, #120]	; (80091d4 <HAL_TIM_ConfigClockSource+0x278>)
 800915a:	f7f8 fe86 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009166:	d014      	beq.n	8009192 <HAL_TIM_ConfigClockSource+0x236>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d010      	beq.n	8009192 <HAL_TIM_ConfigClockSource+0x236>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <HAL_TIM_ConfigClockSource+0x236>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	2b02      	cmp	r3, #2
 800917e:	d008      	beq.n	8009192 <HAL_TIM_ConfigClockSource+0x236>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b0a      	cmp	r3, #10
 8009186:	d004      	beq.n	8009192 <HAL_TIM_ConfigClockSource+0x236>
 8009188:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800918c:	4811      	ldr	r0, [pc, #68]	; (80091d4 <HAL_TIM_ConfigClockSource+0x278>)
 800918e:	f7f8 fe6c 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2b0f      	cmp	r3, #15
 8009198:	d904      	bls.n	80091a4 <HAL_TIM_ConfigClockSource+0x248>
 800919a:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800919e:	480d      	ldr	r0, [pc, #52]	; (80091d4 <HAL_TIM_ConfigClockSource+0x278>)
 80091a0:	f7f8 fe63 	bl	8001e6a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	6899      	ldr	r1, [r3, #8]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f000 fd6e 	bl	8009c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	609a      	str	r2, [r3, #8]
      break;
 80091d0:	e1ba      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
 80091d2:	bf00      	nop
 80091d4:	08011dc0 	.word	0x08011dc0
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40014000 	.word	0x40014000
 80091ec:	40014400 	.word	0x40014400
 80091f0:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a8a      	ldr	r2, [pc, #552]	; (8009424 <HAL_TIM_ConfigClockSource+0x4c8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d018      	beq.n	8009230 <HAL_TIM_ConfigClockSource+0x2d4>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009206:	d013      	beq.n	8009230 <HAL_TIM_ConfigClockSource+0x2d4>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a86      	ldr	r2, [pc, #536]	; (8009428 <HAL_TIM_ConfigClockSource+0x4cc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00e      	beq.n	8009230 <HAL_TIM_ConfigClockSource+0x2d4>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a85      	ldr	r2, [pc, #532]	; (800942c <HAL_TIM_ConfigClockSource+0x4d0>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d009      	beq.n	8009230 <HAL_TIM_ConfigClockSource+0x2d4>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a83      	ldr	r2, [pc, #524]	; (8009430 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d004      	beq.n	8009230 <HAL_TIM_ConfigClockSource+0x2d4>
 8009226:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800922a:	4882      	ldr	r0, [pc, #520]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 800922c:	f7f8 fe1d 	bl	8001e6a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d013      	beq.n	8009260 <HAL_TIM_ConfigClockSource+0x304>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009240:	d00e      	beq.n	8009260 <HAL_TIM_ConfigClockSource+0x304>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924a:	d009      	beq.n	8009260 <HAL_TIM_ConfigClockSource+0x304>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009254:	d004      	beq.n	8009260 <HAL_TIM_ConfigClockSource+0x304>
 8009256:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800925a:	4876      	ldr	r0, [pc, #472]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 800925c:	f7f8 fe05 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009268:	d014      	beq.n	8009294 <HAL_TIM_ConfigClockSource+0x338>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d010      	beq.n	8009294 <HAL_TIM_ConfigClockSource+0x338>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <HAL_TIM_ConfigClockSource+0x338>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d008      	beq.n	8009294 <HAL_TIM_ConfigClockSource+0x338>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b0a      	cmp	r3, #10
 8009288:	d004      	beq.n	8009294 <HAL_TIM_ConfigClockSource+0x338>
 800928a:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800928e:	4869      	ldr	r0, [pc, #420]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009290:	f7f8 fdeb 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b0f      	cmp	r3, #15
 800929a:	d904      	bls.n	80092a6 <HAL_TIM_ConfigClockSource+0x34a>
 800929c:	f241 41e7 	movw	r1, #5351	; 0x14e7
 80092a0:	4864      	ldr	r0, [pc, #400]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 80092a2:	f7f8 fde2 	bl	8001e6a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6899      	ldr	r1, [r3, #8]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f000 fced 	bl	8009c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092c8:	609a      	str	r2, [r3, #8]
      break;
 80092ca:	e13d      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a54      	ldr	r2, [pc, #336]	; (8009424 <HAL_TIM_ConfigClockSource+0x4c8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d01d      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x3b6>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092de:	d018      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x3b6>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a50      	ldr	r2, [pc, #320]	; (8009428 <HAL_TIM_ConfigClockSource+0x4cc>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d013      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x3b6>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a4f      	ldr	r2, [pc, #316]	; (800942c <HAL_TIM_ConfigClockSource+0x4d0>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00e      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x3b6>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a4d      	ldr	r2, [pc, #308]	; (8009430 <HAL_TIM_ConfigClockSource+0x4d4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d009      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x3b6>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a4d      	ldr	r2, [pc, #308]	; (8009438 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d004      	beq.n	8009312 <HAL_TIM_ConfigClockSource+0x3b6>
 8009308:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800930c:	4849      	ldr	r0, [pc, #292]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 800930e:	f7f8 fdac 	bl	8001e6a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800931a:	d014      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x3ea>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d010      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x3ea>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00c      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x3ea>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d008      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x3ea>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	2b0a      	cmp	r3, #10
 800933a:	d004      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x3ea>
 800933c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8009340:	483c      	ldr	r0, [pc, #240]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009342:	f7f8 fd92 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b0f      	cmp	r3, #15
 800934c:	d904      	bls.n	8009358 <HAL_TIM_ConfigClockSource+0x3fc>
 800934e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009352:	4838      	ldr	r0, [pc, #224]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009354:	f7f8 fd89 	bl	8001e6a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	6859      	ldr	r1, [r3, #4]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	461a      	mov	r2, r3
 8009366:	f000 fc1b 	bl	8009ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2150      	movs	r1, #80	; 0x50
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fc74 	bl	8009c5e <TIM_ITRx_SetConfig>
      break;
 8009376:	e0e7      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a29      	ldr	r2, [pc, #164]	; (8009424 <HAL_TIM_ConfigClockSource+0x4c8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01d      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x462>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938a:	d018      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x462>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a25      	ldr	r2, [pc, #148]	; (8009428 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x462>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a24      	ldr	r2, [pc, #144]	; (800942c <HAL_TIM_ConfigClockSource+0x4d0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d00e      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x462>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a22      	ldr	r2, [pc, #136]	; (8009430 <HAL_TIM_ConfigClockSource+0x4d4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d009      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x462>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a22      	ldr	r2, [pc, #136]	; (8009438 <HAL_TIM_ConfigClockSource+0x4dc>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x462>
 80093b4:	f241 5106 	movw	r1, #5382	; 0x1506
 80093b8:	481e      	ldr	r0, [pc, #120]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 80093ba:	f7f8 fd56 	bl	8001e6a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c6:	d014      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x496>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d010      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x496>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00c      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x496>
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d008      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x496>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2b0a      	cmp	r3, #10
 80093e6:	d004      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x496>
 80093e8:	f241 5109 	movw	r1, #5385	; 0x1509
 80093ec:	4811      	ldr	r0, [pc, #68]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 80093ee:	f7f8 fd3c 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	2b0f      	cmp	r3, #15
 80093f8:	d904      	bls.n	8009404 <HAL_TIM_ConfigClockSource+0x4a8>
 80093fa:	f241 510a 	movw	r1, #5386	; 0x150a
 80093fe:	480d      	ldr	r0, [pc, #52]	; (8009434 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009400:	f7f8 fd33 	bl	8001e6a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	6859      	ldr	r1, [r3, #4]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	461a      	mov	r2, r3
 8009412:	f000 fbf4 	bl	8009bfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2160      	movs	r1, #96	; 0x60
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fc1e 	bl	8009c5e <TIM_ITRx_SetConfig>
      break;
 8009422:	e091      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
 8009424:	40010000 	.word	0x40010000
 8009428:	40000400 	.word	0x40000400
 800942c:	40000800 	.word	0x40000800
 8009430:	40000c00 	.word	0x40000c00
 8009434:	08011dc0 	.word	0x08011dc0
 8009438:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a48      	ldr	r2, [pc, #288]	; (8009564 <HAL_TIM_ConfigClockSource+0x608>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d01d      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x526>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800944e:	d018      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x526>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a44      	ldr	r2, [pc, #272]	; (8009568 <HAL_TIM_ConfigClockSource+0x60c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x526>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a43      	ldr	r2, [pc, #268]	; (800956c <HAL_TIM_ConfigClockSource+0x610>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d00e      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x526>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a41      	ldr	r2, [pc, #260]	; (8009570 <HAL_TIM_ConfigClockSource+0x614>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d009      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x526>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a40      	ldr	r2, [pc, #256]	; (8009574 <HAL_TIM_ConfigClockSource+0x618>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d004      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x526>
 8009478:	f241 5116 	movw	r1, #5398	; 0x1516
 800947c:	483e      	ldr	r0, [pc, #248]	; (8009578 <HAL_TIM_ConfigClockSource+0x61c>)
 800947e:	f7f8 fcf4 	bl	8001e6a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800948a:	d014      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x55a>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d010      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x55a>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x55a>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d008      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x55a>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2b0a      	cmp	r3, #10
 80094aa:	d004      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x55a>
 80094ac:	f241 5119 	movw	r1, #5401	; 0x1519
 80094b0:	4831      	ldr	r0, [pc, #196]	; (8009578 <HAL_TIM_ConfigClockSource+0x61c>)
 80094b2:	f7f8 fcda 	bl	8001e6a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	2b0f      	cmp	r3, #15
 80094bc:	d904      	bls.n	80094c8 <HAL_TIM_ConfigClockSource+0x56c>
 80094be:	f241 511a 	movw	r1, #5402	; 0x151a
 80094c2:	482d      	ldr	r0, [pc, #180]	; (8009578 <HAL_TIM_ConfigClockSource+0x61c>)
 80094c4:	f7f8 fcd1 	bl	8001e6a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	6859      	ldr	r1, [r3, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	461a      	mov	r2, r3
 80094d6:	f000 fb63 	bl	8009ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2140      	movs	r1, #64	; 0x40
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fbbc 	bl	8009c5e <TIM_ITRx_SetConfig>
      break;
 80094e6:	e02f      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1d      	ldr	r2, [pc, #116]	; (8009564 <HAL_TIM_ConfigClockSource+0x608>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d01d      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x5d2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fa:	d018      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x5d2>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a19      	ldr	r2, [pc, #100]	; (8009568 <HAL_TIM_ConfigClockSource+0x60c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d013      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x5d2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a18      	ldr	r2, [pc, #96]	; (800956c <HAL_TIM_ConfigClockSource+0x610>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00e      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x5d2>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a16      	ldr	r2, [pc, #88]	; (8009570 <HAL_TIM_ConfigClockSource+0x614>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d009      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x5d2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a15      	ldr	r2, [pc, #84]	; (8009574 <HAL_TIM_ConfigClockSource+0x618>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d004      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x5d2>
 8009524:	f241 5129 	movw	r1, #5417	; 0x1529
 8009528:	4813      	ldr	r0, [pc, #76]	; (8009578 <HAL_TIM_ConfigClockSource+0x61c>)
 800952a:	f7f8 fc9e 	bl	8001e6a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f000 fb90 	bl	8009c5e <TIM_ITRx_SetConfig>
      break;
 800953e:	e003      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
      break;
 8009544:	e000      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8009546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	40010000 	.word	0x40010000
 8009568:	40000400 	.word	0x40000400
 800956c:	40000800 	.word	0x40000800
 8009570:	40000c00 	.word	0x40000c00
 8009574:	40014000 	.word	0x40014000
 8009578:	08011dc0 	.word	0x08011dc0

0800957c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d107      	bne.n	8009608 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009606:	e02a      	b.n	800965e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d107      	bne.n	8009622 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2202      	movs	r2, #2
 8009616:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009620:	e01d      	b.n	800965e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d107      	bne.n	800963c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2204      	movs	r2, #4
 8009630:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800963a:	e010      	b.n	800965e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	429a      	cmp	r2, r3
 8009644:	d107      	bne.n	8009656 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2208      	movs	r2, #8
 800964a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009654:	e003      	b.n	800965e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff ffb4 	bl	80095cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	771a      	strb	r2, [r3, #28]
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a34      	ldr	r2, [pc, #208]	; (8009758 <TIM_Base_SetConfig+0xe4>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00f      	beq.n	80096ac <TIM_Base_SetConfig+0x38>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009692:	d00b      	beq.n	80096ac <TIM_Base_SetConfig+0x38>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a31      	ldr	r2, [pc, #196]	; (800975c <TIM_Base_SetConfig+0xe8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d007      	beq.n	80096ac <TIM_Base_SetConfig+0x38>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a30      	ldr	r2, [pc, #192]	; (8009760 <TIM_Base_SetConfig+0xec>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d003      	beq.n	80096ac <TIM_Base_SetConfig+0x38>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a2f      	ldr	r2, [pc, #188]	; (8009764 <TIM_Base_SetConfig+0xf0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d108      	bne.n	80096be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a25      	ldr	r2, [pc, #148]	; (8009758 <TIM_Base_SetConfig+0xe4>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d01b      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096cc:	d017      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a22      	ldr	r2, [pc, #136]	; (800975c <TIM_Base_SetConfig+0xe8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a21      	ldr	r2, [pc, #132]	; (8009760 <TIM_Base_SetConfig+0xec>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00f      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a20      	ldr	r2, [pc, #128]	; (8009764 <TIM_Base_SetConfig+0xf0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a1f      	ldr	r2, [pc, #124]	; (8009768 <TIM_Base_SetConfig+0xf4>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a1e      	ldr	r2, [pc, #120]	; (800976c <TIM_Base_SetConfig+0xf8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_Base_SetConfig+0x8a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a1d      	ldr	r2, [pc, #116]	; (8009770 <TIM_Base_SetConfig+0xfc>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d108      	bne.n	8009710 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a08      	ldr	r2, [pc, #32]	; (8009758 <TIM_Base_SetConfig+0xe4>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d103      	bne.n	8009744 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	615a      	str	r2, [r3, #20]
}
 800974a:	bf00      	nop
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	40010000 	.word	0x40010000
 800975c:	40000400 	.word	0x40000400
 8009760:	40000800 	.word	0x40000800
 8009764:	40000c00 	.word	0x40000c00
 8009768:	40014000 	.word	0x40014000
 800976c:	40014400 	.word	0x40014400
 8009770:	40014800 	.word	0x40014800

08009774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f023 0302 	bic.w	r3, r3, #2
 80097bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a30      	ldr	r2, [pc, #192]	; (800988c <TIM_OC1_SetConfig+0x118>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d119      	bne.n	8009804 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <TIM_OC1_SetConfig+0x76>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d004      	beq.n	80097ea <TIM_OC1_SetConfig+0x76>
 80097e0:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 80097e4:	482a      	ldr	r0, [pc, #168]	; (8009890 <TIM_OC1_SetConfig+0x11c>)
 80097e6:	f7f8 fb40 	bl	8001e6a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f023 0308 	bic.w	r3, r3, #8
 80097f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f023 0304 	bic.w	r3, r3, #4
 8009802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a21      	ldr	r2, [pc, #132]	; (800988c <TIM_OC1_SetConfig+0x118>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d12d      	bne.n	8009868 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009814:	d008      	beq.n	8009828 <TIM_OC1_SetConfig+0xb4>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d004      	beq.n	8009828 <TIM_OC1_SetConfig+0xb4>
 800981e:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8009822:	481b      	ldr	r0, [pc, #108]	; (8009890 <TIM_OC1_SetConfig+0x11c>)
 8009824:	f7f8 fb21 	bl	8001e6a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009830:	d008      	beq.n	8009844 <TIM_OC1_SetConfig+0xd0>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <TIM_OC1_SetConfig+0xd0>
 800983a:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 800983e:	4814      	ldr	r0, [pc, #80]	; (8009890 <TIM_OC1_SetConfig+0x11c>)
 8009840:	f7f8 fb13 	bl	8001e6a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800984a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	40010000 	.word	0x40010000
 8009890:	08011dc0 	.word	0x08011dc0

08009894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	f023 0210 	bic.w	r2, r3, #16
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f023 0320 	bic.w	r3, r3, #32
 80098de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a31      	ldr	r2, [pc, #196]	; (80099b4 <TIM_OC2_SetConfig+0x120>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d11a      	bne.n	800992a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d008      	beq.n	800990e <TIM_OC2_SetConfig+0x7a>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	2b08      	cmp	r3, #8
 8009902:	d004      	beq.n	800990e <TIM_OC2_SetConfig+0x7a>
 8009904:	f641 3112 	movw	r1, #6930	; 0x1b12
 8009908:	482b      	ldr	r0, [pc, #172]	; (80099b8 <TIM_OC2_SetConfig+0x124>)
 800990a:	f7f8 faae 	bl	8001e6a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009928:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a21      	ldr	r2, [pc, #132]	; (80099b4 <TIM_OC2_SetConfig+0x120>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d12f      	bne.n	8009992 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800993a:	d008      	beq.n	800994e <TIM_OC2_SetConfig+0xba>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <TIM_OC2_SetConfig+0xba>
 8009944:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8009948:	481b      	ldr	r0, [pc, #108]	; (80099b8 <TIM_OC2_SetConfig+0x124>)
 800994a:	f7f8 fa8e 	bl	8001e6a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009956:	d008      	beq.n	800996a <TIM_OC2_SetConfig+0xd6>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <TIM_OC2_SetConfig+0xd6>
 8009960:	f641 3121 	movw	r1, #6945	; 0x1b21
 8009964:	4814      	ldr	r0, [pc, #80]	; (80099b8 <TIM_OC2_SetConfig+0x124>)
 8009966:	f7f8 fa80 	bl	8001e6a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	4313      	orrs	r3, r2
 8009984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4313      	orrs	r3, r2
 8009990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	621a      	str	r2, [r3, #32]
}
 80099ac:	bf00      	nop
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40010000 	.word	0x40010000
 80099b8:	08011dc0 	.word	0x08011dc0

080099bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0303 	bic.w	r3, r3, #3
 80099f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	021b      	lsls	r3, r3, #8
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a31      	ldr	r2, [pc, #196]	; (8009adc <TIM_OC3_SetConfig+0x120>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d11a      	bne.n	8009a50 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d008      	beq.n	8009a34 <TIM_OC3_SetConfig+0x78>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	2b08      	cmp	r3, #8
 8009a28:	d004      	beq.n	8009a34 <TIM_OC3_SetConfig+0x78>
 8009a2a:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8009a2e:	482c      	ldr	r0, [pc, #176]	; (8009ae0 <TIM_OC3_SetConfig+0x124>)
 8009a30:	f7f8 fa1b 	bl	8001e6a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a22      	ldr	r2, [pc, #136]	; (8009adc <TIM_OC3_SetConfig+0x120>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d12f      	bne.n	8009ab8 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a60:	d008      	beq.n	8009a74 <TIM_OC3_SetConfig+0xb8>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <TIM_OC3_SetConfig+0xb8>
 8009a6a:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8009a6e:	481c      	ldr	r0, [pc, #112]	; (8009ae0 <TIM_OC3_SetConfig+0x124>)
 8009a70:	f7f8 f9fb 	bl	8001e6a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a7c:	d008      	beq.n	8009a90 <TIM_OC3_SetConfig+0xd4>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <TIM_OC3_SetConfig+0xd4>
 8009a86:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8009a8a:	4815      	ldr	r0, [pc, #84]	; (8009ae0 <TIM_OC3_SetConfig+0x124>)
 8009a8c:	f7f8 f9ed 	bl	8001e6a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	621a      	str	r2, [r3, #32]
}
 8009ad2:	bf00      	nop
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	40010000 	.word	0x40010000
 8009ae0:	08011dc0 	.word	0x08011dc0

08009ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	031b      	lsls	r3, r3, #12
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a16      	ldr	r2, [pc, #88]	; (8009b98 <TIM_OC4_SetConfig+0xb4>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d117      	bne.n	8009b74 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4c:	d008      	beq.n	8009b60 <TIM_OC4_SetConfig+0x7c>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <TIM_OC4_SetConfig+0x7c>
 8009b56:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8009b5a:	4810      	ldr	r0, [pc, #64]	; (8009b9c <TIM_OC4_SetConfig+0xb8>)
 8009b5c:	f7f8 f985 	bl	8001e6a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	019b      	lsls	r3, r3, #6
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	40010000 	.word	0x40010000
 8009b9c:	08011dc0 	.word	0x08011dc0

08009ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f023 0201 	bic.w	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f023 030a 	bic.w	r3, r3, #10
 8009bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b087      	sub	sp, #28
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	f023 0210 	bic.w	r2, r3, #16
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	031b      	lsls	r3, r3, #12
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b085      	sub	sp, #20
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f043 0307 	orr.w	r3, r3, #7
 8009c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	609a      	str	r2, [r3, #8]
}
 8009c88:	bf00      	nop
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	021a      	lsls	r2, r3, #8
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	609a      	str	r2, [r3, #8]
}
 8009cc8:	bf00      	nop
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <TIM_CCxChannelCmd+0xb8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d020      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cee:	d01c      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4a27      	ldr	r2, [pc, #156]	; (8009d90 <TIM_CCxChannelCmd+0xbc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d018      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <TIM_CCxChannelCmd+0xc0>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d014      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4a25      	ldr	r2, [pc, #148]	; (8009d98 <TIM_CCxChannelCmd+0xc4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d010      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a24      	ldr	r2, [pc, #144]	; (8009d9c <TIM_CCxChannelCmd+0xc8>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00c      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a23      	ldr	r2, [pc, #140]	; (8009da0 <TIM_CCxChannelCmd+0xcc>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d008      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4a22      	ldr	r2, [pc, #136]	; (8009da4 <TIM_CCxChannelCmd+0xd0>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d004      	beq.n	8009d2a <TIM_CCxChannelCmd+0x56>
 8009d20:	f641 5194 	movw	r1, #7572	; 0x1d94
 8009d24:	4820      	ldr	r0, [pc, #128]	; (8009da8 <TIM_CCxChannelCmd+0xd4>)
 8009d26:	f7f8 f8a0 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d010      	beq.n	8009d52 <TIM_CCxChannelCmd+0x7e>
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d00d      	beq.n	8009d52 <TIM_CCxChannelCmd+0x7e>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d00a      	beq.n	8009d52 <TIM_CCxChannelCmd+0x7e>
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b0c      	cmp	r3, #12
 8009d40:	d007      	beq.n	8009d52 <TIM_CCxChannelCmd+0x7e>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b3c      	cmp	r3, #60	; 0x3c
 8009d46:	d004      	beq.n	8009d52 <TIM_CCxChannelCmd+0x7e>
 8009d48:	f641 5195 	movw	r1, #7573	; 0x1d95
 8009d4c:	4816      	ldr	r0, [pc, #88]	; (8009da8 <TIM_CCxChannelCmd+0xd4>)
 8009d4e:	f7f8 f88c 	bl	8001e6a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	2201      	movs	r2, #1
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a1a      	ldr	r2, [r3, #32]
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	43db      	mvns	r3, r3
 8009d68:	401a      	ands	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1a      	ldr	r2, [r3, #32]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f003 031f 	and.w	r3, r3, #31
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	621a      	str	r2, [r3, #32]
}
 8009d84:	bf00      	nop
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	40010000 	.word	0x40010000
 8009d90:	40000400 	.word	0x40000400
 8009d94:	40000800 	.word	0x40000800
 8009d98:	40000c00 	.word	0x40000c00
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40014400 	.word	0x40014400
 8009da4:	40014800 	.word	0x40014800
 8009da8:	08011dc0 	.word	0x08011dc0

08009dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a55      	ldr	r2, [pc, #340]	; (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d018      	beq.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc8:	d013      	beq.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a51      	ldr	r2, [pc, #324]	; (8009f14 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00e      	beq.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a4f      	ldr	r2, [pc, #316]	; (8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d009      	beq.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a4e      	ldr	r2, [pc, #312]	; (8009f1c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d004      	beq.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009de8:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009dec:	484c      	ldr	r0, [pc, #304]	; (8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009dee:	f7f8 f83c 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d020      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b10      	cmp	r3, #16
 8009e00:	d01c      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d018      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b30      	cmp	r3, #48	; 0x30
 8009e10:	d014      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b40      	cmp	r3, #64	; 0x40
 8009e18:	d010      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b50      	cmp	r3, #80	; 0x50
 8009e20:	d00c      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b60      	cmp	r3, #96	; 0x60
 8009e28:	d008      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b70      	cmp	r3, #112	; 0x70
 8009e30:	d004      	beq.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e32:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8009e36:	483a      	ldr	r0, [pc, #232]	; (8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009e38:	f7f8 f817 	bl	8001e6a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b80      	cmp	r3, #128	; 0x80
 8009e42:	d008      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009e4c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009e50:	4833      	ldr	r0, [pc, #204]	; (8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009e52:	f7f8 f80a 	bl	8001e6a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d101      	bne.n	8009e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009e60:	2302      	movs	r3, #2
 8009e62:	e050      	b.n	8009f06 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a1b      	ldr	r2, [pc, #108]	; (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d018      	beq.n	8009eda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb0:	d013      	beq.n	8009eda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a17      	ldr	r2, [pc, #92]	; (8009f14 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d00e      	beq.n	8009eda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a15      	ldr	r2, [pc, #84]	; (8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d009      	beq.n	8009eda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a14      	ldr	r2, [pc, #80]	; (8009f1c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d004      	beq.n	8009eda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a13      	ldr	r2, [pc, #76]	; (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d10c      	bne.n	8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	40010000 	.word	0x40010000
 8009f14:	40000400 	.word	0x40000400
 8009f18:	40000800 	.word	0x40000800
 8009f1c:	40000c00 	.word	0x40000c00
 8009f20:	08011df8 	.word	0x08011df8
 8009f24:	40014000 	.word	0x40014000

08009f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f50:	b084      	sub	sp, #16
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	f107 001c 	add.w	r0, r7, #28
 8009f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d122      	bne.n	8009fae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d105      	bne.n	8009fa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fbee 	bl	800b784 <USB_CoreReset>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	e01a      	b.n	8009fe4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 fbe2 	bl	800b784 <USB_CoreReset>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8009fd6:	e005      	b.n	8009fe4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d10b      	bne.n	800a002 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f043 0206 	orr.w	r2, r3, #6
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f043 0220 	orr.w	r2, r3, #32
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a002:	7bfb      	ldrb	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a00e:	b004      	add	sp, #16
 800a010:	4770      	bx	lr
	...

0800a014 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d165      	bne.n	800a0f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4a41      	ldr	r2, [pc, #260]	; (800a130 <USB_SetTurnaroundTime+0x11c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d906      	bls.n	800a03e <USB_SetTurnaroundTime+0x2a>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4a40      	ldr	r2, [pc, #256]	; (800a134 <USB_SetTurnaroundTime+0x120>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d202      	bcs.n	800a03e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a038:	230f      	movs	r3, #15
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	e062      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	4a3c      	ldr	r2, [pc, #240]	; (800a134 <USB_SetTurnaroundTime+0x120>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d306      	bcc.n	800a054 <USB_SetTurnaroundTime+0x40>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4a3b      	ldr	r2, [pc, #236]	; (800a138 <USB_SetTurnaroundTime+0x124>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d202      	bcs.n	800a054 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a04e:	230e      	movs	r3, #14
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	e057      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	4a38      	ldr	r2, [pc, #224]	; (800a138 <USB_SetTurnaroundTime+0x124>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d306      	bcc.n	800a06a <USB_SetTurnaroundTime+0x56>
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	4a37      	ldr	r2, [pc, #220]	; (800a13c <USB_SetTurnaroundTime+0x128>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d202      	bcs.n	800a06a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a064:	230d      	movs	r3, #13
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e04c      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4a33      	ldr	r2, [pc, #204]	; (800a13c <USB_SetTurnaroundTime+0x128>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d306      	bcc.n	800a080 <USB_SetTurnaroundTime+0x6c>
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	4a32      	ldr	r2, [pc, #200]	; (800a140 <USB_SetTurnaroundTime+0x12c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d802      	bhi.n	800a080 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a07a:	230c      	movs	r3, #12
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e041      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4a2f      	ldr	r2, [pc, #188]	; (800a140 <USB_SetTurnaroundTime+0x12c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d906      	bls.n	800a096 <USB_SetTurnaroundTime+0x82>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	4a2e      	ldr	r2, [pc, #184]	; (800a144 <USB_SetTurnaroundTime+0x130>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d802      	bhi.n	800a096 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a090:	230b      	movs	r3, #11
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	e036      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4a2a      	ldr	r2, [pc, #168]	; (800a144 <USB_SetTurnaroundTime+0x130>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d906      	bls.n	800a0ac <USB_SetTurnaroundTime+0x98>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	4a29      	ldr	r2, [pc, #164]	; (800a148 <USB_SetTurnaroundTime+0x134>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d802      	bhi.n	800a0ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a0a6:	230a      	movs	r3, #10
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	e02b      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4a26      	ldr	r2, [pc, #152]	; (800a148 <USB_SetTurnaroundTime+0x134>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d906      	bls.n	800a0c2 <USB_SetTurnaroundTime+0xae>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4a25      	ldr	r2, [pc, #148]	; (800a14c <USB_SetTurnaroundTime+0x138>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d202      	bcs.n	800a0c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a0bc:	2309      	movs	r3, #9
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e020      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4a21      	ldr	r2, [pc, #132]	; (800a14c <USB_SetTurnaroundTime+0x138>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d306      	bcc.n	800a0d8 <USB_SetTurnaroundTime+0xc4>
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	4a20      	ldr	r2, [pc, #128]	; (800a150 <USB_SetTurnaroundTime+0x13c>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d802      	bhi.n	800a0d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	617b      	str	r3, [r7, #20]
 800a0d6:	e015      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4a1d      	ldr	r2, [pc, #116]	; (800a150 <USB_SetTurnaroundTime+0x13c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d906      	bls.n	800a0ee <USB_SetTurnaroundTime+0xda>
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	; (800a154 <USB_SetTurnaroundTime+0x140>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d202      	bcs.n	800a0ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a0e8:	2307      	movs	r3, #7
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	e00a      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a0ee:	2306      	movs	r3, #6
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e007      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a0fa:	2309      	movs	r3, #9
 800a0fc:	617b      	str	r3, [r7, #20]
 800a0fe:	e001      	b.n	800a104 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a100:	2309      	movs	r3, #9
 800a102:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	029b      	lsls	r3, r3, #10
 800a118:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a11c:	431a      	orrs	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	00d8acbf 	.word	0x00d8acbf
 800a134:	00e4e1c0 	.word	0x00e4e1c0
 800a138:	00f42400 	.word	0x00f42400
 800a13c:	01067380 	.word	0x01067380
 800a140:	011a499f 	.word	0x011a499f
 800a144:	01312cff 	.word	0x01312cff
 800a148:	014ca43f 	.word	0x014ca43f
 800a14c:	016e3600 	.word	0x016e3600
 800a150:	01a6ab1f 	.word	0x01a6ab1f
 800a154:	01e84800 	.word	0x01e84800

0800a158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f043 0201 	orr.w	r2, r3, #1
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b083      	sub	sp, #12
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f023 0201 	bic.w	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d115      	bne.n	800a1ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	f7f8 fe8c 	bl	8002ee8 <HAL_Delay>
      ms++;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 fa45 	bl	800b666 <USB_GetMode>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d01e      	beq.n	800a220 <USB_SetCurrentMode+0x84>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b31      	cmp	r3, #49	; 0x31
 800a1e6:	d9f0      	bls.n	800a1ca <USB_SetCurrentMode+0x2e>
 800a1e8:	e01a      	b.n	800a220 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d115      	bne.n	800a21c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	f7f8 fe73 	bl	8002ee8 <HAL_Delay>
      ms++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 fa2c 	bl	800b666 <USB_GetMode>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <USB_SetCurrentMode+0x84>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b31      	cmp	r3, #49	; 0x31
 800a218:	d9f0      	bls.n	800a1fc <USB_SetCurrentMode+0x60>
 800a21a:	e001      	b.n	800a220 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e005      	b.n	800a22c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b32      	cmp	r3, #50	; 0x32
 800a224:	d101      	bne.n	800a22a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a234:	b084      	sub	sp, #16
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a24e:	2300      	movs	r3, #0
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	e009      	b.n	800a268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	3340      	adds	r3, #64	; 0x40
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	3301      	adds	r3, #1
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	2b0e      	cmp	r3, #14
 800a26c:	d9f2      	bls.n	800a254 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a270:	2b00      	cmp	r3, #0
 800a272:	d11c      	bne.n	800a2ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a282:	f043 0302 	orr.w	r3, r3, #2
 800a286:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
 800a2ac:	e00b      	b.n	800a2c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d8:	4619      	mov	r1, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	680b      	ldr	r3, [r1, #0]
 800a2e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d10c      	bne.n	800a306 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f965 	bl	800a5c4 <USB_SetDevSpeed>
 800a2fa:	e008      	b.n	800a30e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f960 	bl	800a5c4 <USB_SetDevSpeed>
 800a304:	e003      	b.n	800a30e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a306:	2103      	movs	r1, #3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f95b 	bl	800a5c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a30e:	2110      	movs	r1, #16
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f8f3 	bl	800a4fc <USB_FlushTxFifo>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f91f 	bl	800a564 <USB_FlushRxFifo>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a336:	461a      	mov	r2, r3
 800a338:	2300      	movs	r3, #0
 800a33a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a342:	461a      	mov	r2, r3
 800a344:	2300      	movs	r3, #0
 800a346:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a34e:	461a      	mov	r2, r3
 800a350:	2300      	movs	r3, #0
 800a352:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a354:	2300      	movs	r3, #0
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	e043      	b.n	800a3e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a36c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a370:	d118      	bne.n	800a3a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a384:	461a      	mov	r2, r3
 800a386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	e013      	b.n	800a3b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39a:	461a      	mov	r2, r3
 800a39c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e008      	b.n	800a3b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a3da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d3b7      	bcc.n	800a35a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	e043      	b.n	800a478 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a406:	d118      	bne.n	800a43a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10a      	bne.n	800a424 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	461a      	mov	r2, r3
 800a41c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	e013      	b.n	800a44c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a430:	461a      	mov	r2, r3
 800a432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	e008      	b.n	800a44c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a446:	461a      	mov	r2, r3
 800a448:	2300      	movs	r3, #0
 800a44a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a458:	461a      	mov	r2, r3
 800a45a:	2300      	movs	r3, #0
 800a45c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46a:	461a      	mov	r2, r3
 800a46c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a470:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	3301      	adds	r3, #1
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d3b7      	bcc.n	800a3f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a492:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a4a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d105      	bne.n	800a4b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	f043 0210 	orr.w	r2, r3, #16
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	699a      	ldr	r2, [r3, #24]
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <USB_DevInit+0x2c4>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	f043 0208 	orr.w	r2, r3, #8
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d107      	bne.n	800a4e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4e0:	f043 0304 	orr.w	r3, r3, #4
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4f4:	b004      	add	sp, #16
 800a4f6:	4770      	bx	lr
 800a4f8:	803c3800 	.word	0x803c3800

0800a4fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a506:	2300      	movs	r3, #0
 800a508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3301      	adds	r3, #1
 800a50e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4a13      	ldr	r2, [pc, #76]	; (800a560 <USB_FlushTxFifo+0x64>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d901      	bls.n	800a51c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e01b      	b.n	800a554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	2b00      	cmp	r3, #0
 800a522:	daf2      	bge.n	800a50a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	019b      	lsls	r3, r3, #6
 800a52c:	f043 0220 	orr.w	r2, r3, #32
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4a08      	ldr	r2, [pc, #32]	; (800a560 <USB_FlushTxFifo+0x64>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d901      	bls.n	800a546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e006      	b.n	800a554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b20      	cmp	r3, #32
 800a550:	d0f0      	beq.n	800a534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	00030d40 	.word	0x00030d40

0800a564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3301      	adds	r3, #1
 800a574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4a11      	ldr	r2, [pc, #68]	; (800a5c0 <USB_FlushRxFifo+0x5c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d901      	bls.n	800a582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e018      	b.n	800a5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	daf2      	bge.n	800a570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2210      	movs	r2, #16
 800a592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4a08      	ldr	r2, [pc, #32]	; (800a5c0 <USB_FlushRxFifo+0x5c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d901      	bls.n	800a5a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e006      	b.n	800a5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	f003 0310 	and.w	r3, r3, #16
 800a5ae:	2b10      	cmp	r3, #16
 800a5b0:	d0f0      	beq.n	800a594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	00030d40 	.word	0x00030d40

0800a5c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	68f9      	ldr	r1, [r7, #12]
 800a5e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f003 0306 	and.w	r3, r3, #6
 800a60e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]
 800a61a:	e00a      	b.n	800a632 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d002      	beq.n	800a628 <USB_GetDevSpeed+0x32>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b06      	cmp	r3, #6
 800a626:	d102      	bne.n	800a62e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a628:	2302      	movs	r3, #2
 800a62a:	75fb      	strb	r3, [r7, #23]
 800a62c:	e001      	b.n	800a632 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a62e:	230f      	movs	r3, #15
 800a630:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a632:	7dfb      	ldrb	r3, [r7, #23]
}
 800a634:	4618      	mov	r0, r3
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d13a      	bne.n	800a6d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	69da      	ldr	r2, [r3, #28]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	2101      	movs	r1, #1
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	b29b      	uxth	r3, r3
 800a674:	68f9      	ldr	r1, [r7, #12]
 800a676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a67a:	4313      	orrs	r3, r2
 800a67c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d155      	bne.n	800a740 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	791b      	ldrb	r3, [r3, #4]
 800a6ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	059b      	lsls	r3, r3, #22
 800a6b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e036      	b.n	800a740 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d8:	69da      	ldr	r2, [r3, #28]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 030f 	and.w	r3, r3, #15
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e8:	041b      	lsls	r3, r3, #16
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d11a      	bne.n	800a740 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	4413      	add	r3, r2
 800a712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	791b      	ldrb	r3, [r3, #4]
 800a724:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a726:	430b      	orrs	r3, r1
 800a728:	4313      	orrs	r3, r2
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	0151      	lsls	r1, r2, #5
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	440a      	add	r2, r1
 800a732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a73a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a73e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
	...

0800a750 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	785b      	ldrb	r3, [r3, #1]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d161      	bne.n	800a830 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a77e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a782:	d11f      	bne.n	800a7c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a79e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	0151      	lsls	r1, r2, #5
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	440a      	add	r2, r1
 800a7ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	43db      	mvns	r3, r3
 800a7de:	68f9      	ldr	r1, [r7, #12]
 800a7e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	43db      	mvns	r3, r3
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a808:	4013      	ands	r3, r2
 800a80a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	0159      	lsls	r1, r3, #5
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	440b      	add	r3, r1
 800a822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a826:	4619      	mov	r1, r3
 800a828:	4b35      	ldr	r3, [pc, #212]	; (800a900 <USB_DeactivateEndpoint+0x1b0>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	600b      	str	r3, [r1, #0]
 800a82e:	e060      	b.n	800a8f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a846:	d11f      	bne.n	800a888 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a866:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	0151      	lsls	r1, r2, #5
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	440a      	add	r2, r1
 800a87e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 030f 	and.w	r3, r3, #15
 800a898:	2101      	movs	r1, #1
 800a89a:	fa01 f303 	lsl.w	r3, r1, r3
 800a89e:	041b      	lsls	r3, r3, #16
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	69da      	ldr	r2, [r3, #28]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	2101      	movs	r1, #1
 800a8be:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	43db      	mvns	r3, r3
 800a8c6:	68f9      	ldr	r1, [r7, #12]
 800a8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	0159      	lsls	r1, r3, #5
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	440b      	add	r3, r1
 800a8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <USB_DeactivateEndpoint+0x1b4>)
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	ec337800 	.word	0xec337800
 800a904:	eff37800 	.word	0xeff37800

0800a908 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af02      	add	r7, sp, #8
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	785b      	ldrb	r3, [r3, #1]
 800a924:	2b01      	cmp	r3, #1
 800a926:	f040 815c 	bne.w	800abe2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d132      	bne.n	800a998 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	0151      	lsls	r1, r2, #5
 800a944:	69fa      	ldr	r2, [r7, #28]
 800a946:	440a      	add	r2, r1
 800a948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a94c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	0151      	lsls	r1, r2, #5
 800a988:	69fa      	ldr	r2, [r7, #28]
 800a98a:	440a      	add	r2, r1
 800a98c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a990:	0cdb      	lsrs	r3, r3, #19
 800a992:	04db      	lsls	r3, r3, #19
 800a994:	6113      	str	r3, [r2, #16]
 800a996:	e074      	b.n	800aa82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	0151      	lsls	r1, r2, #5
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	440a      	add	r2, r1
 800a9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b2:	0cdb      	lsrs	r3, r3, #19
 800a9b4:	04db      	lsls	r3, r3, #19
 800a9b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	0151      	lsls	r1, r2, #5
 800a9ca:	69fa      	ldr	r2, [r7, #28]
 800a9cc:	440a      	add	r2, r1
 800a9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6999      	ldr	r1, [r3, #24]
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	440b      	add	r3, r1
 800a9f4:	1e59      	subs	r1, r3, #1
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa00:	4b9d      	ldr	r3, [pc, #628]	; (800ac78 <USB_EPStartXfer+0x370>)
 800aa02:	400b      	ands	r3, r1
 800aa04:	69b9      	ldr	r1, [r7, #24]
 800aa06:	0148      	lsls	r0, r1, #5
 800aa08:	69f9      	ldr	r1, [r7, #28]
 800aa0a:	4401      	add	r1, r0
 800aa0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa10:	4313      	orrs	r3, r2
 800aa12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa2a:	69b9      	ldr	r1, [r7, #24]
 800aa2c:	0148      	lsls	r0, r1, #5
 800aa2e:	69f9      	ldr	r1, [r7, #28]
 800aa30:	4401      	add	r1, r0
 800aa32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa36:	4313      	orrs	r3, r2
 800aa38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	791b      	ldrb	r3, [r3, #4]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d11f      	bne.n	800aa82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	0151      	lsls	r1, r2, #5
 800aa54:	69fa      	ldr	r2, [r7, #28]
 800aa56:	440a      	add	r2, r1
 800aa58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	0151      	lsls	r1, r2, #5
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	440a      	add	r2, r1
 800aa78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d14b      	bne.n	800ab20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d128      	bne.n	800aafe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d110      	bne.n	800aade <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	015a      	lsls	r2, r3, #5
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	4413      	add	r3, r2
 800aac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	0151      	lsls	r1, r2, #5
 800aace:	69fa      	ldr	r2, [r7, #28]
 800aad0:	440a      	add	r2, r1
 800aad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	e00f      	b.n	800aafe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aafc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	0151      	lsls	r1, r2, #5
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	440a      	add	r2, r1
 800ab14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	e133      	b.n	800ad88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	791b      	ldrb	r3, [r3, #4]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d015      	beq.n	800ab74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 811b 	beq.w	800ad88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	f003 030f 	and.w	r3, r3, #15
 800ab62:	2101      	movs	r1, #1
 800ab64:	fa01 f303 	lsl.w	r3, r1, r3
 800ab68:	69f9      	ldr	r1, [r7, #28]
 800ab6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	634b      	str	r3, [r1, #52]	; 0x34
 800ab72:	e109      	b.n	800ad88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d110      	bne.n	800aba6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	0151      	lsls	r1, r2, #5
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	440a      	add	r2, r1
 800ab9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	e00f      	b.n	800abc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	0151      	lsls	r1, r2, #5
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	440a      	add	r2, r1
 800abbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	6919      	ldr	r1, [r3, #16]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	781a      	ldrb	r2, [r3, #0]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	b298      	uxth	r0, r3
 800abd4:	79fb      	ldrb	r3, [r7, #7]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	4603      	mov	r3, r0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 fade 	bl	800b19c <USB_WritePacket>
 800abe0:	e0d2      	b.n	800ad88 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	015a      	lsls	r2, r3, #5
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	4413      	add	r3, r2
 800abea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	0151      	lsls	r1, r2, #5
 800abf4:	69fa      	ldr	r2, [r7, #28]
 800abf6:	440a      	add	r2, r1
 800abf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfc:	0cdb      	lsrs	r3, r3, #19
 800abfe:	04db      	lsls	r3, r3, #19
 800ac00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d126      	bne.n	800ac7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	015a      	lsls	r2, r3, #5
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	4413      	add	r3, r2
 800ac36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3a:	691a      	ldr	r2, [r3, #16]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac44:	69b9      	ldr	r1, [r7, #24]
 800ac46:	0148      	lsls	r0, r1, #5
 800ac48:	69f9      	ldr	r1, [r7, #28]
 800ac4a:	4401      	add	r1, r0
 800ac4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac50:	4313      	orrs	r3, r2
 800ac52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	69ba      	ldr	r2, [r7, #24]
 800ac64:	0151      	lsls	r1, r2, #5
 800ac66:	69fa      	ldr	r2, [r7, #28]
 800ac68:	440a      	add	r2, r1
 800ac6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac72:	6113      	str	r3, [r2, #16]
 800ac74:	e03a      	b.n	800acec <USB_EPStartXfer+0x3e4>
 800ac76:	bf00      	nop
 800ac78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	699a      	ldr	r2, [r3, #24]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	4413      	add	r3, r2
 800ac86:	1e5a      	subs	r2, r3, #1
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	8afa      	ldrh	r2, [r7, #22]
 800ac98:	fb03 f202 	mul.w	r2, r3, r2
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acac:	691a      	ldr	r2, [r3, #16]
 800acae:	8afb      	ldrh	r3, [r7, #22]
 800acb0:	04d9      	lsls	r1, r3, #19
 800acb2:	4b38      	ldr	r3, [pc, #224]	; (800ad94 <USB_EPStartXfer+0x48c>)
 800acb4:	400b      	ands	r3, r1
 800acb6:	69b9      	ldr	r1, [r7, #24]
 800acb8:	0148      	lsls	r0, r1, #5
 800acba:	69f9      	ldr	r1, [r7, #28]
 800acbc:	4401      	add	r1, r0
 800acbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acc2:	4313      	orrs	r3, r2
 800acc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acdc:	69b9      	ldr	r1, [r7, #24]
 800acde:	0148      	lsls	r0, r1, #5
 800ace0:	69f9      	ldr	r1, [r7, #28]
 800ace2:	4401      	add	r1, r0
 800ace4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ace8:	4313      	orrs	r3, r2
 800acea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d10d      	bne.n	800ad0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d009      	beq.n	800ad0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	6919      	ldr	r1, [r3, #16]
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0a:	460a      	mov	r2, r1
 800ad0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d128      	bne.n	800ad68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d110      	bne.n	800ad48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	0151      	lsls	r1, r2, #5
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	440a      	add	r2, r1
 800ad3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	e00f      	b.n	800ad68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	0151      	lsls	r1, r2, #5
 800ad5a:	69fa      	ldr	r2, [r7, #28]
 800ad5c:	440a      	add	r2, r1
 800ad5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	69ba      	ldr	r2, [r7, #24]
 800ad78:	0151      	lsls	r1, r2, #5
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	1ff80000 	.word	0x1ff80000

0800ad98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	4613      	mov	r3, r2
 800ada4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	f040 80ce 	bne.w	800af56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d132      	bne.n	800ae28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	015a      	lsls	r2, r3, #5
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	4413      	add	r3, r2
 800adca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	0151      	lsls	r1, r2, #5
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	440a      	add	r2, r1
 800add8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800addc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ade0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ade4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	0151      	lsls	r1, r2, #5
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	440a      	add	r2, r1
 800adfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae20:	0cdb      	lsrs	r3, r3, #19
 800ae22:	04db      	lsls	r3, r3, #19
 800ae24:	6113      	str	r3, [r2, #16]
 800ae26:	e04e      	b.n	800aec6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	0151      	lsls	r1, r2, #5
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	440a      	add	r2, r1
 800ae3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae42:	0cdb      	lsrs	r3, r3, #19
 800ae44:	04db      	lsls	r3, r3, #19
 800ae46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	0151      	lsls	r1, r2, #5
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	440a      	add	r2, r1
 800ae5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	699a      	ldr	r2, [r3, #24]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d903      	bls.n	800ae80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeac:	691a      	ldr	r2, [r3, #16]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeb6:	6939      	ldr	r1, [r7, #16]
 800aeb8:	0148      	lsls	r0, r1, #5
 800aeba:	6979      	ldr	r1, [r7, #20]
 800aebc:	4401      	add	r1, r0
 800aebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aec2:	4313      	orrs	r3, r2
 800aec4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d11e      	bne.n	800af0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d009      	beq.n	800aee8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee0:	461a      	mov	r2, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	e097      	b.n	800b03a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	0151      	lsls	r1, r2, #5
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	440a      	add	r2, r1
 800af20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 8083 	beq.w	800b03a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	2101      	movs	r1, #1
 800af46:	fa01 f303 	lsl.w	r3, r1, r3
 800af4a:	6979      	ldr	r1, [r7, #20]
 800af4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af50:	4313      	orrs	r3, r2
 800af52:	634b      	str	r3, [r1, #52]	; 0x34
 800af54:	e071      	b.n	800b03a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af70:	0cdb      	lsrs	r3, r3, #19
 800af72:	04db      	lsls	r3, r3, #19
 800af74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	68da      	ldr	r2, [r3, #12]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afde:	691a      	ldr	r2, [r3, #16]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	69db      	ldr	r3, [r3, #28]
 800afe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afe8:	6939      	ldr	r1, [r7, #16]
 800afea:	0148      	lsls	r0, r1, #5
 800afec:	6979      	ldr	r1, [r7, #20]
 800afee:	4401      	add	r1, r0
 800aff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aff4:	4313      	orrs	r3, r2
 800aff6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d10d      	bne.n	800b01a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d009      	beq.n	800b01a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	6919      	ldr	r1, [r3, #16]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	4413      	add	r3, r2
 800b012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b016:	460a      	mov	r2, r1
 800b018:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d14a      	bne.n	800b0fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b07a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b07e:	f040 8086 	bne.w	800b18e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	7812      	ldrb	r2, [r2, #0]
 800b096:	0151      	lsls	r1, r2, #5
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	440a      	add	r2, r1
 800b09c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	7812      	ldrb	r2, [r2, #0]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d902      	bls.n	800b0e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b0de:	e056      	b.n	800b18e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0f8:	d0e7      	beq.n	800b0ca <USB_EPStopXfer+0x82>
 800b0fa:	e048      	b.n	800b18e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	015a      	lsls	r2, r3, #5
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	4413      	add	r3, r2
 800b106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b114:	d13b      	bne.n	800b18e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	7812      	ldrb	r2, [r2, #0]
 800b12a:	0151      	lsls	r1, r2, #5
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	440a      	add	r2, r1
 800b130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b138:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	7812      	ldrb	r2, [r2, #0]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b15c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3301      	adds	r3, #1
 800b162:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f242 7210 	movw	r2, #10000	; 0x2710
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d902      	bls.n	800b174 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]
          break;
 800b172:	e00c      	b.n	800b18e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b18c:	d0e7      	beq.n	800b15e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b190:	4618      	mov	r0, r3
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b089      	sub	sp, #36	; 0x24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	71fb      	strb	r3, [r7, #7]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b1ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d123      	bne.n	800b20a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1c2:	88bb      	ldrh	r3, [r7, #4]
 800b1c4:	3303      	adds	r3, #3
 800b1c6:	089b      	lsrs	r3, r3, #2
 800b1c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	e018      	b.n	800b202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	031a      	lsls	r2, r3, #12
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1dc:	461a      	mov	r2, r3
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	3301      	adds	r3, #1
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	429a      	cmp	r2, r3
 800b208:	d3e2      	bcc.n	800b1d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3724      	adds	r7, #36	; 0x24
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b218:	b480      	push	{r7}
 800b21a:	b08b      	sub	sp, #44	; 0x2c
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	4613      	mov	r3, r2
 800b224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	089b      	lsrs	r3, r3, #2
 800b232:	b29b      	uxth	r3, r3
 800b234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	f003 0303 	and.w	r3, r3, #3
 800b23c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b23e:	2300      	movs	r3, #0
 800b240:	623b      	str	r3, [r7, #32]
 800b242:	e014      	b.n	800b26e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	3301      	adds	r3, #1
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	3301      	adds	r3, #1
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	3301      	adds	r3, #1
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	3301      	adds	r3, #1
 800b266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	3301      	adds	r3, #1
 800b26c:	623b      	str	r3, [r7, #32]
 800b26e:	6a3a      	ldr	r2, [r7, #32]
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	429a      	cmp	r2, r3
 800b274:	d3e6      	bcc.n	800b244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b276:	8bfb      	ldrh	r3, [r7, #30]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01e      	beq.n	800b2ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b286:	461a      	mov	r2, r3
 800b288:	f107 0310 	add.w	r3, r7, #16
 800b28c:	6812      	ldr	r2, [r2, #0]
 800b28e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	b2db      	uxtb	r3, r3
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	fa22 f303 	lsr.w	r3, r2, r3
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	701a      	strb	r2, [r3, #0]
      i++;
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b2ae:	8bfb      	ldrh	r3, [r7, #30]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b2b4:	8bfb      	ldrh	r3, [r7, #30]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1ea      	bne.n	800b290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	372c      	adds	r7, #44	; 0x2c
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d12c      	bne.n	800b33e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	db12      	blt.n	800b31c <USB_EPSetStall+0x54>
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00f      	beq.n	800b31c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	0151      	lsls	r1, r2, #5
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	440a      	add	r2, r1
 800b312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b31a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	0151      	lsls	r1, r2, #5
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	440a      	add	r2, r1
 800b332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	e02b      	b.n	800b396 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	db12      	blt.n	800b376 <USB_EPSetStall+0xae>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00f      	beq.n	800b376 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	0151      	lsls	r1, r2, #5
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	440a      	add	r2, r1
 800b36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b374:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b394:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	785b      	ldrb	r3, [r3, #1]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d128      	bne.n	800b412 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	791b      	ldrb	r3, [r3, #4]
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d003      	beq.n	800b3f0 <USB_EPClearStall+0x4c>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	791b      	ldrb	r3, [r3, #4]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d138      	bne.n	800b462 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	e027      	b.n	800b462 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	440a      	add	r2, r1
 800b428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d003      	beq.n	800b442 <USB_EPClearStall+0x9e>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	791b      	ldrb	r3, [r3, #4]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d10f      	bne.n	800b462 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	0151      	lsls	r1, r2, #5
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	440a      	add	r2, r1
 800b458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b460:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b48e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b492:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b4a4:	68f9      	ldr	r1, [r7, #12]
 800b4a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4ea:	f023 0302 	bic.w	r3, r3, #2
 800b4ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b518:	f023 0303 	bic.w	r3, r3, #3
 800b51c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b52c:	f043 0302 	orr.w	r3, r3, #2
 800b530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	695b      	ldr	r3, [r3, #20]
 800b54c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4013      	ands	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b558:	68fb      	ldr	r3, [r7, #12]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b566:	b480      	push	{r7}
 800b568:	b085      	sub	sp, #20
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	4013      	ands	r3, r2
 800b588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	0c1b      	lsrs	r3, r3, #16
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	b29b      	uxth	r3, r3
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b5de:	78fb      	ldrb	r3, [r7, #3]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b087      	sub	sp, #28
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	f003 030f 	and.w	r3, r3, #15
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	fa22 f303 	lsr.w	r3, r2, r3
 800b63a:	01db      	lsls	r3, r3, #7
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	4313      	orrs	r3, r2
 800b642:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	4013      	ands	r3, r2
 800b656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b658:	68bb      	ldr	r3, [r7, #8]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	f003 0301 	and.w	r3, r3, #1
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b69c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b6a0:	f023 0307 	bic.w	r3, r3, #7
 800b6a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	333c      	adds	r3, #60	; 0x3c
 800b6de:	3304      	adds	r3, #4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	4a26      	ldr	r2, [pc, #152]	; (800b780 <USB_EP0_OutStart+0xb8>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d90a      	bls.n	800b702 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6fc:	d101      	bne.n	800b702 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	e037      	b.n	800b772 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b708:	461a      	mov	r2, r3
 800b70a:	2300      	movs	r3, #0
 800b70c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b730:	f043 0318 	orr.w	r3, r3, #24
 800b734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b744:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b748:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b74a:	7afb      	ldrb	r3, [r7, #11]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d10f      	bne.n	800b770 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b756:	461a      	mov	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b76a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b76e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	4f54300a 	.word	0x4f54300a

0800b784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	3301      	adds	r3, #1
 800b794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4a13      	ldr	r2, [pc, #76]	; (800b7e8 <USB_CoreReset+0x64>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d901      	bls.n	800b7a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e01b      	b.n	800b7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	daf2      	bge.n	800b790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	f043 0201 	orr.w	r2, r3, #1
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4a09      	ldr	r2, [pc, #36]	; (800b7e8 <USB_CoreReset+0x64>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d901      	bls.n	800b7cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e006      	b.n	800b7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d0f0      	beq.n	800b7ba <USB_CoreReset+0x36>

  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	00030d40 	.word	0x00030d40

0800b7ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b7f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b7fc:	f005 fbc4 	bl	8010f88 <USBD_static_malloc>
 800b800:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32b0      	adds	r2, #176	; 0xb0
 800b812:	2100      	movs	r1, #0
 800b814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b818:	2302      	movs	r3, #2
 800b81a:	e0d4      	b.n	800b9c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b81c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b820:	2100      	movs	r1, #0
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f005 fc3e 	bl	80110a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	32b0      	adds	r2, #176	; 0xb0
 800b832:	68f9      	ldr	r1, [r7, #12]
 800b834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	32b0      	adds	r2, #176	; 0xb0
 800b842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7c1b      	ldrb	r3, [r3, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d138      	bne.n	800b8c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b854:	4b5e      	ldr	r3, [pc, #376]	; (800b9d0 <USBD_CDC_Init+0x1e4>)
 800b856:	7819      	ldrb	r1, [r3, #0]
 800b858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b85c:	2202      	movs	r2, #2
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f005 fa6f 	bl	8010d42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b864:	4b5a      	ldr	r3, [pc, #360]	; (800b9d0 <USBD_CDC_Init+0x1e4>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	f003 020f 	and.w	r2, r3, #15
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	440b      	add	r3, r1
 800b878:	3324      	adds	r3, #36	; 0x24
 800b87a:	2201      	movs	r2, #1
 800b87c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b87e:	4b55      	ldr	r3, [pc, #340]	; (800b9d4 <USBD_CDC_Init+0x1e8>)
 800b880:	7819      	ldrb	r1, [r3, #0]
 800b882:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b886:	2202      	movs	r2, #2
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f005 fa5a 	bl	8010d42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b88e:	4b51      	ldr	r3, [pc, #324]	; (800b9d4 <USBD_CDC_Init+0x1e8>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	f003 020f 	and.w	r2, r3, #15
 800b896:	6879      	ldr	r1, [r7, #4]
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	440b      	add	r3, r1
 800b8a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8aa:	4b4b      	ldr	r3, [pc, #300]	; (800b9d8 <USBD_CDC_Init+0x1ec>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	f003 020f 	and.w	r2, r3, #15
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	440b      	add	r3, r1
 800b8be:	3326      	adds	r3, #38	; 0x26
 800b8c0:	2210      	movs	r2, #16
 800b8c2:	801a      	strh	r2, [r3, #0]
 800b8c4:	e035      	b.n	800b932 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8c6:	4b42      	ldr	r3, [pc, #264]	; (800b9d0 <USBD_CDC_Init+0x1e4>)
 800b8c8:	7819      	ldrb	r1, [r3, #0]
 800b8ca:	2340      	movs	r3, #64	; 0x40
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f005 fa37 	bl	8010d42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8d4:	4b3e      	ldr	r3, [pc, #248]	; (800b9d0 <USBD_CDC_Init+0x1e4>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	f003 020f 	and.w	r2, r3, #15
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	440b      	add	r3, r1
 800b8e8:	3324      	adds	r3, #36	; 0x24
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8ee:	4b39      	ldr	r3, [pc, #228]	; (800b9d4 <USBD_CDC_Init+0x1e8>)
 800b8f0:	7819      	ldrb	r1, [r3, #0]
 800b8f2:	2340      	movs	r3, #64	; 0x40
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f005 fa23 	bl	8010d42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b8fc:	4b35      	ldr	r3, [pc, #212]	; (800b9d4 <USBD_CDC_Init+0x1e8>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	f003 020f 	and.w	r2, r3, #15
 800b904:	6879      	ldr	r1, [r7, #4]
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	440b      	add	r3, r1
 800b910:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b914:	2201      	movs	r2, #1
 800b916:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b918:	4b2f      	ldr	r3, [pc, #188]	; (800b9d8 <USBD_CDC_Init+0x1ec>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f003 020f 	and.w	r2, r3, #15
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	440b      	add	r3, r1
 800b92c:	3326      	adds	r3, #38	; 0x26
 800b92e:	2210      	movs	r2, #16
 800b930:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b932:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <USBD_CDC_Init+0x1ec>)
 800b934:	7819      	ldrb	r1, [r3, #0]
 800b936:	2308      	movs	r3, #8
 800b938:	2203      	movs	r2, #3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f005 fa01 	bl	8010d42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b940:	4b25      	ldr	r3, [pc, #148]	; (800b9d8 <USBD_CDC_Init+0x1ec>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	f003 020f 	and.w	r2, r3, #15
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	440b      	add	r3, r1
 800b954:	3324      	adds	r3, #36	; 0x24
 800b956:	2201      	movs	r2, #1
 800b958:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	33b0      	adds	r3, #176	; 0xb0
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b990:	2302      	movs	r3, #2
 800b992:	e018      	b.n	800b9c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	7c1b      	ldrb	r3, [r3, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b99c:	4b0d      	ldr	r3, [pc, #52]	; (800b9d4 <USBD_CDC_Init+0x1e8>)
 800b99e:	7819      	ldrb	r1, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f005 fab8 	bl	8010f20 <USBD_LL_PrepareReceive>
 800b9b0:	e008      	b.n	800b9c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9b2:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <USBD_CDC_Init+0x1e8>)
 800b9b4:	7819      	ldrb	r1, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9bc:	2340      	movs	r3, #64	; 0x40
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f005 faae 	bl	8010f20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	2000011f 	.word	0x2000011f
 800b9d4:	20000120 	.word	0x20000120
 800b9d8:	20000121 	.word	0x20000121

0800b9dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b9e8:	4b3a      	ldr	r3, [pc, #232]	; (800bad4 <USBD_CDC_DeInit+0xf8>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f005 f9cd 	bl	8010d8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b9f4:	4b37      	ldr	r3, [pc, #220]	; (800bad4 <USBD_CDC_DeInit+0xf8>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 020f 	and.w	r2, r3, #15
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	440b      	add	r3, r1
 800ba08:	3324      	adds	r3, #36	; 0x24
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba0e:	4b32      	ldr	r3, [pc, #200]	; (800bad8 <USBD_CDC_DeInit+0xfc>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f005 f9ba 	bl	8010d8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba1a:	4b2f      	ldr	r3, [pc, #188]	; (800bad8 <USBD_CDC_DeInit+0xfc>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	f003 020f 	and.w	r2, r3, #15
 800ba22:	6879      	ldr	r1, [r7, #4]
 800ba24:	4613      	mov	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4413      	add	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba32:	2200      	movs	r2, #0
 800ba34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba36:	4b29      	ldr	r3, [pc, #164]	; (800badc <USBD_CDC_DeInit+0x100>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f005 f9a6 	bl	8010d8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba42:	4b26      	ldr	r3, [pc, #152]	; (800badc <USBD_CDC_DeInit+0x100>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f003 020f 	and.w	r2, r3, #15
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	440b      	add	r3, r1
 800ba56:	3324      	adds	r3, #36	; 0x24
 800ba58:	2200      	movs	r2, #0
 800ba5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ba5c:	4b1f      	ldr	r3, [pc, #124]	; (800badc <USBD_CDC_DeInit+0x100>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	f003 020f 	and.w	r2, r3, #15
 800ba64:	6879      	ldr	r1, [r7, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	440b      	add	r3, r1
 800ba70:	3326      	adds	r3, #38	; 0x26
 800ba72:	2200      	movs	r2, #0
 800ba74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	32b0      	adds	r2, #176	; 0xb0
 800ba80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01f      	beq.n	800bac8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	33b0      	adds	r3, #176	; 0xb0
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	32b0      	adds	r2, #176	; 0xb0
 800baa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baaa:	4618      	mov	r0, r3
 800baac:	f005 fa7a 	bl	8010fa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	32b0      	adds	r2, #176	; 0xb0
 800baba:	2100      	movs	r1, #0
 800babc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	2000011f 	.word	0x2000011f
 800bad8:	20000120 	.word	0x20000120
 800badc:	20000121 	.word	0x20000121

0800bae0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	32b0      	adds	r2, #176	; 0xb0
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e0bf      	b.n	800bc90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d050      	beq.n	800bbbe <USBD_CDC_Setup+0xde>
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	f040 80af 	bne.w	800bc80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	88db      	ldrh	r3, [r3, #6]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d03a      	beq.n	800bba0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b25b      	sxtb	r3, r3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	da1b      	bge.n	800bb6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	33b0      	adds	r3, #176	; 0xb0
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	88d2      	ldrh	r2, [r2, #6]
 800bb50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	88db      	ldrh	r3, [r3, #6]
 800bb56:	2b07      	cmp	r3, #7
 800bb58:	bf28      	it	cs
 800bb5a:	2307      	movcs	r3, #7
 800bb5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	89fa      	ldrh	r2, [r7, #14]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f001 fd43 	bl	800d5f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bb6a:	e090      	b.n	800bc8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	785a      	ldrb	r2, [r3, #1]
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	88db      	ldrh	r3, [r3, #6]
 800bb7a:	2b3f      	cmp	r3, #63	; 0x3f
 800bb7c:	d803      	bhi.n	800bb86 <USBD_CDC_Setup+0xa6>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	88db      	ldrh	r3, [r3, #6]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	e000      	b.n	800bb88 <USBD_CDC_Setup+0xa8>
 800bb86:	2240      	movs	r2, #64	; 0x40
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bb8e:	6939      	ldr	r1, [r7, #16]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bb96:	461a      	mov	r2, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f001 fd55 	bl	800d648 <USBD_CtlPrepareRx>
      break;
 800bb9e:	e076      	b.n	800bc8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	33b0      	adds	r3, #176	; 0xb0
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	7850      	ldrb	r0, [r2, #1]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	4798      	blx	r3
      break;
 800bbbc:	e067      	b.n	800bc8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	785b      	ldrb	r3, [r3, #1]
 800bbc2:	2b0b      	cmp	r3, #11
 800bbc4:	d851      	bhi.n	800bc6a <USBD_CDC_Setup+0x18a>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <USBD_CDC_Setup+0xec>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bbfd 	.word	0x0800bbfd
 800bbd0:	0800bc79 	.word	0x0800bc79
 800bbd4:	0800bc6b 	.word	0x0800bc6b
 800bbd8:	0800bc6b 	.word	0x0800bc6b
 800bbdc:	0800bc6b 	.word	0x0800bc6b
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bc6b 	.word	0x0800bc6b
 800bbe8:	0800bc6b 	.word	0x0800bc6b
 800bbec:	0800bc6b 	.word	0x0800bc6b
 800bbf0:	0800bc6b 	.word	0x0800bc6b
 800bbf4:	0800bc27 	.word	0x0800bc27
 800bbf8:	0800bc51 	.word	0x0800bc51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d107      	bne.n	800bc18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc08:	f107 030a 	add.w	r3, r7, #10
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 fced 	bl	800d5f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc16:	e032      	b.n	800bc7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 fc77 	bl	800d50e <USBD_CtlError>
            ret = USBD_FAIL;
 800bc20:	2303      	movs	r3, #3
 800bc22:	75fb      	strb	r3, [r7, #23]
          break;
 800bc24:	e02b      	b.n	800bc7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d107      	bne.n	800bc42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc32:	f107 030d 	add.w	r3, r7, #13
 800bc36:	2201      	movs	r2, #1
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f001 fcd8 	bl	800d5f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc40:	e01d      	b.n	800bc7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f001 fc62 	bl	800d50e <USBD_CtlError>
            ret = USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	75fb      	strb	r3, [r7, #23]
          break;
 800bc4e:	e016      	b.n	800bc7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d00f      	beq.n	800bc7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fc55 	bl	800d50e <USBD_CtlError>
            ret = USBD_FAIL;
 800bc64:	2303      	movs	r3, #3
 800bc66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bc68:	e008      	b.n	800bc7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f001 fc4e 	bl	800d50e <USBD_CtlError>
          ret = USBD_FAIL;
 800bc72:	2303      	movs	r3, #3
 800bc74:	75fb      	strb	r3, [r7, #23]
          break;
 800bc76:	e002      	b.n	800bc7e <USBD_CDC_Setup+0x19e>
          break;
 800bc78:	bf00      	nop
 800bc7a:	e008      	b.n	800bc8e <USBD_CDC_Setup+0x1ae>
          break;
 800bc7c:	bf00      	nop
      }
      break;
 800bc7e:	e006      	b.n	800bc8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 fc43 	bl	800d50e <USBD_CtlError>
      ret = USBD_FAIL;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	32b0      	adds	r2, #176	; 0xb0
 800bcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e065      	b.n	800bd8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	32b0      	adds	r2, #176	; 0xb0
 800bccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	f003 020f 	and.w	r2, r3, #15
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	440b      	add	r3, r1
 800bce4:	3318      	adds	r3, #24
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d02f      	beq.n	800bd4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bcec:	78fb      	ldrb	r3, [r7, #3]
 800bcee:	f003 020f 	and.w	r2, r3, #15
 800bcf2:	6879      	ldr	r1, [r7, #4]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3318      	adds	r3, #24
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	78fb      	ldrb	r3, [r7, #3]
 800bd04:	f003 010f 	and.w	r1, r3, #15
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	440b      	add	r3, r1
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4403      	add	r3, r0
 800bd14:	3348      	adds	r3, #72	; 0x48
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd1c:	fb01 f303 	mul.w	r3, r1, r3
 800bd20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d112      	bne.n	800bd4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	f003 020f 	and.w	r2, r3, #15
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	3318      	adds	r3, #24
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd3e:	78f9      	ldrb	r1, [r7, #3]
 800bd40:	2300      	movs	r3, #0
 800bd42:	2200      	movs	r2, #0
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f005 f8ca 	bl	8010ede <USBD_LL_Transmit>
 800bd4a:	e01f      	b.n	800bd8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	33b0      	adds	r3, #176	; 0xb0
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d010      	beq.n	800bd8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	33b0      	adds	r3, #176	; 0xb0
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bd88:	78fa      	ldrb	r2, [r7, #3]
 800bd8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	32b0      	adds	r2, #176	; 0xb0
 800bdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	32b0      	adds	r2, #176	; 0xb0
 800bdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e01a      	b.n	800bdfe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f005 f8c8 	bl	8010f62 <USBD_LL_GetRxDataSize>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	33b0      	adds	r3, #176	; 0xb0
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	32b0      	adds	r2, #176	; 0xb0
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be24:	2303      	movs	r3, #3
 800be26:	e025      	b.n	800be74 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	33b0      	adds	r3, #176	; 0xb0
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01a      	beq.n	800be72 <USBD_CDC_EP0_RxReady+0x6c>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be42:	2bff      	cmp	r3, #255	; 0xff
 800be44:	d015      	beq.n	800be72 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	33b0      	adds	r3, #176	; 0xb0
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800be5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be66:	b292      	uxth	r2, r2
 800be68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	22ff      	movs	r2, #255	; 0xff
 800be6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be84:	2182      	movs	r1, #130	; 0x82
 800be86:	4818      	ldr	r0, [pc, #96]	; (800bee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be88:	f000 fd09 	bl	800c89e <USBD_GetEpDesc>
 800be8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be8e:	2101      	movs	r1, #1
 800be90:	4815      	ldr	r0, [pc, #84]	; (800bee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be92:	f000 fd04 	bl	800c89e <USBD_GetEpDesc>
 800be96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be98:	2181      	movs	r1, #129	; 0x81
 800be9a:	4813      	ldr	r0, [pc, #76]	; (800bee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be9c:	f000 fcff 	bl	800c89e <USBD_GetEpDesc>
 800bea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2210      	movs	r2, #16
 800beac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bebc:	711a      	strb	r2, [r3, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d006      	beq.n	800bed6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bed0:	711a      	strb	r2, [r3, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2243      	movs	r2, #67	; 0x43
 800beda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bedc:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	200000dc 	.word	0x200000dc

0800beec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bef4:	2182      	movs	r1, #130	; 0x82
 800bef6:	4818      	ldr	r0, [pc, #96]	; (800bf58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bef8:	f000 fcd1 	bl	800c89e <USBD_GetEpDesc>
 800befc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800befe:	2101      	movs	r1, #1
 800bf00:	4815      	ldr	r0, [pc, #84]	; (800bf58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf02:	f000 fccc 	bl	800c89e <USBD_GetEpDesc>
 800bf06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf08:	2181      	movs	r1, #129	; 0x81
 800bf0a:	4813      	ldr	r0, [pc, #76]	; (800bf58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf0c:	f000 fcc7 	bl	800c89e <USBD_GetEpDesc>
 800bf10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2210      	movs	r2, #16
 800bf1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	2200      	movs	r2, #0
 800bf28:	711a      	strb	r2, [r3, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f042 0202 	orr.w	r2, r2, #2
 800bf30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d006      	beq.n	800bf46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	711a      	strb	r2, [r3, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f042 0202 	orr.w	r2, r2, #2
 800bf44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2243      	movs	r2, #67	; 0x43
 800bf4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf4c:	4b02      	ldr	r3, [pc, #8]	; (800bf58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	200000dc 	.word	0x200000dc

0800bf5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf64:	2182      	movs	r1, #130	; 0x82
 800bf66:	4818      	ldr	r0, [pc, #96]	; (800bfc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf68:	f000 fc99 	bl	800c89e <USBD_GetEpDesc>
 800bf6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4815      	ldr	r0, [pc, #84]	; (800bfc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf72:	f000 fc94 	bl	800c89e <USBD_GetEpDesc>
 800bf76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf78:	2181      	movs	r1, #129	; 0x81
 800bf7a:	4813      	ldr	r0, [pc, #76]	; (800bfc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf7c:	f000 fc8f 	bl	800c89e <USBD_GetEpDesc>
 800bf80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	2210      	movs	r2, #16
 800bf8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d006      	beq.n	800bfa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf9c:	711a      	strb	r2, [r3, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d006      	beq.n	800bfb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfb0:	711a      	strb	r2, [r3, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2243      	movs	r2, #67	; 0x43
 800bfba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfbc:	4b02      	ldr	r3, [pc, #8]	; (800bfc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	200000dc 	.word	0x200000dc

0800bfcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	220a      	movs	r2, #10
 800bfd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bfda:	4b03      	ldr	r3, [pc, #12]	; (800bfe8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	20000098 	.word	0x20000098

0800bfec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e009      	b.n	800c014 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	33b0      	adds	r3, #176	; 0xb0
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	32b0      	adds	r2, #176	; 0xb0
 800c036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c042:	2303      	movs	r3, #3
 800c044:	e008      	b.n	800c058 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	371c      	adds	r7, #28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	32b0      	adds	r2, #176	; 0xb0
 800c078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c084:	2303      	movs	r3, #3
 800c086:	e004      	b.n	800c092 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
	...

0800c0a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	32b0      	adds	r2, #176	; 0xb0
 800c0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	32b0      	adds	r2, #176	; 0xb0
 800c0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e018      	b.n	800c100 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	7c1b      	ldrb	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10a      	bne.n	800c0ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0d6:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <USBD_CDC_ReceivePacket+0x68>)
 800c0d8:	7819      	ldrb	r1, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f004 ff1b 	bl	8010f20 <USBD_LL_PrepareReceive>
 800c0ea:	e008      	b.n	800c0fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0ec:	4b06      	ldr	r3, [pc, #24]	; (800c108 <USBD_CDC_ReceivePacket+0x68>)
 800c0ee:	7819      	ldrb	r1, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0f6:	2340      	movs	r3, #64	; 0x40
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f004 ff11 	bl	8010f20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20000120 	.word	0x20000120

0800c10c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	4613      	mov	r3, r2
 800c118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	e01f      	b.n	800c164 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	79fa      	ldrb	r2, [r7, #7]
 800c156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f004 fd8b 	bl	8010c74 <USBD_LL_Init>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c162:	7dfb      	ldrb	r3, [r7, #23]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c180:	2303      	movs	r3, #3
 800c182:	e025      	b.n	800c1d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	32ae      	adds	r2, #174	; 0xae
 800c196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00f      	beq.n	800c1c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	32ae      	adds	r2, #174	; 0xae
 800c1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	f107 020e 	add.w	r2, r7, #14
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4798      	blx	r3
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f004 fd93 	bl	8010d0c <USBD_LL_Start>
 800c1e6:	4603      	mov	r3, r0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	460b      	mov	r3, r1
 800c210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d009      	beq.n	800c234 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	78fa      	ldrb	r2, [r7, #3]
 800c22a:	4611      	mov	r1, r2
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	4798      	blx	r3
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c234:	7bfb      	ldrb	r3, [r7, #15]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b084      	sub	sp, #16
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	78fa      	ldrb	r2, [r7, #3]
 800c258:	4611      	mov	r1, r2
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c264:	2303      	movs	r3, #3
 800c266:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c268:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f001 f908 	bl	800d49a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c298:	461a      	mov	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2a6:	f003 031f 	and.w	r3, r3, #31
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d01a      	beq.n	800c2e4 <USBD_LL_SetupStage+0x72>
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d822      	bhi.n	800c2f8 <USBD_LL_SetupStage+0x86>
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <USBD_LL_SetupStage+0x4a>
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d00a      	beq.n	800c2d0 <USBD_LL_SetupStage+0x5e>
 800c2ba:	e01d      	b.n	800c2f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fb5f 	bl	800c988 <USBD_StdDevReq>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c2ce:	e020      	b.n	800c312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fbc7 	bl	800ca6c <USBD_StdItfReq>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c2e2:	e016      	b.n	800c312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fc29 	bl	800cb44 <USBD_StdEPReq>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c2f6:	e00c      	b.n	800c312 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c302:	b2db      	uxtb	r3, r3
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f004 fd60 	bl	8010dcc <USBD_LL_StallEP>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]
      break;
 800c310:	bf00      	nop
  }

  return ret;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	460b      	mov	r3, r1
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c32e:	7afb      	ldrb	r3, [r7, #11]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d16e      	bne.n	800c412 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c33a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c342:	2b03      	cmp	r3, #3
 800c344:	f040 8098 	bne.w	800c478 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	429a      	cmp	r2, r3
 800c352:	d913      	bls.n	800c37c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	689a      	ldr	r2, [r3, #8]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	1ad2      	subs	r2, r2, r3
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	4293      	cmp	r3, r2
 800c36c:	bf28      	it	cs
 800c36e:	4613      	movcs	r3, r2
 800c370:	461a      	mov	r2, r3
 800c372:	6879      	ldr	r1, [r7, #4]
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f001 f984 	bl	800d682 <USBD_CtlContinueRx>
 800c37a:	e07d      	b.n	800c478 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c382:	f003 031f 	and.w	r3, r3, #31
 800c386:	2b02      	cmp	r3, #2
 800c388:	d014      	beq.n	800c3b4 <USBD_LL_DataOutStage+0x98>
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d81d      	bhi.n	800c3ca <USBD_LL_DataOutStage+0xae>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <USBD_LL_DataOutStage+0x7c>
 800c392:	2b01      	cmp	r3, #1
 800c394:	d003      	beq.n	800c39e <USBD_LL_DataOutStage+0x82>
 800c396:	e018      	b.n	800c3ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	75bb      	strb	r3, [r7, #22]
            break;
 800c39c:	e018      	b.n	800c3d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 fa5e 	bl	800c86a <USBD_CoreFindIF>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	75bb      	strb	r3, [r7, #22]
            break;
 800c3b2:	e00d      	b.n	800c3d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	4619      	mov	r1, r3
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f000 fa60 	bl	800c884 <USBD_CoreFindEP>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	75bb      	strb	r3, [r7, #22]
            break;
 800c3c8:	e002      	b.n	800c3d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	75bb      	strb	r3, [r7, #22]
            break;
 800c3ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c3d0:	7dbb      	ldrb	r3, [r7, #22]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d119      	bne.n	800c40a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d113      	bne.n	800c40a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c3e2:	7dba      	ldrb	r2, [r7, #22]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	32ae      	adds	r2, #174	; 0xae
 800c3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c3f2:	7dba      	ldrb	r2, [r7, #22]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c3fa:	7dba      	ldrb	r2, [r7, #22]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	32ae      	adds	r2, #174	; 0xae
 800c400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f001 f94a 	bl	800d6a4 <USBD_CtlSendStatus>
 800c410:	e032      	b.n	800c478 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c412:	7afb      	ldrb	r3, [r7, #11]
 800c414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	4619      	mov	r1, r3
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 fa31 	bl	800c884 <USBD_CoreFindEP>
 800c422:	4603      	mov	r3, r0
 800c424:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c426:	7dbb      	ldrb	r3, [r7, #22]
 800c428:	2bff      	cmp	r3, #255	; 0xff
 800c42a:	d025      	beq.n	800c478 <USBD_LL_DataOutStage+0x15c>
 800c42c:	7dbb      	ldrb	r3, [r7, #22]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d122      	bne.n	800c478 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d117      	bne.n	800c46e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c43e:	7dba      	ldrb	r2, [r7, #22]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	32ae      	adds	r2, #174	; 0xae
 800c444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00f      	beq.n	800c46e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c44e:	7dba      	ldrb	r2, [r7, #22]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c456:	7dba      	ldrb	r2, [r7, #22]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	32ae      	adds	r2, #174	; 0xae
 800c45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	7afa      	ldrb	r2, [r7, #11]
 800c464:	4611      	mov	r1, r2
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	4798      	blx	r3
 800c46a:	4603      	mov	r3, r0
 800c46c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d001      	beq.n	800c478 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	e000      	b.n	800c47a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b086      	sub	sp, #24
 800c486:	af00      	add	r7, sp, #0
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	460b      	mov	r3, r1
 800c48c:	607a      	str	r2, [r7, #4]
 800c48e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c490:	7afb      	ldrb	r3, [r7, #11]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d16f      	bne.n	800c576 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3314      	adds	r3, #20
 800c49a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d15a      	bne.n	800c55c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d914      	bls.n	800c4dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	689a      	ldr	r2, [r3, #8]
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	1ad2      	subs	r2, r2, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	6879      	ldr	r1, [r7, #4]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f001 f8ac 	bl	800d626 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f004 fd23 	bl	8010f20 <USBD_LL_PrepareReceive>
 800c4da:	e03f      	b.n	800c55c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	68da      	ldr	r2, [r3, #12]
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d11c      	bne.n	800c522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d316      	bcc.n	800c522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d20f      	bcs.n	800c522 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c502:	2200      	movs	r2, #0
 800c504:	2100      	movs	r1, #0
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f001 f88d 	bl	800d626 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c514:	2300      	movs	r3, #0
 800c516:	2200      	movs	r2, #0
 800c518:	2100      	movs	r1, #0
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f004 fd00 	bl	8010f20 <USBD_LL_PrepareReceive>
 800c520:	e01c      	b.n	800c55c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d10f      	bne.n	800c54e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d009      	beq.n	800c54e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c54e:	2180      	movs	r1, #128	; 0x80
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f004 fc3b 	bl	8010dcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f001 f8b7 	bl	800d6ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d03a      	beq.n	800c5dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fe42 	bl	800c1f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c574:	e032      	b.n	800c5dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c576:	7afb      	ldrb	r3, [r7, #11]
 800c578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	4619      	mov	r1, r3
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f000 f97f 	bl	800c884 <USBD_CoreFindEP>
 800c586:	4603      	mov	r3, r0
 800c588:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	2bff      	cmp	r3, #255	; 0xff
 800c58e:	d025      	beq.n	800c5dc <USBD_LL_DataInStage+0x15a>
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d122      	bne.n	800c5dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d11c      	bne.n	800c5dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c5a2:	7dfa      	ldrb	r2, [r7, #23]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	32ae      	adds	r2, #174	; 0xae
 800c5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d014      	beq.n	800c5dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c5b2:	7dfa      	ldrb	r2, [r7, #23]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c5ba:	7dfa      	ldrb	r2, [r7, #23]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	32ae      	adds	r2, #174	; 0xae
 800c5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	7afa      	ldrb	r2, [r7, #11]
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	4798      	blx	r3
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c5d2:	7dbb      	ldrb	r3, [r7, #22]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d001      	beq.n	800c5dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c5d8:	7dbb      	ldrb	r3, [r7, #22]
 800c5da:	e000      	b.n	800c5de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d014      	beq.n	800c64c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00e      	beq.n	800c64c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	6852      	ldr	r2, [r2, #4]
 800c63a:	b2d2      	uxtb	r2, r2
 800c63c:	4611      	mov	r1, r2
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	4798      	blx	r3
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c648:	2303      	movs	r3, #3
 800c64a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c64c:	2340      	movs	r3, #64	; 0x40
 800c64e:	2200      	movs	r2, #0
 800c650:	2100      	movs	r1, #0
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f004 fb75 	bl	8010d42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2240      	movs	r2, #64	; 0x40
 800c664:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c668:	2340      	movs	r3, #64	; 0x40
 800c66a:	2200      	movs	r2, #0
 800c66c:	2180      	movs	r1, #128	; 0x80
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f004 fb67 	bl	8010d42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2240      	movs	r2, #64	; 0x40
 800c67e:	621a      	str	r2, [r3, #32]

  return ret;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c68a:	b480      	push	{r7}
 800c68c:	b083      	sub	sp, #12
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	460b      	mov	r3, r1
 800c694:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	78fa      	ldrb	r2, [r7, #3]
 800c69a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2204      	movs	r2, #4
 800c6c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d106      	bne.n	800c6f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b03      	cmp	r3, #3
 800c718:	d110      	bne.n	800c73c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72a:	69db      	ldr	r3, [r3, #28]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d005      	beq.n	800c73c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	32ae      	adds	r2, #174	; 0xae
 800c75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c764:	2303      	movs	r3, #3
 800c766:	e01c      	b.n	800c7a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b03      	cmp	r3, #3
 800c772:	d115      	bne.n	800c7a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	32ae      	adds	r2, #174	; 0xae
 800c77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c782:	6a1b      	ldr	r3, [r3, #32]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00b      	beq.n	800c7a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	32ae      	adds	r2, #174	; 0xae
 800c792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c796:	6a1b      	ldr	r3, [r3, #32]
 800c798:	78fa      	ldrb	r2, [r7, #3]
 800c79a:	4611      	mov	r1, r2
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	32ae      	adds	r2, #174	; 0xae
 800c7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e01c      	b.n	800c806 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d115      	bne.n	800c804 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	32ae      	adds	r2, #174	; 0xae
 800c7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00b      	beq.n	800c804 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	32ae      	adds	r2, #174	; 0xae
 800c7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	78fa      	ldrb	r2, [r7, #3]
 800c7fe:	4611      	mov	r1, r2
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00e      	beq.n	800c860 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	6852      	ldr	r2, [r2, #4]
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	4611      	mov	r1, r2
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	4798      	blx	r3
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c85c:	2303      	movs	r3, #3
 800c85e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	460b      	mov	r3, r1
 800c874:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c876:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c890:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c892:	4618      	mov	r0, r3
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b086      	sub	sp, #24
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d920      	bls.n	800c908 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c8ce:	e013      	b.n	800c8f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c8d0:	f107 030a 	add.w	r3, r7, #10
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6978      	ldr	r0, [r7, #20]
 800c8d8:	f000 f81b 	bl	800c912 <USBD_GetNextDesc>
 800c8dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	785b      	ldrb	r3, [r3, #1]
 800c8e2:	2b05      	cmp	r3, #5
 800c8e4:	d108      	bne.n	800c8f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	789b      	ldrb	r3, [r3, #2]
 800c8ee:	78fa      	ldrb	r2, [r7, #3]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d008      	beq.n	800c906 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	885b      	ldrh	r3, [r3, #2]
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	897b      	ldrh	r3, [r7, #10]
 800c900:	429a      	cmp	r2, r3
 800c902:	d8e5      	bhi.n	800c8d0 <USBD_GetEpDesc+0x32>
 800c904:	e000      	b.n	800c908 <USBD_GetEpDesc+0x6a>
          break;
 800c906:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c908:	693b      	ldr	r3, [r7, #16]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	881a      	ldrh	r2, [r3, #0]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	b29b      	uxth	r3, r3
 800c92a:	4413      	add	r3, r2
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	461a      	mov	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4413      	add	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c93e:	68fb      	ldr	r3, [r7, #12]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3714      	adds	r7, #20
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	3301      	adds	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c96a:	8a3b      	ldrh	r3, [r7, #16]
 800c96c:	021b      	lsls	r3, r3, #8
 800c96e:	b21a      	sxth	r2, r3
 800c970:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c974:	4313      	orrs	r3, r2
 800c976:	b21b      	sxth	r3, r3
 800c978:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c97a:	89fb      	ldrh	r3, [r7, #14]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c99e:	2b40      	cmp	r3, #64	; 0x40
 800c9a0:	d005      	beq.n	800c9ae <USBD_StdDevReq+0x26>
 800c9a2:	2b40      	cmp	r3, #64	; 0x40
 800c9a4:	d857      	bhi.n	800ca56 <USBD_StdDevReq+0xce>
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00f      	beq.n	800c9ca <USBD_StdDevReq+0x42>
 800c9aa:	2b20      	cmp	r3, #32
 800c9ac:	d153      	bne.n	800ca56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	32ae      	adds	r2, #174	; 0xae
 800c9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	4798      	blx	r3
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c8:	e04a      	b.n	800ca60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	785b      	ldrb	r3, [r3, #1]
 800c9ce:	2b09      	cmp	r3, #9
 800c9d0:	d83b      	bhi.n	800ca4a <USBD_StdDevReq+0xc2>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <USBD_StdDevReq+0x50>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800ca2d 	.word	0x0800ca2d
 800c9dc:	0800ca41 	.word	0x0800ca41
 800c9e0:	0800ca4b 	.word	0x0800ca4b
 800c9e4:	0800ca37 	.word	0x0800ca37
 800c9e8:	0800ca4b 	.word	0x0800ca4b
 800c9ec:	0800ca0b 	.word	0x0800ca0b
 800c9f0:	0800ca01 	.word	0x0800ca01
 800c9f4:	0800ca4b 	.word	0x0800ca4b
 800c9f8:	0800ca23 	.word	0x0800ca23
 800c9fc:	0800ca15 	.word	0x0800ca15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fa3c 	bl	800ce80 <USBD_GetDescriptor>
          break;
 800ca08:	e024      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fba1 	bl	800d154 <USBD_SetAddress>
          break;
 800ca12:	e01f      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fbe0 	bl	800d1dc <USBD_SetConfig>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ca20:	e018      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fc83 	bl	800d330 <USBD_GetConfig>
          break;
 800ca2a:	e013      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fcb4 	bl	800d39c <USBD_GetStatus>
          break;
 800ca34:	e00e      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fce3 	bl	800d404 <USBD_SetFeature>
          break;
 800ca3e:	e009      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fd07 	bl	800d456 <USBD_ClrFeature>
          break;
 800ca48:	e004      	b.n	800ca54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fd5e 	bl	800d50e <USBD_CtlError>
          break;
 800ca52:	bf00      	nop
      }
      break;
 800ca54:	e004      	b.n	800ca60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fd58 	bl	800d50e <USBD_CtlError>
      break;
 800ca5e:	bf00      	nop
  }

  return ret;
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop

0800ca6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca82:	2b40      	cmp	r3, #64	; 0x40
 800ca84:	d005      	beq.n	800ca92 <USBD_StdItfReq+0x26>
 800ca86:	2b40      	cmp	r3, #64	; 0x40
 800ca88:	d852      	bhi.n	800cb30 <USBD_StdItfReq+0xc4>
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <USBD_StdItfReq+0x26>
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	d14e      	bne.n	800cb30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d840      	bhi.n	800cb22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	889b      	ldrh	r3, [r3, #4]
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d836      	bhi.n	800cb18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	889b      	ldrh	r3, [r3, #4]
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fed9 	bl	800c86a <USBD_CoreFindIF>
 800cab8:	4603      	mov	r3, r0
 800caba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2bff      	cmp	r3, #255	; 0xff
 800cac0:	d01d      	beq.n	800cafe <USBD_StdItfReq+0x92>
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d11a      	bne.n	800cafe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cac8:	7bba      	ldrb	r2, [r7, #14]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	32ae      	adds	r2, #174	; 0xae
 800cace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00f      	beq.n	800caf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cad8:	7bba      	ldrb	r2, [r7, #14]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cae0:	7bba      	ldrb	r2, [r7, #14]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	32ae      	adds	r2, #174	; 0xae
 800cae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	4798      	blx	r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800caf6:	e004      	b.n	800cb02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800caf8:	2303      	movs	r3, #3
 800cafa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cafc:	e001      	b.n	800cb02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cafe:	2303      	movs	r3, #3
 800cb00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	88db      	ldrh	r3, [r3, #6]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d110      	bne.n	800cb2c <USBD_StdItfReq+0xc0>
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10d      	bne.n	800cb2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fdc7 	bl	800d6a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb16:	e009      	b.n	800cb2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fcf7 	bl	800d50e <USBD_CtlError>
          break;
 800cb20:	e004      	b.n	800cb2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fcf2 	bl	800d50e <USBD_CtlError>
          break;
 800cb2a:	e000      	b.n	800cb2e <USBD_StdItfReq+0xc2>
          break;
 800cb2c:	bf00      	nop
      }
      break;
 800cb2e:	e004      	b.n	800cb3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fceb 	bl	800d50e <USBD_CtlError>
      break;
 800cb38:	bf00      	nop
  }

  return ret;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	889b      	ldrh	r3, [r3, #4]
 800cb56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb60:	2b40      	cmp	r3, #64	; 0x40
 800cb62:	d007      	beq.n	800cb74 <USBD_StdEPReq+0x30>
 800cb64:	2b40      	cmp	r3, #64	; 0x40
 800cb66:	f200 817f 	bhi.w	800ce68 <USBD_StdEPReq+0x324>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d02a      	beq.n	800cbc4 <USBD_StdEPReq+0x80>
 800cb6e:	2b20      	cmp	r3, #32
 800cb70:	f040 817a 	bne.w	800ce68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fe83 	bl	800c884 <USBD_CoreFindEP>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb82:	7b7b      	ldrb	r3, [r7, #13]
 800cb84:	2bff      	cmp	r3, #255	; 0xff
 800cb86:	f000 8174 	beq.w	800ce72 <USBD_StdEPReq+0x32e>
 800cb8a:	7b7b      	ldrb	r3, [r7, #13]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f040 8170 	bne.w	800ce72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cb92:	7b7a      	ldrb	r2, [r7, #13]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cb9a:	7b7a      	ldrb	r2, [r7, #13]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	32ae      	adds	r2, #174	; 0xae
 800cba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 8163 	beq.w	800ce72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cbac:	7b7a      	ldrb	r2, [r7, #13]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	32ae      	adds	r2, #174	; 0xae
 800cbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	6839      	ldr	r1, [r7, #0]
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	4798      	blx	r3
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbc2:	e156      	b.n	800ce72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d008      	beq.n	800cbde <USBD_StdEPReq+0x9a>
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	f300 8145 	bgt.w	800ce5c <USBD_StdEPReq+0x318>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 809b 	beq.w	800cd0e <USBD_StdEPReq+0x1ca>
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d03c      	beq.n	800cc56 <USBD_StdEPReq+0x112>
 800cbdc:	e13e      	b.n	800ce5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d002      	beq.n	800cbf0 <USBD_StdEPReq+0xac>
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d016      	beq.n	800cc1c <USBD_StdEPReq+0xd8>
 800cbee:	e02c      	b.n	800cc4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00d      	beq.n	800cc12 <USBD_StdEPReq+0xce>
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
 800cbf8:	2b80      	cmp	r3, #128	; 0x80
 800cbfa:	d00a      	beq.n	800cc12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbfc:	7bbb      	ldrb	r3, [r7, #14]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f004 f8e3 	bl	8010dcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc06:	2180      	movs	r1, #128	; 0x80
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f004 f8df 	bl	8010dcc <USBD_LL_StallEP>
 800cc0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc10:	e020      	b.n	800cc54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fc7a 	bl	800d50e <USBD_CtlError>
              break;
 800cc1a:	e01b      	b.n	800cc54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	885b      	ldrh	r3, [r3, #2]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10e      	bne.n	800cc42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <USBD_StdEPReq+0xfe>
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	d008      	beq.n	800cc42 <USBD_StdEPReq+0xfe>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	88db      	ldrh	r3, [r3, #6]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d104      	bne.n	800cc42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc38:	7bbb      	ldrb	r3, [r7, #14]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f004 f8c5 	bl	8010dcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fd2e 	bl	800d6a4 <USBD_CtlSendStatus>

              break;
 800cc48:	e004      	b.n	800cc54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fc5e 	bl	800d50e <USBD_CtlError>
              break;
 800cc52:	bf00      	nop
          }
          break;
 800cc54:	e107      	b.n	800ce66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d002      	beq.n	800cc68 <USBD_StdEPReq+0x124>
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d016      	beq.n	800cc94 <USBD_StdEPReq+0x150>
 800cc66:	e04b      	b.n	800cd00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00d      	beq.n	800cc8a <USBD_StdEPReq+0x146>
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	2b80      	cmp	r3, #128	; 0x80
 800cc72:	d00a      	beq.n	800cc8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	4619      	mov	r1, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f004 f8a7 	bl	8010dcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc7e:	2180      	movs	r1, #128	; 0x80
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f004 f8a3 	bl	8010dcc <USBD_LL_StallEP>
 800cc86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc88:	e040      	b.n	800cd0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fc3e 	bl	800d50e <USBD_CtlError>
              break;
 800cc92:	e03b      	b.n	800cd0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	885b      	ldrh	r3, [r3, #2]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d136      	bne.n	800cd0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
 800cc9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d004      	beq.n	800ccb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f004 f8ad 	bl	8010e0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fcf7 	bl	800d6a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ccb6:	7bbb      	ldrb	r3, [r7, #14]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff fde2 	bl	800c884 <USBD_CoreFindEP>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccc4:	7b7b      	ldrb	r3, [r7, #13]
 800ccc6:	2bff      	cmp	r3, #255	; 0xff
 800ccc8:	d01f      	beq.n	800cd0a <USBD_StdEPReq+0x1c6>
 800ccca:	7b7b      	ldrb	r3, [r7, #13]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d11c      	bne.n	800cd0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ccd0:	7b7a      	ldrb	r2, [r7, #13]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ccd8:	7b7a      	ldrb	r2, [r7, #13]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	32ae      	adds	r2, #174	; 0xae
 800ccde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d010      	beq.n	800cd0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cce8:	7b7a      	ldrb	r2, [r7, #13]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	32ae      	adds	r2, #174	; 0xae
 800ccee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	4798      	blx	r3
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ccfe:	e004      	b.n	800cd0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fc03 	bl	800d50e <USBD_CtlError>
              break;
 800cd08:	e000      	b.n	800cd0c <USBD_StdEPReq+0x1c8>
              break;
 800cd0a:	bf00      	nop
          }
          break;
 800cd0c:	e0ab      	b.n	800ce66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d002      	beq.n	800cd20 <USBD_StdEPReq+0x1dc>
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d032      	beq.n	800cd84 <USBD_StdEPReq+0x240>
 800cd1e:	e097      	b.n	800ce50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd20:	7bbb      	ldrb	r3, [r7, #14]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d007      	beq.n	800cd36 <USBD_StdEPReq+0x1f2>
 800cd26:	7bbb      	ldrb	r3, [r7, #14]
 800cd28:	2b80      	cmp	r3, #128	; 0x80
 800cd2a:	d004      	beq.n	800cd36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fbed 	bl	800d50e <USBD_CtlError>
                break;
 800cd34:	e091      	b.n	800ce5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	da0b      	bge.n	800cd56 <USBD_StdEPReq+0x212>
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	3310      	adds	r3, #16
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	4413      	add	r3, r2
 800cd52:	3304      	adds	r3, #4
 800cd54:	e00b      	b.n	800cd6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd56:	7bbb      	ldrb	r3, [r7, #14]
 800cd58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2200      	movs	r2, #0
 800cd74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2202      	movs	r2, #2
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fc37 	bl	800d5f0 <USBD_CtlSendData>
              break;
 800cd82:	e06a      	b.n	800ce5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	da11      	bge.n	800cdb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd8c:	7bbb      	ldrb	r3, [r7, #14]
 800cd8e:	f003 020f 	and.w	r2, r3, #15
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	440b      	add	r3, r1
 800cd9e:	3324      	adds	r3, #36	; 0x24
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d117      	bne.n	800cdd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fbb0 	bl	800d50e <USBD_CtlError>
                  break;
 800cdae:	e054      	b.n	800ce5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
 800cdb2:	f003 020f 	and.w	r2, r3, #15
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	440b      	add	r3, r1
 800cdc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fb9d 	bl	800d50e <USBD_CtlError>
                  break;
 800cdd4:	e041      	b.n	800ce5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	da0b      	bge.n	800cdf6 <USBD_StdEPReq+0x2b2>
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	3310      	adds	r3, #16
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	e00b      	b.n	800ce0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ce10:	7bbb      	ldrb	r3, [r7, #14]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d002      	beq.n	800ce1c <USBD_StdEPReq+0x2d8>
 800ce16:	7bbb      	ldrb	r3, [r7, #14]
 800ce18:	2b80      	cmp	r3, #128	; 0x80
 800ce1a:	d103      	bne.n	800ce24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	e00e      	b.n	800ce42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	4619      	mov	r1, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f004 f80d 	bl	8010e48 <USBD_LL_IsStallEP>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d003      	beq.n	800ce3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2201      	movs	r2, #1
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	e002      	b.n	800ce42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2202      	movs	r2, #2
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fbd1 	bl	800d5f0 <USBD_CtlSendData>
              break;
 800ce4e:	e004      	b.n	800ce5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fb5b 	bl	800d50e <USBD_CtlError>
              break;
 800ce58:	bf00      	nop
          }
          break;
 800ce5a:	e004      	b.n	800ce66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fb55 	bl	800d50e <USBD_CtlError>
          break;
 800ce64:	bf00      	nop
      }
      break;
 800ce66:	e005      	b.n	800ce74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fb4f 	bl	800d50e <USBD_CtlError>
      break;
 800ce70:	e000      	b.n	800ce74 <USBD_StdEPReq+0x330>
      break;
 800ce72:	bf00      	nop
  }

  return ret;
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	885b      	ldrh	r3, [r3, #2]
 800ce9a:	0a1b      	lsrs	r3, r3, #8
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	2b06      	cmp	r3, #6
 800cea2:	f200 8128 	bhi.w	800d0f6 <USBD_GetDescriptor+0x276>
 800cea6:	a201      	add	r2, pc, #4	; (adr r2, 800ceac <USBD_GetDescriptor+0x2c>)
 800cea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceac:	0800cec9 	.word	0x0800cec9
 800ceb0:	0800cee1 	.word	0x0800cee1
 800ceb4:	0800cf21 	.word	0x0800cf21
 800ceb8:	0800d0f7 	.word	0x0800d0f7
 800cebc:	0800d0f7 	.word	0x0800d0f7
 800cec0:	0800d097 	.word	0x0800d097
 800cec4:	0800d0c3 	.word	0x0800d0c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	7c12      	ldrb	r2, [r2, #16]
 800ced4:	f107 0108 	add.w	r1, r7, #8
 800ced8:	4610      	mov	r0, r2
 800ceda:	4798      	blx	r3
 800cedc:	60f8      	str	r0, [r7, #12]
      break;
 800cede:	e112      	b.n	800d106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7c1b      	ldrb	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10d      	bne.n	800cf04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef0:	f107 0208 	add.w	r2, r7, #8
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3301      	adds	r3, #1
 800cefe:	2202      	movs	r2, #2
 800cf00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf02:	e100      	b.n	800d106 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	f107 0208 	add.w	r2, r7, #8
 800cf10:	4610      	mov	r0, r2
 800cf12:	4798      	blx	r3
 800cf14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	701a      	strb	r2, [r3, #0]
      break;
 800cf1e:	e0f2      	b.n	800d106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	885b      	ldrh	r3, [r3, #2]
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b05      	cmp	r3, #5
 800cf28:	f200 80ac 	bhi.w	800d084 <USBD_GetDescriptor+0x204>
 800cf2c:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <USBD_GetDescriptor+0xb4>)
 800cf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf32:	bf00      	nop
 800cf34:	0800cf4d 	.word	0x0800cf4d
 800cf38:	0800cf81 	.word	0x0800cf81
 800cf3c:	0800cfb5 	.word	0x0800cfb5
 800cf40:	0800cfe9 	.word	0x0800cfe9
 800cf44:	0800d01d 	.word	0x0800d01d
 800cf48:	0800d051 	.word	0x0800d051
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00b      	beq.n	800cf70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	7c12      	ldrb	r2, [r2, #16]
 800cf64:	f107 0108 	add.w	r1, r7, #8
 800cf68:	4610      	mov	r0, r2
 800cf6a:	4798      	blx	r3
 800cf6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf6e:	e091      	b.n	800d094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 facb 	bl	800d50e <USBD_CtlError>
            err++;
 800cf78:	7afb      	ldrb	r3, [r7, #11]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf7e:	e089      	b.n	800d094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	7c12      	ldrb	r2, [r2, #16]
 800cf98:	f107 0108 	add.w	r1, r7, #8
 800cf9c:	4610      	mov	r0, r2
 800cf9e:	4798      	blx	r3
 800cfa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfa2:	e077      	b.n	800d094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fab1 	bl	800d50e <USBD_CtlError>
            err++;
 800cfac:	7afb      	ldrb	r3, [r7, #11]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfb2:	e06f      	b.n	800d094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00b      	beq.n	800cfd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	7c12      	ldrb	r2, [r2, #16]
 800cfcc:	f107 0108 	add.w	r1, r7, #8
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
 800cfd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfd6:	e05d      	b.n	800d094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fa97 	bl	800d50e <USBD_CtlError>
            err++;
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfe6:	e055      	b.n	800d094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfee:	691b      	ldr	r3, [r3, #16]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	7c12      	ldrb	r2, [r2, #16]
 800d000:	f107 0108 	add.w	r1, r7, #8
 800d004:	4610      	mov	r0, r2
 800d006:	4798      	blx	r3
 800d008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d00a:	e043      	b.n	800d094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fa7d 	bl	800d50e <USBD_CtlError>
            err++;
 800d014:	7afb      	ldrb	r3, [r7, #11]
 800d016:	3301      	adds	r3, #1
 800d018:	72fb      	strb	r3, [r7, #11]
          break;
 800d01a:	e03b      	b.n	800d094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00b      	beq.n	800d040 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	7c12      	ldrb	r2, [r2, #16]
 800d034:	f107 0108 	add.w	r1, r7, #8
 800d038:	4610      	mov	r0, r2
 800d03a:	4798      	blx	r3
 800d03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d03e:	e029      	b.n	800d094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa63 	bl	800d50e <USBD_CtlError>
            err++;
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	3301      	adds	r3, #1
 800d04c:	72fb      	strb	r3, [r7, #11]
          break;
 800d04e:	e021      	b.n	800d094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00b      	beq.n	800d074 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	7c12      	ldrb	r2, [r2, #16]
 800d068:	f107 0108 	add.w	r1, r7, #8
 800d06c:	4610      	mov	r0, r2
 800d06e:	4798      	blx	r3
 800d070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d072:	e00f      	b.n	800d094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fa49 	bl	800d50e <USBD_CtlError>
            err++;
 800d07c:	7afb      	ldrb	r3, [r7, #11]
 800d07e:	3301      	adds	r3, #1
 800d080:	72fb      	strb	r3, [r7, #11]
          break;
 800d082:	e007      	b.n	800d094 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fa41 	bl	800d50e <USBD_CtlError>
          err++;
 800d08c:	7afb      	ldrb	r3, [r7, #11]
 800d08e:	3301      	adds	r3, #1
 800d090:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d092:	bf00      	nop
      }
      break;
 800d094:	e037      	b.n	800d106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7c1b      	ldrb	r3, [r3, #16]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d109      	bne.n	800d0b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a6:	f107 0208 	add.w	r2, r7, #8
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	4798      	blx	r3
 800d0ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0b0:	e029      	b.n	800d106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fa2a 	bl	800d50e <USBD_CtlError>
        err++;
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	72fb      	strb	r3, [r7, #11]
      break;
 800d0c0:	e021      	b.n	800d106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	7c1b      	ldrb	r3, [r3, #16]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10d      	bne.n	800d0e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d2:	f107 0208 	add.w	r2, r7, #8
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	4798      	blx	r3
 800d0da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	2207      	movs	r2, #7
 800d0e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0e4:	e00f      	b.n	800d106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fa10 	bl	800d50e <USBD_CtlError>
        err++;
 800d0ee:	7afb      	ldrb	r3, [r7, #11]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0f4:	e007      	b.n	800d106 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d0f6:	6839      	ldr	r1, [r7, #0]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa08 	bl	800d50e <USBD_CtlError>
      err++;
 800d0fe:	7afb      	ldrb	r3, [r7, #11]
 800d100:	3301      	adds	r3, #1
 800d102:	72fb      	strb	r3, [r7, #11]
      break;
 800d104:	bf00      	nop
  }

  if (err != 0U)
 800d106:	7afb      	ldrb	r3, [r7, #11]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d11e      	bne.n	800d14a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	88db      	ldrh	r3, [r3, #6]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d016      	beq.n	800d142 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d114:	893b      	ldrh	r3, [r7, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00e      	beq.n	800d138 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	88da      	ldrh	r2, [r3, #6]
 800d11e:	893b      	ldrh	r3, [r7, #8]
 800d120:	4293      	cmp	r3, r2
 800d122:	bf28      	it	cs
 800d124:	4613      	movcs	r3, r2
 800d126:	b29b      	uxth	r3, r3
 800d128:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d12a:	893b      	ldrh	r3, [r7, #8]
 800d12c:	461a      	mov	r2, r3
 800d12e:	68f9      	ldr	r1, [r7, #12]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fa5d 	bl	800d5f0 <USBD_CtlSendData>
 800d136:	e009      	b.n	800d14c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 f9e7 	bl	800d50e <USBD_CtlError>
 800d140:	e004      	b.n	800d14c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 faae 	bl	800d6a4 <USBD_CtlSendStatus>
 800d148:	e000      	b.n	800d14c <USBD_GetDescriptor+0x2cc>
    return;
 800d14a:	bf00      	nop
  }
}
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop

0800d154 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	889b      	ldrh	r3, [r3, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d131      	bne.n	800d1ca <USBD_SetAddress+0x76>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	88db      	ldrh	r3, [r3, #6]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d12d      	bne.n	800d1ca <USBD_SetAddress+0x76>
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	885b      	ldrh	r3, [r3, #2]
 800d172:	2b7f      	cmp	r3, #127	; 0x7f
 800d174:	d829      	bhi.n	800d1ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	885b      	ldrh	r3, [r3, #2]
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b03      	cmp	r3, #3
 800d18c:	d104      	bne.n	800d198 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f9bc 	bl	800d50e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d196:	e01d      	b.n	800d1d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f003 fe7b 	bl	8010ea0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fa7a 	bl	800d6a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d1b0:	7bfb      	ldrb	r3, [r7, #15]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d004      	beq.n	800d1c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1be:	e009      	b.n	800d1d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c8:	e004      	b.n	800d1d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f99e 	bl	800d50e <USBD_CtlError>
  }
}
 800d1d2:	bf00      	nop
 800d1d4:	bf00      	nop
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	885b      	ldrh	r3, [r3, #2]
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	4b4e      	ldr	r3, [pc, #312]	; (800d32c <USBD_SetConfig+0x150>)
 800d1f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1f4:	4b4d      	ldr	r3, [pc, #308]	; (800d32c <USBD_SetConfig+0x150>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d905      	bls.n	800d208 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f985 	bl	800d50e <USBD_CtlError>
    return USBD_FAIL;
 800d204:	2303      	movs	r3, #3
 800d206:	e08c      	b.n	800d322 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	2b02      	cmp	r3, #2
 800d212:	d002      	beq.n	800d21a <USBD_SetConfig+0x3e>
 800d214:	2b03      	cmp	r3, #3
 800d216:	d029      	beq.n	800d26c <USBD_SetConfig+0x90>
 800d218:	e075      	b.n	800d306 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d21a:	4b44      	ldr	r3, [pc, #272]	; (800d32c <USBD_SetConfig+0x150>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d020      	beq.n	800d264 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d222:	4b42      	ldr	r3, [pc, #264]	; (800d32c <USBD_SetConfig+0x150>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d22c:	4b3f      	ldr	r3, [pc, #252]	; (800d32c <USBD_SetConfig+0x150>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7fe ffe7 	bl	800c206 <USBD_SetClassConfig>
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d008      	beq.n	800d254 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f962 	bl	800d50e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2202      	movs	r2, #2
 800d24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d252:	e065      	b.n	800d320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fa25 	bl	800d6a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2203      	movs	r2, #3
 800d25e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d262:	e05d      	b.n	800d320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 fa1d 	bl	800d6a4 <USBD_CtlSendStatus>
      break;
 800d26a:	e059      	b.n	800d320 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d26c:	4b2f      	ldr	r3, [pc, #188]	; (800d32c <USBD_SetConfig+0x150>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d112      	bne.n	800d29a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d27c:	4b2b      	ldr	r3, [pc, #172]	; (800d32c <USBD_SetConfig+0x150>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	461a      	mov	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d286:	4b29      	ldr	r3, [pc, #164]	; (800d32c <USBD_SetConfig+0x150>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7fe ffd6 	bl	800c23e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa06 	bl	800d6a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d298:	e042      	b.n	800d320 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d29a:	4b24      	ldr	r3, [pc, #144]	; (800d32c <USBD_SetConfig+0x150>)
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d02a      	beq.n	800d2fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7fe ffc4 	bl	800c23e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d2b6:	4b1d      	ldr	r3, [pc, #116]	; (800d32c <USBD_SetConfig+0x150>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2c0:	4b1a      	ldr	r3, [pc, #104]	; (800d32c <USBD_SetConfig+0x150>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7fe ff9d 	bl	800c206 <USBD_SetClassConfig>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00f      	beq.n	800d2f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f918 	bl	800d50e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7fe ffa9 	bl	800c23e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2f4:	e014      	b.n	800d320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f9d4 	bl	800d6a4 <USBD_CtlSendStatus>
      break;
 800d2fc:	e010      	b.n	800d320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f9d0 	bl	800d6a4 <USBD_CtlSendStatus>
      break;
 800d304:	e00c      	b.n	800d320 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f900 	bl	800d50e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d30e:	4b07      	ldr	r3, [pc, #28]	; (800d32c <USBD_SetConfig+0x150>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	4619      	mov	r1, r3
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7fe ff92 	bl	800c23e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d31a:	2303      	movs	r3, #3
 800d31c:	73fb      	strb	r3, [r7, #15]
      break;
 800d31e:	bf00      	nop
  }

  return ret;
 800d320:	7bfb      	ldrb	r3, [r7, #15]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	200005b4 	.word	0x200005b4

0800d330 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	88db      	ldrh	r3, [r3, #6]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d004      	beq.n	800d34c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 f8e2 	bl	800d50e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d34a:	e023      	b.n	800d394 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b02      	cmp	r3, #2
 800d356:	dc02      	bgt.n	800d35e <USBD_GetConfig+0x2e>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	dc03      	bgt.n	800d364 <USBD_GetConfig+0x34>
 800d35c:	e015      	b.n	800d38a <USBD_GetConfig+0x5a>
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d00b      	beq.n	800d37a <USBD_GetConfig+0x4a>
 800d362:	e012      	b.n	800d38a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3308      	adds	r3, #8
 800d36e:	2201      	movs	r2, #1
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f93c 	bl	800d5f0 <USBD_CtlSendData>
        break;
 800d378:	e00c      	b.n	800d394 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	3304      	adds	r3, #4
 800d37e:	2201      	movs	r2, #1
 800d380:	4619      	mov	r1, r3
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f934 	bl	800d5f0 <USBD_CtlSendData>
        break;
 800d388:	e004      	b.n	800d394 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d38a:	6839      	ldr	r1, [r7, #0]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f8be 	bl	800d50e <USBD_CtlError>
        break;
 800d392:	bf00      	nop
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d81e      	bhi.n	800d3f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	88db      	ldrh	r3, [r3, #6]
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d004      	beq.n	800d3c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d3bc:	6839      	ldr	r1, [r7, #0]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f8a5 	bl	800d50e <USBD_CtlError>
        break;
 800d3c4:	e01a      	b.n	800d3fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d005      	beq.n	800d3e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f043 0202 	orr.w	r2, r3, #2
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	330c      	adds	r3, #12
 800d3e6:	2202      	movs	r2, #2
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f900 	bl	800d5f0 <USBD_CtlSendData>
      break;
 800d3f0:	e004      	b.n	800d3fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f88a 	bl	800d50e <USBD_CtlError>
      break;
 800d3fa:	bf00      	nop
  }
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	885b      	ldrh	r3, [r3, #2]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d107      	bne.n	800d426 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f940 	bl	800d6a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d424:	e013      	b.n	800d44e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	885b      	ldrh	r3, [r3, #2]
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d10b      	bne.n	800d446 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	889b      	ldrh	r3, [r3, #4]
 800d432:	0a1b      	lsrs	r3, r3, #8
 800d434:	b29b      	uxth	r3, r3
 800d436:	b2da      	uxtb	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f930 	bl	800d6a4 <USBD_CtlSendStatus>
}
 800d444:	e003      	b.n	800d44e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f860 	bl	800d50e <USBD_CtlError>
}
 800d44e:	bf00      	nop
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d466:	b2db      	uxtb	r3, r3
 800d468:	3b01      	subs	r3, #1
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d80b      	bhi.n	800d486 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	885b      	ldrh	r3, [r3, #2]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d10c      	bne.n	800d490 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f910 	bl	800d6a4 <USBD_CtlSendStatus>
      }
      break;
 800d484:	e004      	b.n	800d490 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f840 	bl	800d50e <USBD_CtlError>
      break;
 800d48e:	e000      	b.n	800d492 <USBD_ClrFeature+0x3c>
      break;
 800d490:	bf00      	nop
  }
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	781a      	ldrb	r2, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	781a      	ldrb	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f7ff fa41 	bl	800c94c <SWAPBYTE>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7ff fa34 	bl	800c94c <SWAPBYTE>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f7ff fa27 	bl	800c94c <SWAPBYTE>
 800d4fe:	4603      	mov	r3, r0
 800d500:	461a      	mov	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	80da      	strh	r2, [r3, #6]
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d518:	2180      	movs	r1, #128	; 0x80
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f003 fc56 	bl	8010dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d520:	2100      	movs	r1, #0
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f003 fc52 	bl	8010dcc <USBD_LL_StallEP>
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d53c:	2300      	movs	r3, #0
 800d53e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d036      	beq.n	800d5b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d54a:	6938      	ldr	r0, [r7, #16]
 800d54c:	f000 f836 	bl	800d5bc <USBD_GetLen>
 800d550:	4603      	mov	r3, r0
 800d552:	3301      	adds	r3, #1
 800d554:	b29b      	uxth	r3, r3
 800d556:	005b      	lsls	r3, r3, #1
 800d558:	b29a      	uxth	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d55e:	7dfb      	ldrb	r3, [r7, #23]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	4413      	add	r3, r2
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	7812      	ldrb	r2, [r2, #0]
 800d568:	701a      	strb	r2, [r3, #0]
  idx++;
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	3301      	adds	r3, #1
 800d56e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	4413      	add	r3, r2
 800d576:	2203      	movs	r2, #3
 800d578:	701a      	strb	r2, [r3, #0]
  idx++;
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	3301      	adds	r3, #1
 800d57e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d580:	e013      	b.n	800d5aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	4413      	add	r3, r2
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	7812      	ldrb	r2, [r2, #0]
 800d58c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	3301      	adds	r3, #1
 800d592:	613b      	str	r3, [r7, #16]
    idx++;
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	3301      	adds	r3, #1
 800d598:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	4413      	add	r3, r2
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e7      	bne.n	800d582 <USBD_GetString+0x52>
 800d5b2:	e000      	b.n	800d5b6 <USBD_GetString+0x86>
    return;
 800d5b4:	bf00      	nop
  }
}
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d5cc:	e005      	b.n	800d5da <USBD_GetLen+0x1e>
  {
    len++;
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1f5      	bne.n	800d5ce <USBD_GetLen+0x12>
  }

  return len;
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2202      	movs	r2, #2
 800d600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	2100      	movs	r1, #0
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f003 fc61 	bl	8010ede <USBD_LL_Transmit>

  return USBD_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	2100      	movs	r1, #0
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f003 fc50 	bl	8010ede <USBD_LL_Transmit>

  return USBD_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2203      	movs	r2, #3
 800d658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	2100      	movs	r1, #0
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f003 fc54 	bl	8010f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b084      	sub	sp, #16
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	2100      	movs	r1, #0
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f003 fc43 	bl	8010f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2204      	movs	r2, #4
 800d6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f003 fc0f 	bl	8010ede <USBD_LL_Transmit>

  return USBD_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b082      	sub	sp, #8
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2205      	movs	r2, #5
 800d6d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6da:	2300      	movs	r3, #0
 800d6dc:	2200      	movs	r2, #0
 800d6de:	2100      	movs	r1, #0
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f003 fc1d 	bl	8010f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <__NVIC_SetPriority>:
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	6039      	str	r1, [r7, #0]
 800d6fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d700:	2b00      	cmp	r3, #0
 800d702:	db0a      	blt.n	800d71a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	b2da      	uxtb	r2, r3
 800d708:	490c      	ldr	r1, [pc, #48]	; (800d73c <__NVIC_SetPriority+0x4c>)
 800d70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d70e:	0112      	lsls	r2, r2, #4
 800d710:	b2d2      	uxtb	r2, r2
 800d712:	440b      	add	r3, r1
 800d714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d718:	e00a      	b.n	800d730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	4908      	ldr	r1, [pc, #32]	; (800d740 <__NVIC_SetPriority+0x50>)
 800d720:	79fb      	ldrb	r3, [r7, #7]
 800d722:	f003 030f 	and.w	r3, r3, #15
 800d726:	3b04      	subs	r3, #4
 800d728:	0112      	lsls	r2, r2, #4
 800d72a:	b2d2      	uxtb	r2, r2
 800d72c:	440b      	add	r3, r1
 800d72e:	761a      	strb	r2, [r3, #24]
}
 800d730:	bf00      	nop
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	e000e100 	.word	0xe000e100
 800d740:	e000ed00 	.word	0xe000ed00

0800d744 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d748:	4b05      	ldr	r3, [pc, #20]	; (800d760 <SysTick_Handler+0x1c>)
 800d74a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d74c:	f001 ff12 	bl	800f574 <xTaskGetSchedulerState>
 800d750:	4603      	mov	r3, r0
 800d752:	2b01      	cmp	r3, #1
 800d754:	d001      	beq.n	800d75a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d756:	f002 fcf7 	bl	8010148 <xPortSysTickHandler>
  }
}
 800d75a:	bf00      	nop
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	e000e010 	.word	0xe000e010

0800d764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d768:	2100      	movs	r1, #0
 800d76a:	f06f 0004 	mvn.w	r0, #4
 800d76e:	f7ff ffbf 	bl	800d6f0 <__NVIC_SetPriority>
#endif
}
 800d772:	bf00      	nop
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d77e:	f3ef 8305 	mrs	r3, IPSR
 800d782:	603b      	str	r3, [r7, #0]
  return(result);
 800d784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d786:	2b00      	cmp	r3, #0
 800d788:	d003      	beq.n	800d792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d78a:	f06f 0305 	mvn.w	r3, #5
 800d78e:	607b      	str	r3, [r7, #4]
 800d790:	e00c      	b.n	800d7ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d792:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <osKernelInitialize+0x44>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d105      	bne.n	800d7a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d79a:	4b08      	ldr	r3, [pc, #32]	; (800d7bc <osKernelInitialize+0x44>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	607b      	str	r3, [r7, #4]
 800d7a4:	e002      	b.n	800d7ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7ac:	687b      	ldr	r3, [r7, #4]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	200005b8 	.word	0x200005b8

0800d7c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7c6:	f3ef 8305 	mrs	r3, IPSR
 800d7ca:	603b      	str	r3, [r7, #0]
  return(result);
 800d7cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <osKernelStart+0x1a>
    stat = osErrorISR;
 800d7d2:	f06f 0305 	mvn.w	r3, #5
 800d7d6:	607b      	str	r3, [r7, #4]
 800d7d8:	e010      	b.n	800d7fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d7da:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <osKernelStart+0x48>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d109      	bne.n	800d7f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d7e2:	f7ff ffbf 	bl	800d764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d7e6:	4b08      	ldr	r3, [pc, #32]	; (800d808 <osKernelStart+0x48>)
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d7ec:	f001 fa66 	bl	800ecbc <vTaskStartScheduler>
      stat = osOK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	607b      	str	r3, [r7, #4]
 800d7f4:	e002      	b.n	800d7fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7fc:	687b      	ldr	r3, [r7, #4]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	200005b8 	.word	0x200005b8

0800d80c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08e      	sub	sp, #56	; 0x38
 800d810:	af04      	add	r7, sp, #16
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d818:	2300      	movs	r3, #0
 800d81a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d81c:	f3ef 8305 	mrs	r3, IPSR
 800d820:	617b      	str	r3, [r7, #20]
  return(result);
 800d822:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d824:	2b00      	cmp	r3, #0
 800d826:	d17e      	bne.n	800d926 <osThreadNew+0x11a>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d07b      	beq.n	800d926 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d82e:	2380      	movs	r3, #128	; 0x80
 800d830:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d832:	2318      	movs	r3, #24
 800d834:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d83a:	f04f 33ff 	mov.w	r3, #4294967295
 800d83e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d045      	beq.n	800d8d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d002      	beq.n	800d854 <osThreadNew+0x48>
        name = attr->name;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d008      	beq.n	800d87a <osThreadNew+0x6e>
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	2b38      	cmp	r3, #56	; 0x38
 800d86c:	d805      	bhi.n	800d87a <osThreadNew+0x6e>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <osThreadNew+0x72>
        return (NULL);
 800d87a:	2300      	movs	r3, #0
 800d87c:	e054      	b.n	800d928 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	089b      	lsrs	r3, r3, #2
 800d88c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00e      	beq.n	800d8b4 <osThreadNew+0xa8>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	2bbb      	cmp	r3, #187	; 0xbb
 800d89c:	d90a      	bls.n	800d8b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d006      	beq.n	800d8b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d002      	beq.n	800d8b4 <osThreadNew+0xa8>
        mem = 1;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	e010      	b.n	800d8d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10c      	bne.n	800d8d6 <osThreadNew+0xca>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d108      	bne.n	800d8d6 <osThreadNew+0xca>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d104      	bne.n	800d8d6 <osThreadNew+0xca>
          mem = 0;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	61bb      	str	r3, [r7, #24]
 800d8d0:	e001      	b.n	800d8d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d110      	bne.n	800d8fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8e4:	9202      	str	r2, [sp, #8]
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	6a3a      	ldr	r2, [r7, #32]
 800d8f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 fff6 	bl	800e8e4 <xTaskCreateStatic>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	613b      	str	r3, [r7, #16]
 800d8fc:	e013      	b.n	800d926 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d110      	bne.n	800d926 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	b29a      	uxth	r2, r3
 800d908:	f107 0310 	add.w	r3, r7, #16
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f001 f841 	bl	800e99e <xTaskCreate>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d001      	beq.n	800d926 <osThreadNew+0x11a>
            hTask = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d926:	693b      	ldr	r3, [r7, #16]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3728      	adds	r7, #40	; 0x28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d938:	f3ef 8305 	mrs	r3, IPSR
 800d93c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d93e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d940:	2b00      	cmp	r3, #0
 800d942:	d003      	beq.n	800d94c <osDelay+0x1c>
    stat = osErrorISR;
 800d944:	f06f 0305 	mvn.w	r3, #5
 800d948:	60fb      	str	r3, [r7, #12]
 800d94a:	e007      	b.n	800d95c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <osDelay+0x2c>
      vTaskDelay(ticks);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f001 f97c 	bl	800ec54 <vTaskDelay>
    }
  }

  return (stat);
 800d95c:	68fb      	ldr	r3, [r7, #12]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d966:	b580      	push	{r7, lr}
 800d968:	b08a      	sub	sp, #40	; 0x28
 800d96a:	af02      	add	r7, sp, #8
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d972:	2300      	movs	r3, #0
 800d974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d976:	f3ef 8305 	mrs	r3, IPSR
 800d97a:	613b      	str	r3, [r7, #16]
  return(result);
 800d97c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d15f      	bne.n	800da42 <osMessageQueueNew+0xdc>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d05c      	beq.n	800da42 <osMessageQueueNew+0xdc>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d059      	beq.n	800da42 <osMessageQueueNew+0xdc>
    mem = -1;
 800d98e:	f04f 33ff 	mov.w	r3, #4294967295
 800d992:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d029      	beq.n	800d9ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d012      	beq.n	800d9c8 <osMessageQueueNew+0x62>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	2b4f      	cmp	r3, #79	; 0x4f
 800d9a8:	d90e      	bls.n	800d9c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00a      	beq.n	800d9c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	695a      	ldr	r2, [r3, #20]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	fb01 f303 	mul.w	r3, r1, r3
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d302      	bcc.n	800d9c8 <osMessageQueueNew+0x62>
        mem = 1;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	61bb      	str	r3, [r7, #24]
 800d9c6:	e014      	b.n	800d9f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d110      	bne.n	800d9f2 <osMessageQueueNew+0x8c>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10c      	bne.n	800d9f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d108      	bne.n	800d9f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d104      	bne.n	800d9f2 <osMessageQueueNew+0x8c>
          mem = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	61bb      	str	r3, [r7, #24]
 800d9ec:	e001      	b.n	800d9f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d10b      	bne.n	800da10 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691a      	ldr	r2, [r3, #16]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	2100      	movs	r1, #0
 800da02:	9100      	str	r1, [sp, #0]
 800da04:	68b9      	ldr	r1, [r7, #8]
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f000 fa2e 	bl	800de68 <xQueueGenericCreateStatic>
 800da0c:	61f8      	str	r0, [r7, #28]
 800da0e:	e008      	b.n	800da22 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d105      	bne.n	800da22 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800da16:	2200      	movs	r2, #0
 800da18:	68b9      	ldr	r1, [r7, #8]
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f000 fa9c 	bl	800df58 <xQueueGenericCreate>
 800da20:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00c      	beq.n	800da42 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <osMessageQueueNew+0xd0>
        name = attr->name;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	617b      	str	r3, [r7, #20]
 800da34:	e001      	b.n	800da3a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800da36:	2300      	movs	r3, #0
 800da38:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800da3a:	6979      	ldr	r1, [r7, #20]
 800da3c:	69f8      	ldr	r0, [r7, #28]
 800da3e:	f000 fef3 	bl	800e828 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800da42:	69fb      	ldr	r3, [r7, #28]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3720      	adds	r7, #32
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b088      	sub	sp, #32
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	603b      	str	r3, [r7, #0]
 800da58:	4613      	mov	r3, r2
 800da5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da64:	f3ef 8305 	mrs	r3, IPSR
 800da68:	617b      	str	r3, [r7, #20]
  return(result);
 800da6a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d028      	beq.n	800dac2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d005      	beq.n	800da82 <osMessageQueuePut+0x36>
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <osMessageQueuePut+0x36>
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d003      	beq.n	800da8a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800da82:	f06f 0303 	mvn.w	r3, #3
 800da86:	61fb      	str	r3, [r7, #28]
 800da88:	e038      	b.n	800dafc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800da8a:	2300      	movs	r3, #0
 800da8c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800da8e:	f107 0210 	add.w	r2, r7, #16
 800da92:	2300      	movs	r3, #0
 800da94:	68b9      	ldr	r1, [r7, #8]
 800da96:	69b8      	ldr	r0, [r7, #24]
 800da98:	f000 fbba 	bl	800e210 <xQueueGenericSendFromISR>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d003      	beq.n	800daaa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800daa2:	f06f 0302 	mvn.w	r3, #2
 800daa6:	61fb      	str	r3, [r7, #28]
 800daa8:	e028      	b.n	800dafc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d025      	beq.n	800dafc <osMessageQueuePut+0xb0>
 800dab0:	4b15      	ldr	r3, [pc, #84]	; (800db08 <osMessageQueuePut+0xbc>)
 800dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	e01c      	b.n	800dafc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <osMessageQueuePut+0x82>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d103      	bne.n	800dad6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dace:	f06f 0303 	mvn.w	r3, #3
 800dad2:	61fb      	str	r3, [r7, #28]
 800dad4:	e012      	b.n	800dafc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dad6:	2300      	movs	r3, #0
 800dad8:	683a      	ldr	r2, [r7, #0]
 800dada:	68b9      	ldr	r1, [r7, #8]
 800dadc:	69b8      	ldr	r0, [r7, #24]
 800dade:	f000 fa99 	bl	800e014 <xQueueGenericSend>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d009      	beq.n	800dafc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d003      	beq.n	800daf6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800daee:	f06f 0301 	mvn.w	r3, #1
 800daf2:	61fb      	str	r3, [r7, #28]
 800daf4:	e002      	b.n	800dafc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800daf6:	f06f 0302 	mvn.w	r3, #2
 800dafa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dafc:	69fb      	ldr	r3, [r7, #28]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3720      	adds	r7, #32
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b088      	sub	sp, #32
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db1e:	2300      	movs	r3, #0
 800db20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db22:	f3ef 8305 	mrs	r3, IPSR
 800db26:	617b      	str	r3, [r7, #20]
  return(result);
 800db28:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d028      	beq.n	800db80 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <osMessageQueueGet+0x34>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <osMessageQueueGet+0x34>
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d003      	beq.n	800db48 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800db40:	f06f 0303 	mvn.w	r3, #3
 800db44:	61fb      	str	r3, [r7, #28]
 800db46:	e037      	b.n	800dbb8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800db48:	2300      	movs	r3, #0
 800db4a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800db4c:	f107 0310 	add.w	r3, r7, #16
 800db50:	461a      	mov	r2, r3
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	69b8      	ldr	r0, [r7, #24]
 800db56:	f000 fcd7 	bl	800e508 <xQueueReceiveFromISR>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d003      	beq.n	800db68 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800db60:	f06f 0302 	mvn.w	r3, #2
 800db64:	61fb      	str	r3, [r7, #28]
 800db66:	e027      	b.n	800dbb8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d024      	beq.n	800dbb8 <osMessageQueueGet+0xac>
 800db6e:	4b15      	ldr	r3, [pc, #84]	; (800dbc4 <osMessageQueueGet+0xb8>)
 800db70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	e01b      	b.n	800dbb8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <osMessageQueueGet+0x80>
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d103      	bne.n	800db94 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800db8c:	f06f 0303 	mvn.w	r3, #3
 800db90:	61fb      	str	r3, [r7, #28]
 800db92:	e011      	b.n	800dbb8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db94:	683a      	ldr	r2, [r7, #0]
 800db96:	68b9      	ldr	r1, [r7, #8]
 800db98:	69b8      	ldr	r0, [r7, #24]
 800db9a:	f000 fbd5 	bl	800e348 <xQueueReceive>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d009      	beq.n	800dbb8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dbaa:	f06f 0301 	mvn.w	r3, #1
 800dbae:	61fb      	str	r3, [r7, #28]
 800dbb0:	e002      	b.n	800dbb8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dbb2:	f06f 0302 	mvn.w	r3, #2
 800dbb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dbb8:	69fb      	ldr	r3, [r7, #28]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4a07      	ldr	r2, [pc, #28]	; (800dbf4 <vApplicationGetIdleTaskMemory+0x2c>)
 800dbd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	4a06      	ldr	r2, [pc, #24]	; (800dbf8 <vApplicationGetIdleTaskMemory+0x30>)
 800dbde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2280      	movs	r2, #128	; 0x80
 800dbe4:	601a      	str	r2, [r3, #0]
}
 800dbe6:	bf00      	nop
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	200005bc 	.word	0x200005bc
 800dbf8:	20000678 	.word	0x20000678

0800dbfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4a07      	ldr	r2, [pc, #28]	; (800dc28 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	4a06      	ldr	r2, [pc, #24]	; (800dc2c <vApplicationGetTimerTaskMemory+0x30>)
 800dc12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc1a:	601a      	str	r2, [r3, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	20000878 	.word	0x20000878
 800dc2c:	20000934 	.word	0x20000934

0800dc30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f103 0208 	add.w	r2, r3, #8
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f04f 32ff 	mov.w	r2, #4294967295
 800dc48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f103 0208 	add.w	r2, r3, #8
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f103 0208 	add.w	r2, r3, #8
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc7e:	bf00      	nop
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b085      	sub	sp, #20
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	689a      	ldr	r2, [r3, #8]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	601a      	str	r2, [r3, #0]
}
 800dcc6:	bf00      	nop
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b085      	sub	sp, #20
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce8:	d103      	bne.n	800dcf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	e00c      	b.n	800dd0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	60fb      	str	r3, [r7, #12]
 800dcf8:	e002      	b.n	800dd00 <vListInsert+0x2e>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d2f6      	bcs.n	800dcfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	601a      	str	r2, [r3, #0]
}
 800dd38:	bf00      	nop
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	6892      	ldr	r2, [r2, #8]
 800dd5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	6852      	ldr	r2, [r2, #4]
 800dd64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d103      	bne.n	800dd78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	1e5a      	subs	r2, r3, #1
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ddc2:	f002 f92f 	bl	8010024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddce:	68f9      	ldr	r1, [r7, #12]
 800ddd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddd2:	fb01 f303 	mul.w	r3, r1, r3
 800ddd6:	441a      	add	r2, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2200      	movs	r2, #0
 800dde0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	68f9      	ldr	r1, [r7, #12]
 800ddf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddf8:	fb01 f303 	mul.w	r3, r1, r3
 800ddfc:	441a      	add	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	22ff      	movs	r2, #255	; 0xff
 800de06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	22ff      	movs	r2, #255	; 0xff
 800de0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d114      	bne.n	800de42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01a      	beq.n	800de56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	3310      	adds	r3, #16
 800de24:	4618      	mov	r0, r3
 800de26:	f001 f9e3 	bl	800f1f0 <xTaskRemoveFromEventList>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d012      	beq.n	800de56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de30:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <xQueueGenericReset+0xcc>)
 800de32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de36:	601a      	str	r2, [r3, #0]
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	e009      	b.n	800de56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3310      	adds	r3, #16
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff fef2 	bl	800dc30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	3324      	adds	r3, #36	; 0x24
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff feed 	bl	800dc30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de56:	f002 f915 	bl	8010084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de5a:	2301      	movs	r3, #1
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000ed04 	.word	0xe000ed04

0800de68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b08e      	sub	sp, #56	; 0x38
 800de6c:	af02      	add	r7, sp, #8
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10a      	bne.n	800de92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de8e:	bf00      	nop
 800de90:	e7fe      	b.n	800de90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10a      	bne.n	800deae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800deaa:	bf00      	nop
 800deac:	e7fe      	b.n	800deac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <xQueueGenericCreateStatic+0x52>
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <xQueueGenericCreateStatic+0x56>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <xQueueGenericCreateStatic+0x58>
 800debe:	2300      	movs	r3, #0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	623b      	str	r3, [r7, #32]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <xQueueGenericCreateStatic+0x7e>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <xQueueGenericCreateStatic+0x82>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e000      	b.n	800deec <xQueueGenericCreateStatic+0x84>
 800deea:	2300      	movs	r3, #0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10a      	bne.n	800df06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	61fb      	str	r3, [r7, #28]
}
 800df02:	bf00      	nop
 800df04:	e7fe      	b.n	800df04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df06:	2350      	movs	r3, #80	; 0x50
 800df08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	2b50      	cmp	r3, #80	; 0x50
 800df0e:	d00a      	beq.n	800df26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	61bb      	str	r3, [r7, #24]
}
 800df22:	bf00      	nop
 800df24:	e7fe      	b.n	800df24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00d      	beq.n	800df4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	4613      	mov	r3, r2
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f83f 	bl	800dfcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df50:	4618      	mov	r0, r3
 800df52:	3730      	adds	r7, #48	; 0x30
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08a      	sub	sp, #40	; 0x28
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4613      	mov	r3, r2
 800df64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10a      	bne.n	800df82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	613b      	str	r3, [r7, #16]
}
 800df7e:	bf00      	nop
 800df80:	e7fe      	b.n	800df80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	3350      	adds	r3, #80	; 0x50
 800df90:	4618      	mov	r0, r3
 800df92:	f002 f969 	bl	8010268 <pvPortMalloc>
 800df96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d011      	beq.n	800dfc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	3350      	adds	r3, #80	; 0x50
 800dfa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfb0:	79fa      	ldrb	r2, [r7, #7]
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 f805 	bl	800dfcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfc2:	69bb      	ldr	r3, [r7, #24]
	}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3720      	adds	r7, #32
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	e002      	b.n	800dfee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dffa:	2101      	movs	r1, #1
 800dffc:	69b8      	ldr	r0, [r7, #24]
 800dffe:	f7ff fecb 	bl	800dd98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	78fa      	ldrb	r2, [r7, #3]
 800e006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e00a:	bf00      	nop
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
	...

0800e014 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b08e      	sub	sp, #56	; 0x38
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e022:	2300      	movs	r3, #0
 800e024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10a      	bne.n	800e046 <xQueueGenericSend+0x32>
	__asm volatile
 800e030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e034:	f383 8811 	msr	BASEPRI, r3
 800e038:	f3bf 8f6f 	isb	sy
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e042:	bf00      	nop
 800e044:	e7fe      	b.n	800e044 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d103      	bne.n	800e054 <xQueueGenericSend+0x40>
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <xQueueGenericSend+0x44>
 800e054:	2301      	movs	r3, #1
 800e056:	e000      	b.n	800e05a <xQueueGenericSend+0x46>
 800e058:	2300      	movs	r3, #0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10a      	bne.n	800e074 <xQueueGenericSend+0x60>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e070:	bf00      	nop
 800e072:	e7fe      	b.n	800e072 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2b02      	cmp	r3, #2
 800e078:	d103      	bne.n	800e082 <xQueueGenericSend+0x6e>
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d101      	bne.n	800e086 <xQueueGenericSend+0x72>
 800e082:	2301      	movs	r3, #1
 800e084:	e000      	b.n	800e088 <xQueueGenericSend+0x74>
 800e086:	2300      	movs	r3, #0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	623b      	str	r3, [r7, #32]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0a2:	f001 fa67 	bl	800f574 <xTaskGetSchedulerState>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d102      	bne.n	800e0b2 <xQueueGenericSend+0x9e>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <xQueueGenericSend+0xa2>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e000      	b.n	800e0b8 <xQueueGenericSend+0xa4>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800e0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c0:	f383 8811 	msr	BASEPRI, r3
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	61fb      	str	r3, [r7, #28]
}
 800e0ce:	bf00      	nop
 800e0d0:	e7fe      	b.n	800e0d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0d2:	f001 ffa7 	bl	8010024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d302      	bcc.n	800e0e8 <xQueueGenericSend+0xd4>
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d129      	bne.n	800e13c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0ee:	f000 fa8b 	bl	800e608 <prvCopyDataToQueue>
 800e0f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d010      	beq.n	800e11e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fe:	3324      	adds	r3, #36	; 0x24
 800e100:	4618      	mov	r0, r3
 800e102:	f001 f875 	bl	800f1f0 <xTaskRemoveFromEventList>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d013      	beq.n	800e134 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e10c:	4b3f      	ldr	r3, [pc, #252]	; (800e20c <xQueueGenericSend+0x1f8>)
 800e10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	e00a      	b.n	800e134 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e120:	2b00      	cmp	r3, #0
 800e122:	d007      	beq.n	800e134 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e124:	4b39      	ldr	r3, [pc, #228]	; (800e20c <xQueueGenericSend+0x1f8>)
 800e126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e134:	f001 ffa6 	bl	8010084 <vPortExitCritical>
				return pdPASS;
 800e138:	2301      	movs	r3, #1
 800e13a:	e063      	b.n	800e204 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d103      	bne.n	800e14a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e142:	f001 ff9f 	bl	8010084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e146:	2300      	movs	r3, #0
 800e148:	e05c      	b.n	800e204 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d106      	bne.n	800e15e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e150:	f107 0314 	add.w	r3, r7, #20
 800e154:	4618      	mov	r0, r3
 800e156:	f001 f8af 	bl	800f2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e15a:	2301      	movs	r3, #1
 800e15c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e15e:	f001 ff91 	bl	8010084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e162:	f000 fe1b 	bl	800ed9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e166:	f001 ff5d 	bl	8010024 <vPortEnterCritical>
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e170:	b25b      	sxtb	r3, r3
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d103      	bne.n	800e180 <xQueueGenericSend+0x16c>
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e186:	b25b      	sxtb	r3, r3
 800e188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18c:	d103      	bne.n	800e196 <xQueueGenericSend+0x182>
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	2200      	movs	r2, #0
 800e192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e196:	f001 ff75 	bl	8010084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e19a:	1d3a      	adds	r2, r7, #4
 800e19c:	f107 0314 	add.w	r3, r7, #20
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f001 f89e 	bl	800f2e4 <xTaskCheckForTimeOut>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d124      	bne.n	800e1f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1b0:	f000 fb22 	bl	800e7f8 <prvIsQueueFull>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d018      	beq.n	800e1ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	3310      	adds	r3, #16
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 ffc4 	bl	800f150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1ca:	f000 faad 	bl	800e728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1ce:	f000 fdf3 	bl	800edb8 <xTaskResumeAll>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f47f af7c 	bne.w	800e0d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1da:	4b0c      	ldr	r3, [pc, #48]	; (800e20c <xQueueGenericSend+0x1f8>)
 800e1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	e772      	b.n	800e0d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1ee:	f000 fa9b 	bl	800e728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1f2:	f000 fde1 	bl	800edb8 <xTaskResumeAll>
 800e1f6:	e76c      	b.n	800e0d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1fa:	f000 fa95 	bl	800e728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1fe:	f000 fddb 	bl	800edb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e202:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e204:	4618      	mov	r0, r3
 800e206:	3738      	adds	r7, #56	; 0x38
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	e000ed04 	.word	0xe000ed04

0800e210 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b090      	sub	sp, #64	; 0x40
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10a      	bne.n	800e23e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e23a:	bf00      	nop
 800e23c:	e7fe      	b.n	800e23c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d103      	bne.n	800e24c <xQueueGenericSendFromISR+0x3c>
 800e244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <xQueueGenericSendFromISR+0x40>
 800e24c:	2301      	movs	r3, #1
 800e24e:	e000      	b.n	800e252 <xQueueGenericSendFromISR+0x42>
 800e250:	2300      	movs	r3, #0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10a      	bne.n	800e26c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25a:	f383 8811 	msr	BASEPRI, r3
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	f3bf 8f4f 	dsb	sy
 800e266:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e268:	bf00      	nop
 800e26a:	e7fe      	b.n	800e26a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d103      	bne.n	800e27a <xQueueGenericSendFromISR+0x6a>
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e276:	2b01      	cmp	r3, #1
 800e278:	d101      	bne.n	800e27e <xQueueGenericSendFromISR+0x6e>
 800e27a:	2301      	movs	r3, #1
 800e27c:	e000      	b.n	800e280 <xQueueGenericSendFromISR+0x70>
 800e27e:	2300      	movs	r3, #0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d10a      	bne.n	800e29a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	623b      	str	r3, [r7, #32]
}
 800e296:	bf00      	nop
 800e298:	e7fe      	b.n	800e298 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e29a:	f001 ffa5 	bl	80101e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e29e:	f3ef 8211 	mrs	r2, BASEPRI
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	61fa      	str	r2, [r7, #28]
 800e2b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d302      	bcc.n	800e2cc <xQueueGenericSendFromISR+0xbc>
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d12f      	bne.n	800e32c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2dc:	683a      	ldr	r2, [r7, #0]
 800e2de:	68b9      	ldr	r1, [r7, #8]
 800e2e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2e2:	f000 f991 	bl	800e608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ee:	d112      	bne.n	800e316 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d016      	beq.n	800e326 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fa:	3324      	adds	r3, #36	; 0x24
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f000 ff77 	bl	800f1f0 <xTaskRemoveFromEventList>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00e      	beq.n	800e326 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00b      	beq.n	800e326 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	e007      	b.n	800e326 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e31a:	3301      	adds	r3, #1
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	b25a      	sxtb	r2, r3
 800e320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e326:	2301      	movs	r3, #1
 800e328:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e32a:	e001      	b.n	800e330 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e32c:	2300      	movs	r3, #0
 800e32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e332:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e33a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3740      	adds	r7, #64	; 0x40
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08c      	sub	sp, #48	; 0x30
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e354:	2300      	movs	r3, #0
 800e356:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10a      	bne.n	800e378 <xQueueReceive+0x30>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	623b      	str	r3, [r7, #32]
}
 800e374:	bf00      	nop
 800e376:	e7fe      	b.n	800e376 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d103      	bne.n	800e386 <xQueueReceive+0x3e>
 800e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <xQueueReceive+0x42>
 800e386:	2301      	movs	r3, #1
 800e388:	e000      	b.n	800e38c <xQueueReceive+0x44>
 800e38a:	2300      	movs	r3, #0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xQueueReceive+0x5e>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	61fb      	str	r3, [r7, #28]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3a6:	f001 f8e5 	bl	800f574 <xTaskGetSchedulerState>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <xQueueReceive+0x6e>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <xQueueReceive+0x72>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e000      	b.n	800e3bc <xQueueReceive+0x74>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10a      	bne.n	800e3d6 <xQueueReceive+0x8e>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	61bb      	str	r3, [r7, #24]
}
 800e3d2:	bf00      	nop
 800e3d4:	e7fe      	b.n	800e3d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3d6:	f001 fe25 	bl	8010024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d01f      	beq.n	800e426 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ea:	f000 f977 	bl	800e6dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	1e5a      	subs	r2, r3, #1
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00f      	beq.n	800e41e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e400:	3310      	adds	r3, #16
 800e402:	4618      	mov	r0, r3
 800e404:	f000 fef4 	bl	800f1f0 <xTaskRemoveFromEventList>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d007      	beq.n	800e41e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e40e:	4b3d      	ldr	r3, [pc, #244]	; (800e504 <xQueueReceive+0x1bc>)
 800e410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e41e:	f001 fe31 	bl	8010084 <vPortExitCritical>
				return pdPASS;
 800e422:	2301      	movs	r3, #1
 800e424:	e069      	b.n	800e4fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d103      	bne.n	800e434 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e42c:	f001 fe2a 	bl	8010084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e430:	2300      	movs	r3, #0
 800e432:	e062      	b.n	800e4fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	2b00      	cmp	r3, #0
 800e438:	d106      	bne.n	800e448 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e43a:	f107 0310 	add.w	r3, r7, #16
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 ff3a 	bl	800f2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e444:	2301      	movs	r3, #1
 800e446:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e448:	f001 fe1c 	bl	8010084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e44c:	f000 fca6 	bl	800ed9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e450:	f001 fde8 	bl	8010024 <vPortEnterCritical>
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e45a:	b25b      	sxtb	r3, r3
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e460:	d103      	bne.n	800e46a <xQueueReceive+0x122>
 800e462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e470:	b25b      	sxtb	r3, r3
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e476:	d103      	bne.n	800e480 <xQueueReceive+0x138>
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	2200      	movs	r2, #0
 800e47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e480:	f001 fe00 	bl	8010084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e484:	1d3a      	adds	r2, r7, #4
 800e486:	f107 0310 	add.w	r3, r7, #16
 800e48a:	4611      	mov	r1, r2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 ff29 	bl	800f2e4 <xTaskCheckForTimeOut>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d123      	bne.n	800e4e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e49a:	f000 f997 	bl	800e7cc <prvIsQueueEmpty>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d017      	beq.n	800e4d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a6:	3324      	adds	r3, #36	; 0x24
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 fe4f 	bl	800f150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4b4:	f000 f938 	bl	800e728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4b8:	f000 fc7e 	bl	800edb8 <xTaskResumeAll>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d189      	bne.n	800e3d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e4c2:	4b10      	ldr	r3, [pc, #64]	; (800e504 <xQueueReceive+0x1bc>)
 800e4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c8:	601a      	str	r2, [r3, #0]
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	e780      	b.n	800e3d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4d6:	f000 f927 	bl	800e728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4da:	f000 fc6d 	bl	800edb8 <xTaskResumeAll>
 800e4de:	e77a      	b.n	800e3d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4e2:	f000 f921 	bl	800e728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4e6:	f000 fc67 	bl	800edb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ec:	f000 f96e 	bl	800e7cc <prvIsQueueEmpty>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f43f af6f 	beq.w	800e3d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e4f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3730      	adds	r7, #48	; 0x30
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	e000ed04 	.word	0xe000ed04

0800e508 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08e      	sub	sp, #56	; 0x38
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	623b      	str	r3, [r7, #32]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d103      	bne.n	800e542 <xQueueReceiveFromISR+0x3a>
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d101      	bne.n	800e546 <xQueueReceiveFromISR+0x3e>
 800e542:	2301      	movs	r3, #1
 800e544:	e000      	b.n	800e548 <xQueueReceiveFromISR+0x40>
 800e546:	2300      	movs	r3, #0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10a      	bne.n	800e562 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	61fb      	str	r3, [r7, #28]
}
 800e55e:	bf00      	nop
 800e560:	e7fe      	b.n	800e560 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e562:	f001 fe41 	bl	80101e8 <vPortValidateInterruptPriority>
	__asm volatile
 800e566:	f3ef 8211 	mrs	r2, BASEPRI
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	61ba      	str	r2, [r7, #24]
 800e57c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e57e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e580:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e586:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d02f      	beq.n	800e5ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e598:	68b9      	ldr	r1, [r7, #8]
 800e59a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e59c:	f000 f89e 	bl	800e6dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a2:	1e5a      	subs	r2, r3, #1
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e5a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b0:	d112      	bne.n	800e5d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d016      	beq.n	800e5e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5bc:	3310      	adds	r3, #16
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 fe16 	bl	800f1f0 <xTaskRemoveFromEventList>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00e      	beq.n	800e5e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00b      	beq.n	800e5e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	e007      	b.n	800e5e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5dc:	3301      	adds	r3, #1
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	b25a      	sxtb	r2, r3
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ec:	e001      	b.n	800e5f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	f383 8811 	msr	BASEPRI, r3
}
 800e5fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e600:	4618      	mov	r0, r3
 800e602:	3738      	adds	r7, #56	; 0x38
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e614:	2300      	movs	r3, #0
 800e616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10d      	bne.n	800e642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d14d      	bne.n	800e6ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 ffbc 	bl	800f5b0 <xTaskPriorityDisinherit>
 800e638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	609a      	str	r2, [r3, #8]
 800e640:	e043      	b.n	800e6ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d119      	bne.n	800e67c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6858      	ldr	r0, [r3, #4]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e650:	461a      	mov	r2, r3
 800e652:	68b9      	ldr	r1, [r7, #8]
 800e654:	f002 fd18 	bl	8011088 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e660:	441a      	add	r2, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	685a      	ldr	r2, [r3, #4]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d32b      	bcc.n	800e6ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	605a      	str	r2, [r3, #4]
 800e67a:	e026      	b.n	800e6ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	68d8      	ldr	r0, [r3, #12]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e684:	461a      	mov	r2, r3
 800e686:	68b9      	ldr	r1, [r7, #8]
 800e688:	f002 fcfe 	bl	8011088 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68da      	ldr	r2, [r3, #12]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e694:	425b      	negs	r3, r3
 800e696:	441a      	add	r2, r3
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d207      	bcs.n	800e6b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	689a      	ldr	r2, [r3, #8]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b0:	425b      	negs	r3, r3
 800e6b2:	441a      	add	r2, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d105      	bne.n	800e6ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	1c5a      	adds	r2, r3, #1
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e6d2:	697b      	ldr	r3, [r7, #20]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3718      	adds	r7, #24
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d018      	beq.n	800e720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68da      	ldr	r2, [r3, #12]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f6:	441a      	add	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68da      	ldr	r2, [r3, #12]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	429a      	cmp	r2, r3
 800e706:	d303      	bcc.n	800e710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	68d9      	ldr	r1, [r3, #12]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e718:	461a      	mov	r2, r3
 800e71a:	6838      	ldr	r0, [r7, #0]
 800e71c:	f002 fcb4 	bl	8011088 <memcpy>
	}
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e730:	f001 fc78 	bl	8010024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e73a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e73c:	e011      	b.n	800e762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e742:	2b00      	cmp	r3, #0
 800e744:	d012      	beq.n	800e76c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3324      	adds	r3, #36	; 0x24
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 fd50 	bl	800f1f0 <xTaskRemoveFromEventList>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e756:	f000 fe27 	bl	800f3a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e75a:	7bfb      	ldrb	r3, [r7, #15]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	dce9      	bgt.n	800e73e <prvUnlockQueue+0x16>
 800e76a:	e000      	b.n	800e76e <prvUnlockQueue+0x46>
					break;
 800e76c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	22ff      	movs	r2, #255	; 0xff
 800e772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e776:	f001 fc85 	bl	8010084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e77a:	f001 fc53 	bl	8010024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e786:	e011      	b.n	800e7ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d012      	beq.n	800e7b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	3310      	adds	r3, #16
 800e794:	4618      	mov	r0, r3
 800e796:	f000 fd2b 	bl	800f1f0 <xTaskRemoveFromEventList>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e7a0:	f000 fe02 	bl	800f3a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e7a4:	7bbb      	ldrb	r3, [r7, #14]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	dce9      	bgt.n	800e788 <prvUnlockQueue+0x60>
 800e7b4:	e000      	b.n	800e7b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e7b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	22ff      	movs	r2, #255	; 0xff
 800e7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e7c0:	f001 fc60 	bl	8010084 <vPortExitCritical>
}
 800e7c4:	bf00      	nop
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7d4:	f001 fc26 	bl	8010024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d102      	bne.n	800e7e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	60fb      	str	r3, [r7, #12]
 800e7e4:	e001      	b.n	800e7ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7ea:	f001 fc4b 	bl	8010084 <vPortExitCritical>

	return xReturn;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e800:	f001 fc10 	bl	8010024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d102      	bne.n	800e816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e810:	2301      	movs	r3, #1
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	e001      	b.n	800e81a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e816:	2300      	movs	r3, #0
 800e818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e81a:	f001 fc33 	bl	8010084 <vPortExitCritical>

	return xReturn;
 800e81e:	68fb      	ldr	r3, [r7, #12]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e832:	2300      	movs	r3, #0
 800e834:	60fb      	str	r3, [r7, #12]
 800e836:	e014      	b.n	800e862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e838:	4a0f      	ldr	r2, [pc, #60]	; (800e878 <vQueueAddToRegistry+0x50>)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10b      	bne.n	800e85c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e844:	490c      	ldr	r1, [pc, #48]	; (800e878 <vQueueAddToRegistry+0x50>)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e84e:	4a0a      	ldr	r2, [pc, #40]	; (800e878 <vQueueAddToRegistry+0x50>)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	00db      	lsls	r3, r3, #3
 800e854:	4413      	add	r3, r2
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e85a:	e006      	b.n	800e86a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3301      	adds	r3, #1
 800e860:	60fb      	str	r3, [r7, #12]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2b07      	cmp	r3, #7
 800e866:	d9e7      	bls.n	800e838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	3714      	adds	r7, #20
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	20000d34 	.word	0x20000d34

0800e87c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e88c:	f001 fbca 	bl	8010024 <vPortEnterCritical>
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e896:	b25b      	sxtb	r3, r3
 800e898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89c:	d103      	bne.n	800e8a6 <vQueueWaitForMessageRestricted+0x2a>
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8ac:	b25b      	sxtb	r3, r3
 800e8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b2:	d103      	bne.n	800e8bc <vQueueWaitForMessageRestricted+0x40>
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8bc:	f001 fbe2 	bl	8010084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d106      	bne.n	800e8d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	3324      	adds	r3, #36	; 0x24
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f000 fc61 	bl	800f198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e8d6:	6978      	ldr	r0, [r7, #20]
 800e8d8:	f7ff ff26 	bl	800e728 <prvUnlockQueue>
	}
 800e8dc:	bf00      	nop
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b08e      	sub	sp, #56	; 0x38
 800e8e8:	af04      	add	r7, sp, #16
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
 800e8f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	623b      	str	r3, [r7, #32]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <xTaskCreateStatic+0x46>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	61fb      	str	r3, [r7, #28]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e92a:	23bc      	movs	r3, #188	; 0xbc
 800e92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	2bbc      	cmp	r3, #188	; 0xbc
 800e932:	d00a      	beq.n	800e94a <xTaskCreateStatic+0x66>
	__asm volatile
 800e934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	61bb      	str	r3, [r7, #24]
}
 800e946:	bf00      	nop
 800e948:	e7fe      	b.n	800e948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e94a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d01e      	beq.n	800e990 <xTaskCreateStatic+0xac>
 800e952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e954:	2b00      	cmp	r3, #0
 800e956:	d01b      	beq.n	800e990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	2202      	movs	r2, #2
 800e966:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e96a:	2300      	movs	r3, #0
 800e96c:	9303      	str	r3, [sp, #12]
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	9302      	str	r3, [sp, #8]
 800e972:	f107 0314 	add.w	r3, r7, #20
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f000 f850 	bl	800ea28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e98a:	f000 f8f3 	bl	800eb74 <prvAddNewTaskToReadyList>
 800e98e:	e001      	b.n	800e994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e990:	2300      	movs	r3, #0
 800e992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e994:	697b      	ldr	r3, [r7, #20]
	}
 800e996:	4618      	mov	r0, r3
 800e998:	3728      	adds	r7, #40	; 0x28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b08c      	sub	sp, #48	; 0x30
 800e9a2:	af04      	add	r7, sp, #16
 800e9a4:	60f8      	str	r0, [r7, #12]
 800e9a6:	60b9      	str	r1, [r7, #8]
 800e9a8:	603b      	str	r3, [r7, #0]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e9ae:	88fb      	ldrh	r3, [r7, #6]
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f001 fc58 	bl	8010268 <pvPortMalloc>
 800e9b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00e      	beq.n	800e9de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e9c0:	20bc      	movs	r0, #188	; 0xbc
 800e9c2:	f001 fc51 	bl	8010268 <pvPortMalloc>
 800e9c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d003      	beq.n	800e9d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	697a      	ldr	r2, [r7, #20]
 800e9d2:	631a      	str	r2, [r3, #48]	; 0x30
 800e9d4:	e005      	b.n	800e9e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e9d6:	6978      	ldr	r0, [r7, #20]
 800e9d8:	f001 fd12 	bl	8010400 <vPortFree>
 800e9dc:	e001      	b.n	800e9e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d017      	beq.n	800ea18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e9f0:	88fa      	ldrh	r2, [r7, #6]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	9303      	str	r3, [sp, #12]
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	9302      	str	r3, [sp, #8]
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	9301      	str	r3, [sp, #4]
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	68b9      	ldr	r1, [r7, #8]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f000 f80e 	bl	800ea28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea0c:	69f8      	ldr	r0, [r7, #28]
 800ea0e:	f000 f8b1 	bl	800eb74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea12:	2301      	movs	r3, #1
 800ea14:	61bb      	str	r3, [r7, #24]
 800ea16:	e002      	b.n	800ea1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea18:	f04f 33ff 	mov.w	r3, #4294967295
 800ea1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea1e:	69bb      	ldr	r3, [r7, #24]
	}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3720      	adds	r7, #32
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	461a      	mov	r2, r3
 800ea40:	21a5      	movs	r1, #165	; 0xa5
 800ea42:	f002 fb2f 	bl	80110a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea50:	3b01      	subs	r3, #1
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	f023 0307 	bic.w	r3, r3, #7
 800ea5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	f003 0307 	and.w	r3, r3, #7
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00a      	beq.n	800ea80 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	617b      	str	r3, [r7, #20]
}
 800ea7c:	bf00      	nop
 800ea7e:	e7fe      	b.n	800ea7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01f      	beq.n	800eac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea86:	2300      	movs	r3, #0
 800ea88:	61fb      	str	r3, [r7, #28]
 800ea8a:	e012      	b.n	800eab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	4413      	add	r3, r2
 800ea92:	7819      	ldrb	r1, [r3, #0]
 800ea94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	4413      	add	r3, r2
 800ea9a:	3334      	adds	r3, #52	; 0x34
 800ea9c:	460a      	mov	r2, r1
 800ea9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d006      	beq.n	800eaba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	3301      	adds	r3, #1
 800eab0:	61fb      	str	r3, [r7, #28]
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	2b0f      	cmp	r3, #15
 800eab6:	d9e9      	bls.n	800ea8c <prvInitialiseNewTask+0x64>
 800eab8:	e000      	b.n	800eabc <prvInitialiseNewTask+0x94>
			{
				break;
 800eaba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	2200      	movs	r2, #0
 800eac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eac4:	e003      	b.n	800eace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead0:	2b37      	cmp	r3, #55	; 0x37
 800ead2:	d901      	bls.n	800ead8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ead4:	2337      	movs	r3, #55	; 0x37
 800ead6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ead8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eadc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae6:	2200      	movs	r2, #0
 800eae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	3304      	adds	r3, #4
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff f8be 	bl	800dc70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf6:	3318      	adds	r3, #24
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7ff f8b9 	bl	800dc70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	2200      	movs	r2, #0
 800eb18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	3354      	adds	r3, #84	; 0x54
 800eb28:	2260      	movs	r2, #96	; 0x60
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f002 fab9 	bl	80110a4 <memset>
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	4a0c      	ldr	r2, [pc, #48]	; (800eb68 <prvInitialiseNewTask+0x140>)
 800eb36:	659a      	str	r2, [r3, #88]	; 0x58
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	4a0c      	ldr	r2, [pc, #48]	; (800eb6c <prvInitialiseNewTask+0x144>)
 800eb3c:	65da      	str	r2, [r3, #92]	; 0x5c
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	4a0b      	ldr	r2, [pc, #44]	; (800eb70 <prvInitialiseNewTask+0x148>)
 800eb42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	68f9      	ldr	r1, [r7, #12]
 800eb48:	69b8      	ldr	r0, [r7, #24]
 800eb4a:	f001 f941 	bl	800fdd0 <pxPortInitialiseStack>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb60:	bf00      	nop
 800eb62:	3720      	adds	r7, #32
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	08014090 	.word	0x08014090
 800eb6c:	080140b0 	.word	0x080140b0
 800eb70:	08014070 	.word	0x08014070

0800eb74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb7c:	f001 fa52 	bl	8010024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb80:	4b2d      	ldr	r3, [pc, #180]	; (800ec38 <prvAddNewTaskToReadyList+0xc4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	3301      	adds	r3, #1
 800eb86:	4a2c      	ldr	r2, [pc, #176]	; (800ec38 <prvAddNewTaskToReadyList+0xc4>)
 800eb88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb8a:	4b2c      	ldr	r3, [pc, #176]	; (800ec3c <prvAddNewTaskToReadyList+0xc8>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d109      	bne.n	800eba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb92:	4a2a      	ldr	r2, [pc, #168]	; (800ec3c <prvAddNewTaskToReadyList+0xc8>)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <prvAddNewTaskToReadyList+0xc4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d110      	bne.n	800ebc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eba0:	f000 fc26 	bl	800f3f0 <prvInitialiseTaskLists>
 800eba4:	e00d      	b.n	800ebc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eba6:	4b26      	ldr	r3, [pc, #152]	; (800ec40 <prvAddNewTaskToReadyList+0xcc>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ebae:	4b23      	ldr	r3, [pc, #140]	; (800ec3c <prvAddNewTaskToReadyList+0xc8>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d802      	bhi.n	800ebc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ebbc:	4a1f      	ldr	r2, [pc, #124]	; (800ec3c <prvAddNewTaskToReadyList+0xc8>)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ebc2:	4b20      	ldr	r3, [pc, #128]	; (800ec44 <prvAddNewTaskToReadyList+0xd0>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	4a1e      	ldr	r2, [pc, #120]	; (800ec44 <prvAddNewTaskToReadyList+0xd0>)
 800ebca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ebcc:	4b1d      	ldr	r3, [pc, #116]	; (800ec44 <prvAddNewTaskToReadyList+0xd0>)
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd8:	4b1b      	ldr	r3, [pc, #108]	; (800ec48 <prvAddNewTaskToReadyList+0xd4>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d903      	bls.n	800ebe8 <prvAddNewTaskToReadyList+0x74>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe4:	4a18      	ldr	r2, [pc, #96]	; (800ec48 <prvAddNewTaskToReadyList+0xd4>)
 800ebe6:	6013      	str	r3, [r2, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebec:	4613      	mov	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4413      	add	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4a15      	ldr	r2, [pc, #84]	; (800ec4c <prvAddNewTaskToReadyList+0xd8>)
 800ebf6:	441a      	add	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4610      	mov	r0, r2
 800ec00:	f7ff f843 	bl	800dc8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec04:	f001 fa3e 	bl	8010084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec08:	4b0d      	ldr	r3, [pc, #52]	; (800ec40 <prvAddNewTaskToReadyList+0xcc>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00e      	beq.n	800ec2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <prvAddNewTaskToReadyList+0xc8>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d207      	bcs.n	800ec2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec1e:	4b0c      	ldr	r3, [pc, #48]	; (800ec50 <prvAddNewTaskToReadyList+0xdc>)
 800ec20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	f3bf 8f4f 	dsb	sy
 800ec2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	20001248 	.word	0x20001248
 800ec3c:	20000d74 	.word	0x20000d74
 800ec40:	20001254 	.word	0x20001254
 800ec44:	20001264 	.word	0x20001264
 800ec48:	20001250 	.word	0x20001250
 800ec4c:	20000d78 	.word	0x20000d78
 800ec50:	e000ed04 	.word	0xe000ed04

0800ec54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d017      	beq.n	800ec96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ec66:	4b13      	ldr	r3, [pc, #76]	; (800ecb4 <vTaskDelay+0x60>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00a      	beq.n	800ec84 <vTaskDelay+0x30>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	60bb      	str	r3, [r7, #8]
}
 800ec80:	bf00      	nop
 800ec82:	e7fe      	b.n	800ec82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ec84:	f000 f88a 	bl	800ed9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ec88:	2100      	movs	r1, #0
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 fcfe 	bl	800f68c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ec90:	f000 f892 	bl	800edb8 <xTaskResumeAll>
 800ec94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d107      	bne.n	800ecac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ec9c:	4b06      	ldr	r3, [pc, #24]	; (800ecb8 <vTaskDelay+0x64>)
 800ec9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecac:	bf00      	nop
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	20001270 	.word	0x20001270
 800ecb8:	e000ed04 	.word	0xe000ed04

0800ecbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08a      	sub	sp, #40	; 0x28
 800ecc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ecca:	463a      	mov	r2, r7
 800eccc:	1d39      	adds	r1, r7, #4
 800ecce:	f107 0308 	add.w	r3, r7, #8
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe ff78 	bl	800dbc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ecd8:	6839      	ldr	r1, [r7, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	68ba      	ldr	r2, [r7, #8]
 800ecde:	9202      	str	r2, [sp, #8]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	2300      	movs	r3, #0
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	2300      	movs	r3, #0
 800ece8:	460a      	mov	r2, r1
 800ecea:	4924      	ldr	r1, [pc, #144]	; (800ed7c <vTaskStartScheduler+0xc0>)
 800ecec:	4824      	ldr	r0, [pc, #144]	; (800ed80 <vTaskStartScheduler+0xc4>)
 800ecee:	f7ff fdf9 	bl	800e8e4 <xTaskCreateStatic>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	4a23      	ldr	r2, [pc, #140]	; (800ed84 <vTaskStartScheduler+0xc8>)
 800ecf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ecf8:	4b22      	ldr	r3, [pc, #136]	; (800ed84 <vTaskStartScheduler+0xc8>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d002      	beq.n	800ed06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed00:	2301      	movs	r3, #1
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	e001      	b.n	800ed0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d102      	bne.n	800ed16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed10:	f000 fd10 	bl	800f734 <xTimerCreateTimerTask>
 800ed14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d11b      	bne.n	800ed54 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	613b      	str	r3, [r7, #16]
}
 800ed2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed30:	4b15      	ldr	r3, [pc, #84]	; (800ed88 <vTaskStartScheduler+0xcc>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3354      	adds	r3, #84	; 0x54
 800ed36:	4a15      	ldr	r2, [pc, #84]	; (800ed8c <vTaskStartScheduler+0xd0>)
 800ed38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed3a:	4b15      	ldr	r3, [pc, #84]	; (800ed90 <vTaskStartScheduler+0xd4>)
 800ed3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed42:	4b14      	ldr	r3, [pc, #80]	; (800ed94 <vTaskStartScheduler+0xd8>)
 800ed44:	2201      	movs	r2, #1
 800ed46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed48:	4b13      	ldr	r3, [pc, #76]	; (800ed98 <vTaskStartScheduler+0xdc>)
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed4e:	f001 f8c7 	bl	800fee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed52:	e00e      	b.n	800ed72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5a:	d10a      	bne.n	800ed72 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	60fb      	str	r3, [r7, #12]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <vTaskStartScheduler+0xb4>
}
 800ed72:	bf00      	nop
 800ed74:	3718      	adds	r7, #24
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	08011e34 	.word	0x08011e34
 800ed80:	0800f3c1 	.word	0x0800f3c1
 800ed84:	2000126c 	.word	0x2000126c
 800ed88:	20000d74 	.word	0x20000d74
 800ed8c:	2000018c 	.word	0x2000018c
 800ed90:	20001268 	.word	0x20001268
 800ed94:	20001254 	.word	0x20001254
 800ed98:	2000124c 	.word	0x2000124c

0800ed9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eda0:	4b04      	ldr	r3, [pc, #16]	; (800edb4 <vTaskSuspendAll+0x18>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3301      	adds	r3, #1
 800eda6:	4a03      	ldr	r2, [pc, #12]	; (800edb4 <vTaskSuspendAll+0x18>)
 800eda8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edaa:	bf00      	nop
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	20001270 	.word	0x20001270

0800edb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edc2:	2300      	movs	r3, #0
 800edc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edc6:	4b42      	ldr	r3, [pc, #264]	; (800eed0 <xTaskResumeAll+0x118>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10a      	bne.n	800ede4 <xTaskResumeAll+0x2c>
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	603b      	str	r3, [r7, #0]
}
 800ede0:	bf00      	nop
 800ede2:	e7fe      	b.n	800ede2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ede4:	f001 f91e 	bl	8010024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ede8:	4b39      	ldr	r3, [pc, #228]	; (800eed0 <xTaskResumeAll+0x118>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	3b01      	subs	r3, #1
 800edee:	4a38      	ldr	r2, [pc, #224]	; (800eed0 <xTaskResumeAll+0x118>)
 800edf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edf2:	4b37      	ldr	r3, [pc, #220]	; (800eed0 <xTaskResumeAll+0x118>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d162      	bne.n	800eec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800edfa:	4b36      	ldr	r3, [pc, #216]	; (800eed4 <xTaskResumeAll+0x11c>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d05e      	beq.n	800eec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee02:	e02f      	b.n	800ee64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee04:	4b34      	ldr	r3, [pc, #208]	; (800eed8 <xTaskResumeAll+0x120>)
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3318      	adds	r3, #24
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fe ff97 	bl	800dd44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3304      	adds	r3, #4
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe ff92 	bl	800dd44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee24:	4b2d      	ldr	r3, [pc, #180]	; (800eedc <xTaskResumeAll+0x124>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d903      	bls.n	800ee34 <xTaskResumeAll+0x7c>
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee30:	4a2a      	ldr	r2, [pc, #168]	; (800eedc <xTaskResumeAll+0x124>)
 800ee32:	6013      	str	r3, [r2, #0]
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee38:	4613      	mov	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4413      	add	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4a27      	ldr	r2, [pc, #156]	; (800eee0 <xTaskResumeAll+0x128>)
 800ee42:	441a      	add	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	f7fe ff1d 	bl	800dc8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee54:	4b23      	ldr	r3, [pc, #140]	; (800eee4 <xTaskResumeAll+0x12c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d302      	bcc.n	800ee64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ee5e:	4b22      	ldr	r3, [pc, #136]	; (800eee8 <xTaskResumeAll+0x130>)
 800ee60:	2201      	movs	r2, #1
 800ee62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee64:	4b1c      	ldr	r3, [pc, #112]	; (800eed8 <xTaskResumeAll+0x120>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1cb      	bne.n	800ee04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee72:	f000 fb5f 	bl	800f534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee76:	4b1d      	ldr	r3, [pc, #116]	; (800eeec <xTaskResumeAll+0x134>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d010      	beq.n	800eea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee82:	f000 f847 	bl	800ef14 <xTaskIncrementTick>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ee8c:	4b16      	ldr	r3, [pc, #88]	; (800eee8 <xTaskResumeAll+0x130>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1f1      	bne.n	800ee82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ee9e:	4b13      	ldr	r3, [pc, #76]	; (800eeec <xTaskResumeAll+0x134>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eea4:	4b10      	ldr	r3, [pc, #64]	; (800eee8 <xTaskResumeAll+0x130>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d009      	beq.n	800eec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eeac:	2301      	movs	r3, #1
 800eeae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eeb0:	4b0f      	ldr	r3, [pc, #60]	; (800eef0 <xTaskResumeAll+0x138>)
 800eeb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eec0:	f001 f8e0 	bl	8010084 <vPortExitCritical>

	return xAlreadyYielded;
 800eec4:	68bb      	ldr	r3, [r7, #8]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	20001270 	.word	0x20001270
 800eed4:	20001248 	.word	0x20001248
 800eed8:	20001208 	.word	0x20001208
 800eedc:	20001250 	.word	0x20001250
 800eee0:	20000d78 	.word	0x20000d78
 800eee4:	20000d74 	.word	0x20000d74
 800eee8:	2000125c 	.word	0x2000125c
 800eeec:	20001258 	.word	0x20001258
 800eef0:	e000ed04 	.word	0xe000ed04

0800eef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eefa:	4b05      	ldr	r3, [pc, #20]	; (800ef10 <xTaskGetTickCount+0x1c>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef00:	687b      	ldr	r3, [r7, #4]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	2000124c 	.word	0x2000124c

0800ef14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b086      	sub	sp, #24
 800ef18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef1e:	4b4f      	ldr	r3, [pc, #316]	; (800f05c <xTaskIncrementTick+0x148>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f040 808f 	bne.w	800f046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef28:	4b4d      	ldr	r3, [pc, #308]	; (800f060 <xTaskIncrementTick+0x14c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef30:	4a4b      	ldr	r2, [pc, #300]	; (800f060 <xTaskIncrementTick+0x14c>)
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d120      	bne.n	800ef7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef3c:	4b49      	ldr	r3, [pc, #292]	; (800f064 <xTaskIncrementTick+0x150>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00a      	beq.n	800ef5c <xTaskIncrementTick+0x48>
	__asm volatile
 800ef46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	603b      	str	r3, [r7, #0]
}
 800ef58:	bf00      	nop
 800ef5a:	e7fe      	b.n	800ef5a <xTaskIncrementTick+0x46>
 800ef5c:	4b41      	ldr	r3, [pc, #260]	; (800f064 <xTaskIncrementTick+0x150>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	4b41      	ldr	r3, [pc, #260]	; (800f068 <xTaskIncrementTick+0x154>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a3f      	ldr	r2, [pc, #252]	; (800f064 <xTaskIncrementTick+0x150>)
 800ef68:	6013      	str	r3, [r2, #0]
 800ef6a:	4a3f      	ldr	r2, [pc, #252]	; (800f068 <xTaskIncrementTick+0x154>)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6013      	str	r3, [r2, #0]
 800ef70:	4b3e      	ldr	r3, [pc, #248]	; (800f06c <xTaskIncrementTick+0x158>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	3301      	adds	r3, #1
 800ef76:	4a3d      	ldr	r2, [pc, #244]	; (800f06c <xTaskIncrementTick+0x158>)
 800ef78:	6013      	str	r3, [r2, #0]
 800ef7a:	f000 fadb 	bl	800f534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef7e:	4b3c      	ldr	r3, [pc, #240]	; (800f070 <xTaskIncrementTick+0x15c>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	693a      	ldr	r2, [r7, #16]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d349      	bcc.n	800f01c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef88:	4b36      	ldr	r3, [pc, #216]	; (800f064 <xTaskIncrementTick+0x150>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d104      	bne.n	800ef9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef92:	4b37      	ldr	r3, [pc, #220]	; (800f070 <xTaskIncrementTick+0x15c>)
 800ef94:	f04f 32ff 	mov.w	r2, #4294967295
 800ef98:	601a      	str	r2, [r3, #0]
					break;
 800ef9a:	e03f      	b.n	800f01c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef9c:	4b31      	ldr	r3, [pc, #196]	; (800f064 <xTaskIncrementTick+0x150>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800efac:	693a      	ldr	r2, [r7, #16]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d203      	bcs.n	800efbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800efb4:	4a2e      	ldr	r2, [pc, #184]	; (800f070 <xTaskIncrementTick+0x15c>)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800efba:	e02f      	b.n	800f01c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	3304      	adds	r3, #4
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe febf 	bl	800dd44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d004      	beq.n	800efd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	3318      	adds	r3, #24
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fe feb6 	bl	800dd44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efdc:	4b25      	ldr	r3, [pc, #148]	; (800f074 <xTaskIncrementTick+0x160>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d903      	bls.n	800efec <xTaskIncrementTick+0xd8>
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe8:	4a22      	ldr	r2, [pc, #136]	; (800f074 <xTaskIncrementTick+0x160>)
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff0:	4613      	mov	r3, r2
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	4413      	add	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4a1f      	ldr	r2, [pc, #124]	; (800f078 <xTaskIncrementTick+0x164>)
 800effa:	441a      	add	r2, r3
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	3304      	adds	r3, #4
 800f000:	4619      	mov	r1, r3
 800f002:	4610      	mov	r0, r2
 800f004:	f7fe fe41 	bl	800dc8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f00c:	4b1b      	ldr	r3, [pc, #108]	; (800f07c <xTaskIncrementTick+0x168>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f012:	429a      	cmp	r2, r3
 800f014:	d3b8      	bcc.n	800ef88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f016:	2301      	movs	r3, #1
 800f018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f01a:	e7b5      	b.n	800ef88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f01c:	4b17      	ldr	r3, [pc, #92]	; (800f07c <xTaskIncrementTick+0x168>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f022:	4915      	ldr	r1, [pc, #84]	; (800f078 <xTaskIncrementTick+0x164>)
 800f024:	4613      	mov	r3, r2
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4413      	add	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	440b      	add	r3, r1
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d901      	bls.n	800f038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f034:	2301      	movs	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <xTaskIncrementTick+0x16c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d007      	beq.n	800f050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f040:	2301      	movs	r3, #1
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	e004      	b.n	800f050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f046:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <xTaskIncrementTick+0x170>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3301      	adds	r3, #1
 800f04c:	4a0d      	ldr	r2, [pc, #52]	; (800f084 <xTaskIncrementTick+0x170>)
 800f04e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f050:	697b      	ldr	r3, [r7, #20]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	20001270 	.word	0x20001270
 800f060:	2000124c 	.word	0x2000124c
 800f064:	20001200 	.word	0x20001200
 800f068:	20001204 	.word	0x20001204
 800f06c:	20001260 	.word	0x20001260
 800f070:	20001268 	.word	0x20001268
 800f074:	20001250 	.word	0x20001250
 800f078:	20000d78 	.word	0x20000d78
 800f07c:	20000d74 	.word	0x20000d74
 800f080:	2000125c 	.word	0x2000125c
 800f084:	20001258 	.word	0x20001258

0800f088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f088:	b480      	push	{r7}
 800f08a:	b085      	sub	sp, #20
 800f08c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f08e:	4b2a      	ldr	r3, [pc, #168]	; (800f138 <vTaskSwitchContext+0xb0>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d003      	beq.n	800f09e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f096:	4b29      	ldr	r3, [pc, #164]	; (800f13c <vTaskSwitchContext+0xb4>)
 800f098:	2201      	movs	r2, #1
 800f09a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f09c:	e046      	b.n	800f12c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f09e:	4b27      	ldr	r3, [pc, #156]	; (800f13c <vTaskSwitchContext+0xb4>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a4:	4b26      	ldr	r3, [pc, #152]	; (800f140 <vTaskSwitchContext+0xb8>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	e010      	b.n	800f0ce <vTaskSwitchContext+0x46>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10a      	bne.n	800f0c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800f0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b6:	f383 8811 	msr	BASEPRI, r3
 800f0ba:	f3bf 8f6f 	isb	sy
 800f0be:	f3bf 8f4f 	dsb	sy
 800f0c2:	607b      	str	r3, [r7, #4]
}
 800f0c4:	bf00      	nop
 800f0c6:	e7fe      	b.n	800f0c6 <vTaskSwitchContext+0x3e>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	60fb      	str	r3, [r7, #12]
 800f0ce:	491d      	ldr	r1, [pc, #116]	; (800f144 <vTaskSwitchContext+0xbc>)
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	4413      	add	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	440b      	add	r3, r1
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0e4      	beq.n	800f0ac <vTaskSwitchContext+0x24>
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	009b      	lsls	r3, r3, #2
 800f0e8:	4413      	add	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4a15      	ldr	r2, [pc, #84]	; (800f144 <vTaskSwitchContext+0xbc>)
 800f0ee:	4413      	add	r3, r2
 800f0f0:	60bb      	str	r3, [r7, #8]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	605a      	str	r2, [r3, #4]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	3308      	adds	r3, #8
 800f104:	429a      	cmp	r2, r3
 800f106:	d104      	bne.n	800f112 <vTaskSwitchContext+0x8a>
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	605a      	str	r2, [r3, #4]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	4a0b      	ldr	r2, [pc, #44]	; (800f148 <vTaskSwitchContext+0xc0>)
 800f11a:	6013      	str	r3, [r2, #0]
 800f11c:	4a08      	ldr	r2, [pc, #32]	; (800f140 <vTaskSwitchContext+0xb8>)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f122:	4b09      	ldr	r3, [pc, #36]	; (800f148 <vTaskSwitchContext+0xc0>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3354      	adds	r3, #84	; 0x54
 800f128:	4a08      	ldr	r2, [pc, #32]	; (800f14c <vTaskSwitchContext+0xc4>)
 800f12a:	6013      	str	r3, [r2, #0]
}
 800f12c:	bf00      	nop
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr
 800f138:	20001270 	.word	0x20001270
 800f13c:	2000125c 	.word	0x2000125c
 800f140:	20001250 	.word	0x20001250
 800f144:	20000d78 	.word	0x20000d78
 800f148:	20000d74 	.word	0x20000d74
 800f14c:	2000018c 	.word	0x2000018c

0800f150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10a      	bne.n	800f176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	60fb      	str	r3, [r7, #12]
}
 800f172:	bf00      	nop
 800f174:	e7fe      	b.n	800f174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f176:	4b07      	ldr	r3, [pc, #28]	; (800f194 <vTaskPlaceOnEventList+0x44>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3318      	adds	r3, #24
 800f17c:	4619      	mov	r1, r3
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7fe fda7 	bl	800dcd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f184:	2101      	movs	r1, #1
 800f186:	6838      	ldr	r0, [r7, #0]
 800f188:	f000 fa80 	bl	800f68c <prvAddCurrentTaskToDelayedList>
}
 800f18c:	bf00      	nop
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	20000d74 	.word	0x20000d74

0800f198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10a      	bne.n	800f1c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	617b      	str	r3, [r7, #20]
}
 800f1bc:	bf00      	nop
 800f1be:	e7fe      	b.n	800f1be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1c0:	4b0a      	ldr	r3, [pc, #40]	; (800f1ec <vTaskPlaceOnEventListRestricted+0x54>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	3318      	adds	r3, #24
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f7fe fd5e 	bl	800dc8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1da:	6879      	ldr	r1, [r7, #4]
 800f1dc:	68b8      	ldr	r0, [r7, #8]
 800f1de:	f000 fa55 	bl	800f68c <prvAddCurrentTaskToDelayedList>
	}
 800f1e2:	bf00      	nop
 800f1e4:	3718      	adds	r7, #24
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20000d74 	.word	0x20000d74

0800f1f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10a      	bne.n	800f21c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	60fb      	str	r3, [r7, #12]
}
 800f218:	bf00      	nop
 800f21a:	e7fe      	b.n	800f21a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	3318      	adds	r3, #24
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe fd8f 	bl	800dd44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f226:	4b1e      	ldr	r3, [pc, #120]	; (800f2a0 <xTaskRemoveFromEventList+0xb0>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d11d      	bne.n	800f26a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	3304      	adds	r3, #4
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe fd86 	bl	800dd44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23c:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <xTaskRemoveFromEventList+0xb4>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	d903      	bls.n	800f24c <xTaskRemoveFromEventList+0x5c>
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f248:	4a16      	ldr	r2, [pc, #88]	; (800f2a4 <xTaskRemoveFromEventList+0xb4>)
 800f24a:	6013      	str	r3, [r2, #0]
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f250:	4613      	mov	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4a13      	ldr	r2, [pc, #76]	; (800f2a8 <xTaskRemoveFromEventList+0xb8>)
 800f25a:	441a      	add	r2, r3
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	3304      	adds	r3, #4
 800f260:	4619      	mov	r1, r3
 800f262:	4610      	mov	r0, r2
 800f264:	f7fe fd11 	bl	800dc8a <vListInsertEnd>
 800f268:	e005      	b.n	800f276 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	3318      	adds	r3, #24
 800f26e:	4619      	mov	r1, r3
 800f270:	480e      	ldr	r0, [pc, #56]	; (800f2ac <xTaskRemoveFromEventList+0xbc>)
 800f272:	f7fe fd0a 	bl	800dc8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f27a:	4b0d      	ldr	r3, [pc, #52]	; (800f2b0 <xTaskRemoveFromEventList+0xc0>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f280:	429a      	cmp	r2, r3
 800f282:	d905      	bls.n	800f290 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f284:	2301      	movs	r3, #1
 800f286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f288:	4b0a      	ldr	r3, [pc, #40]	; (800f2b4 <xTaskRemoveFromEventList+0xc4>)
 800f28a:	2201      	movs	r2, #1
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	e001      	b.n	800f294 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f290:	2300      	movs	r3, #0
 800f292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f294:	697b      	ldr	r3, [r7, #20]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20001270 	.word	0x20001270
 800f2a4:	20001250 	.word	0x20001250
 800f2a8:	20000d78 	.word	0x20000d78
 800f2ac:	20001208 	.word	0x20001208
 800f2b0:	20000d74 	.word	0x20000d74
 800f2b4:	2000125c 	.word	0x2000125c

0800f2b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f2c0:	4b06      	ldr	r3, [pc, #24]	; (800f2dc <vTaskInternalSetTimeOutState+0x24>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f2c8:	4b05      	ldr	r3, [pc, #20]	; (800f2e0 <vTaskInternalSetTimeOutState+0x28>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	605a      	str	r2, [r3, #4]
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	20001260 	.word	0x20001260
 800f2e0:	2000124c 	.word	0x2000124c

0800f2e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10a      	bne.n	800f30a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f8:	f383 8811 	msr	BASEPRI, r3
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	613b      	str	r3, [r7, #16]
}
 800f306:	bf00      	nop
 800f308:	e7fe      	b.n	800f308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10a      	bne.n	800f326 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	60fb      	str	r3, [r7, #12]
}
 800f322:	bf00      	nop
 800f324:	e7fe      	b.n	800f324 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f326:	f000 fe7d 	bl	8010024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f32a:	4b1d      	ldr	r3, [pc, #116]	; (800f3a0 <xTaskCheckForTimeOut+0xbc>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	69ba      	ldr	r2, [r7, #24]
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f342:	d102      	bne.n	800f34a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f344:	2300      	movs	r3, #0
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	e023      	b.n	800f392 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	4b15      	ldr	r3, [pc, #84]	; (800f3a4 <xTaskCheckForTimeOut+0xc0>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	429a      	cmp	r2, r3
 800f354:	d007      	beq.n	800f366 <xTaskCheckForTimeOut+0x82>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	69ba      	ldr	r2, [r7, #24]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d302      	bcc.n	800f366 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f360:	2301      	movs	r3, #1
 800f362:	61fb      	str	r3, [r7, #28]
 800f364:	e015      	b.n	800f392 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	697a      	ldr	r2, [r7, #20]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d20b      	bcs.n	800f388 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	1ad2      	subs	r2, r2, r3
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff ff9b 	bl	800f2b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f382:	2300      	movs	r3, #0
 800f384:	61fb      	str	r3, [r7, #28]
 800f386:	e004      	b.n	800f392 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	2200      	movs	r2, #0
 800f38c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f38e:	2301      	movs	r3, #1
 800f390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f392:	f000 fe77 	bl	8010084 <vPortExitCritical>

	return xReturn;
 800f396:	69fb      	ldr	r3, [r7, #28]
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3720      	adds	r7, #32
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	2000124c 	.word	0x2000124c
 800f3a4:	20001260 	.word	0x20001260

0800f3a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f3ac:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <vTaskMissedYield+0x14>)
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	601a      	str	r2, [r3, #0]
}
 800f3b2:	bf00      	nop
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	2000125c 	.word	0x2000125c

0800f3c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f3c8:	f000 f852 	bl	800f470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <prvIdleTask+0x28>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d9f9      	bls.n	800f3c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3d4:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <prvIdleTask+0x2c>)
 800f3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3e4:	e7f0      	b.n	800f3c8 <prvIdleTask+0x8>
 800f3e6:	bf00      	nop
 800f3e8:	20000d78 	.word	0x20000d78
 800f3ec:	e000ed04 	.word	0xe000ed04

0800f3f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	607b      	str	r3, [r7, #4]
 800f3fa:	e00c      	b.n	800f416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	4613      	mov	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4413      	add	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4a12      	ldr	r2, [pc, #72]	; (800f450 <prvInitialiseTaskLists+0x60>)
 800f408:	4413      	add	r3, r2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fe fc10 	bl	800dc30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	3301      	adds	r3, #1
 800f414:	607b      	str	r3, [r7, #4]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b37      	cmp	r3, #55	; 0x37
 800f41a:	d9ef      	bls.n	800f3fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f41c:	480d      	ldr	r0, [pc, #52]	; (800f454 <prvInitialiseTaskLists+0x64>)
 800f41e:	f7fe fc07 	bl	800dc30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f422:	480d      	ldr	r0, [pc, #52]	; (800f458 <prvInitialiseTaskLists+0x68>)
 800f424:	f7fe fc04 	bl	800dc30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f428:	480c      	ldr	r0, [pc, #48]	; (800f45c <prvInitialiseTaskLists+0x6c>)
 800f42a:	f7fe fc01 	bl	800dc30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f42e:	480c      	ldr	r0, [pc, #48]	; (800f460 <prvInitialiseTaskLists+0x70>)
 800f430:	f7fe fbfe 	bl	800dc30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f434:	480b      	ldr	r0, [pc, #44]	; (800f464 <prvInitialiseTaskLists+0x74>)
 800f436:	f7fe fbfb 	bl	800dc30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f43a:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <prvInitialiseTaskLists+0x78>)
 800f43c:	4a05      	ldr	r2, [pc, #20]	; (800f454 <prvInitialiseTaskLists+0x64>)
 800f43e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f440:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <prvInitialiseTaskLists+0x7c>)
 800f442:	4a05      	ldr	r2, [pc, #20]	; (800f458 <prvInitialiseTaskLists+0x68>)
 800f444:	601a      	str	r2, [r3, #0]
}
 800f446:	bf00      	nop
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	20000d78 	.word	0x20000d78
 800f454:	200011d8 	.word	0x200011d8
 800f458:	200011ec 	.word	0x200011ec
 800f45c:	20001208 	.word	0x20001208
 800f460:	2000121c 	.word	0x2000121c
 800f464:	20001234 	.word	0x20001234
 800f468:	20001200 	.word	0x20001200
 800f46c:	20001204 	.word	0x20001204

0800f470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f476:	e019      	b.n	800f4ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f478:	f000 fdd4 	bl	8010024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f47c:	4b10      	ldr	r3, [pc, #64]	; (800f4c0 <prvCheckTasksWaitingTermination+0x50>)
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	3304      	adds	r3, #4
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe fc5b 	bl	800dd44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f48e:	4b0d      	ldr	r3, [pc, #52]	; (800f4c4 <prvCheckTasksWaitingTermination+0x54>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3b01      	subs	r3, #1
 800f494:	4a0b      	ldr	r2, [pc, #44]	; (800f4c4 <prvCheckTasksWaitingTermination+0x54>)
 800f496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f498:	4b0b      	ldr	r3, [pc, #44]	; (800f4c8 <prvCheckTasksWaitingTermination+0x58>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	4a0a      	ldr	r2, [pc, #40]	; (800f4c8 <prvCheckTasksWaitingTermination+0x58>)
 800f4a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f4a2:	f000 fdef 	bl	8010084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f810 	bl	800f4cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4ac:	4b06      	ldr	r3, [pc, #24]	; (800f4c8 <prvCheckTasksWaitingTermination+0x58>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1e1      	bne.n	800f478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	2000121c 	.word	0x2000121c
 800f4c4:	20001248 	.word	0x20001248
 800f4c8:	20001230 	.word	0x20001230

0800f4cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	3354      	adds	r3, #84	; 0x54
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f001 fed9 	bl	8011290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d108      	bne.n	800f4fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 ff87 	bl	8010400 <vPortFree>
				vPortFree( pxTCB );
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 ff84 	bl	8010400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4f8:	e018      	b.n	800f52c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f500:	2b01      	cmp	r3, #1
 800f502:	d103      	bne.n	800f50c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 ff7b 	bl	8010400 <vPortFree>
	}
 800f50a:	e00f      	b.n	800f52c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f512:	2b02      	cmp	r3, #2
 800f514:	d00a      	beq.n	800f52c <prvDeleteTCB+0x60>
	__asm volatile
 800f516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	60fb      	str	r3, [r7, #12]
}
 800f528:	bf00      	nop
 800f52a:	e7fe      	b.n	800f52a <prvDeleteTCB+0x5e>
	}
 800f52c:	bf00      	nop
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f53a:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <prvResetNextTaskUnblockTime+0x38>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d104      	bne.n	800f54e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f544:	4b0a      	ldr	r3, [pc, #40]	; (800f570 <prvResetNextTaskUnblockTime+0x3c>)
 800f546:	f04f 32ff 	mov.w	r2, #4294967295
 800f54a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f54c:	e008      	b.n	800f560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f54e:	4b07      	ldr	r3, [pc, #28]	; (800f56c <prvResetNextTaskUnblockTime+0x38>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	4a04      	ldr	r2, [pc, #16]	; (800f570 <prvResetNextTaskUnblockTime+0x3c>)
 800f55e:	6013      	str	r3, [r2, #0]
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	20001200 	.word	0x20001200
 800f570:	20001268 	.word	0x20001268

0800f574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f57a:	4b0b      	ldr	r3, [pc, #44]	; (800f5a8 <xTaskGetSchedulerState+0x34>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d102      	bne.n	800f588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f582:	2301      	movs	r3, #1
 800f584:	607b      	str	r3, [r7, #4]
 800f586:	e008      	b.n	800f59a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f588:	4b08      	ldr	r3, [pc, #32]	; (800f5ac <xTaskGetSchedulerState+0x38>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d102      	bne.n	800f596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f590:	2302      	movs	r3, #2
 800f592:	607b      	str	r3, [r7, #4]
 800f594:	e001      	b.n	800f59a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f596:	2300      	movs	r3, #0
 800f598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f59a:	687b      	ldr	r3, [r7, #4]
	}
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	20001254 	.word	0x20001254
 800f5ac:	20001270 	.word	0x20001270

0800f5b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d056      	beq.n	800f674 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f5c6:	4b2e      	ldr	r3, [pc, #184]	; (800f680 <xTaskPriorityDisinherit+0xd0>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	693a      	ldr	r2, [r7, #16]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d00a      	beq.n	800f5e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	60fb      	str	r3, [r7, #12]
}
 800f5e2:	bf00      	nop
 800f5e4:	e7fe      	b.n	800f5e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d10a      	bne.n	800f604 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	60bb      	str	r3, [r7, #8]
}
 800f600:	bf00      	nop
 800f602:	e7fe      	b.n	800f602 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f608:	1e5a      	subs	r2, r3, #1
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f616:	429a      	cmp	r2, r3
 800f618:	d02c      	beq.n	800f674 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d128      	bne.n	800f674 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	3304      	adds	r3, #4
 800f626:	4618      	mov	r0, r3
 800f628:	f7fe fb8c 	bl	800dd44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f638:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f644:	4b0f      	ldr	r3, [pc, #60]	; (800f684 <xTaskPriorityDisinherit+0xd4>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d903      	bls.n	800f654 <xTaskPriorityDisinherit+0xa4>
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f650:	4a0c      	ldr	r2, [pc, #48]	; (800f684 <xTaskPriorityDisinherit+0xd4>)
 800f652:	6013      	str	r3, [r2, #0]
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f658:	4613      	mov	r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4a09      	ldr	r2, [pc, #36]	; (800f688 <xTaskPriorityDisinherit+0xd8>)
 800f662:	441a      	add	r2, r3
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	3304      	adds	r3, #4
 800f668:	4619      	mov	r1, r3
 800f66a:	4610      	mov	r0, r2
 800f66c:	f7fe fb0d 	bl	800dc8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f670:	2301      	movs	r3, #1
 800f672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f674:	697b      	ldr	r3, [r7, #20]
	}
 800f676:	4618      	mov	r0, r3
 800f678:	3718      	adds	r7, #24
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	20000d74 	.word	0x20000d74
 800f684:	20001250 	.word	0x20001250
 800f688:	20000d78 	.word	0x20000d78

0800f68c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f696:	4b21      	ldr	r3, [pc, #132]	; (800f71c <prvAddCurrentTaskToDelayedList+0x90>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f69c:	4b20      	ldr	r3, [pc, #128]	; (800f720 <prvAddCurrentTaskToDelayedList+0x94>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe fb4e 	bl	800dd44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ae:	d10a      	bne.n	800f6c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d007      	beq.n	800f6c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6b6:	4b1a      	ldr	r3, [pc, #104]	; (800f720 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4619      	mov	r1, r3
 800f6be:	4819      	ldr	r0, [pc, #100]	; (800f724 <prvAddCurrentTaskToDelayedList+0x98>)
 800f6c0:	f7fe fae3 	bl	800dc8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f6c4:	e026      	b.n	800f714 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f6ce:	4b14      	ldr	r3, [pc, #80]	; (800f720 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	68ba      	ldr	r2, [r7, #8]
 800f6d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d209      	bcs.n	800f6f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6de:	4b12      	ldr	r3, [pc, #72]	; (800f728 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4b0f      	ldr	r3, [pc, #60]	; (800f720 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	f7fe faf1 	bl	800dcd2 <vListInsert>
}
 800f6f0:	e010      	b.n	800f714 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6f2:	4b0e      	ldr	r3, [pc, #56]	; (800f72c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4610      	mov	r0, r2
 800f700:	f7fe fae7 	bl	800dcd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f704:	4b0a      	ldr	r3, [pc, #40]	; (800f730 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d202      	bcs.n	800f714 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f70e:	4a08      	ldr	r2, [pc, #32]	; (800f730 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	6013      	str	r3, [r2, #0]
}
 800f714:	bf00      	nop
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	2000124c 	.word	0x2000124c
 800f720:	20000d74 	.word	0x20000d74
 800f724:	20001234 	.word	0x20001234
 800f728:	20001204 	.word	0x20001204
 800f72c:	20001200 	.word	0x20001200
 800f730:	20001268 	.word	0x20001268

0800f734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b08a      	sub	sp, #40	; 0x28
 800f738:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f73e:	f000 fb07 	bl	800fd50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f742:	4b1c      	ldr	r3, [pc, #112]	; (800f7b4 <xTimerCreateTimerTask+0x80>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d021      	beq.n	800f78e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f752:	1d3a      	adds	r2, r7, #4
 800f754:	f107 0108 	add.w	r1, r7, #8
 800f758:	f107 030c 	add.w	r3, r7, #12
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fe fa4d 	bl	800dbfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	68fa      	ldr	r2, [r7, #12]
 800f768:	9202      	str	r2, [sp, #8]
 800f76a:	9301      	str	r3, [sp, #4]
 800f76c:	2302      	movs	r3, #2
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	2300      	movs	r3, #0
 800f772:	460a      	mov	r2, r1
 800f774:	4910      	ldr	r1, [pc, #64]	; (800f7b8 <xTimerCreateTimerTask+0x84>)
 800f776:	4811      	ldr	r0, [pc, #68]	; (800f7bc <xTimerCreateTimerTask+0x88>)
 800f778:	f7ff f8b4 	bl	800e8e4 <xTaskCreateStatic>
 800f77c:	4603      	mov	r3, r0
 800f77e:	4a10      	ldr	r2, [pc, #64]	; (800f7c0 <xTimerCreateTimerTask+0x8c>)
 800f780:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f782:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <xTimerCreateTimerTask+0x8c>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f78a:	2301      	movs	r3, #1
 800f78c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d10a      	bne.n	800f7aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f798:	f383 8811 	msr	BASEPRI, r3
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	f3bf 8f4f 	dsb	sy
 800f7a4:	613b      	str	r3, [r7, #16]
}
 800f7a6:	bf00      	nop
 800f7a8:	e7fe      	b.n	800f7a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f7aa:	697b      	ldr	r3, [r7, #20]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3718      	adds	r7, #24
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	200012a4 	.word	0x200012a4
 800f7b8:	08011e3c 	.word	0x08011e3c
 800f7bc:	0800f8f9 	.word	0x0800f8f9
 800f7c0:	200012a8 	.word	0x200012a8

0800f7c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08a      	sub	sp, #40	; 0x28
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d10a      	bne.n	800f7f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e0:	f383 8811 	msr	BASEPRI, r3
 800f7e4:	f3bf 8f6f 	isb	sy
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	623b      	str	r3, [r7, #32]
}
 800f7ee:	bf00      	nop
 800f7f0:	e7fe      	b.n	800f7f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f7f2:	4b1a      	ldr	r3, [pc, #104]	; (800f85c <xTimerGenericCommand+0x98>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d02a      	beq.n	800f850 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b05      	cmp	r3, #5
 800f80a:	dc18      	bgt.n	800f83e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f80c:	f7ff feb2 	bl	800f574 <xTaskGetSchedulerState>
 800f810:	4603      	mov	r3, r0
 800f812:	2b02      	cmp	r3, #2
 800f814:	d109      	bne.n	800f82a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f816:	4b11      	ldr	r3, [pc, #68]	; (800f85c <xTimerGenericCommand+0x98>)
 800f818:	6818      	ldr	r0, [r3, #0]
 800f81a:	f107 0110 	add.w	r1, r7, #16
 800f81e:	2300      	movs	r3, #0
 800f820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f822:	f7fe fbf7 	bl	800e014 <xQueueGenericSend>
 800f826:	6278      	str	r0, [r7, #36]	; 0x24
 800f828:	e012      	b.n	800f850 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f82a:	4b0c      	ldr	r3, [pc, #48]	; (800f85c <xTimerGenericCommand+0x98>)
 800f82c:	6818      	ldr	r0, [r3, #0]
 800f82e:	f107 0110 	add.w	r1, r7, #16
 800f832:	2300      	movs	r3, #0
 800f834:	2200      	movs	r2, #0
 800f836:	f7fe fbed 	bl	800e014 <xQueueGenericSend>
 800f83a:	6278      	str	r0, [r7, #36]	; 0x24
 800f83c:	e008      	b.n	800f850 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f83e:	4b07      	ldr	r3, [pc, #28]	; (800f85c <xTimerGenericCommand+0x98>)
 800f840:	6818      	ldr	r0, [r3, #0]
 800f842:	f107 0110 	add.w	r1, r7, #16
 800f846:	2300      	movs	r3, #0
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	f7fe fce1 	bl	800e210 <xQueueGenericSendFromISR>
 800f84e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f852:	4618      	mov	r0, r3
 800f854:	3728      	adds	r7, #40	; 0x28
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	200012a4 	.word	0x200012a4

0800f860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af02      	add	r7, sp, #8
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f86a:	4b22      	ldr	r3, [pc, #136]	; (800f8f4 <prvProcessExpiredTimer+0x94>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	3304      	adds	r3, #4
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fe fa63 	bl	800dd44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f884:	f003 0304 	and.w	r3, r3, #4
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d022      	beq.n	800f8d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	699a      	ldr	r2, [r3, #24]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	18d1      	adds	r1, r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	683a      	ldr	r2, [r7, #0]
 800f898:	6978      	ldr	r0, [r7, #20]
 800f89a:	f000 f8d1 	bl	800fa40 <prvInsertTimerInActiveList>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d01f      	beq.n	800f8e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	6978      	ldr	r0, [r7, #20]
 800f8b0:	f7ff ff88 	bl	800f7c4 <xTimerGenericCommand>
 800f8b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d113      	bne.n	800f8e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c0:	f383 8811 	msr	BASEPRI, r3
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	f3bf 8f4f 	dsb	sy
 800f8cc:	60fb      	str	r3, [r7, #12]
}
 800f8ce:	bf00      	nop
 800f8d0:	e7fe      	b.n	800f8d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8d8:	f023 0301 	bic.w	r3, r3, #1
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	6a1b      	ldr	r3, [r3, #32]
 800f8e8:	6978      	ldr	r0, [r7, #20]
 800f8ea:	4798      	blx	r3
}
 800f8ec:	bf00      	nop
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	2000129c 	.word	0x2000129c

0800f8f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f900:	f107 0308 	add.w	r3, r7, #8
 800f904:	4618      	mov	r0, r3
 800f906:	f000 f857 	bl	800f9b8 <prvGetNextExpireTime>
 800f90a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	4619      	mov	r1, r3
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f000 f803 	bl	800f91c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f916:	f000 f8d5 	bl	800fac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f91a:	e7f1      	b.n	800f900 <prvTimerTask+0x8>

0800f91c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f926:	f7ff fa39 	bl	800ed9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f92a:	f107 0308 	add.w	r3, r7, #8
 800f92e:	4618      	mov	r0, r3
 800f930:	f000 f866 	bl	800fa00 <prvSampleTimeNow>
 800f934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d130      	bne.n	800f99e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d10a      	bne.n	800f958 <prvProcessTimerOrBlockTask+0x3c>
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	429a      	cmp	r2, r3
 800f948:	d806      	bhi.n	800f958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f94a:	f7ff fa35 	bl	800edb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f94e:	68f9      	ldr	r1, [r7, #12]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff85 	bl	800f860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f956:	e024      	b.n	800f9a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d008      	beq.n	800f970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f95e:	4b13      	ldr	r3, [pc, #76]	; (800f9ac <prvProcessTimerOrBlockTask+0x90>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d101      	bne.n	800f96c <prvProcessTimerOrBlockTask+0x50>
 800f968:	2301      	movs	r3, #1
 800f96a:	e000      	b.n	800f96e <prvProcessTimerOrBlockTask+0x52>
 800f96c:	2300      	movs	r3, #0
 800f96e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f970:	4b0f      	ldr	r3, [pc, #60]	; (800f9b0 <prvProcessTimerOrBlockTask+0x94>)
 800f972:	6818      	ldr	r0, [r3, #0]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	4619      	mov	r1, r3
 800f97e:	f7fe ff7d 	bl	800e87c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f982:	f7ff fa19 	bl	800edb8 <xTaskResumeAll>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d10a      	bne.n	800f9a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f98c:	4b09      	ldr	r3, [pc, #36]	; (800f9b4 <prvProcessTimerOrBlockTask+0x98>)
 800f98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	f3bf 8f4f 	dsb	sy
 800f998:	f3bf 8f6f 	isb	sy
}
 800f99c:	e001      	b.n	800f9a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f99e:	f7ff fa0b 	bl	800edb8 <xTaskResumeAll>
}
 800f9a2:	bf00      	nop
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	200012a0 	.word	0x200012a0
 800f9b0:	200012a4 	.word	0x200012a4
 800f9b4:	e000ed04 	.word	0xe000ed04

0800f9b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9c0:	4b0e      	ldr	r3, [pc, #56]	; (800f9fc <prvGetNextExpireTime+0x44>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <prvGetNextExpireTime+0x16>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	e000      	b.n	800f9d0 <prvGetNextExpireTime+0x18>
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d105      	bne.n	800f9e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9dc:	4b07      	ldr	r3, [pc, #28]	; (800f9fc <prvGetNextExpireTime+0x44>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	60fb      	str	r3, [r7, #12]
 800f9e6:	e001      	b.n	800f9ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3714      	adds	r7, #20
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	2000129c 	.word	0x2000129c

0800fa00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fa08:	f7ff fa74 	bl	800eef4 <xTaskGetTickCount>
 800fa0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fa0e:	4b0b      	ldr	r3, [pc, #44]	; (800fa3c <prvSampleTimeNow+0x3c>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d205      	bcs.n	800fa24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa18:	f000 f936 	bl	800fc88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	601a      	str	r2, [r3, #0]
 800fa22:	e002      	b.n	800fa2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fa2a:	4a04      	ldr	r2, [pc, #16]	; (800fa3c <prvSampleTimeNow+0x3c>)
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fa30:	68fb      	ldr	r3, [r7, #12]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	200012ac 	.word	0x200012ac

0800fa40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa5e:	68ba      	ldr	r2, [r7, #8]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d812      	bhi.n	800fa8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	1ad2      	subs	r2, r2, r3
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	699b      	ldr	r3, [r3, #24]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d302      	bcc.n	800fa7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa74:	2301      	movs	r3, #1
 800fa76:	617b      	str	r3, [r7, #20]
 800fa78:	e01b      	b.n	800fab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa7a:	4b10      	ldr	r3, [pc, #64]	; (800fabc <prvInsertTimerInActiveList+0x7c>)
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3304      	adds	r3, #4
 800fa82:	4619      	mov	r1, r3
 800fa84:	4610      	mov	r0, r2
 800fa86:	f7fe f924 	bl	800dcd2 <vListInsert>
 800fa8a:	e012      	b.n	800fab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d206      	bcs.n	800faa2 <prvInsertTimerInActiveList+0x62>
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d302      	bcc.n	800faa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	e007      	b.n	800fab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800faa2:	4b07      	ldr	r3, [pc, #28]	; (800fac0 <prvInsertTimerInActiveList+0x80>)
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3304      	adds	r3, #4
 800faaa:	4619      	mov	r1, r3
 800faac:	4610      	mov	r0, r2
 800faae:	f7fe f910 	bl	800dcd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fab2:	697b      	ldr	r3, [r7, #20]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3718      	adds	r7, #24
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	200012a0 	.word	0x200012a0
 800fac0:	2000129c 	.word	0x2000129c

0800fac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b08e      	sub	sp, #56	; 0x38
 800fac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faca:	e0ca      	b.n	800fc62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	da18      	bge.n	800fb04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fad2:	1d3b      	adds	r3, r7, #4
 800fad4:	3304      	adds	r3, #4
 800fad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d10a      	bne.n	800faf4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	61fb      	str	r3, [r7, #28]
}
 800faf0:	bf00      	nop
 800faf2:	e7fe      	b.n	800faf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fafa:	6850      	ldr	r0, [r2, #4]
 800fafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fafe:	6892      	ldr	r2, [r2, #8]
 800fb00:	4611      	mov	r1, r2
 800fb02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f2c0 80aa 	blt.w	800fc60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb12:	695b      	ldr	r3, [r3, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d004      	beq.n	800fb22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe f911 	bl	800dd44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb22:	463b      	mov	r3, r7
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff ff6b 	bl	800fa00 <prvSampleTimeNow>
 800fb2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b09      	cmp	r3, #9
 800fb30:	f200 8097 	bhi.w	800fc62 <prvProcessReceivedCommands+0x19e>
 800fb34:	a201      	add	r2, pc, #4	; (adr r2, 800fb3c <prvProcessReceivedCommands+0x78>)
 800fb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb3a:	bf00      	nop
 800fb3c:	0800fb65 	.word	0x0800fb65
 800fb40:	0800fb65 	.word	0x0800fb65
 800fb44:	0800fb65 	.word	0x0800fb65
 800fb48:	0800fbd9 	.word	0x0800fbd9
 800fb4c:	0800fbed 	.word	0x0800fbed
 800fb50:	0800fc37 	.word	0x0800fc37
 800fb54:	0800fb65 	.word	0x0800fb65
 800fb58:	0800fb65 	.word	0x0800fb65
 800fb5c:	0800fbd9 	.word	0x0800fbd9
 800fb60:	0800fbed 	.word	0x0800fbed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb6a:	f043 0301 	orr.w	r3, r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7a:	699b      	ldr	r3, [r3, #24]
 800fb7c:	18d1      	adds	r1, r2, r3
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb84:	f7ff ff5c 	bl	800fa40 <prvInsertTimerInActiveList>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d069      	beq.n	800fc62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb9c:	f003 0304 	and.w	r3, r3, #4
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d05e      	beq.n	800fc62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba8:	699b      	ldr	r3, [r3, #24]
 800fbaa:	441a      	add	r2, r3
 800fbac:	2300      	movs	r3, #0
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbb6:	f7ff fe05 	bl	800f7c4 <xTimerGenericCommand>
 800fbba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d14f      	bne.n	800fc62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc6:	f383 8811 	msr	BASEPRI, r3
 800fbca:	f3bf 8f6f 	isb	sy
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	61bb      	str	r3, [r7, #24]
}
 800fbd4:	bf00      	nop
 800fbd6:	e7fe      	b.n	800fbd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbde:	f023 0301 	bic.w	r3, r3, #1
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fbea:	e03a      	b.n	800fc62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbf2:	f043 0301 	orr.w	r3, r3, #1
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc06:	699b      	ldr	r3, [r3, #24]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10a      	bne.n	800fc22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	617b      	str	r3, [r7, #20]
}
 800fc1e:	bf00      	nop
 800fc20:	e7fe      	b.n	800fc20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	699a      	ldr	r2, [r3, #24]
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	18d1      	adds	r1, r2, r3
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc30:	f7ff ff06 	bl	800fa40 <prvInsertTimerInActiveList>
					break;
 800fc34:	e015      	b.n	800fc62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc3c:	f003 0302 	and.w	r3, r3, #2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d103      	bne.n	800fc4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc46:	f000 fbdb 	bl	8010400 <vPortFree>
 800fc4a:	e00a      	b.n	800fc62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc52:	f023 0301 	bic.w	r3, r3, #1
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fc5e:	e000      	b.n	800fc62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fc60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc62:	4b08      	ldr	r3, [pc, #32]	; (800fc84 <prvProcessReceivedCommands+0x1c0>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	1d39      	adds	r1, r7, #4
 800fc68:	2200      	movs	r2, #0
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe fb6c 	bl	800e348 <xQueueReceive>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	f47f af2a 	bne.w	800facc <prvProcessReceivedCommands+0x8>
	}
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	3730      	adds	r7, #48	; 0x30
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	200012a4 	.word	0x200012a4

0800fc88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b088      	sub	sp, #32
 800fc8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc8e:	e048      	b.n	800fd22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc90:	4b2d      	ldr	r3, [pc, #180]	; (800fd48 <prvSwitchTimerLists+0xc0>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc9a:	4b2b      	ldr	r3, [pc, #172]	; (800fd48 <prvSwitchTimerLists+0xc0>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	3304      	adds	r3, #4
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fe f84b 	bl	800dd44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6a1b      	ldr	r3, [r3, #32]
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcbc:	f003 0304 	and.w	r3, r3, #4
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d02e      	beq.n	800fd22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	693a      	ldr	r2, [r7, #16]
 800fcca:	4413      	add	r3, r2
 800fccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d90e      	bls.n	800fcf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fce2:	4b19      	ldr	r3, [pc, #100]	; (800fd48 <prvSwitchTimerLists+0xc0>)
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	3304      	adds	r3, #4
 800fcea:	4619      	mov	r1, r3
 800fcec:	4610      	mov	r0, r2
 800fcee:	f7fd fff0 	bl	800dcd2 <vListInsert>
 800fcf2:	e016      	b.n	800fd22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	693a      	ldr	r2, [r7, #16]
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f7ff fd60 	bl	800f7c4 <xTimerGenericCommand>
 800fd04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d10a      	bne.n	800fd22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd10:	f383 8811 	msr	BASEPRI, r3
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	f3bf 8f4f 	dsb	sy
 800fd1c:	603b      	str	r3, [r7, #0]
}
 800fd1e:	bf00      	nop
 800fd20:	e7fe      	b.n	800fd20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd22:	4b09      	ldr	r3, [pc, #36]	; (800fd48 <prvSwitchTimerLists+0xc0>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1b1      	bne.n	800fc90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fd2c:	4b06      	ldr	r3, [pc, #24]	; (800fd48 <prvSwitchTimerLists+0xc0>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fd32:	4b06      	ldr	r3, [pc, #24]	; (800fd4c <prvSwitchTimerLists+0xc4>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4a04      	ldr	r2, [pc, #16]	; (800fd48 <prvSwitchTimerLists+0xc0>)
 800fd38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fd3a:	4a04      	ldr	r2, [pc, #16]	; (800fd4c <prvSwitchTimerLists+0xc4>)
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	6013      	str	r3, [r2, #0]
}
 800fd40:	bf00      	nop
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	2000129c 	.word	0x2000129c
 800fd4c:	200012a0 	.word	0x200012a0

0800fd50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fd56:	f000 f965 	bl	8010024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fd5a:	4b15      	ldr	r3, [pc, #84]	; (800fdb0 <prvCheckForValidListAndQueue+0x60>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d120      	bne.n	800fda4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fd62:	4814      	ldr	r0, [pc, #80]	; (800fdb4 <prvCheckForValidListAndQueue+0x64>)
 800fd64:	f7fd ff64 	bl	800dc30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd68:	4813      	ldr	r0, [pc, #76]	; (800fdb8 <prvCheckForValidListAndQueue+0x68>)
 800fd6a:	f7fd ff61 	bl	800dc30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd6e:	4b13      	ldr	r3, [pc, #76]	; (800fdbc <prvCheckForValidListAndQueue+0x6c>)
 800fd70:	4a10      	ldr	r2, [pc, #64]	; (800fdb4 <prvCheckForValidListAndQueue+0x64>)
 800fd72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd74:	4b12      	ldr	r3, [pc, #72]	; (800fdc0 <prvCheckForValidListAndQueue+0x70>)
 800fd76:	4a10      	ldr	r2, [pc, #64]	; (800fdb8 <prvCheckForValidListAndQueue+0x68>)
 800fd78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	4b11      	ldr	r3, [pc, #68]	; (800fdc4 <prvCheckForValidListAndQueue+0x74>)
 800fd80:	4a11      	ldr	r2, [pc, #68]	; (800fdc8 <prvCheckForValidListAndQueue+0x78>)
 800fd82:	2110      	movs	r1, #16
 800fd84:	200a      	movs	r0, #10
 800fd86:	f7fe f86f 	bl	800de68 <xQueueGenericCreateStatic>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	4a08      	ldr	r2, [pc, #32]	; (800fdb0 <prvCheckForValidListAndQueue+0x60>)
 800fd8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fd90:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <prvCheckForValidListAndQueue+0x60>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d005      	beq.n	800fda4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd98:	4b05      	ldr	r3, [pc, #20]	; (800fdb0 <prvCheckForValidListAndQueue+0x60>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	490b      	ldr	r1, [pc, #44]	; (800fdcc <prvCheckForValidListAndQueue+0x7c>)
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe fd42 	bl	800e828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fda4:	f000 f96e 	bl	8010084 <vPortExitCritical>
}
 800fda8:	bf00      	nop
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	200012a4 	.word	0x200012a4
 800fdb4:	20001274 	.word	0x20001274
 800fdb8:	20001288 	.word	0x20001288
 800fdbc:	2000129c 	.word	0x2000129c
 800fdc0:	200012a0 	.word	0x200012a0
 800fdc4:	20001350 	.word	0x20001350
 800fdc8:	200012b0 	.word	0x200012b0
 800fdcc:	08011e44 	.word	0x08011e44

0800fdd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	3b04      	subs	r3, #4
 800fde0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fde8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3b04      	subs	r3, #4
 800fdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	f023 0201 	bic.w	r2, r3, #1
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	3b04      	subs	r3, #4
 800fdfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe00:	4a0c      	ldr	r2, [pc, #48]	; (800fe34 <pxPortInitialiseStack+0x64>)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	3b14      	subs	r3, #20
 800fe0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	3b04      	subs	r3, #4
 800fe16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f06f 0202 	mvn.w	r2, #2
 800fe1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	3b20      	subs	r3, #32
 800fe24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe26:	68fb      	ldr	r3, [r7, #12]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3714      	adds	r7, #20
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr
 800fe34:	0800fe39 	.word	0x0800fe39

0800fe38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe42:	4b12      	ldr	r3, [pc, #72]	; (800fe8c <prvTaskExitError+0x54>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4a:	d00a      	beq.n	800fe62 <prvTaskExitError+0x2a>
	__asm volatile
 800fe4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe50:	f383 8811 	msr	BASEPRI, r3
 800fe54:	f3bf 8f6f 	isb	sy
 800fe58:	f3bf 8f4f 	dsb	sy
 800fe5c:	60fb      	str	r3, [r7, #12]
}
 800fe5e:	bf00      	nop
 800fe60:	e7fe      	b.n	800fe60 <prvTaskExitError+0x28>
	__asm volatile
 800fe62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe66:	f383 8811 	msr	BASEPRI, r3
 800fe6a:	f3bf 8f6f 	isb	sy
 800fe6e:	f3bf 8f4f 	dsb	sy
 800fe72:	60bb      	str	r3, [r7, #8]
}
 800fe74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe76:	bf00      	nop
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d0fc      	beq.n	800fe78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe7e:	bf00      	nop
 800fe80:	bf00      	nop
 800fe82:	3714      	adds	r7, #20
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	20000124 	.word	0x20000124

0800fe90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fe90:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <pxCurrentTCBConst2>)
 800fe92:	6819      	ldr	r1, [r3, #0]
 800fe94:	6808      	ldr	r0, [r1, #0]
 800fe96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9a:	f380 8809 	msr	PSP, r0
 800fe9e:	f3bf 8f6f 	isb	sy
 800fea2:	f04f 0000 	mov.w	r0, #0
 800fea6:	f380 8811 	msr	BASEPRI, r0
 800feaa:	4770      	bx	lr
 800feac:	f3af 8000 	nop.w

0800feb0 <pxCurrentTCBConst2>:
 800feb0:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800feb4:	bf00      	nop
 800feb6:	bf00      	nop

0800feb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800feb8:	4808      	ldr	r0, [pc, #32]	; (800fedc <prvPortStartFirstTask+0x24>)
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	6800      	ldr	r0, [r0, #0]
 800febe:	f380 8808 	msr	MSP, r0
 800fec2:	f04f 0000 	mov.w	r0, #0
 800fec6:	f380 8814 	msr	CONTROL, r0
 800feca:	b662      	cpsie	i
 800fecc:	b661      	cpsie	f
 800fece:	f3bf 8f4f 	dsb	sy
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	df00      	svc	0
 800fed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800feda:	bf00      	nop
 800fedc:	e000ed08 	.word	0xe000ed08

0800fee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fee6:	4b46      	ldr	r3, [pc, #280]	; (8010000 <xPortStartScheduler+0x120>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4a46      	ldr	r2, [pc, #280]	; (8010004 <xPortStartScheduler+0x124>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d10a      	bne.n	800ff06 <xPortStartScheduler+0x26>
	__asm volatile
 800fef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef4:	f383 8811 	msr	BASEPRI, r3
 800fef8:	f3bf 8f6f 	isb	sy
 800fefc:	f3bf 8f4f 	dsb	sy
 800ff00:	613b      	str	r3, [r7, #16]
}
 800ff02:	bf00      	nop
 800ff04:	e7fe      	b.n	800ff04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ff06:	4b3e      	ldr	r3, [pc, #248]	; (8010000 <xPortStartScheduler+0x120>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a3f      	ldr	r2, [pc, #252]	; (8010008 <xPortStartScheduler+0x128>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d10a      	bne.n	800ff26 <xPortStartScheduler+0x46>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	60fb      	str	r3, [r7, #12]
}
 800ff22:	bf00      	nop
 800ff24:	e7fe      	b.n	800ff24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff26:	4b39      	ldr	r3, [pc, #228]	; (801000c <xPortStartScheduler+0x12c>)
 800ff28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	22ff      	movs	r2, #255	; 0xff
 800ff36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff40:	78fb      	ldrb	r3, [r7, #3]
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	4b31      	ldr	r3, [pc, #196]	; (8010010 <xPortStartScheduler+0x130>)
 800ff4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff4e:	4b31      	ldr	r3, [pc, #196]	; (8010014 <xPortStartScheduler+0x134>)
 800ff50:	2207      	movs	r2, #7
 800ff52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff54:	e009      	b.n	800ff6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ff56:	4b2f      	ldr	r3, [pc, #188]	; (8010014 <xPortStartScheduler+0x134>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3b01      	subs	r3, #1
 800ff5c:	4a2d      	ldr	r2, [pc, #180]	; (8010014 <xPortStartScheduler+0x134>)
 800ff5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff60:	78fb      	ldrb	r3, [r7, #3]
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	005b      	lsls	r3, r3, #1
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff6a:	78fb      	ldrb	r3, [r7, #3]
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff72:	2b80      	cmp	r3, #128	; 0x80
 800ff74:	d0ef      	beq.n	800ff56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff76:	4b27      	ldr	r3, [pc, #156]	; (8010014 <xPortStartScheduler+0x134>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f1c3 0307 	rsb	r3, r3, #7
 800ff7e:	2b04      	cmp	r3, #4
 800ff80:	d00a      	beq.n	800ff98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ff82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff86:	f383 8811 	msr	BASEPRI, r3
 800ff8a:	f3bf 8f6f 	isb	sy
 800ff8e:	f3bf 8f4f 	dsb	sy
 800ff92:	60bb      	str	r3, [r7, #8]
}
 800ff94:	bf00      	nop
 800ff96:	e7fe      	b.n	800ff96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ff98:	4b1e      	ldr	r3, [pc, #120]	; (8010014 <xPortStartScheduler+0x134>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	021b      	lsls	r3, r3, #8
 800ff9e:	4a1d      	ldr	r2, [pc, #116]	; (8010014 <xPortStartScheduler+0x134>)
 800ffa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ffa2:	4b1c      	ldr	r3, [pc, #112]	; (8010014 <xPortStartScheduler+0x134>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ffaa:	4a1a      	ldr	r2, [pc, #104]	; (8010014 <xPortStartScheduler+0x134>)
 800ffac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ffb6:	4b18      	ldr	r3, [pc, #96]	; (8010018 <xPortStartScheduler+0x138>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a17      	ldr	r2, [pc, #92]	; (8010018 <xPortStartScheduler+0x138>)
 800ffbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ffc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ffc2:	4b15      	ldr	r3, [pc, #84]	; (8010018 <xPortStartScheduler+0x138>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a14      	ldr	r2, [pc, #80]	; (8010018 <xPortStartScheduler+0x138>)
 800ffc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ffcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ffce:	f000 f8dd 	bl	801018c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ffd2:	4b12      	ldr	r3, [pc, #72]	; (801001c <xPortStartScheduler+0x13c>)
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ffd8:	f000 f8fc 	bl	80101d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ffdc:	4b10      	ldr	r3, [pc, #64]	; (8010020 <xPortStartScheduler+0x140>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a0f      	ldr	r2, [pc, #60]	; (8010020 <xPortStartScheduler+0x140>)
 800ffe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ffe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ffe8:	f7ff ff66 	bl	800feb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ffec:	f7ff f84c 	bl	800f088 <vTaskSwitchContext>
	prvTaskExitError();
 800fff0:	f7ff ff22 	bl	800fe38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3718      	adds	r7, #24
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	e000ed00 	.word	0xe000ed00
 8010004:	410fc271 	.word	0x410fc271
 8010008:	410fc270 	.word	0x410fc270
 801000c:	e000e400 	.word	0xe000e400
 8010010:	200013a0 	.word	0x200013a0
 8010014:	200013a4 	.word	0x200013a4
 8010018:	e000ed20 	.word	0xe000ed20
 801001c:	20000124 	.word	0x20000124
 8010020:	e000ef34 	.word	0xe000ef34

08010024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
	__asm volatile
 801002a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	607b      	str	r3, [r7, #4]
}
 801003c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801003e:	4b0f      	ldr	r3, [pc, #60]	; (801007c <vPortEnterCritical+0x58>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	3301      	adds	r3, #1
 8010044:	4a0d      	ldr	r2, [pc, #52]	; (801007c <vPortEnterCritical+0x58>)
 8010046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010048:	4b0c      	ldr	r3, [pc, #48]	; (801007c <vPortEnterCritical+0x58>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d10f      	bne.n	8010070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010050:	4b0b      	ldr	r3, [pc, #44]	; (8010080 <vPortEnterCritical+0x5c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00a      	beq.n	8010070 <vPortEnterCritical+0x4c>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	603b      	str	r3, [r7, #0]
}
 801006c:	bf00      	nop
 801006e:	e7fe      	b.n	801006e <vPortEnterCritical+0x4a>
	}
}
 8010070:	bf00      	nop
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr
 801007c:	20000124 	.word	0x20000124
 8010080:	e000ed04 	.word	0xe000ed04

08010084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801008a:	4b12      	ldr	r3, [pc, #72]	; (80100d4 <vPortExitCritical+0x50>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d10a      	bne.n	80100a8 <vPortExitCritical+0x24>
	__asm volatile
 8010092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010096:	f383 8811 	msr	BASEPRI, r3
 801009a:	f3bf 8f6f 	isb	sy
 801009e:	f3bf 8f4f 	dsb	sy
 80100a2:	607b      	str	r3, [r7, #4]
}
 80100a4:	bf00      	nop
 80100a6:	e7fe      	b.n	80100a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80100a8:	4b0a      	ldr	r3, [pc, #40]	; (80100d4 <vPortExitCritical+0x50>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3b01      	subs	r3, #1
 80100ae:	4a09      	ldr	r2, [pc, #36]	; (80100d4 <vPortExitCritical+0x50>)
 80100b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80100b2:	4b08      	ldr	r3, [pc, #32]	; (80100d4 <vPortExitCritical+0x50>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d105      	bne.n	80100c6 <vPortExitCritical+0x42>
 80100ba:	2300      	movs	r3, #0
 80100bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	f383 8811 	msr	BASEPRI, r3
}
 80100c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80100c6:	bf00      	nop
 80100c8:	370c      	adds	r7, #12
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	20000124 	.word	0x20000124
	...

080100e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80100e0:	f3ef 8009 	mrs	r0, PSP
 80100e4:	f3bf 8f6f 	isb	sy
 80100e8:	4b15      	ldr	r3, [pc, #84]	; (8010140 <pxCurrentTCBConst>)
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	f01e 0f10 	tst.w	lr, #16
 80100f0:	bf08      	it	eq
 80100f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80100f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fa:	6010      	str	r0, [r2, #0]
 80100fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010104:	f380 8811 	msr	BASEPRI, r0
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	f3bf 8f6f 	isb	sy
 8010110:	f7fe ffba 	bl	800f088 <vTaskSwitchContext>
 8010114:	f04f 0000 	mov.w	r0, #0
 8010118:	f380 8811 	msr	BASEPRI, r0
 801011c:	bc09      	pop	{r0, r3}
 801011e:	6819      	ldr	r1, [r3, #0]
 8010120:	6808      	ldr	r0, [r1, #0]
 8010122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010126:	f01e 0f10 	tst.w	lr, #16
 801012a:	bf08      	it	eq
 801012c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010130:	f380 8809 	msr	PSP, r0
 8010134:	f3bf 8f6f 	isb	sy
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	f3af 8000 	nop.w

08010140 <pxCurrentTCBConst>:
 8010140:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop

08010148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
	__asm volatile
 801014e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010152:	f383 8811 	msr	BASEPRI, r3
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	607b      	str	r3, [r7, #4]
}
 8010160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010162:	f7fe fed7 	bl	800ef14 <xTaskIncrementTick>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d003      	beq.n	8010174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801016c:	4b06      	ldr	r3, [pc, #24]	; (8010188 <xPortSysTickHandler+0x40>)
 801016e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	2300      	movs	r3, #0
 8010176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	f383 8811 	msr	BASEPRI, r3
}
 801017e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	e000ed04 	.word	0xe000ed04

0801018c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801018c:	b480      	push	{r7}
 801018e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010190:	4b0b      	ldr	r3, [pc, #44]	; (80101c0 <vPortSetupTimerInterrupt+0x34>)
 8010192:	2200      	movs	r2, #0
 8010194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010196:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <vPortSetupTimerInterrupt+0x38>)
 8010198:	2200      	movs	r2, #0
 801019a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801019c:	4b0a      	ldr	r3, [pc, #40]	; (80101c8 <vPortSetupTimerInterrupt+0x3c>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a0a      	ldr	r2, [pc, #40]	; (80101cc <vPortSetupTimerInterrupt+0x40>)
 80101a2:	fba2 2303 	umull	r2, r3, r2, r3
 80101a6:	099b      	lsrs	r3, r3, #6
 80101a8:	4a09      	ldr	r2, [pc, #36]	; (80101d0 <vPortSetupTimerInterrupt+0x44>)
 80101aa:	3b01      	subs	r3, #1
 80101ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80101ae:	4b04      	ldr	r3, [pc, #16]	; (80101c0 <vPortSetupTimerInterrupt+0x34>)
 80101b0:	2207      	movs	r2, #7
 80101b2:	601a      	str	r2, [r3, #0]
}
 80101b4:	bf00      	nop
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	e000e010 	.word	0xe000e010
 80101c4:	e000e018 	.word	0xe000e018
 80101c8:	2000008c 	.word	0x2000008c
 80101cc:	10624dd3 	.word	0x10624dd3
 80101d0:	e000e014 	.word	0xe000e014

080101d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80101d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80101e4 <vPortEnableVFP+0x10>
 80101d8:	6801      	ldr	r1, [r0, #0]
 80101da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80101de:	6001      	str	r1, [r0, #0]
 80101e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80101e2:	bf00      	nop
 80101e4:	e000ed88 	.word	0xe000ed88

080101e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80101ee:	f3ef 8305 	mrs	r3, IPSR
 80101f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b0f      	cmp	r3, #15
 80101f8:	d914      	bls.n	8010224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80101fa:	4a17      	ldr	r2, [pc, #92]	; (8010258 <vPortValidateInterruptPriority+0x70>)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	4413      	add	r3, r2
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010204:	4b15      	ldr	r3, [pc, #84]	; (801025c <vPortValidateInterruptPriority+0x74>)
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	7afa      	ldrb	r2, [r7, #11]
 801020a:	429a      	cmp	r2, r3
 801020c:	d20a      	bcs.n	8010224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	607b      	str	r3, [r7, #4]
}
 8010220:	bf00      	nop
 8010222:	e7fe      	b.n	8010222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010224:	4b0e      	ldr	r3, [pc, #56]	; (8010260 <vPortValidateInterruptPriority+0x78>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801022c:	4b0d      	ldr	r3, [pc, #52]	; (8010264 <vPortValidateInterruptPriority+0x7c>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	429a      	cmp	r2, r3
 8010232:	d90a      	bls.n	801024a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010238:	f383 8811 	msr	BASEPRI, r3
 801023c:	f3bf 8f6f 	isb	sy
 8010240:	f3bf 8f4f 	dsb	sy
 8010244:	603b      	str	r3, [r7, #0]
}
 8010246:	bf00      	nop
 8010248:	e7fe      	b.n	8010248 <vPortValidateInterruptPriority+0x60>
	}
 801024a:	bf00      	nop
 801024c:	3714      	adds	r7, #20
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	e000e3f0 	.word	0xe000e3f0
 801025c:	200013a0 	.word	0x200013a0
 8010260:	e000ed0c 	.word	0xe000ed0c
 8010264:	200013a4 	.word	0x200013a4

08010268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b08a      	sub	sp, #40	; 0x28
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010270:	2300      	movs	r3, #0
 8010272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010274:	f7fe fd92 	bl	800ed9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010278:	4b5b      	ldr	r3, [pc, #364]	; (80103e8 <pvPortMalloc+0x180>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010280:	f000 f920 	bl	80104c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010284:	4b59      	ldr	r3, [pc, #356]	; (80103ec <pvPortMalloc+0x184>)
 8010286:	681a      	ldr	r2, [r3, #0]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4013      	ands	r3, r2
 801028c:	2b00      	cmp	r3, #0
 801028e:	f040 8093 	bne.w	80103b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d01d      	beq.n	80102d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010298:	2208      	movs	r2, #8
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4413      	add	r3, r2
 801029e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f003 0307 	and.w	r3, r3, #7
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d014      	beq.n	80102d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f023 0307 	bic.w	r3, r3, #7
 80102b0:	3308      	adds	r3, #8
 80102b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f003 0307 	and.w	r3, r3, #7
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00a      	beq.n	80102d4 <pvPortMalloc+0x6c>
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	617b      	str	r3, [r7, #20]
}
 80102d0:	bf00      	nop
 80102d2:	e7fe      	b.n	80102d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d06e      	beq.n	80103b8 <pvPortMalloc+0x150>
 80102da:	4b45      	ldr	r3, [pc, #276]	; (80103f0 <pvPortMalloc+0x188>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d869      	bhi.n	80103b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80102e4:	4b43      	ldr	r3, [pc, #268]	; (80103f4 <pvPortMalloc+0x18c>)
 80102e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80102e8:	4b42      	ldr	r3, [pc, #264]	; (80103f4 <pvPortMalloc+0x18c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102ee:	e004      	b.n	80102fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80102f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	429a      	cmp	r2, r3
 8010302:	d903      	bls.n	801030c <pvPortMalloc+0xa4>
 8010304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1f1      	bne.n	80102f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801030c:	4b36      	ldr	r3, [pc, #216]	; (80103e8 <pvPortMalloc+0x180>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010312:	429a      	cmp	r2, r3
 8010314:	d050      	beq.n	80103b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010316:	6a3b      	ldr	r3, [r7, #32]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2208      	movs	r2, #8
 801031c:	4413      	add	r3, r2
 801031e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	6a3b      	ldr	r3, [r7, #32]
 8010326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	685a      	ldr	r2, [r3, #4]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	1ad2      	subs	r2, r2, r3
 8010330:	2308      	movs	r3, #8
 8010332:	005b      	lsls	r3, r3, #1
 8010334:	429a      	cmp	r2, r3
 8010336:	d91f      	bls.n	8010378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4413      	add	r3, r2
 801033e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	f003 0307 	and.w	r3, r3, #7
 8010346:	2b00      	cmp	r3, #0
 8010348:	d00a      	beq.n	8010360 <pvPortMalloc+0xf8>
	__asm volatile
 801034a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034e:	f383 8811 	msr	BASEPRI, r3
 8010352:	f3bf 8f6f 	isb	sy
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	613b      	str	r3, [r7, #16]
}
 801035c:	bf00      	nop
 801035e:	e7fe      	b.n	801035e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010362:	685a      	ldr	r2, [r3, #4]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	1ad2      	subs	r2, r2, r3
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010372:	69b8      	ldr	r0, [r7, #24]
 8010374:	f000 f908 	bl	8010588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010378:	4b1d      	ldr	r3, [pc, #116]	; (80103f0 <pvPortMalloc+0x188>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	4a1b      	ldr	r2, [pc, #108]	; (80103f0 <pvPortMalloc+0x188>)
 8010384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010386:	4b1a      	ldr	r3, [pc, #104]	; (80103f0 <pvPortMalloc+0x188>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	4b1b      	ldr	r3, [pc, #108]	; (80103f8 <pvPortMalloc+0x190>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	429a      	cmp	r2, r3
 8010390:	d203      	bcs.n	801039a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010392:	4b17      	ldr	r3, [pc, #92]	; (80103f0 <pvPortMalloc+0x188>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4a18      	ldr	r2, [pc, #96]	; (80103f8 <pvPortMalloc+0x190>)
 8010398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039c:	685a      	ldr	r2, [r3, #4]
 801039e:	4b13      	ldr	r3, [pc, #76]	; (80103ec <pvPortMalloc+0x184>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	431a      	orrs	r2, r3
 80103a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	2200      	movs	r2, #0
 80103ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80103ae:	4b13      	ldr	r3, [pc, #76]	; (80103fc <pvPortMalloc+0x194>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3301      	adds	r3, #1
 80103b4:	4a11      	ldr	r2, [pc, #68]	; (80103fc <pvPortMalloc+0x194>)
 80103b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103b8:	f7fe fcfe 	bl	800edb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	f003 0307 	and.w	r3, r3, #7
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <pvPortMalloc+0x174>
	__asm volatile
 80103c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ca:	f383 8811 	msr	BASEPRI, r3
 80103ce:	f3bf 8f6f 	isb	sy
 80103d2:	f3bf 8f4f 	dsb	sy
 80103d6:	60fb      	str	r3, [r7, #12]
}
 80103d8:	bf00      	nop
 80103da:	e7fe      	b.n	80103da <pvPortMalloc+0x172>
	return pvReturn;
 80103dc:	69fb      	ldr	r3, [r7, #28]
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3728      	adds	r7, #40	; 0x28
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	20004fb0 	.word	0x20004fb0
 80103ec:	20004fc4 	.word	0x20004fc4
 80103f0:	20004fb4 	.word	0x20004fb4
 80103f4:	20004fa8 	.word	0x20004fa8
 80103f8:	20004fb8 	.word	0x20004fb8
 80103fc:	20004fbc 	.word	0x20004fbc

08010400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b086      	sub	sp, #24
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d04d      	beq.n	80104ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010412:	2308      	movs	r3, #8
 8010414:	425b      	negs	r3, r3
 8010416:	697a      	ldr	r2, [r7, #20]
 8010418:	4413      	add	r3, r2
 801041a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	4b24      	ldr	r3, [pc, #144]	; (80104b8 <vPortFree+0xb8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4013      	ands	r3, r2
 801042a:	2b00      	cmp	r3, #0
 801042c:	d10a      	bne.n	8010444 <vPortFree+0x44>
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010432:	f383 8811 	msr	BASEPRI, r3
 8010436:	f3bf 8f6f 	isb	sy
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	60fb      	str	r3, [r7, #12]
}
 8010440:	bf00      	nop
 8010442:	e7fe      	b.n	8010442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d00a      	beq.n	8010462 <vPortFree+0x62>
	__asm volatile
 801044c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010450:	f383 8811 	msr	BASEPRI, r3
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	f3bf 8f4f 	dsb	sy
 801045c:	60bb      	str	r3, [r7, #8]
}
 801045e:	bf00      	nop
 8010460:	e7fe      	b.n	8010460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	685a      	ldr	r2, [r3, #4]
 8010466:	4b14      	ldr	r3, [pc, #80]	; (80104b8 <vPortFree+0xb8>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4013      	ands	r3, r2
 801046c:	2b00      	cmp	r3, #0
 801046e:	d01e      	beq.n	80104ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d11a      	bne.n	80104ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <vPortFree+0xb8>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	43db      	mvns	r3, r3
 8010482:	401a      	ands	r2, r3
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010488:	f7fe fc88 	bl	800ed9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	685a      	ldr	r2, [r3, #4]
 8010490:	4b0a      	ldr	r3, [pc, #40]	; (80104bc <vPortFree+0xbc>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4413      	add	r3, r2
 8010496:	4a09      	ldr	r2, [pc, #36]	; (80104bc <vPortFree+0xbc>)
 8010498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801049a:	6938      	ldr	r0, [r7, #16]
 801049c:	f000 f874 	bl	8010588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80104a0:	4b07      	ldr	r3, [pc, #28]	; (80104c0 <vPortFree+0xc0>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3301      	adds	r3, #1
 80104a6:	4a06      	ldr	r2, [pc, #24]	; (80104c0 <vPortFree+0xc0>)
 80104a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80104aa:	f7fe fc85 	bl	800edb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80104ae:	bf00      	nop
 80104b0:	3718      	adds	r7, #24
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20004fc4 	.word	0x20004fc4
 80104bc:	20004fb4 	.word	0x20004fb4
 80104c0:	20004fc0 	.word	0x20004fc0

080104c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104c4:	b480      	push	{r7}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80104ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104d0:	4b27      	ldr	r3, [pc, #156]	; (8010570 <prvHeapInit+0xac>)
 80104d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f003 0307 	and.w	r3, r3, #7
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00c      	beq.n	80104f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3307      	adds	r3, #7
 80104e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f023 0307 	bic.w	r3, r3, #7
 80104ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80104ec:	68ba      	ldr	r2, [r7, #8]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	4a1f      	ldr	r2, [pc, #124]	; (8010570 <prvHeapInit+0xac>)
 80104f4:	4413      	add	r3, r2
 80104f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80104fc:	4a1d      	ldr	r2, [pc, #116]	; (8010574 <prvHeapInit+0xb0>)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010502:	4b1c      	ldr	r3, [pc, #112]	; (8010574 <prvHeapInit+0xb0>)
 8010504:	2200      	movs	r2, #0
 8010506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	4413      	add	r3, r2
 801050e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010510:	2208      	movs	r2, #8
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	1a9b      	subs	r3, r3, r2
 8010516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f023 0307 	bic.w	r3, r3, #7
 801051e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4a15      	ldr	r2, [pc, #84]	; (8010578 <prvHeapInit+0xb4>)
 8010524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010526:	4b14      	ldr	r3, [pc, #80]	; (8010578 <prvHeapInit+0xb4>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2200      	movs	r2, #0
 801052c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801052e:	4b12      	ldr	r3, [pc, #72]	; (8010578 <prvHeapInit+0xb4>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2200      	movs	r2, #0
 8010534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	1ad2      	subs	r2, r2, r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010544:	4b0c      	ldr	r3, [pc, #48]	; (8010578 <prvHeapInit+0xb4>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	4a0a      	ldr	r2, [pc, #40]	; (801057c <prvHeapInit+0xb8>)
 8010552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	4a09      	ldr	r2, [pc, #36]	; (8010580 <prvHeapInit+0xbc>)
 801055a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801055c:	4b09      	ldr	r3, [pc, #36]	; (8010584 <prvHeapInit+0xc0>)
 801055e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010562:	601a      	str	r2, [r3, #0]
}
 8010564:	bf00      	nop
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr
 8010570:	200013a8 	.word	0x200013a8
 8010574:	20004fa8 	.word	0x20004fa8
 8010578:	20004fb0 	.word	0x20004fb0
 801057c:	20004fb8 	.word	0x20004fb8
 8010580:	20004fb4 	.word	0x20004fb4
 8010584:	20004fc4 	.word	0x20004fc4

08010588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010588:	b480      	push	{r7}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010590:	4b28      	ldr	r3, [pc, #160]	; (8010634 <prvInsertBlockIntoFreeList+0xac>)
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	e002      	b.n	801059c <prvInsertBlockIntoFreeList+0x14>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	60fb      	str	r3, [r7, #12]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d8f7      	bhi.n	8010596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	4413      	add	r3, r2
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d108      	bne.n	80105ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	441a      	add	r2, r3
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	441a      	add	r2, r3
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d118      	bne.n	8010610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	4b15      	ldr	r3, [pc, #84]	; (8010638 <prvInsertBlockIntoFreeList+0xb0>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d00d      	beq.n	8010606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	685a      	ldr	r2, [r3, #4]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	441a      	add	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	e008      	b.n	8010618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010606:	4b0c      	ldr	r3, [pc, #48]	; (8010638 <prvInsertBlockIntoFreeList+0xb0>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	601a      	str	r2, [r3, #0]
 801060e:	e003      	b.n	8010618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	429a      	cmp	r2, r3
 801061e:	d002      	beq.n	8010626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010626:	bf00      	nop
 8010628:	3714      	adds	r7, #20
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
 8010634:	20004fa8 	.word	0x20004fa8
 8010638:	20004fb0 	.word	0x20004fb0

0801063c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010640:	2200      	movs	r2, #0
 8010642:	4912      	ldr	r1, [pc, #72]	; (801068c <MX_USB_DEVICE_Init+0x50>)
 8010644:	4812      	ldr	r0, [pc, #72]	; (8010690 <MX_USB_DEVICE_Init+0x54>)
 8010646:	f7fb fd61 	bl	800c10c <USBD_Init>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d001      	beq.n	8010654 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010650:	f7f1 fc06 	bl	8001e60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010654:	490f      	ldr	r1, [pc, #60]	; (8010694 <MX_USB_DEVICE_Init+0x58>)
 8010656:	480e      	ldr	r0, [pc, #56]	; (8010690 <MX_USB_DEVICE_Init+0x54>)
 8010658:	f7fb fd88 	bl	800c16c <USBD_RegisterClass>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010662:	f7f1 fbfd 	bl	8001e60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010666:	490c      	ldr	r1, [pc, #48]	; (8010698 <MX_USB_DEVICE_Init+0x5c>)
 8010668:	4809      	ldr	r0, [pc, #36]	; (8010690 <MX_USB_DEVICE_Init+0x54>)
 801066a:	f7fb fcbf 	bl	800bfec <USBD_CDC_RegisterInterface>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010674:	f7f1 fbf4 	bl	8001e60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010678:	4805      	ldr	r0, [pc, #20]	; (8010690 <MX_USB_DEVICE_Init+0x54>)
 801067a:	f7fb fdad 	bl	800c1d8 <USBD_Start>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d001      	beq.n	8010688 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010684:	f7f1 fbec 	bl	8001e60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010688:	bf00      	nop
 801068a:	bd80      	pop	{r7, pc}
 801068c:	2000013c 	.word	0x2000013c
 8010690:	20004fc8 	.word	0x20004fc8
 8010694:	200000a4 	.word	0x200000a4
 8010698:	20000128 	.word	0x20000128

0801069c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80106a0:	2200      	movs	r2, #0
 80106a2:	4905      	ldr	r1, [pc, #20]	; (80106b8 <CDC_Init_FS+0x1c>)
 80106a4:	4805      	ldr	r0, [pc, #20]	; (80106bc <CDC_Init_FS+0x20>)
 80106a6:	f7fb fcbb 	bl	800c020 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80106aa:	4905      	ldr	r1, [pc, #20]	; (80106c0 <CDC_Init_FS+0x24>)
 80106ac:	4803      	ldr	r0, [pc, #12]	; (80106bc <CDC_Init_FS+0x20>)
 80106ae:	f7fb fcd9 	bl	800c064 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80106b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	20005aa4 	.word	0x20005aa4
 80106bc:	20004fc8 	.word	0x20004fc8
 80106c0:	200052a4 	.word	0x200052a4

080106c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80106c4:	b480      	push	{r7}
 80106c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80106c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	6039      	str	r1, [r7, #0]
 80106de:	71fb      	strb	r3, [r7, #7]
 80106e0:	4613      	mov	r3, r2
 80106e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80106e4:	79fb      	ldrb	r3, [r7, #7]
 80106e6:	2b23      	cmp	r3, #35	; 0x23
 80106e8:	d84a      	bhi.n	8010780 <CDC_Control_FS+0xac>
 80106ea:	a201      	add	r2, pc, #4	; (adr r2, 80106f0 <CDC_Control_FS+0x1c>)
 80106ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f0:	08010781 	.word	0x08010781
 80106f4:	08010781 	.word	0x08010781
 80106f8:	08010781 	.word	0x08010781
 80106fc:	08010781 	.word	0x08010781
 8010700:	08010781 	.word	0x08010781
 8010704:	08010781 	.word	0x08010781
 8010708:	08010781 	.word	0x08010781
 801070c:	08010781 	.word	0x08010781
 8010710:	08010781 	.word	0x08010781
 8010714:	08010781 	.word	0x08010781
 8010718:	08010781 	.word	0x08010781
 801071c:	08010781 	.word	0x08010781
 8010720:	08010781 	.word	0x08010781
 8010724:	08010781 	.word	0x08010781
 8010728:	08010781 	.word	0x08010781
 801072c:	08010781 	.word	0x08010781
 8010730:	08010781 	.word	0x08010781
 8010734:	08010781 	.word	0x08010781
 8010738:	08010781 	.word	0x08010781
 801073c:	08010781 	.word	0x08010781
 8010740:	08010781 	.word	0x08010781
 8010744:	08010781 	.word	0x08010781
 8010748:	08010781 	.word	0x08010781
 801074c:	08010781 	.word	0x08010781
 8010750:	08010781 	.word	0x08010781
 8010754:	08010781 	.word	0x08010781
 8010758:	08010781 	.word	0x08010781
 801075c:	08010781 	.word	0x08010781
 8010760:	08010781 	.word	0x08010781
 8010764:	08010781 	.word	0x08010781
 8010768:	08010781 	.word	0x08010781
 801076c:	08010781 	.word	0x08010781
 8010770:	08010781 	.word	0x08010781
 8010774:	08010781 	.word	0x08010781
 8010778:	08010781 	.word	0x08010781
 801077c:	08010781 	.word	0x08010781
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010780:	bf00      	nop
  }

  return (USBD_OK);
 8010782:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010784:	4618      	mov	r0, r3
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	4805      	ldr	r0, [pc, #20]	; (80107b4 <CDC_Receive_FS+0x24>)
 801079e:	f7fb fc61 	bl	800c064 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80107a2:	4804      	ldr	r0, [pc, #16]	; (80107b4 <CDC_Receive_FS+0x24>)
 80107a4:	f7fb fc7c 	bl	800c0a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80107a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	20004fc8 	.word	0x20004fc8

080107b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b087      	sub	sp, #28
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	4613      	mov	r3, r2
 80107c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80107ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	371c      	adds	r7, #28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr
	...

080107dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	6039      	str	r1, [r7, #0]
 80107e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2212      	movs	r2, #18
 80107ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80107ee:	4b03      	ldr	r3, [pc, #12]	; (80107fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	20000158 	.word	0x20000158

08010800 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	4603      	mov	r3, r0
 8010808:	6039      	str	r1, [r7, #0]
 801080a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	2204      	movs	r2, #4
 8010810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010812:	4b03      	ldr	r3, [pc, #12]	; (8010820 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	2000016c 	.word	0x2000016c

08010824 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	4603      	mov	r3, r0
 801082c:	6039      	str	r1, [r7, #0]
 801082e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010830:	79fb      	ldrb	r3, [r7, #7]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d105      	bne.n	8010842 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010836:	683a      	ldr	r2, [r7, #0]
 8010838:	4907      	ldr	r1, [pc, #28]	; (8010858 <USBD_FS_ProductStrDescriptor+0x34>)
 801083a:	4808      	ldr	r0, [pc, #32]	; (801085c <USBD_FS_ProductStrDescriptor+0x38>)
 801083c:	f7fc fe78 	bl	800d530 <USBD_GetString>
 8010840:	e004      	b.n	801084c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	4904      	ldr	r1, [pc, #16]	; (8010858 <USBD_FS_ProductStrDescriptor+0x34>)
 8010846:	4805      	ldr	r0, [pc, #20]	; (801085c <USBD_FS_ProductStrDescriptor+0x38>)
 8010848:	f7fc fe72 	bl	800d530 <USBD_GetString>
  }
  return USBD_StrDesc;
 801084c:	4b02      	ldr	r3, [pc, #8]	; (8010858 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801084e:	4618      	mov	r0, r3
 8010850:	3708      	adds	r7, #8
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	200062a4 	.word	0x200062a4
 801085c:	08011e4c 	.word	0x08011e4c

08010860 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	6039      	str	r1, [r7, #0]
 801086a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	4904      	ldr	r1, [pc, #16]	; (8010880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010870:	4804      	ldr	r0, [pc, #16]	; (8010884 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010872:	f7fc fe5d 	bl	800d530 <USBD_GetString>
  return USBD_StrDesc;
 8010876:	4b02      	ldr	r3, [pc, #8]	; (8010880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010878:	4618      	mov	r0, r3
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	200062a4 	.word	0x200062a4
 8010884:	08011e64 	.word	0x08011e64

08010888 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	4603      	mov	r3, r0
 8010890:	6039      	str	r1, [r7, #0]
 8010892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	221a      	movs	r2, #26
 8010898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801089a:	f000 f843 	bl	8010924 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801089e:	4b02      	ldr	r3, [pc, #8]	; (80108a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	20000170 	.word	0x20000170

080108ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	4603      	mov	r3, r0
 80108b4:	6039      	str	r1, [r7, #0]
 80108b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80108b8:	79fb      	ldrb	r3, [r7, #7]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d105      	bne.n	80108ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80108be:	683a      	ldr	r2, [r7, #0]
 80108c0:	4907      	ldr	r1, [pc, #28]	; (80108e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80108c2:	4808      	ldr	r0, [pc, #32]	; (80108e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80108c4:	f7fc fe34 	bl	800d530 <USBD_GetString>
 80108c8:	e004      	b.n	80108d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80108ca:	683a      	ldr	r2, [r7, #0]
 80108cc:	4904      	ldr	r1, [pc, #16]	; (80108e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80108ce:	4805      	ldr	r0, [pc, #20]	; (80108e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80108d0:	f7fc fe2e 	bl	800d530 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108d4:	4b02      	ldr	r3, [pc, #8]	; (80108e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	200062a4 	.word	0x200062a4
 80108e4:	08011e78 	.word	0x08011e78

080108e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	6039      	str	r1, [r7, #0]
 80108f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108f4:	79fb      	ldrb	r3, [r7, #7]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d105      	bne.n	8010906 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80108fa:	683a      	ldr	r2, [r7, #0]
 80108fc:	4907      	ldr	r1, [pc, #28]	; (801091c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80108fe:	4808      	ldr	r0, [pc, #32]	; (8010920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010900:	f7fc fe16 	bl	800d530 <USBD_GetString>
 8010904:	e004      	b.n	8010910 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	4904      	ldr	r1, [pc, #16]	; (801091c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801090a:	4805      	ldr	r0, [pc, #20]	; (8010920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801090c:	f7fc fe10 	bl	800d530 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010910:	4b02      	ldr	r3, [pc, #8]	; (801091c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010912:	4618      	mov	r0, r3
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	200062a4 	.word	0x200062a4
 8010920:	08011e84 	.word	0x08011e84

08010924 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801092a:	4b0f      	ldr	r3, [pc, #60]	; (8010968 <Get_SerialNum+0x44>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010930:	4b0e      	ldr	r3, [pc, #56]	; (801096c <Get_SerialNum+0x48>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010936:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <Get_SerialNum+0x4c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801093c:	68fa      	ldr	r2, [r7, #12]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4413      	add	r3, r2
 8010942:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d009      	beq.n	801095e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801094a:	2208      	movs	r2, #8
 801094c:	4909      	ldr	r1, [pc, #36]	; (8010974 <Get_SerialNum+0x50>)
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f000 f814 	bl	801097c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010954:	2204      	movs	r2, #4
 8010956:	4908      	ldr	r1, [pc, #32]	; (8010978 <Get_SerialNum+0x54>)
 8010958:	68b8      	ldr	r0, [r7, #8]
 801095a:	f000 f80f 	bl	801097c <IntToUnicode>
  }
}
 801095e:	bf00      	nop
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	1fff7a10 	.word	0x1fff7a10
 801096c:	1fff7a14 	.word	0x1fff7a14
 8010970:	1fff7a18 	.word	0x1fff7a18
 8010974:	20000172 	.word	0x20000172
 8010978:	20000182 	.word	0x20000182

0801097c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801097c:	b480      	push	{r7}
 801097e:	b087      	sub	sp, #28
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	4613      	mov	r3, r2
 8010988:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801098a:	2300      	movs	r3, #0
 801098c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801098e:	2300      	movs	r3, #0
 8010990:	75fb      	strb	r3, [r7, #23]
 8010992:	e027      	b.n	80109e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	0f1b      	lsrs	r3, r3, #28
 8010998:	2b09      	cmp	r3, #9
 801099a:	d80b      	bhi.n	80109b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	0f1b      	lsrs	r3, r3, #28
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	4619      	mov	r1, r3
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	440b      	add	r3, r1
 80109ac:	3230      	adds	r2, #48	; 0x30
 80109ae:	b2d2      	uxtb	r2, r2
 80109b0:	701a      	strb	r2, [r3, #0]
 80109b2:	e00a      	b.n	80109ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	0f1b      	lsrs	r3, r3, #28
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	7dfb      	ldrb	r3, [r7, #23]
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4619      	mov	r1, r3
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	440b      	add	r3, r1
 80109c4:	3237      	adds	r2, #55	; 0x37
 80109c6:	b2d2      	uxtb	r2, r2
 80109c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	011b      	lsls	r3, r3, #4
 80109ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	3301      	adds	r3, #1
 80109d6:	68ba      	ldr	r2, [r7, #8]
 80109d8:	4413      	add	r3, r2
 80109da:	2200      	movs	r2, #0
 80109dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80109de:	7dfb      	ldrb	r3, [r7, #23]
 80109e0:	3301      	adds	r3, #1
 80109e2:	75fb      	strb	r3, [r7, #23]
 80109e4:	7dfa      	ldrb	r2, [r7, #23]
 80109e6:	79fb      	ldrb	r3, [r7, #7]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d3d3      	bcc.n	8010994 <IntToUnicode+0x18>
  }
}
 80109ec:	bf00      	nop
 80109ee:	bf00      	nop
 80109f0:	371c      	adds	r7, #28
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr
	...

080109fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08a      	sub	sp, #40	; 0x28
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a04:	f107 0314 	add.w	r3, r7, #20
 8010a08:	2200      	movs	r2, #0
 8010a0a:	601a      	str	r2, [r3, #0]
 8010a0c:	605a      	str	r2, [r3, #4]
 8010a0e:	609a      	str	r2, [r3, #8]
 8010a10:	60da      	str	r2, [r3, #12]
 8010a12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a1c:	d13a      	bne.n	8010a94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a1e:	2300      	movs	r3, #0
 8010a20:	613b      	str	r3, [r7, #16]
 8010a22:	4b1e      	ldr	r3, [pc, #120]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a26:	4a1d      	ldr	r2, [pc, #116]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a28:	f043 0301 	orr.w	r3, r3, #1
 8010a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a2e:	4b1b      	ldr	r3, [pc, #108]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a32:	f003 0301 	and.w	r3, r3, #1
 8010a36:	613b      	str	r3, [r7, #16]
 8010a38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010a3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a40:	2302      	movs	r3, #2
 8010a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a44:	2300      	movs	r3, #0
 8010a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a48:	2303      	movs	r3, #3
 8010a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010a4c:	230a      	movs	r3, #10
 8010a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a50:	f107 0314 	add.w	r3, r7, #20
 8010a54:	4619      	mov	r1, r3
 8010a56:	4812      	ldr	r0, [pc, #72]	; (8010aa0 <HAL_PCD_MspInit+0xa4>)
 8010a58:	f7f3 fc90 	bl	800437c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010a5c:	4b0f      	ldr	r3, [pc, #60]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a60:	4a0e      	ldr	r2, [pc, #56]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a66:	6353      	str	r3, [r2, #52]	; 0x34
 8010a68:	2300      	movs	r3, #0
 8010a6a:	60fb      	str	r3, [r7, #12]
 8010a6c:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a70:	4a0a      	ldr	r2, [pc, #40]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010a76:	6453      	str	r3, [r2, #68]	; 0x44
 8010a78:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <HAL_PCD_MspInit+0xa0>)
 8010a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a80:	60fb      	str	r3, [r7, #12]
 8010a82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010a84:	2200      	movs	r2, #0
 8010a86:	2105      	movs	r1, #5
 8010a88:	2043      	movs	r0, #67	; 0x43
 8010a8a:	f7f2 fefd 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010a8e:	2043      	movs	r0, #67	; 0x43
 8010a90:	f7f2 ff26 	bl	80038e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010a94:	bf00      	nop
 8010a96:	3728      	adds	r7, #40	; 0x28
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	40023800 	.word	0x40023800
 8010aa0:	40020000 	.word	0x40020000

08010aa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010ab8:	4619      	mov	r1, r3
 8010aba:	4610      	mov	r0, r2
 8010abc:	f7fb fbd9 	bl	800c272 <USBD_LL_SetupStage>
}
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010ada:	78fa      	ldrb	r2, [r7, #3]
 8010adc:	6879      	ldr	r1, [r7, #4]
 8010ade:	4613      	mov	r3, r2
 8010ae0:	00db      	lsls	r3, r3, #3
 8010ae2:	4413      	add	r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	440b      	add	r3, r1
 8010ae8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	78fb      	ldrb	r3, [r7, #3]
 8010af0:	4619      	mov	r1, r3
 8010af2:	f7fb fc13 	bl	800c31c <USBD_LL_DataOutStage>
}
 8010af6:	bf00      	nop
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b082      	sub	sp, #8
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	460b      	mov	r3, r1
 8010b08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b10:	78fa      	ldrb	r2, [r7, #3]
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	4613      	mov	r3, r2
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	4413      	add	r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	440b      	add	r3, r1
 8010b1e:	334c      	adds	r3, #76	; 0x4c
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	78fb      	ldrb	r3, [r7, #3]
 8010b24:	4619      	mov	r1, r3
 8010b26:	f7fb fcac 	bl	800c482 <USBD_LL_DataInStage>
}
 8010b2a:	bf00      	nop
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b082      	sub	sp, #8
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fb fde0 	bl	800c706 <USBD_LL_SOF>
}
 8010b46:	bf00      	nop
 8010b48:	3708      	adds	r7, #8
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b084      	sub	sp, #16
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010b56:	2301      	movs	r3, #1
 8010b58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d001      	beq.n	8010b66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010b62:	f7f1 f97d 	bl	8001e60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010b6c:	7bfa      	ldrb	r2, [r7, #15]
 8010b6e:	4611      	mov	r1, r2
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fb fd8a 	bl	800c68a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fb fd32 	bl	800c5e6 <USBD_LL_Reset>
}
 8010b82:	bf00      	nop
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
	...

08010b8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fb fd85 	bl	800c6aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	6812      	ldr	r2, [r2, #0]
 8010bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010bb2:	f043 0301 	orr.w	r3, r3, #1
 8010bb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6a1b      	ldr	r3, [r3, #32]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d005      	beq.n	8010bcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010bc0:	4b04      	ldr	r3, [pc, #16]	; (8010bd4 <HAL_PCD_SuspendCallback+0x48>)
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	4a03      	ldr	r2, [pc, #12]	; (8010bd4 <HAL_PCD_SuspendCallback+0x48>)
 8010bc6:	f043 0306 	orr.w	r3, r3, #6
 8010bca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010bcc:	bf00      	nop
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	e000ed00 	.word	0xe000ed00

08010bd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fb fd75 	bl	800c6d6 <USBD_LL_Resume>
}
 8010bec:	bf00      	nop
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c06:	78fa      	ldrb	r2, [r7, #3]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fb fdcd 	bl	800c7aa <USBD_LL_IsoOUTIncomplete>
}
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	460b      	mov	r3, r1
 8010c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c2a:	78fa      	ldrb	r2, [r7, #3]
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fb fd89 	bl	800c746 <USBD_LL_IsoINIncomplete>
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fb fddf 	bl	800c80e <USBD_LL_DevConnected>
}
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fb fddc 	bl	800c824 <USBD_LL_DevDisconnected>
}
 8010c6c:	bf00      	nop
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d13c      	bne.n	8010cfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010c84:	4a20      	ldr	r2, [pc, #128]	; (8010d08 <USBD_LL_Init+0x94>)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	4a1e      	ldr	r2, [pc, #120]	; (8010d08 <USBD_LL_Init+0x94>)
 8010c90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010c94:	4b1c      	ldr	r3, [pc, #112]	; (8010d08 <USBD_LL_Init+0x94>)
 8010c96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010c9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010c9c:	4b1a      	ldr	r3, [pc, #104]	; (8010d08 <USBD_LL_Init+0x94>)
 8010c9e:	2204      	movs	r2, #4
 8010ca0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010ca2:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <USBD_LL_Init+0x94>)
 8010ca4:	2202      	movs	r2, #2
 8010ca6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010ca8:	4b17      	ldr	r3, [pc, #92]	; (8010d08 <USBD_LL_Init+0x94>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010cae:	4b16      	ldr	r3, [pc, #88]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cb0:	2202      	movs	r2, #2
 8010cb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010cb4:	4b14      	ldr	r3, [pc, #80]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010cba:	4b13      	ldr	r3, [pc, #76]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010cc0:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010cc6:	4b10      	ldr	r3, [pc, #64]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cc8:	2200      	movs	r2, #0
 8010cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010ccc:	4b0e      	ldr	r3, [pc, #56]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010cd2:	480d      	ldr	r0, [pc, #52]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cd4:	f7f4 f802 	bl	8004cdc <HAL_PCD_Init>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010cde:	f7f1 f8bf 	bl	8001e60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010ce2:	2180      	movs	r1, #128	; 0x80
 8010ce4:	4808      	ldr	r0, [pc, #32]	; (8010d08 <USBD_LL_Init+0x94>)
 8010ce6:	f7f5 fa64 	bl	80061b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010cea:	2240      	movs	r2, #64	; 0x40
 8010cec:	2100      	movs	r1, #0
 8010cee:	4806      	ldr	r0, [pc, #24]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cf0:	f7f5 fa18 	bl	8006124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010cf4:	2280      	movs	r2, #128	; 0x80
 8010cf6:	2101      	movs	r1, #1
 8010cf8:	4803      	ldr	r0, [pc, #12]	; (8010d08 <USBD_LL_Init+0x94>)
 8010cfa:	f7f5 fa13 	bl	8006124 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	200064a4 	.word	0x200064a4

08010d0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7f4 f902 	bl	8004f2c <HAL_PCD_Start>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f000 f942 	bl	8010fb8 <USBD_Get_USB_Status>
 8010d34:	4603      	mov	r3, r0
 8010d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b084      	sub	sp, #16
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	4608      	mov	r0, r1
 8010d4c:	4611      	mov	r1, r2
 8010d4e:	461a      	mov	r2, r3
 8010d50:	4603      	mov	r3, r0
 8010d52:	70fb      	strb	r3, [r7, #3]
 8010d54:	460b      	mov	r3, r1
 8010d56:	70bb      	strb	r3, [r7, #2]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d60:	2300      	movs	r3, #0
 8010d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d6a:	78bb      	ldrb	r3, [r7, #2]
 8010d6c:	883a      	ldrh	r2, [r7, #0]
 8010d6e:	78f9      	ldrb	r1, [r7, #3]
 8010d70:	f7f4 fdd3 	bl	800591a <HAL_PCD_EP_Open>
 8010d74:	4603      	mov	r3, r0
 8010d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 f91c 	bl	8010fb8 <USBD_Get_USB_Status>
 8010d80:	4603      	mov	r3, r0
 8010d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	460b      	mov	r3, r1
 8010d98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010da8:	78fa      	ldrb	r2, [r7, #3]
 8010daa:	4611      	mov	r1, r2
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f4 fe1c 	bl	80059ea <HAL_PCD_EP_Close>
 8010db2:	4603      	mov	r3, r0
 8010db4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010db6:	7bfb      	ldrb	r3, [r7, #15]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 f8fd 	bl	8010fb8 <USBD_Get_USB_Status>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3710      	adds	r7, #16
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010de6:	78fa      	ldrb	r2, [r7, #3]
 8010de8:	4611      	mov	r1, r2
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7f4 fef4 	bl	8005bd8 <HAL_PCD_EP_SetStall>
 8010df0:	4603      	mov	r3, r0
 8010df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010df4:	7bfb      	ldrb	r3, [r7, #15]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 f8de 	bl	8010fb8 <USBD_Get_USB_Status>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	460b      	mov	r3, r1
 8010e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e16:	2300      	movs	r3, #0
 8010e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e24:	78fa      	ldrb	r2, [r7, #3]
 8010e26:	4611      	mov	r1, r2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7f4 ff39 	bl	8005ca0 <HAL_PCD_EP_ClrStall>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f000 f8bf 	bl	8010fb8 <USBD_Get_USB_Status>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	460b      	mov	r3, r1
 8010e52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	da0b      	bge.n	8010e7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010e64:	78fb      	ldrb	r3, [r7, #3]
 8010e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010e6a:	68f9      	ldr	r1, [r7, #12]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	00db      	lsls	r3, r3, #3
 8010e70:	4413      	add	r3, r2
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	440b      	add	r3, r1
 8010e76:	333e      	adds	r3, #62	; 0x3e
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	e00b      	b.n	8010e94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010e82:	68f9      	ldr	r1, [r7, #12]
 8010e84:	4613      	mov	r3, r2
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	4413      	add	r3, r2
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	440b      	add	r3, r1
 8010e8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010e92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eac:	2300      	movs	r3, #0
 8010eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010eba:	78fa      	ldrb	r2, [r7, #3]
 8010ebc:	4611      	mov	r1, r2
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7f4 fd06 	bl	80058d0 <HAL_PCD_SetAddress>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ec8:	7bfb      	ldrb	r3, [r7, #15]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 f874 	bl	8010fb8 <USBD_Get_USB_Status>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b086      	sub	sp, #24
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	60f8      	str	r0, [r7, #12]
 8010ee6:	607a      	str	r2, [r7, #4]
 8010ee8:	603b      	str	r3, [r7, #0]
 8010eea:	460b      	mov	r3, r1
 8010eec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010efc:	7af9      	ldrb	r1, [r7, #11]
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	f7f4 fe1f 	bl	8005b44 <HAL_PCD_EP_Transmit>
 8010f06:	4603      	mov	r3, r0
 8010f08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f0a:	7dfb      	ldrb	r3, [r7, #23]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 f853 	bl	8010fb8 <USBD_Get_USB_Status>
 8010f12:	4603      	mov	r3, r0
 8010f14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f16:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3718      	adds	r7, #24
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b086      	sub	sp, #24
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	607a      	str	r2, [r7, #4]
 8010f2a:	603b      	str	r3, [r7, #0]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f30:	2300      	movs	r3, #0
 8010f32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f34:	2300      	movs	r3, #0
 8010f36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010f3e:	7af9      	ldrb	r1, [r7, #11]
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	f7f4 fd9b 	bl	8005a7e <HAL_PCD_EP_Receive>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f4c:	7dfb      	ldrb	r3, [r7, #23]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f000 f832 	bl	8010fb8 <USBD_Get_USB_Status>
 8010f54:	4603      	mov	r3, r0
 8010f56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f58:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b082      	sub	sp, #8
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f74:	78fa      	ldrb	r2, [r7, #3]
 8010f76:	4611      	mov	r1, r2
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7f4 fdcb 	bl	8005b14 <HAL_PCD_EP_GetRxCount>
 8010f7e:	4603      	mov	r3, r0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010f90:	4b03      	ldr	r3, [pc, #12]	; (8010fa0 <USBD_static_malloc+0x18>)
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	370c      	adds	r7, #12
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop
 8010fa0:	200069b0 	.word	0x200069b0

08010fa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]

}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010fc6:	79fb      	ldrb	r3, [r7, #7]
 8010fc8:	2b03      	cmp	r3, #3
 8010fca:	d817      	bhi.n	8010ffc <USBD_Get_USB_Status+0x44>
 8010fcc:	a201      	add	r2, pc, #4	; (adr r2, 8010fd4 <USBD_Get_USB_Status+0x1c>)
 8010fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd2:	bf00      	nop
 8010fd4:	08010fe5 	.word	0x08010fe5
 8010fd8:	08010feb 	.word	0x08010feb
 8010fdc:	08010ff1 	.word	0x08010ff1
 8010fe0:	08010ff7 	.word	0x08010ff7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8010fe8:	e00b      	b.n	8011002 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010fea:	2303      	movs	r3, #3
 8010fec:	73fb      	strb	r3, [r7, #15]
    break;
 8010fee:	e008      	b.n	8011002 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff4:	e005      	b.n	8011002 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010ff6:	2303      	movs	r3, #3
 8010ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8010ffa:	e002      	b.n	8011002 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010ffc:	2303      	movs	r3, #3
 8010ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8011000:	bf00      	nop
  }
  return usb_status;
 8011002:	7bfb      	ldrb	r3, [r7, #15]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <__errno>:
 8011010:	4b01      	ldr	r3, [pc, #4]	; (8011018 <__errno+0x8>)
 8011012:	6818      	ldr	r0, [r3, #0]
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop
 8011018:	2000018c 	.word	0x2000018c

0801101c <__libc_init_array>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	4d0d      	ldr	r5, [pc, #52]	; (8011054 <__libc_init_array+0x38>)
 8011020:	4c0d      	ldr	r4, [pc, #52]	; (8011058 <__libc_init_array+0x3c>)
 8011022:	1b64      	subs	r4, r4, r5
 8011024:	10a4      	asrs	r4, r4, #2
 8011026:	2600      	movs	r6, #0
 8011028:	42a6      	cmp	r6, r4
 801102a:	d109      	bne.n	8011040 <__libc_init_array+0x24>
 801102c:	4d0b      	ldr	r5, [pc, #44]	; (801105c <__libc_init_array+0x40>)
 801102e:	4c0c      	ldr	r4, [pc, #48]	; (8011060 <__libc_init_array+0x44>)
 8011030:	f000 fd08 	bl	8011a44 <_init>
 8011034:	1b64      	subs	r4, r4, r5
 8011036:	10a4      	asrs	r4, r4, #2
 8011038:	2600      	movs	r6, #0
 801103a:	42a6      	cmp	r6, r4
 801103c:	d105      	bne.n	801104a <__libc_init_array+0x2e>
 801103e:	bd70      	pop	{r4, r5, r6, pc}
 8011040:	f855 3b04 	ldr.w	r3, [r5], #4
 8011044:	4798      	blx	r3
 8011046:	3601      	adds	r6, #1
 8011048:	e7ee      	b.n	8011028 <__libc_init_array+0xc>
 801104a:	f855 3b04 	ldr.w	r3, [r5], #4
 801104e:	4798      	blx	r3
 8011050:	3601      	adds	r6, #1
 8011052:	e7f2      	b.n	801103a <__libc_init_array+0x1e>
 8011054:	0801410c 	.word	0x0801410c
 8011058:	0801410c 	.word	0x0801410c
 801105c:	0801410c 	.word	0x0801410c
 8011060:	08014110 	.word	0x08014110

08011064 <__retarget_lock_acquire_recursive>:
 8011064:	4770      	bx	lr

08011066 <__retarget_lock_release_recursive>:
 8011066:	4770      	bx	lr

08011068 <malloc>:
 8011068:	4b02      	ldr	r3, [pc, #8]	; (8011074 <malloc+0xc>)
 801106a:	4601      	mov	r1, r0
 801106c:	6818      	ldr	r0, [r3, #0]
 801106e:	f000 b88d 	b.w	801118c <_malloc_r>
 8011072:	bf00      	nop
 8011074:	2000018c 	.word	0x2000018c

08011078 <free>:
 8011078:	4b02      	ldr	r3, [pc, #8]	; (8011084 <free+0xc>)
 801107a:	4601      	mov	r1, r0
 801107c:	6818      	ldr	r0, [r3, #0]
 801107e:	f000 b819 	b.w	80110b4 <_free_r>
 8011082:	bf00      	nop
 8011084:	2000018c 	.word	0x2000018c

08011088 <memcpy>:
 8011088:	440a      	add	r2, r1
 801108a:	4291      	cmp	r1, r2
 801108c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011090:	d100      	bne.n	8011094 <memcpy+0xc>
 8011092:	4770      	bx	lr
 8011094:	b510      	push	{r4, lr}
 8011096:	f811 4b01 	ldrb.w	r4, [r1], #1
 801109a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801109e:	4291      	cmp	r1, r2
 80110a0:	d1f9      	bne.n	8011096 <memcpy+0xe>
 80110a2:	bd10      	pop	{r4, pc}

080110a4 <memset>:
 80110a4:	4402      	add	r2, r0
 80110a6:	4603      	mov	r3, r0
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d100      	bne.n	80110ae <memset+0xa>
 80110ac:	4770      	bx	lr
 80110ae:	f803 1b01 	strb.w	r1, [r3], #1
 80110b2:	e7f9      	b.n	80110a8 <memset+0x4>

080110b4 <_free_r>:
 80110b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110b6:	2900      	cmp	r1, #0
 80110b8:	d044      	beq.n	8011144 <_free_r+0x90>
 80110ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110be:	9001      	str	r0, [sp, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f1a1 0404 	sub.w	r4, r1, #4
 80110c6:	bfb8      	it	lt
 80110c8:	18e4      	addlt	r4, r4, r3
 80110ca:	f000 f96d 	bl	80113a8 <__malloc_lock>
 80110ce:	4a1e      	ldr	r2, [pc, #120]	; (8011148 <_free_r+0x94>)
 80110d0:	9801      	ldr	r0, [sp, #4]
 80110d2:	6813      	ldr	r3, [r2, #0]
 80110d4:	b933      	cbnz	r3, 80110e4 <_free_r+0x30>
 80110d6:	6063      	str	r3, [r4, #4]
 80110d8:	6014      	str	r4, [r2, #0]
 80110da:	b003      	add	sp, #12
 80110dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110e0:	f000 b968 	b.w	80113b4 <__malloc_unlock>
 80110e4:	42a3      	cmp	r3, r4
 80110e6:	d908      	bls.n	80110fa <_free_r+0x46>
 80110e8:	6825      	ldr	r5, [r4, #0]
 80110ea:	1961      	adds	r1, r4, r5
 80110ec:	428b      	cmp	r3, r1
 80110ee:	bf01      	itttt	eq
 80110f0:	6819      	ldreq	r1, [r3, #0]
 80110f2:	685b      	ldreq	r3, [r3, #4]
 80110f4:	1949      	addeq	r1, r1, r5
 80110f6:	6021      	streq	r1, [r4, #0]
 80110f8:	e7ed      	b.n	80110d6 <_free_r+0x22>
 80110fa:	461a      	mov	r2, r3
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	b10b      	cbz	r3, 8011104 <_free_r+0x50>
 8011100:	42a3      	cmp	r3, r4
 8011102:	d9fa      	bls.n	80110fa <_free_r+0x46>
 8011104:	6811      	ldr	r1, [r2, #0]
 8011106:	1855      	adds	r5, r2, r1
 8011108:	42a5      	cmp	r5, r4
 801110a:	d10b      	bne.n	8011124 <_free_r+0x70>
 801110c:	6824      	ldr	r4, [r4, #0]
 801110e:	4421      	add	r1, r4
 8011110:	1854      	adds	r4, r2, r1
 8011112:	42a3      	cmp	r3, r4
 8011114:	6011      	str	r1, [r2, #0]
 8011116:	d1e0      	bne.n	80110da <_free_r+0x26>
 8011118:	681c      	ldr	r4, [r3, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	6053      	str	r3, [r2, #4]
 801111e:	4421      	add	r1, r4
 8011120:	6011      	str	r1, [r2, #0]
 8011122:	e7da      	b.n	80110da <_free_r+0x26>
 8011124:	d902      	bls.n	801112c <_free_r+0x78>
 8011126:	230c      	movs	r3, #12
 8011128:	6003      	str	r3, [r0, #0]
 801112a:	e7d6      	b.n	80110da <_free_r+0x26>
 801112c:	6825      	ldr	r5, [r4, #0]
 801112e:	1961      	adds	r1, r4, r5
 8011130:	428b      	cmp	r3, r1
 8011132:	bf04      	itt	eq
 8011134:	6819      	ldreq	r1, [r3, #0]
 8011136:	685b      	ldreq	r3, [r3, #4]
 8011138:	6063      	str	r3, [r4, #4]
 801113a:	bf04      	itt	eq
 801113c:	1949      	addeq	r1, r1, r5
 801113e:	6021      	streq	r1, [r4, #0]
 8011140:	6054      	str	r4, [r2, #4]
 8011142:	e7ca      	b.n	80110da <_free_r+0x26>
 8011144:	b003      	add	sp, #12
 8011146:	bd30      	pop	{r4, r5, pc}
 8011148:	20006bd4 	.word	0x20006bd4

0801114c <sbrk_aligned>:
 801114c:	b570      	push	{r4, r5, r6, lr}
 801114e:	4e0e      	ldr	r6, [pc, #56]	; (8011188 <sbrk_aligned+0x3c>)
 8011150:	460c      	mov	r4, r1
 8011152:	6831      	ldr	r1, [r6, #0]
 8011154:	4605      	mov	r5, r0
 8011156:	b911      	cbnz	r1, 801115e <sbrk_aligned+0x12>
 8011158:	f000 f8f6 	bl	8011348 <_sbrk_r>
 801115c:	6030      	str	r0, [r6, #0]
 801115e:	4621      	mov	r1, r4
 8011160:	4628      	mov	r0, r5
 8011162:	f000 f8f1 	bl	8011348 <_sbrk_r>
 8011166:	1c43      	adds	r3, r0, #1
 8011168:	d00a      	beq.n	8011180 <sbrk_aligned+0x34>
 801116a:	1cc4      	adds	r4, r0, #3
 801116c:	f024 0403 	bic.w	r4, r4, #3
 8011170:	42a0      	cmp	r0, r4
 8011172:	d007      	beq.n	8011184 <sbrk_aligned+0x38>
 8011174:	1a21      	subs	r1, r4, r0
 8011176:	4628      	mov	r0, r5
 8011178:	f000 f8e6 	bl	8011348 <_sbrk_r>
 801117c:	3001      	adds	r0, #1
 801117e:	d101      	bne.n	8011184 <sbrk_aligned+0x38>
 8011180:	f04f 34ff 	mov.w	r4, #4294967295
 8011184:	4620      	mov	r0, r4
 8011186:	bd70      	pop	{r4, r5, r6, pc}
 8011188:	20006bd8 	.word	0x20006bd8

0801118c <_malloc_r>:
 801118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011190:	1ccd      	adds	r5, r1, #3
 8011192:	f025 0503 	bic.w	r5, r5, #3
 8011196:	3508      	adds	r5, #8
 8011198:	2d0c      	cmp	r5, #12
 801119a:	bf38      	it	cc
 801119c:	250c      	movcc	r5, #12
 801119e:	2d00      	cmp	r5, #0
 80111a0:	4607      	mov	r7, r0
 80111a2:	db01      	blt.n	80111a8 <_malloc_r+0x1c>
 80111a4:	42a9      	cmp	r1, r5
 80111a6:	d905      	bls.n	80111b4 <_malloc_r+0x28>
 80111a8:	230c      	movs	r3, #12
 80111aa:	603b      	str	r3, [r7, #0]
 80111ac:	2600      	movs	r6, #0
 80111ae:	4630      	mov	r0, r6
 80111b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111b4:	4e2e      	ldr	r6, [pc, #184]	; (8011270 <_malloc_r+0xe4>)
 80111b6:	f000 f8f7 	bl	80113a8 <__malloc_lock>
 80111ba:	6833      	ldr	r3, [r6, #0]
 80111bc:	461c      	mov	r4, r3
 80111be:	bb34      	cbnz	r4, 801120e <_malloc_r+0x82>
 80111c0:	4629      	mov	r1, r5
 80111c2:	4638      	mov	r0, r7
 80111c4:	f7ff ffc2 	bl	801114c <sbrk_aligned>
 80111c8:	1c43      	adds	r3, r0, #1
 80111ca:	4604      	mov	r4, r0
 80111cc:	d14d      	bne.n	801126a <_malloc_r+0xde>
 80111ce:	6834      	ldr	r4, [r6, #0]
 80111d0:	4626      	mov	r6, r4
 80111d2:	2e00      	cmp	r6, #0
 80111d4:	d140      	bne.n	8011258 <_malloc_r+0xcc>
 80111d6:	6823      	ldr	r3, [r4, #0]
 80111d8:	4631      	mov	r1, r6
 80111da:	4638      	mov	r0, r7
 80111dc:	eb04 0803 	add.w	r8, r4, r3
 80111e0:	f000 f8b2 	bl	8011348 <_sbrk_r>
 80111e4:	4580      	cmp	r8, r0
 80111e6:	d13a      	bne.n	801125e <_malloc_r+0xd2>
 80111e8:	6821      	ldr	r1, [r4, #0]
 80111ea:	3503      	adds	r5, #3
 80111ec:	1a6d      	subs	r5, r5, r1
 80111ee:	f025 0503 	bic.w	r5, r5, #3
 80111f2:	3508      	adds	r5, #8
 80111f4:	2d0c      	cmp	r5, #12
 80111f6:	bf38      	it	cc
 80111f8:	250c      	movcc	r5, #12
 80111fa:	4629      	mov	r1, r5
 80111fc:	4638      	mov	r0, r7
 80111fe:	f7ff ffa5 	bl	801114c <sbrk_aligned>
 8011202:	3001      	adds	r0, #1
 8011204:	d02b      	beq.n	801125e <_malloc_r+0xd2>
 8011206:	6823      	ldr	r3, [r4, #0]
 8011208:	442b      	add	r3, r5
 801120a:	6023      	str	r3, [r4, #0]
 801120c:	e00e      	b.n	801122c <_malloc_r+0xa0>
 801120e:	6822      	ldr	r2, [r4, #0]
 8011210:	1b52      	subs	r2, r2, r5
 8011212:	d41e      	bmi.n	8011252 <_malloc_r+0xc6>
 8011214:	2a0b      	cmp	r2, #11
 8011216:	d916      	bls.n	8011246 <_malloc_r+0xba>
 8011218:	1961      	adds	r1, r4, r5
 801121a:	42a3      	cmp	r3, r4
 801121c:	6025      	str	r5, [r4, #0]
 801121e:	bf18      	it	ne
 8011220:	6059      	strne	r1, [r3, #4]
 8011222:	6863      	ldr	r3, [r4, #4]
 8011224:	bf08      	it	eq
 8011226:	6031      	streq	r1, [r6, #0]
 8011228:	5162      	str	r2, [r4, r5]
 801122a:	604b      	str	r3, [r1, #4]
 801122c:	4638      	mov	r0, r7
 801122e:	f104 060b 	add.w	r6, r4, #11
 8011232:	f000 f8bf 	bl	80113b4 <__malloc_unlock>
 8011236:	f026 0607 	bic.w	r6, r6, #7
 801123a:	1d23      	adds	r3, r4, #4
 801123c:	1af2      	subs	r2, r6, r3
 801123e:	d0b6      	beq.n	80111ae <_malloc_r+0x22>
 8011240:	1b9b      	subs	r3, r3, r6
 8011242:	50a3      	str	r3, [r4, r2]
 8011244:	e7b3      	b.n	80111ae <_malloc_r+0x22>
 8011246:	6862      	ldr	r2, [r4, #4]
 8011248:	42a3      	cmp	r3, r4
 801124a:	bf0c      	ite	eq
 801124c:	6032      	streq	r2, [r6, #0]
 801124e:	605a      	strne	r2, [r3, #4]
 8011250:	e7ec      	b.n	801122c <_malloc_r+0xa0>
 8011252:	4623      	mov	r3, r4
 8011254:	6864      	ldr	r4, [r4, #4]
 8011256:	e7b2      	b.n	80111be <_malloc_r+0x32>
 8011258:	4634      	mov	r4, r6
 801125a:	6876      	ldr	r6, [r6, #4]
 801125c:	e7b9      	b.n	80111d2 <_malloc_r+0x46>
 801125e:	230c      	movs	r3, #12
 8011260:	603b      	str	r3, [r7, #0]
 8011262:	4638      	mov	r0, r7
 8011264:	f000 f8a6 	bl	80113b4 <__malloc_unlock>
 8011268:	e7a1      	b.n	80111ae <_malloc_r+0x22>
 801126a:	6025      	str	r5, [r4, #0]
 801126c:	e7de      	b.n	801122c <_malloc_r+0xa0>
 801126e:	bf00      	nop
 8011270:	20006bd4 	.word	0x20006bd4

08011274 <cleanup_glue>:
 8011274:	b538      	push	{r3, r4, r5, lr}
 8011276:	460c      	mov	r4, r1
 8011278:	6809      	ldr	r1, [r1, #0]
 801127a:	4605      	mov	r5, r0
 801127c:	b109      	cbz	r1, 8011282 <cleanup_glue+0xe>
 801127e:	f7ff fff9 	bl	8011274 <cleanup_glue>
 8011282:	4621      	mov	r1, r4
 8011284:	4628      	mov	r0, r5
 8011286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801128a:	f7ff bf13 	b.w	80110b4 <_free_r>
	...

08011290 <_reclaim_reent>:
 8011290:	4b2c      	ldr	r3, [pc, #176]	; (8011344 <_reclaim_reent+0xb4>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4283      	cmp	r3, r0
 8011296:	b570      	push	{r4, r5, r6, lr}
 8011298:	4604      	mov	r4, r0
 801129a:	d051      	beq.n	8011340 <_reclaim_reent+0xb0>
 801129c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801129e:	b143      	cbz	r3, 80112b2 <_reclaim_reent+0x22>
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d14a      	bne.n	801133c <_reclaim_reent+0xac>
 80112a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112a8:	6819      	ldr	r1, [r3, #0]
 80112aa:	b111      	cbz	r1, 80112b2 <_reclaim_reent+0x22>
 80112ac:	4620      	mov	r0, r4
 80112ae:	f7ff ff01 	bl	80110b4 <_free_r>
 80112b2:	6961      	ldr	r1, [r4, #20]
 80112b4:	b111      	cbz	r1, 80112bc <_reclaim_reent+0x2c>
 80112b6:	4620      	mov	r0, r4
 80112b8:	f7ff fefc 	bl	80110b4 <_free_r>
 80112bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80112be:	b111      	cbz	r1, 80112c6 <_reclaim_reent+0x36>
 80112c0:	4620      	mov	r0, r4
 80112c2:	f7ff fef7 	bl	80110b4 <_free_r>
 80112c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80112c8:	b111      	cbz	r1, 80112d0 <_reclaim_reent+0x40>
 80112ca:	4620      	mov	r0, r4
 80112cc:	f7ff fef2 	bl	80110b4 <_free_r>
 80112d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80112d2:	b111      	cbz	r1, 80112da <_reclaim_reent+0x4a>
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7ff feed 	bl	80110b4 <_free_r>
 80112da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80112dc:	b111      	cbz	r1, 80112e4 <_reclaim_reent+0x54>
 80112de:	4620      	mov	r0, r4
 80112e0:	f7ff fee8 	bl	80110b4 <_free_r>
 80112e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80112e6:	b111      	cbz	r1, 80112ee <_reclaim_reent+0x5e>
 80112e8:	4620      	mov	r0, r4
 80112ea:	f7ff fee3 	bl	80110b4 <_free_r>
 80112ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80112f0:	b111      	cbz	r1, 80112f8 <_reclaim_reent+0x68>
 80112f2:	4620      	mov	r0, r4
 80112f4:	f7ff fede 	bl	80110b4 <_free_r>
 80112f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112fa:	b111      	cbz	r1, 8011302 <_reclaim_reent+0x72>
 80112fc:	4620      	mov	r0, r4
 80112fe:	f7ff fed9 	bl	80110b4 <_free_r>
 8011302:	69a3      	ldr	r3, [r4, #24]
 8011304:	b1e3      	cbz	r3, 8011340 <_reclaim_reent+0xb0>
 8011306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011308:	4620      	mov	r0, r4
 801130a:	4798      	blx	r3
 801130c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801130e:	b1b9      	cbz	r1, 8011340 <_reclaim_reent+0xb0>
 8011310:	4620      	mov	r0, r4
 8011312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011316:	f7ff bfad 	b.w	8011274 <cleanup_glue>
 801131a:	5949      	ldr	r1, [r1, r5]
 801131c:	b941      	cbnz	r1, 8011330 <_reclaim_reent+0xa0>
 801131e:	3504      	adds	r5, #4
 8011320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011322:	2d80      	cmp	r5, #128	; 0x80
 8011324:	68d9      	ldr	r1, [r3, #12]
 8011326:	d1f8      	bne.n	801131a <_reclaim_reent+0x8a>
 8011328:	4620      	mov	r0, r4
 801132a:	f7ff fec3 	bl	80110b4 <_free_r>
 801132e:	e7ba      	b.n	80112a6 <_reclaim_reent+0x16>
 8011330:	680e      	ldr	r6, [r1, #0]
 8011332:	4620      	mov	r0, r4
 8011334:	f7ff febe 	bl	80110b4 <_free_r>
 8011338:	4631      	mov	r1, r6
 801133a:	e7ef      	b.n	801131c <_reclaim_reent+0x8c>
 801133c:	2500      	movs	r5, #0
 801133e:	e7ef      	b.n	8011320 <_reclaim_reent+0x90>
 8011340:	bd70      	pop	{r4, r5, r6, pc}
 8011342:	bf00      	nop
 8011344:	2000018c 	.word	0x2000018c

08011348 <_sbrk_r>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4d06      	ldr	r5, [pc, #24]	; (8011364 <_sbrk_r+0x1c>)
 801134c:	2300      	movs	r3, #0
 801134e:	4604      	mov	r4, r0
 8011350:	4608      	mov	r0, r1
 8011352:	602b      	str	r3, [r5, #0]
 8011354:	f7f1 faa0 	bl	8002898 <_sbrk>
 8011358:	1c43      	adds	r3, r0, #1
 801135a:	d102      	bne.n	8011362 <_sbrk_r+0x1a>
 801135c:	682b      	ldr	r3, [r5, #0]
 801135e:	b103      	cbz	r3, 8011362 <_sbrk_r+0x1a>
 8011360:	6023      	str	r3, [r4, #0]
 8011362:	bd38      	pop	{r3, r4, r5, pc}
 8011364:	20006bdc 	.word	0x20006bdc

08011368 <siprintf>:
 8011368:	b40e      	push	{r1, r2, r3}
 801136a:	b500      	push	{lr}
 801136c:	b09c      	sub	sp, #112	; 0x70
 801136e:	ab1d      	add	r3, sp, #116	; 0x74
 8011370:	9002      	str	r0, [sp, #8]
 8011372:	9006      	str	r0, [sp, #24]
 8011374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011378:	4809      	ldr	r0, [pc, #36]	; (80113a0 <siprintf+0x38>)
 801137a:	9107      	str	r1, [sp, #28]
 801137c:	9104      	str	r1, [sp, #16]
 801137e:	4909      	ldr	r1, [pc, #36]	; (80113a4 <siprintf+0x3c>)
 8011380:	f853 2b04 	ldr.w	r2, [r3], #4
 8011384:	9105      	str	r1, [sp, #20]
 8011386:	6800      	ldr	r0, [r0, #0]
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	a902      	add	r1, sp, #8
 801138c:	f000 f874 	bl	8011478 <_svfiprintf_r>
 8011390:	9b02      	ldr	r3, [sp, #8]
 8011392:	2200      	movs	r2, #0
 8011394:	701a      	strb	r2, [r3, #0]
 8011396:	b01c      	add	sp, #112	; 0x70
 8011398:	f85d eb04 	ldr.w	lr, [sp], #4
 801139c:	b003      	add	sp, #12
 801139e:	4770      	bx	lr
 80113a0:	2000018c 	.word	0x2000018c
 80113a4:	ffff0208 	.word	0xffff0208

080113a8 <__malloc_lock>:
 80113a8:	4801      	ldr	r0, [pc, #4]	; (80113b0 <__malloc_lock+0x8>)
 80113aa:	f7ff be5b 	b.w	8011064 <__retarget_lock_acquire_recursive>
 80113ae:	bf00      	nop
 80113b0:	20006bd0 	.word	0x20006bd0

080113b4 <__malloc_unlock>:
 80113b4:	4801      	ldr	r0, [pc, #4]	; (80113bc <__malloc_unlock+0x8>)
 80113b6:	f7ff be56 	b.w	8011066 <__retarget_lock_release_recursive>
 80113ba:	bf00      	nop
 80113bc:	20006bd0 	.word	0x20006bd0

080113c0 <__ssputs_r>:
 80113c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c4:	688e      	ldr	r6, [r1, #8]
 80113c6:	429e      	cmp	r6, r3
 80113c8:	4682      	mov	sl, r0
 80113ca:	460c      	mov	r4, r1
 80113cc:	4690      	mov	r8, r2
 80113ce:	461f      	mov	r7, r3
 80113d0:	d838      	bhi.n	8011444 <__ssputs_r+0x84>
 80113d2:	898a      	ldrh	r2, [r1, #12]
 80113d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80113d8:	d032      	beq.n	8011440 <__ssputs_r+0x80>
 80113da:	6825      	ldr	r5, [r4, #0]
 80113dc:	6909      	ldr	r1, [r1, #16]
 80113de:	eba5 0901 	sub.w	r9, r5, r1
 80113e2:	6965      	ldr	r5, [r4, #20]
 80113e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113ec:	3301      	adds	r3, #1
 80113ee:	444b      	add	r3, r9
 80113f0:	106d      	asrs	r5, r5, #1
 80113f2:	429d      	cmp	r5, r3
 80113f4:	bf38      	it	cc
 80113f6:	461d      	movcc	r5, r3
 80113f8:	0553      	lsls	r3, r2, #21
 80113fa:	d531      	bpl.n	8011460 <__ssputs_r+0xa0>
 80113fc:	4629      	mov	r1, r5
 80113fe:	f7ff fec5 	bl	801118c <_malloc_r>
 8011402:	4606      	mov	r6, r0
 8011404:	b950      	cbnz	r0, 801141c <__ssputs_r+0x5c>
 8011406:	230c      	movs	r3, #12
 8011408:	f8ca 3000 	str.w	r3, [sl]
 801140c:	89a3      	ldrh	r3, [r4, #12]
 801140e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011412:	81a3      	strh	r3, [r4, #12]
 8011414:	f04f 30ff 	mov.w	r0, #4294967295
 8011418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801141c:	6921      	ldr	r1, [r4, #16]
 801141e:	464a      	mov	r2, r9
 8011420:	f7ff fe32 	bl	8011088 <memcpy>
 8011424:	89a3      	ldrh	r3, [r4, #12]
 8011426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801142a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801142e:	81a3      	strh	r3, [r4, #12]
 8011430:	6126      	str	r6, [r4, #16]
 8011432:	6165      	str	r5, [r4, #20]
 8011434:	444e      	add	r6, r9
 8011436:	eba5 0509 	sub.w	r5, r5, r9
 801143a:	6026      	str	r6, [r4, #0]
 801143c:	60a5      	str	r5, [r4, #8]
 801143e:	463e      	mov	r6, r7
 8011440:	42be      	cmp	r6, r7
 8011442:	d900      	bls.n	8011446 <__ssputs_r+0x86>
 8011444:	463e      	mov	r6, r7
 8011446:	6820      	ldr	r0, [r4, #0]
 8011448:	4632      	mov	r2, r6
 801144a:	4641      	mov	r1, r8
 801144c:	f000 faa8 	bl	80119a0 <memmove>
 8011450:	68a3      	ldr	r3, [r4, #8]
 8011452:	1b9b      	subs	r3, r3, r6
 8011454:	60a3      	str	r3, [r4, #8]
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	4433      	add	r3, r6
 801145a:	6023      	str	r3, [r4, #0]
 801145c:	2000      	movs	r0, #0
 801145e:	e7db      	b.n	8011418 <__ssputs_r+0x58>
 8011460:	462a      	mov	r2, r5
 8011462:	f000 fab7 	bl	80119d4 <_realloc_r>
 8011466:	4606      	mov	r6, r0
 8011468:	2800      	cmp	r0, #0
 801146a:	d1e1      	bne.n	8011430 <__ssputs_r+0x70>
 801146c:	6921      	ldr	r1, [r4, #16]
 801146e:	4650      	mov	r0, sl
 8011470:	f7ff fe20 	bl	80110b4 <_free_r>
 8011474:	e7c7      	b.n	8011406 <__ssputs_r+0x46>
	...

08011478 <_svfiprintf_r>:
 8011478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147c:	4698      	mov	r8, r3
 801147e:	898b      	ldrh	r3, [r1, #12]
 8011480:	061b      	lsls	r3, r3, #24
 8011482:	b09d      	sub	sp, #116	; 0x74
 8011484:	4607      	mov	r7, r0
 8011486:	460d      	mov	r5, r1
 8011488:	4614      	mov	r4, r2
 801148a:	d50e      	bpl.n	80114aa <_svfiprintf_r+0x32>
 801148c:	690b      	ldr	r3, [r1, #16]
 801148e:	b963      	cbnz	r3, 80114aa <_svfiprintf_r+0x32>
 8011490:	2140      	movs	r1, #64	; 0x40
 8011492:	f7ff fe7b 	bl	801118c <_malloc_r>
 8011496:	6028      	str	r0, [r5, #0]
 8011498:	6128      	str	r0, [r5, #16]
 801149a:	b920      	cbnz	r0, 80114a6 <_svfiprintf_r+0x2e>
 801149c:	230c      	movs	r3, #12
 801149e:	603b      	str	r3, [r7, #0]
 80114a0:	f04f 30ff 	mov.w	r0, #4294967295
 80114a4:	e0d1      	b.n	801164a <_svfiprintf_r+0x1d2>
 80114a6:	2340      	movs	r3, #64	; 0x40
 80114a8:	616b      	str	r3, [r5, #20]
 80114aa:	2300      	movs	r3, #0
 80114ac:	9309      	str	r3, [sp, #36]	; 0x24
 80114ae:	2320      	movs	r3, #32
 80114b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80114b8:	2330      	movs	r3, #48	; 0x30
 80114ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011664 <_svfiprintf_r+0x1ec>
 80114be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114c2:	f04f 0901 	mov.w	r9, #1
 80114c6:	4623      	mov	r3, r4
 80114c8:	469a      	mov	sl, r3
 80114ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114ce:	b10a      	cbz	r2, 80114d4 <_svfiprintf_r+0x5c>
 80114d0:	2a25      	cmp	r2, #37	; 0x25
 80114d2:	d1f9      	bne.n	80114c8 <_svfiprintf_r+0x50>
 80114d4:	ebba 0b04 	subs.w	fp, sl, r4
 80114d8:	d00b      	beq.n	80114f2 <_svfiprintf_r+0x7a>
 80114da:	465b      	mov	r3, fp
 80114dc:	4622      	mov	r2, r4
 80114de:	4629      	mov	r1, r5
 80114e0:	4638      	mov	r0, r7
 80114e2:	f7ff ff6d 	bl	80113c0 <__ssputs_r>
 80114e6:	3001      	adds	r0, #1
 80114e8:	f000 80aa 	beq.w	8011640 <_svfiprintf_r+0x1c8>
 80114ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114ee:	445a      	add	r2, fp
 80114f0:	9209      	str	r2, [sp, #36]	; 0x24
 80114f2:	f89a 3000 	ldrb.w	r3, [sl]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f000 80a2 	beq.w	8011640 <_svfiprintf_r+0x1c8>
 80114fc:	2300      	movs	r3, #0
 80114fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011506:	f10a 0a01 	add.w	sl, sl, #1
 801150a:	9304      	str	r3, [sp, #16]
 801150c:	9307      	str	r3, [sp, #28]
 801150e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011512:	931a      	str	r3, [sp, #104]	; 0x68
 8011514:	4654      	mov	r4, sl
 8011516:	2205      	movs	r2, #5
 8011518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801151c:	4851      	ldr	r0, [pc, #324]	; (8011664 <_svfiprintf_r+0x1ec>)
 801151e:	f7ee fe5f 	bl	80001e0 <memchr>
 8011522:	9a04      	ldr	r2, [sp, #16]
 8011524:	b9d8      	cbnz	r0, 801155e <_svfiprintf_r+0xe6>
 8011526:	06d0      	lsls	r0, r2, #27
 8011528:	bf44      	itt	mi
 801152a:	2320      	movmi	r3, #32
 801152c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011530:	0711      	lsls	r1, r2, #28
 8011532:	bf44      	itt	mi
 8011534:	232b      	movmi	r3, #43	; 0x2b
 8011536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801153a:	f89a 3000 	ldrb.w	r3, [sl]
 801153e:	2b2a      	cmp	r3, #42	; 0x2a
 8011540:	d015      	beq.n	801156e <_svfiprintf_r+0xf6>
 8011542:	9a07      	ldr	r2, [sp, #28]
 8011544:	4654      	mov	r4, sl
 8011546:	2000      	movs	r0, #0
 8011548:	f04f 0c0a 	mov.w	ip, #10
 801154c:	4621      	mov	r1, r4
 801154e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011552:	3b30      	subs	r3, #48	; 0x30
 8011554:	2b09      	cmp	r3, #9
 8011556:	d94e      	bls.n	80115f6 <_svfiprintf_r+0x17e>
 8011558:	b1b0      	cbz	r0, 8011588 <_svfiprintf_r+0x110>
 801155a:	9207      	str	r2, [sp, #28]
 801155c:	e014      	b.n	8011588 <_svfiprintf_r+0x110>
 801155e:	eba0 0308 	sub.w	r3, r0, r8
 8011562:	fa09 f303 	lsl.w	r3, r9, r3
 8011566:	4313      	orrs	r3, r2
 8011568:	9304      	str	r3, [sp, #16]
 801156a:	46a2      	mov	sl, r4
 801156c:	e7d2      	b.n	8011514 <_svfiprintf_r+0x9c>
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	1d19      	adds	r1, r3, #4
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	9103      	str	r1, [sp, #12]
 8011576:	2b00      	cmp	r3, #0
 8011578:	bfbb      	ittet	lt
 801157a:	425b      	neglt	r3, r3
 801157c:	f042 0202 	orrlt.w	r2, r2, #2
 8011580:	9307      	strge	r3, [sp, #28]
 8011582:	9307      	strlt	r3, [sp, #28]
 8011584:	bfb8      	it	lt
 8011586:	9204      	strlt	r2, [sp, #16]
 8011588:	7823      	ldrb	r3, [r4, #0]
 801158a:	2b2e      	cmp	r3, #46	; 0x2e
 801158c:	d10c      	bne.n	80115a8 <_svfiprintf_r+0x130>
 801158e:	7863      	ldrb	r3, [r4, #1]
 8011590:	2b2a      	cmp	r3, #42	; 0x2a
 8011592:	d135      	bne.n	8011600 <_svfiprintf_r+0x188>
 8011594:	9b03      	ldr	r3, [sp, #12]
 8011596:	1d1a      	adds	r2, r3, #4
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	9203      	str	r2, [sp, #12]
 801159c:	2b00      	cmp	r3, #0
 801159e:	bfb8      	it	lt
 80115a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80115a4:	3402      	adds	r4, #2
 80115a6:	9305      	str	r3, [sp, #20]
 80115a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011674 <_svfiprintf_r+0x1fc>
 80115ac:	7821      	ldrb	r1, [r4, #0]
 80115ae:	2203      	movs	r2, #3
 80115b0:	4650      	mov	r0, sl
 80115b2:	f7ee fe15 	bl	80001e0 <memchr>
 80115b6:	b140      	cbz	r0, 80115ca <_svfiprintf_r+0x152>
 80115b8:	2340      	movs	r3, #64	; 0x40
 80115ba:	eba0 000a 	sub.w	r0, r0, sl
 80115be:	fa03 f000 	lsl.w	r0, r3, r0
 80115c2:	9b04      	ldr	r3, [sp, #16]
 80115c4:	4303      	orrs	r3, r0
 80115c6:	3401      	adds	r4, #1
 80115c8:	9304      	str	r3, [sp, #16]
 80115ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115ce:	4826      	ldr	r0, [pc, #152]	; (8011668 <_svfiprintf_r+0x1f0>)
 80115d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115d4:	2206      	movs	r2, #6
 80115d6:	f7ee fe03 	bl	80001e0 <memchr>
 80115da:	2800      	cmp	r0, #0
 80115dc:	d038      	beq.n	8011650 <_svfiprintf_r+0x1d8>
 80115de:	4b23      	ldr	r3, [pc, #140]	; (801166c <_svfiprintf_r+0x1f4>)
 80115e0:	bb1b      	cbnz	r3, 801162a <_svfiprintf_r+0x1b2>
 80115e2:	9b03      	ldr	r3, [sp, #12]
 80115e4:	3307      	adds	r3, #7
 80115e6:	f023 0307 	bic.w	r3, r3, #7
 80115ea:	3308      	adds	r3, #8
 80115ec:	9303      	str	r3, [sp, #12]
 80115ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115f0:	4433      	add	r3, r6
 80115f2:	9309      	str	r3, [sp, #36]	; 0x24
 80115f4:	e767      	b.n	80114c6 <_svfiprintf_r+0x4e>
 80115f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80115fa:	460c      	mov	r4, r1
 80115fc:	2001      	movs	r0, #1
 80115fe:	e7a5      	b.n	801154c <_svfiprintf_r+0xd4>
 8011600:	2300      	movs	r3, #0
 8011602:	3401      	adds	r4, #1
 8011604:	9305      	str	r3, [sp, #20]
 8011606:	4619      	mov	r1, r3
 8011608:	f04f 0c0a 	mov.w	ip, #10
 801160c:	4620      	mov	r0, r4
 801160e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011612:	3a30      	subs	r2, #48	; 0x30
 8011614:	2a09      	cmp	r2, #9
 8011616:	d903      	bls.n	8011620 <_svfiprintf_r+0x1a8>
 8011618:	2b00      	cmp	r3, #0
 801161a:	d0c5      	beq.n	80115a8 <_svfiprintf_r+0x130>
 801161c:	9105      	str	r1, [sp, #20]
 801161e:	e7c3      	b.n	80115a8 <_svfiprintf_r+0x130>
 8011620:	fb0c 2101 	mla	r1, ip, r1, r2
 8011624:	4604      	mov	r4, r0
 8011626:	2301      	movs	r3, #1
 8011628:	e7f0      	b.n	801160c <_svfiprintf_r+0x194>
 801162a:	ab03      	add	r3, sp, #12
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	462a      	mov	r2, r5
 8011630:	4b0f      	ldr	r3, [pc, #60]	; (8011670 <_svfiprintf_r+0x1f8>)
 8011632:	a904      	add	r1, sp, #16
 8011634:	4638      	mov	r0, r7
 8011636:	f3af 8000 	nop.w
 801163a:	1c42      	adds	r2, r0, #1
 801163c:	4606      	mov	r6, r0
 801163e:	d1d6      	bne.n	80115ee <_svfiprintf_r+0x176>
 8011640:	89ab      	ldrh	r3, [r5, #12]
 8011642:	065b      	lsls	r3, r3, #25
 8011644:	f53f af2c 	bmi.w	80114a0 <_svfiprintf_r+0x28>
 8011648:	9809      	ldr	r0, [sp, #36]	; 0x24
 801164a:	b01d      	add	sp, #116	; 0x74
 801164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011650:	ab03      	add	r3, sp, #12
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	462a      	mov	r2, r5
 8011656:	4b06      	ldr	r3, [pc, #24]	; (8011670 <_svfiprintf_r+0x1f8>)
 8011658:	a904      	add	r1, sp, #16
 801165a:	4638      	mov	r0, r7
 801165c:	f000 f87a 	bl	8011754 <_printf_i>
 8011660:	e7eb      	b.n	801163a <_svfiprintf_r+0x1c2>
 8011662:	bf00      	nop
 8011664:	080140d0 	.word	0x080140d0
 8011668:	080140da 	.word	0x080140da
 801166c:	00000000 	.word	0x00000000
 8011670:	080113c1 	.word	0x080113c1
 8011674:	080140d6 	.word	0x080140d6

08011678 <_printf_common>:
 8011678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801167c:	4616      	mov	r6, r2
 801167e:	4699      	mov	r9, r3
 8011680:	688a      	ldr	r2, [r1, #8]
 8011682:	690b      	ldr	r3, [r1, #16]
 8011684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011688:	4293      	cmp	r3, r2
 801168a:	bfb8      	it	lt
 801168c:	4613      	movlt	r3, r2
 801168e:	6033      	str	r3, [r6, #0]
 8011690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011694:	4607      	mov	r7, r0
 8011696:	460c      	mov	r4, r1
 8011698:	b10a      	cbz	r2, 801169e <_printf_common+0x26>
 801169a:	3301      	adds	r3, #1
 801169c:	6033      	str	r3, [r6, #0]
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	0699      	lsls	r1, r3, #26
 80116a2:	bf42      	ittt	mi
 80116a4:	6833      	ldrmi	r3, [r6, #0]
 80116a6:	3302      	addmi	r3, #2
 80116a8:	6033      	strmi	r3, [r6, #0]
 80116aa:	6825      	ldr	r5, [r4, #0]
 80116ac:	f015 0506 	ands.w	r5, r5, #6
 80116b0:	d106      	bne.n	80116c0 <_printf_common+0x48>
 80116b2:	f104 0a19 	add.w	sl, r4, #25
 80116b6:	68e3      	ldr	r3, [r4, #12]
 80116b8:	6832      	ldr	r2, [r6, #0]
 80116ba:	1a9b      	subs	r3, r3, r2
 80116bc:	42ab      	cmp	r3, r5
 80116be:	dc26      	bgt.n	801170e <_printf_common+0x96>
 80116c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80116c4:	1e13      	subs	r3, r2, #0
 80116c6:	6822      	ldr	r2, [r4, #0]
 80116c8:	bf18      	it	ne
 80116ca:	2301      	movne	r3, #1
 80116cc:	0692      	lsls	r2, r2, #26
 80116ce:	d42b      	bmi.n	8011728 <_printf_common+0xb0>
 80116d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80116d4:	4649      	mov	r1, r9
 80116d6:	4638      	mov	r0, r7
 80116d8:	47c0      	blx	r8
 80116da:	3001      	adds	r0, #1
 80116dc:	d01e      	beq.n	801171c <_printf_common+0xa4>
 80116de:	6823      	ldr	r3, [r4, #0]
 80116e0:	68e5      	ldr	r5, [r4, #12]
 80116e2:	6832      	ldr	r2, [r6, #0]
 80116e4:	f003 0306 	and.w	r3, r3, #6
 80116e8:	2b04      	cmp	r3, #4
 80116ea:	bf08      	it	eq
 80116ec:	1aad      	subeq	r5, r5, r2
 80116ee:	68a3      	ldr	r3, [r4, #8]
 80116f0:	6922      	ldr	r2, [r4, #16]
 80116f2:	bf0c      	ite	eq
 80116f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116f8:	2500      	movne	r5, #0
 80116fa:	4293      	cmp	r3, r2
 80116fc:	bfc4      	itt	gt
 80116fe:	1a9b      	subgt	r3, r3, r2
 8011700:	18ed      	addgt	r5, r5, r3
 8011702:	2600      	movs	r6, #0
 8011704:	341a      	adds	r4, #26
 8011706:	42b5      	cmp	r5, r6
 8011708:	d11a      	bne.n	8011740 <_printf_common+0xc8>
 801170a:	2000      	movs	r0, #0
 801170c:	e008      	b.n	8011720 <_printf_common+0xa8>
 801170e:	2301      	movs	r3, #1
 8011710:	4652      	mov	r2, sl
 8011712:	4649      	mov	r1, r9
 8011714:	4638      	mov	r0, r7
 8011716:	47c0      	blx	r8
 8011718:	3001      	adds	r0, #1
 801171a:	d103      	bne.n	8011724 <_printf_common+0xac>
 801171c:	f04f 30ff 	mov.w	r0, #4294967295
 8011720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011724:	3501      	adds	r5, #1
 8011726:	e7c6      	b.n	80116b6 <_printf_common+0x3e>
 8011728:	18e1      	adds	r1, r4, r3
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	2030      	movs	r0, #48	; 0x30
 801172e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011732:	4422      	add	r2, r4
 8011734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801173c:	3302      	adds	r3, #2
 801173e:	e7c7      	b.n	80116d0 <_printf_common+0x58>
 8011740:	2301      	movs	r3, #1
 8011742:	4622      	mov	r2, r4
 8011744:	4649      	mov	r1, r9
 8011746:	4638      	mov	r0, r7
 8011748:	47c0      	blx	r8
 801174a:	3001      	adds	r0, #1
 801174c:	d0e6      	beq.n	801171c <_printf_common+0xa4>
 801174e:	3601      	adds	r6, #1
 8011750:	e7d9      	b.n	8011706 <_printf_common+0x8e>
	...

08011754 <_printf_i>:
 8011754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011758:	7e0f      	ldrb	r7, [r1, #24]
 801175a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801175c:	2f78      	cmp	r7, #120	; 0x78
 801175e:	4691      	mov	r9, r2
 8011760:	4680      	mov	r8, r0
 8011762:	460c      	mov	r4, r1
 8011764:	469a      	mov	sl, r3
 8011766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801176a:	d807      	bhi.n	801177c <_printf_i+0x28>
 801176c:	2f62      	cmp	r7, #98	; 0x62
 801176e:	d80a      	bhi.n	8011786 <_printf_i+0x32>
 8011770:	2f00      	cmp	r7, #0
 8011772:	f000 80d8 	beq.w	8011926 <_printf_i+0x1d2>
 8011776:	2f58      	cmp	r7, #88	; 0x58
 8011778:	f000 80a3 	beq.w	80118c2 <_printf_i+0x16e>
 801177c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011784:	e03a      	b.n	80117fc <_printf_i+0xa8>
 8011786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801178a:	2b15      	cmp	r3, #21
 801178c:	d8f6      	bhi.n	801177c <_printf_i+0x28>
 801178e:	a101      	add	r1, pc, #4	; (adr r1, 8011794 <_printf_i+0x40>)
 8011790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011794:	080117ed 	.word	0x080117ed
 8011798:	08011801 	.word	0x08011801
 801179c:	0801177d 	.word	0x0801177d
 80117a0:	0801177d 	.word	0x0801177d
 80117a4:	0801177d 	.word	0x0801177d
 80117a8:	0801177d 	.word	0x0801177d
 80117ac:	08011801 	.word	0x08011801
 80117b0:	0801177d 	.word	0x0801177d
 80117b4:	0801177d 	.word	0x0801177d
 80117b8:	0801177d 	.word	0x0801177d
 80117bc:	0801177d 	.word	0x0801177d
 80117c0:	0801190d 	.word	0x0801190d
 80117c4:	08011831 	.word	0x08011831
 80117c8:	080118ef 	.word	0x080118ef
 80117cc:	0801177d 	.word	0x0801177d
 80117d0:	0801177d 	.word	0x0801177d
 80117d4:	0801192f 	.word	0x0801192f
 80117d8:	0801177d 	.word	0x0801177d
 80117dc:	08011831 	.word	0x08011831
 80117e0:	0801177d 	.word	0x0801177d
 80117e4:	0801177d 	.word	0x0801177d
 80117e8:	080118f7 	.word	0x080118f7
 80117ec:	682b      	ldr	r3, [r5, #0]
 80117ee:	1d1a      	adds	r2, r3, #4
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	602a      	str	r2, [r5, #0]
 80117f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117fc:	2301      	movs	r3, #1
 80117fe:	e0a3      	b.n	8011948 <_printf_i+0x1f4>
 8011800:	6820      	ldr	r0, [r4, #0]
 8011802:	6829      	ldr	r1, [r5, #0]
 8011804:	0606      	lsls	r6, r0, #24
 8011806:	f101 0304 	add.w	r3, r1, #4
 801180a:	d50a      	bpl.n	8011822 <_printf_i+0xce>
 801180c:	680e      	ldr	r6, [r1, #0]
 801180e:	602b      	str	r3, [r5, #0]
 8011810:	2e00      	cmp	r6, #0
 8011812:	da03      	bge.n	801181c <_printf_i+0xc8>
 8011814:	232d      	movs	r3, #45	; 0x2d
 8011816:	4276      	negs	r6, r6
 8011818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801181c:	485e      	ldr	r0, [pc, #376]	; (8011998 <_printf_i+0x244>)
 801181e:	230a      	movs	r3, #10
 8011820:	e019      	b.n	8011856 <_printf_i+0x102>
 8011822:	680e      	ldr	r6, [r1, #0]
 8011824:	602b      	str	r3, [r5, #0]
 8011826:	f010 0f40 	tst.w	r0, #64	; 0x40
 801182a:	bf18      	it	ne
 801182c:	b236      	sxthne	r6, r6
 801182e:	e7ef      	b.n	8011810 <_printf_i+0xbc>
 8011830:	682b      	ldr	r3, [r5, #0]
 8011832:	6820      	ldr	r0, [r4, #0]
 8011834:	1d19      	adds	r1, r3, #4
 8011836:	6029      	str	r1, [r5, #0]
 8011838:	0601      	lsls	r1, r0, #24
 801183a:	d501      	bpl.n	8011840 <_printf_i+0xec>
 801183c:	681e      	ldr	r6, [r3, #0]
 801183e:	e002      	b.n	8011846 <_printf_i+0xf2>
 8011840:	0646      	lsls	r6, r0, #25
 8011842:	d5fb      	bpl.n	801183c <_printf_i+0xe8>
 8011844:	881e      	ldrh	r6, [r3, #0]
 8011846:	4854      	ldr	r0, [pc, #336]	; (8011998 <_printf_i+0x244>)
 8011848:	2f6f      	cmp	r7, #111	; 0x6f
 801184a:	bf0c      	ite	eq
 801184c:	2308      	moveq	r3, #8
 801184e:	230a      	movne	r3, #10
 8011850:	2100      	movs	r1, #0
 8011852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011856:	6865      	ldr	r5, [r4, #4]
 8011858:	60a5      	str	r5, [r4, #8]
 801185a:	2d00      	cmp	r5, #0
 801185c:	bfa2      	ittt	ge
 801185e:	6821      	ldrge	r1, [r4, #0]
 8011860:	f021 0104 	bicge.w	r1, r1, #4
 8011864:	6021      	strge	r1, [r4, #0]
 8011866:	b90e      	cbnz	r6, 801186c <_printf_i+0x118>
 8011868:	2d00      	cmp	r5, #0
 801186a:	d04d      	beq.n	8011908 <_printf_i+0x1b4>
 801186c:	4615      	mov	r5, r2
 801186e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011872:	fb03 6711 	mls	r7, r3, r1, r6
 8011876:	5dc7      	ldrb	r7, [r0, r7]
 8011878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801187c:	4637      	mov	r7, r6
 801187e:	42bb      	cmp	r3, r7
 8011880:	460e      	mov	r6, r1
 8011882:	d9f4      	bls.n	801186e <_printf_i+0x11a>
 8011884:	2b08      	cmp	r3, #8
 8011886:	d10b      	bne.n	80118a0 <_printf_i+0x14c>
 8011888:	6823      	ldr	r3, [r4, #0]
 801188a:	07de      	lsls	r6, r3, #31
 801188c:	d508      	bpl.n	80118a0 <_printf_i+0x14c>
 801188e:	6923      	ldr	r3, [r4, #16]
 8011890:	6861      	ldr	r1, [r4, #4]
 8011892:	4299      	cmp	r1, r3
 8011894:	bfde      	ittt	le
 8011896:	2330      	movle	r3, #48	; 0x30
 8011898:	f805 3c01 	strble.w	r3, [r5, #-1]
 801189c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80118a0:	1b52      	subs	r2, r2, r5
 80118a2:	6122      	str	r2, [r4, #16]
 80118a4:	f8cd a000 	str.w	sl, [sp]
 80118a8:	464b      	mov	r3, r9
 80118aa:	aa03      	add	r2, sp, #12
 80118ac:	4621      	mov	r1, r4
 80118ae:	4640      	mov	r0, r8
 80118b0:	f7ff fee2 	bl	8011678 <_printf_common>
 80118b4:	3001      	adds	r0, #1
 80118b6:	d14c      	bne.n	8011952 <_printf_i+0x1fe>
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295
 80118bc:	b004      	add	sp, #16
 80118be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c2:	4835      	ldr	r0, [pc, #212]	; (8011998 <_printf_i+0x244>)
 80118c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80118c8:	6829      	ldr	r1, [r5, #0]
 80118ca:	6823      	ldr	r3, [r4, #0]
 80118cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80118d0:	6029      	str	r1, [r5, #0]
 80118d2:	061d      	lsls	r5, r3, #24
 80118d4:	d514      	bpl.n	8011900 <_printf_i+0x1ac>
 80118d6:	07df      	lsls	r7, r3, #31
 80118d8:	bf44      	itt	mi
 80118da:	f043 0320 	orrmi.w	r3, r3, #32
 80118de:	6023      	strmi	r3, [r4, #0]
 80118e0:	b91e      	cbnz	r6, 80118ea <_printf_i+0x196>
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	f023 0320 	bic.w	r3, r3, #32
 80118e8:	6023      	str	r3, [r4, #0]
 80118ea:	2310      	movs	r3, #16
 80118ec:	e7b0      	b.n	8011850 <_printf_i+0xfc>
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	f043 0320 	orr.w	r3, r3, #32
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	2378      	movs	r3, #120	; 0x78
 80118f8:	4828      	ldr	r0, [pc, #160]	; (801199c <_printf_i+0x248>)
 80118fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80118fe:	e7e3      	b.n	80118c8 <_printf_i+0x174>
 8011900:	0659      	lsls	r1, r3, #25
 8011902:	bf48      	it	mi
 8011904:	b2b6      	uxthmi	r6, r6
 8011906:	e7e6      	b.n	80118d6 <_printf_i+0x182>
 8011908:	4615      	mov	r5, r2
 801190a:	e7bb      	b.n	8011884 <_printf_i+0x130>
 801190c:	682b      	ldr	r3, [r5, #0]
 801190e:	6826      	ldr	r6, [r4, #0]
 8011910:	6961      	ldr	r1, [r4, #20]
 8011912:	1d18      	adds	r0, r3, #4
 8011914:	6028      	str	r0, [r5, #0]
 8011916:	0635      	lsls	r5, r6, #24
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	d501      	bpl.n	8011920 <_printf_i+0x1cc>
 801191c:	6019      	str	r1, [r3, #0]
 801191e:	e002      	b.n	8011926 <_printf_i+0x1d2>
 8011920:	0670      	lsls	r0, r6, #25
 8011922:	d5fb      	bpl.n	801191c <_printf_i+0x1c8>
 8011924:	8019      	strh	r1, [r3, #0]
 8011926:	2300      	movs	r3, #0
 8011928:	6123      	str	r3, [r4, #16]
 801192a:	4615      	mov	r5, r2
 801192c:	e7ba      	b.n	80118a4 <_printf_i+0x150>
 801192e:	682b      	ldr	r3, [r5, #0]
 8011930:	1d1a      	adds	r2, r3, #4
 8011932:	602a      	str	r2, [r5, #0]
 8011934:	681d      	ldr	r5, [r3, #0]
 8011936:	6862      	ldr	r2, [r4, #4]
 8011938:	2100      	movs	r1, #0
 801193a:	4628      	mov	r0, r5
 801193c:	f7ee fc50 	bl	80001e0 <memchr>
 8011940:	b108      	cbz	r0, 8011946 <_printf_i+0x1f2>
 8011942:	1b40      	subs	r0, r0, r5
 8011944:	6060      	str	r0, [r4, #4]
 8011946:	6863      	ldr	r3, [r4, #4]
 8011948:	6123      	str	r3, [r4, #16]
 801194a:	2300      	movs	r3, #0
 801194c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011950:	e7a8      	b.n	80118a4 <_printf_i+0x150>
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	462a      	mov	r2, r5
 8011956:	4649      	mov	r1, r9
 8011958:	4640      	mov	r0, r8
 801195a:	47d0      	blx	sl
 801195c:	3001      	adds	r0, #1
 801195e:	d0ab      	beq.n	80118b8 <_printf_i+0x164>
 8011960:	6823      	ldr	r3, [r4, #0]
 8011962:	079b      	lsls	r3, r3, #30
 8011964:	d413      	bmi.n	801198e <_printf_i+0x23a>
 8011966:	68e0      	ldr	r0, [r4, #12]
 8011968:	9b03      	ldr	r3, [sp, #12]
 801196a:	4298      	cmp	r0, r3
 801196c:	bfb8      	it	lt
 801196e:	4618      	movlt	r0, r3
 8011970:	e7a4      	b.n	80118bc <_printf_i+0x168>
 8011972:	2301      	movs	r3, #1
 8011974:	4632      	mov	r2, r6
 8011976:	4649      	mov	r1, r9
 8011978:	4640      	mov	r0, r8
 801197a:	47d0      	blx	sl
 801197c:	3001      	adds	r0, #1
 801197e:	d09b      	beq.n	80118b8 <_printf_i+0x164>
 8011980:	3501      	adds	r5, #1
 8011982:	68e3      	ldr	r3, [r4, #12]
 8011984:	9903      	ldr	r1, [sp, #12]
 8011986:	1a5b      	subs	r3, r3, r1
 8011988:	42ab      	cmp	r3, r5
 801198a:	dcf2      	bgt.n	8011972 <_printf_i+0x21e>
 801198c:	e7eb      	b.n	8011966 <_printf_i+0x212>
 801198e:	2500      	movs	r5, #0
 8011990:	f104 0619 	add.w	r6, r4, #25
 8011994:	e7f5      	b.n	8011982 <_printf_i+0x22e>
 8011996:	bf00      	nop
 8011998:	080140e1 	.word	0x080140e1
 801199c:	080140f2 	.word	0x080140f2

080119a0 <memmove>:
 80119a0:	4288      	cmp	r0, r1
 80119a2:	b510      	push	{r4, lr}
 80119a4:	eb01 0402 	add.w	r4, r1, r2
 80119a8:	d902      	bls.n	80119b0 <memmove+0x10>
 80119aa:	4284      	cmp	r4, r0
 80119ac:	4623      	mov	r3, r4
 80119ae:	d807      	bhi.n	80119c0 <memmove+0x20>
 80119b0:	1e43      	subs	r3, r0, #1
 80119b2:	42a1      	cmp	r1, r4
 80119b4:	d008      	beq.n	80119c8 <memmove+0x28>
 80119b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119be:	e7f8      	b.n	80119b2 <memmove+0x12>
 80119c0:	4402      	add	r2, r0
 80119c2:	4601      	mov	r1, r0
 80119c4:	428a      	cmp	r2, r1
 80119c6:	d100      	bne.n	80119ca <memmove+0x2a>
 80119c8:	bd10      	pop	{r4, pc}
 80119ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119d2:	e7f7      	b.n	80119c4 <memmove+0x24>

080119d4 <_realloc_r>:
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	4680      	mov	r8, r0
 80119da:	4614      	mov	r4, r2
 80119dc:	460e      	mov	r6, r1
 80119de:	b921      	cbnz	r1, 80119ea <_realloc_r+0x16>
 80119e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119e4:	4611      	mov	r1, r2
 80119e6:	f7ff bbd1 	b.w	801118c <_malloc_r>
 80119ea:	b92a      	cbnz	r2, 80119f8 <_realloc_r+0x24>
 80119ec:	f7ff fb62 	bl	80110b4 <_free_r>
 80119f0:	4625      	mov	r5, r4
 80119f2:	4628      	mov	r0, r5
 80119f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f8:	f000 f81b 	bl	8011a32 <_malloc_usable_size_r>
 80119fc:	4284      	cmp	r4, r0
 80119fe:	4607      	mov	r7, r0
 8011a00:	d802      	bhi.n	8011a08 <_realloc_r+0x34>
 8011a02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a06:	d812      	bhi.n	8011a2e <_realloc_r+0x5a>
 8011a08:	4621      	mov	r1, r4
 8011a0a:	4640      	mov	r0, r8
 8011a0c:	f7ff fbbe 	bl	801118c <_malloc_r>
 8011a10:	4605      	mov	r5, r0
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d0ed      	beq.n	80119f2 <_realloc_r+0x1e>
 8011a16:	42bc      	cmp	r4, r7
 8011a18:	4622      	mov	r2, r4
 8011a1a:	4631      	mov	r1, r6
 8011a1c:	bf28      	it	cs
 8011a1e:	463a      	movcs	r2, r7
 8011a20:	f7ff fb32 	bl	8011088 <memcpy>
 8011a24:	4631      	mov	r1, r6
 8011a26:	4640      	mov	r0, r8
 8011a28:	f7ff fb44 	bl	80110b4 <_free_r>
 8011a2c:	e7e1      	b.n	80119f2 <_realloc_r+0x1e>
 8011a2e:	4635      	mov	r5, r6
 8011a30:	e7df      	b.n	80119f2 <_realloc_r+0x1e>

08011a32 <_malloc_usable_size_r>:
 8011a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a36:	1f18      	subs	r0, r3, #4
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	bfbc      	itt	lt
 8011a3c:	580b      	ldrlt	r3, [r1, r0]
 8011a3e:	18c0      	addlt	r0, r0, r3
 8011a40:	4770      	bx	lr
	...

08011a44 <_init>:
 8011a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a46:	bf00      	nop
 8011a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a4a:	bc08      	pop	{r3}
 8011a4c:	469e      	mov	lr, r3
 8011a4e:	4770      	bx	lr

08011a50 <_fini>:
 8011a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a52:	bf00      	nop
 8011a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a56:	bc08      	pop	{r3}
 8011a58:	469e      	mov	lr, r3
 8011a5a:	4770      	bx	lr

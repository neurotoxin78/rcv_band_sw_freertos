
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a30  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e70  08009e70  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e78  08009e78  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  2000008c  08009f0c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  08009f0c  00024c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2e9  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041d0  00000000  00000000  0003d3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00041578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00042dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d33  00000000  00000000  00044450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8ae  00000000  00000000  0005e183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8cc  00000000  00000000  0007aa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001152fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  00115350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007428 	.word	0x08007428

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08007428 	.word	0x08007428

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CRC_Init+0x20>)
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <MX_CRC_Init+0x24>)
 800058c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CRC_Init+0x20>)
 8000590:	f001 f986 	bl	80018a0 <HAL_CRC_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800059a:	f000 faaf 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000a8 	.word	0x200000a8
 80005a8:	40023000 	.word	0x40023000

080005ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <HAL_CRC_MspInit+0x3c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d10d      	bne.n	80005da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_CRC_MspInit+0x40>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_CRC_MspInit+0x40>)
 80005c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_CRC_MspInit+0x40>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023000 	.word	0x40023000
 80005ec:	40023800 	.word	0x40023800

080005f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <MX_FREERTOS_Init+0x48>)
 80005f6:	2102      	movs	r1, #2
 80005f8:	2010      	movs	r0, #16
 80005fa:	f003 fb8a 	bl	8003d12 <osMessageQueueNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <MX_FREERTOS_Init+0x4c>)
 8000602:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <MX_FREERTOS_Init+0x50>)
 8000606:	2100      	movs	r1, #0
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <MX_FREERTOS_Init+0x54>)
 800060a:	f003 fad5 	bl	8003bb8 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <MX_FREERTOS_Init+0x58>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <MX_FREERTOS_Init+0x5c>)
 8000616:	2100      	movs	r1, #0
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_FREERTOS_Init+0x60>)
 800061a:	f003 facd 	bl	8003bb8 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <MX_FREERTOS_Init+0x64>)
 8000622:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <MX_FREERTOS_Init+0x68>)
 8000626:	2100      	movs	r1, #0
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <MX_FREERTOS_Init+0x6c>)
 800062a:	f003 fac5 	bl	8003bb8 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <MX_FREERTOS_Init+0x70>)
 8000632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08009d34 	.word	0x08009d34
 800063c:	200000c0 	.word	0x200000c0
 8000640:	08009cc8 	.word	0x08009cc8
 8000644:	08000665 	.word	0x08000665
 8000648:	200000b4 	.word	0x200000b4
 800064c:	08009cec 	.word	0x08009cec
 8000650:	08000675 	.word	0x08000675
 8000654:	200000b8 	.word	0x200000b8
 8000658:	08009d10 	.word	0x08009d10
 800065c:	080006dd 	.word	0x080006dd
 8000660:	200000bc 	.word	0x200000bc

08000664 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f003 fb35 	bl	8003cdc <osDelay>
 8000672:	e7fb      	b.n	800066c <StartDefaultTask+0x8>

08000674 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af04      	add	r7, sp, #16
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  uint16_t result = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	83fb      	strh	r3, [r7, #30]
  int16_t counter = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	83bb      	strh	r3, [r7, #28]
  char buff[16];
  for(;;)
  {
	  result = osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <StartDisplayTask+0x5c>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 011c 	add.w	r1, r7, #28
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	f003 fc12 	bl	8003eb8 <osMessageQueueGet>
 8000694:	4603      	mov	r3, r0
 8000696:	83fb      	strh	r3, [r7, #30]
	  snprintf(buff, sizeof(buff), "%02d", counter);
 8000698:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800069c:	f107 000c 	add.w	r0, r7, #12
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <StartDisplayTask+0x60>)
 80006a2:	2110      	movs	r1, #16
 80006a4:	f006 fb3e 	bl	8006d24 <sniprintf>
	  ST7735_WriteString(0, 60, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <StartDisplayTask+0x64>)
 80006aa:	f107 010c 	add.w	r1, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	9202      	str	r2, [sp, #8]
 80006b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	9200      	str	r2, [sp, #0]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	460a      	mov	r2, r1
 80006c0:	213c      	movs	r1, #60	; 0x3c
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fc15 	bl	8000ef2 <ST7735_WriteString>
    osDelay(100);
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	f003 fb07 	bl	8003cdc <osDelay>
  {
 80006ce:	e7d9      	b.n	8000684 <StartDisplayTask+0x10>
 80006d0:	200000c0 	.word	0x200000c0
 80006d4:	08007474 	.word	0x08007474
 80006d8:	20000000 	.word	0x20000000

080006dc <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af04      	add	r7, sp, #16
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  char buff[16];
  int16_t counter = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	817b      	strh	r3, [r7, #10]
  for(;;)
  {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <StartEncoderTask+0xa8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ee:	61fb      	str	r3, [r7, #28]
		currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	0fda      	lsrs	r2, r3, #31
 80006f8:	4413      	add	r3, r2
 80006fa:	105b      	asrs	r3, r3, #1
 80006fc:	425b      	negs	r3, r3
 80006fe:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000702:	337f      	adds	r3, #127	; 0x7f
 8000704:	61fb      	str	r3, [r7, #28]
		if(currCounter != prevCounter) {
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <StartEncoderTask+0xac>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	429a      	cmp	r2, r3
 800070e:	d034      	beq.n	800077a <StartEncoderTask+0x9e>
			if(currCounter > prevCounter)
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <StartEncoderTask+0xac>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	69fa      	ldr	r2, [r7, #28]
 8000716:	429a      	cmp	r2, r3
 8000718:	dd0a      	ble.n	8000730 <StartEncoderTask+0x54>
			{
				//ST7735_WriteString(0, 65, ">", Font_7x10, ST7735_GREEN, ST7735_BLACK);
				counter = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	817b      	strh	r3, [r7, #10]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0 );
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <StartEncoderTask+0xb0>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f107 010a 	add.w	r1, r7, #10
 8000726:	2300      	movs	r3, #0
 8000728:	2200      	movs	r2, #0
 800072a:	f003 fb65 	bl	8003df8 <osMessageQueuePut>
 800072e:	e00a      	b.n	8000746 <StartEncoderTask+0x6a>
			}
			else
			{
				//ST7735_WriteString(0, 65, "<", Font_7x10, ST7735_GREEN, ST7735_BLACK);
				counter = -1;
 8000730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000734:	817b      	strh	r3, [r7, #10]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0 );
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <StartEncoderTask+0xb0>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f107 010a 	add.w	r1, r7, #10
 800073e:	2300      	movs	r3, #0
 8000740:	2200      	movs	r2, #0
 8000742:	f003 fb59 	bl	8003df8 <osMessageQueuePut>
			}
			snprintf(buff, sizeof(buff), "%06d", currCounter);
 8000746:	f107 000c 	add.w	r0, r7, #12
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <StartEncoderTask+0xb4>)
 800074e:	2110      	movs	r1, #16
 8000750:	f006 fae8 	bl	8006d24 <sniprintf>
			ST7735_WriteString(90, 46, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <StartEncoderTask+0xb8>)
 8000756:	f107 010c 	add.w	r1, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	9202      	str	r2, [sp, #8]
 800075e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	460a      	mov	r2, r1
 800076c:	212e      	movs	r1, #46	; 0x2e
 800076e:	205a      	movs	r0, #90	; 0x5a
 8000770:	f000 fbbf 	bl	8000ef2 <ST7735_WriteString>
			prevCounter = currCounter;
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <StartEncoderTask+0xac>)
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	6013      	str	r3, [r2, #0]
		}
    osDelay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f003 faae 	bl	8003cdc <osDelay>
  {
 8000780:	e7b2      	b.n	80006e8 <StartEncoderTask+0xc>
 8000782:	bf00      	nop
 8000784:	200001bc 	.word	0x200001bc
 8000788:	200000b0 	.word	0x200000b0
 800078c:	200000c0 	.word	0x200000c0
 8000790:	0800747c 	.word	0x0800747c
 8000794:	20000000 	.word	0x20000000

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a25      	ldr	r2, [pc, #148]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	211c      	movs	r1, #28
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_GPIO_Init+0xd4>)
 8000824:	f001 f9dc 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000828:	2301      	movs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000832:	2302      	movs	r3, #2
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0xd4>)
 800083e:	f001 f84b 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000842:	231c      	movs	r3, #28
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xd4>)
 800085a:	f001 f83d 	bl	80018d8 <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f001 f9b1 	bl	8001c14 <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f920 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000c4 	.word	0x200000c4
 80008c4:	40005400 	.word	0x40005400
 80008c8:	000186a0 	.word	0x000186a0

080008cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_I2C_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12b      	bne.n	8000946 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_I2C_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_I2C_MspInit+0x88>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_I2C_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800090a:	23c0      	movs	r3, #192	; 0xc0
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090e:	2312      	movs	r3, #18
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091a:	2304      	movs	r3, #4
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <HAL_I2C_MspInit+0x8c>)
 8000926:	f000 ffd7 	bl	80018d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_I2C_MspInit+0x88>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_I2C_MspInit+0x88>)
 8000934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_I2C_MspInit+0x88>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40005400 	.word	0x40005400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020400 	.word	0x40020400

0800095c <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000962:	f000 fa35 	bl	8000dd0 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fb80 	bl	800106c <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(30, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <Display_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	9202      	str	r2, [sp, #8]
 8000972:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <Display_Init+0x5c>)
 8000980:	2119      	movs	r1, #25
 8000982:	201e      	movs	r0, #30
 8000984:	f000 fab5 	bl	8000ef2 <ST7735_WriteString>
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <Display_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	9202      	str	r2, [sp, #8]
 800098e:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000992:	9201      	str	r2, [sp, #4]
 8000994:	685a      	ldr	r2, [r3, #4]
 8000996:	9200      	str	r2, [sp, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <Display_Init+0x64>)
 800099c:	2100      	movs	r1, #0
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 faa7 	bl	8000ef2 <ST7735_WriteString>
    HAL_Delay(2000);
 80009a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a8:	f000 fe74 	bl	8001694 <HAL_Delay>
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	08007484 	.word	0x08007484
 80009bc:	20000010 	.word	0x20000010
 80009c0:	08007490 	.word	0x08007490

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c8:	f000 fe22 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009cc:	f000 f81c 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d0:	f7ff fee2 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d4:	f7ff ff4c 	bl	8000870 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009d8:	f000 f896 	bl	8000b08 <MX_SPI1_Init>
  MX_TIM3_Init();
 80009dc:	f000 fc74 	bl	80012c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80009e0:	f000 fcc6 	bl	8001370 <MX_TIM5_Init>
  MX_CRC_Init();
 80009e4:	f7ff fdce 	bl	8000584 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009e8:	213c      	movs	r1, #60	; 0x3c
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <main+0x40>)
 80009ec:	f002 fb21 	bl	8003032 <HAL_TIM_Encoder_Start>
  Display_Init();
 80009f0:	f7ff ffb4 	bl	800095c <Display_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009f4:	f003 f896 	bl	8003b24 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009f8:	f7ff fdfa 	bl	80005f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009fc:	f003 f8b6 	bl	8003b6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x3c>
 8000a02:	bf00      	nop
 8000a04:	200001bc 	.word	0x200001bc

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f006 f822 	bl	8006a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a78:	2319      	movs	r3, #25
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000a7c:	2390      	movs	r3, #144	; 0x90
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a84:	2303      	movs	r3, #3
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fa05 	bl	8001e9c <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a98:	f000 f830 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fc67 	bl	800238c <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ac4:	f000 f81a 	bl	8000afc <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3750      	adds	r7, #80	; 0x50
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fdb3 	bl	8001654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010000 	.word	0x40010000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <MX_SPI1_Init+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_SPI1_Init+0x64>)
 8000b5a:	f001 fe29 	bl	80027b0 <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b64:	f7ff ffca 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000118 	.word	0x20000118
 8000b70:	40013000 	.word	0x40013000

08000b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 fe75 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <ST7735_Select+0x14>)
 8000c0e:	f000 ffe7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020000 	.word	0x40020000

08000c1c <ST7735_Unselect>:

void ST7735_Unselect() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <ST7735_Unselect+0x14>)
 8000c26:	f000 ffdb 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020000 	.word	0x40020000

08000c34 <ST7735_Reset>:

static void ST7735_Reset() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <ST7735_Reset+0x24>)
 8000c3e:	f000 ffcf 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c42:	2005      	movs	r0, #5
 8000c44:	f000 fd26 	bl	8001694 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <ST7735_Reset+0x24>)
 8000c4e:	f000 ffc7 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40020000 	.word	0x40020000

08000c5c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <ST7735_WriteCommand+0x2c>)
 8000c6c:	f000 ffb8 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c70:	1df9      	adds	r1, r7, #7
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2201      	movs	r2, #1
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <ST7735_WriteCommand+0x30>)
 8000c7a:	f001 fe22 	bl	80028c2 <HAL_SPI_Transmit>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	20000118 	.word	0x20000118

08000c90 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <ST7735_WriteData+0x2c>)
 8000ca0:	f000 ff9e 	bl	8001be0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <ST7735_WriteData+0x30>)
 8000cb0:	f001 fe07 	bl	80028c2 <HAL_SPI_Transmit>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	20000118 	.word	0x20000118

08000cc4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000cd6:	e034      	b.n	8000d42 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffb9 	bl	8000c5c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000cfe:	7abb      	ldrb	r3, [r7, #10]
 8000d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d04:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000d06:	7abb      	ldrb	r3, [r7, #10]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000d0c:	7abb      	ldrb	r3, [r7, #10]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ffbd 	bl	8000c90 <ST7735_WriteData>
            addr += numArgs;
 8000d16:	7abb      	ldrb	r3, [r7, #10]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00e      	beq.n	8000d42 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	2bff      	cmp	r3, #255	; 0xff
 8000d32:	d102      	bne.n	8000d3a <ST7735_ExecuteCommandList+0x76>
 8000d34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d38:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000d3a:	89bb      	ldrh	r3, [r7, #12]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fca9 	bl	8001694 <HAL_Delay>
    while(numCommands--) {
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	73fa      	strb	r2, [r7, #15]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1c5      	bne.n	8000cd8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000d56:	b590      	push	{r4, r7, lr}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	4611      	mov	r1, r2
 8000d62:	461a      	mov	r2, r3
 8000d64:	4623      	mov	r3, r4
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71bb      	strb	r3, [r7, #6]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	717b      	strb	r3, [r7, #5]
 8000d70:	4613      	mov	r3, r2
 8000d72:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000d74:	202a      	movs	r0, #42	; 0x2a
 8000d76:	f7ff ff71 	bl	8000c5c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	733b      	strb	r3, [r7, #12]
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	737b      	strb	r3, [r7, #13]
 8000d86:	2300      	movs	r3, #0
 8000d88:	73bb      	strb	r3, [r7, #14]
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2104      	movs	r1, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff79 	bl	8000c90 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000d9e:	202b      	movs	r0, #43	; 0x2b
 8000da0:	f7ff ff5c 	bl	8000c5c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	331a      	adds	r3, #26
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000dac:	793b      	ldrb	r3, [r7, #4]
 8000dae:	331a      	adds	r3, #26
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2104      	movs	r1, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff68 	bl	8000c90 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000dc0:	202c      	movs	r0, #44	; 0x2c
 8000dc2:	f7ff ff4b 	bl	8000c5c <ST7735_WriteCommand>
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}
	...

08000dd0 <ST7735_Init>:

void ST7735_Init() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000dd4:	f7ff ff16 	bl	8000c04 <ST7735_Select>
    ST7735_Reset();
 8000dd8:	f7ff ff2c 	bl	8000c34 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <ST7735_Init+0x28>)
 8000dde:	f7ff ff71 	bl	8000cc4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <ST7735_Init+0x2c>)
 8000de4:	f7ff ff6e 	bl	8000cc4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <ST7735_Init+0x30>)
 8000dea:	f7ff ff6b 	bl	8000cc4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000dee:	f7ff ff15 	bl	8000c1c <ST7735_Unselect>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08009d4c 	.word	0x08009d4c
 8000dfc:	08009d88 	.word	0x08009d88
 8000e00:	08009d98 	.word	0x08009d98

08000e04 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e04:	b082      	sub	sp, #8
 8000e06:	b590      	push	{r4, r7, lr}
 8000e08:	b089      	sub	sp, #36	; 0x24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	460b      	mov	r3, r1
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	b2d8      	uxtb	r0, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	b2d9      	uxtb	r1, r3
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b2dc      	uxtb	r4, r3
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4622      	mov	r2, r4
 8000e44:	f7ff ff87 	bl	8000d56 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	e043      	b.n	8000ed6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	3b20      	subs	r3, #32
 8000e54:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000e58:	fb01 f303 	mul.w	r3, r1, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	e029      	b.n	8000ec4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00e      	beq.n	8000e9e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000e80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	743b      	strb	r3, [r7, #16]
 8000e8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fefa 	bl	8000c90 <ST7735_WriteData>
 8000e9c:	e00f      	b.n	8000ebe <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	733b      	strb	r3, [r7, #12]
 8000eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fee9 	bl	8000c90 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ec8:	461a      	mov	r2, r3
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d3cf      	bcc.n	8000e70 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000eda:	461a      	mov	r2, r3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d3b5      	bcc.n	8000e4e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	3724      	adds	r7, #36	; 0x24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000eee:	b002      	add	sp, #8
 8000ef0:	4770      	bx	lr

08000ef2 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	603a      	str	r2, [r7, #0]
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	460b      	mov	r3, r1
 8000f04:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000f06:	f7ff fe7d 	bl	8000c04 <ST7735_Select>

    while(*str) {
 8000f0a:	e02d      	b.n	8000f68 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	7d3a      	ldrb	r2, [r7, #20]
 8000f10:	4413      	add	r3, r2
 8000f12:	2b9f      	cmp	r3, #159	; 0x9f
 8000f14:	dd13      	ble.n	8000f3e <ST7735_WriteString+0x4c>
            x = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000f1a:	7d7b      	ldrb	r3, [r7, #21]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	7d7a      	ldrb	r2, [r7, #21]
 8000f28:	4413      	add	r3, r2
 8000f2a:	2b4f      	cmp	r3, #79	; 0x4f
 8000f2c:	dc21      	bgt.n	8000f72 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d103      	bne.n	8000f3e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	603b      	str	r3, [r7, #0]
                continue;
 8000f3c:	e014      	b.n	8000f68 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	88b9      	ldrh	r1, [r7, #4]
 8000f44:	88f8      	ldrh	r0, [r7, #6]
 8000f46:	8c3b      	ldrh	r3, [r7, #32]
 8000f48:	9302      	str	r3, [sp, #8]
 8000f4a:	8bbb      	ldrh	r3, [r7, #28]
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f7ff ff56 	bl	8000e04 <ST7735_WriteChar>
        x += font.width;
 8000f58:	7d3b      	ldrb	r3, [r7, #20]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4413      	add	r3, r2
 8000f60:	80fb      	strh	r3, [r7, #6]
        str++;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1cd      	bne.n	8000f0c <ST7735_WriteString+0x1a>
 8000f70:	e000      	b.n	8000f74 <ST7735_WriteString+0x82>
                break;
 8000f72:	bf00      	nop
    }

    ST7735_Unselect();
 8000f74:	f7ff fe52 	bl	8000c1c <ST7735_Unselect>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f82:	b002      	add	sp, #8
 8000f84:	4770      	bx	lr
	...

08000f88 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80bb      	strh	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	2b9f      	cmp	r3, #159	; 0x9f
 8000faa:	d857      	bhi.n	800105c <ST7735_FillRectangle+0xd4>
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	2b4f      	cmp	r3, #79	; 0x4f
 8000fb0:	d854      	bhi.n	800105c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2ba0      	cmp	r3, #160	; 0xa0
 8000fba:	dd03      	ble.n	8000fc4 <ST7735_FillRectangle+0x3c>
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000fc2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	2b50      	cmp	r3, #80	; 0x50
 8000fcc:	dd03      	ble.n	8000fd6 <ST7735_FillRectangle+0x4e>
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000fd4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000fd6:	f7ff fe15 	bl	8000c04 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	b2d8      	uxtb	r0, r3
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	b2d9      	uxtb	r1, r3
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b2dc      	uxtb	r4, r3
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	883b      	ldrh	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4622      	mov	r2, r4
 8001004:	f7ff fea7 	bl	8000d56 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001008:	8c3b      	ldrh	r3, [r7, #32]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	733b      	strb	r3, [r7, #12]
 8001012:	8c3b      	ldrh	r3, [r7, #32]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <ST7735_FillRectangle+0xdc>)
 800101e:	f000 fddf 	bl	8001be0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001022:	883b      	ldrh	r3, [r7, #0]
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	e013      	b.n	8001050 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	e00a      	b.n	8001044 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2202      	movs	r2, #2
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <ST7735_FillRectangle+0xe0>)
 800103a:	f001 fc42 	bl	80028c2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	3b01      	subs	r3, #1
 8001042:	80fb      	strh	r3, [r7, #6]
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f1      	bne.n	800102e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	3b01      	subs	r3, #1
 800104e:	80bb      	strh	r3, [r7, #4]
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1e8      	bne.n	8001028 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001056:	f7ff fde1 	bl	8000c1c <ST7735_Unselect>
 800105a:	e000      	b.n	800105e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800105c:	bf00      	nop
}
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40020000 	.word	0x40020000
 8001068:	20000118 	.word	0x20000118

0800106c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2350      	movs	r3, #80	; 0x50
 800107c:	22a0      	movs	r2, #160	; 0xa0
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff81 	bl	8000f88 <ST7735_FillRectangle>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_MspInit+0x74>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_MspInit+0x74>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_MspInit+0x74>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_MspInit+0x74>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_MspInit+0x74>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_MspInit+0x74>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	210f      	movs	r1, #15
 80010d2:	f06f 0001 	mvn.w	r0, #1
 80010d6:	f000 fbb9 	bl	800184c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	2005      	movs	r0, #5
 80010e0:	f000 fbb4 	bl	800184c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010e4:	2005      	movs	r0, #5
 80010e6:	f000 fbcd 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2005      	movs	r0, #5
 80010f0:	f000 fbac 	bl	800184c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010f4:	2005      	movs	r0, #5
 80010f6:	f000 fbc5 	bl	8001884 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	2019      	movs	r0, #25
 800111e:	f000 fb95 	bl	800184c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001122:	2019      	movs	r0, #25
 8001124:	f000 fbae 	bl	8001884 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_InitTick+0xa0>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_InitTick+0xa0>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6453      	str	r3, [r2, #68]	; 0x44
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_InitTick+0xa0>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001144:	f107 0210 	add.w	r2, r7, #16
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fafc 	bl	800274c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001154:	f001 fae6 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8001158:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_InitTick+0xa4>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	3b01      	subs	r3, #1
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_InitTick+0xa8>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_InitTick+0xac>)
 800116c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_InitTick+0xa8>)
 8001170:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001174:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_InitTick+0xa8>)
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_InitTick+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_InitTick+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_InitTick+0xa8>)
 800118a:	f001 fda1 	bl	8002cd0 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d104      	bne.n	800119e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <HAL_InitTick+0xa8>)
 8001196:	f001 fdf5 	bl	8002d84 <HAL_TIM_Base_Start_IT>
 800119a:	4603      	mov	r3, r0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3730      	adds	r7, #48	; 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	431bde83 	.word	0x431bde83
 80011b0:	20000170 	.word	0x20000170
 80011b4:	40010000 	.word	0x40010000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011fa:	f001 ffa8 	bl	800314e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000170 	.word	0x20000170

08001208 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <TIM3_IRQHandler+0x28>)
 800120e:	f001 ff9e 	bl	800314e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <TIM3_IRQHandler+0x2c>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <TIM3_IRQHandler+0x2c>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <TIM3_IRQHandler+0x2c>)
 8001224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001228:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001bc 	.word	0x200001bc
 8001234:	40000400 	.word	0x40000400

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f005 fbc0 	bl	80069ec <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20020000 	.word	0x20020000
 8001298:	00000400 	.word	0x00000400
 800129c:	200001b8 	.word	0x200001b8
 80012a0:	20004c70 	.word	0x20004c70

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fbc2 	bl	8006a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_TIM3_Init+0xa0>)
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <MX_TIM3_Init+0xa4>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM3_Init+0xa0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM3_Init+0xa0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_TIM3_Init+0xa0>)
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM3_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM3_Init+0xa0>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800130a:	2301      	movs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800131a:	2306      	movs	r3, #6
 800131c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001322:	2301      	movs	r3, #1
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800132a:	2306      	movs	r3, #6
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM3_Init+0xa0>)
 8001336:	f001 fdd6 	bl	8002ee6 <HAL_TIM_Encoder_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001340:	f7ff fbdc 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_TIM3_Init+0xa0>)
 8001352:	f002 fb21 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800135c:	f7ff fbce 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	; 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200001bc 	.word	0x200001bc
 800136c:	40000400 	.word	0x40000400

08001370 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_TIM5_Init+0xac>)
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <MX_TIM5_Init+0xb0>)
 8001396:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_TIM5_Init+0xac>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_TIM5_Init+0xac>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM5_Init+0xac>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295
 80013aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_TIM5_Init+0xac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_TIM5_Init+0xac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013b8:	4818      	ldr	r0, [pc, #96]	; (800141c <MX_TIM5_Init+0xac>)
 80013ba:	f001 fd45 	bl	8002e48 <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80013c4:	f7ff fb9a 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4619      	mov	r1, r3
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <MX_TIM5_Init+0xac>)
 80013d8:	f002 fade 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80013e2:	f7ff fb8b 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e6:	2360      	movs	r3, #96	; 0x60
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2204      	movs	r2, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <MX_TIM5_Init+0xac>)
 80013fe:	f001 ffaf 	bl	8003360 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001408:	f7ff fb78 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <MX_TIM5_Init+0xac>)
 800140e:	f000 f89b 	bl	8001548 <HAL_TIM_MspPostInit>

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000204 	.word	0x20000204
 8001420:	40000c00 	.word	0x40000c00

08001424 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2c      	ldr	r2, [pc, #176]	; (80014f4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d151      	bne.n	80014ea <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800149a:	2340      	movs	r3, #64	; 0x40
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014aa:	2302      	movs	r3, #2
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80014b6:	f000 fa0f 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 80014ba:	2320      	movs	r3, #32
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ca:	2302      	movs	r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <HAL_TIM_Encoder_MspInit+0xdc>)
 80014d6:	f000 f9ff 	bl	80018d8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2105      	movs	r1, #5
 80014de:	201d      	movs	r0, #29
 80014e0:	f000 f9b4 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e4:	201d      	movs	r0, #29
 80014e6:	f000 f9cd 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40000400 	.word	0x40000400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_TIM_PWM_MspInit+0x3c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10d      	bne.n	8001532 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_TIM_PWM_MspInit+0x40>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40000c00 	.word	0x40000c00
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_TIM_MspPostInit+0x68>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11d      	bne.n	80015a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_TIM_MspPostInit+0x6c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001586:	2302      	movs	r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001596:	2302      	movs	r3, #2
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_TIM_MspPostInit+0x70>)
 80015a2:	f000 f999 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40000c00 	.word	0x40000c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e6:	f7ff fe5d 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f005 fa05 	bl	80069f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff f9e9 	bl	80009c4 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001600:	08009e80 	.word	0x08009e80
  ldr r2, =_sbss
 8001604:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001608:	20004c70 	.word	0x20004c70

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f8fc 	bl	8001836 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	200f      	movs	r0, #15
 8001640:	f7ff fd62 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fd24 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000020 	.word	0x20000020
 8001678:	2000024c 	.word	0x2000024c

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	2000024c 	.word	0x2000024c

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000020 	.word	0x20000020

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff4c 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185e:	f7ff ff61 	bl	8001724 <__NVIC_GetPriorityGrouping>
 8001862:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7ff ffb1 	bl	80017d0 <NVIC_EncodePriority>
 800186e:	4602      	mov	r2, r0
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff80 	bl	800177c <__NVIC_SetPriority>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff54 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe fe72 	bl	80005ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e159      	b.n	8001ba8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8148 	bne.w	8001ba2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	2b02      	cmp	r3, #2
 8001928:	d130      	bne.n	800198c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0201 	and.w	r2, r3, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d017      	beq.n	80019c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a2 	beq.w	8001ba2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_GPIO_Init+0x2e8>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_GPIO_Init+0x2e8>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <HAL_GPIO_Init+0x2e8>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7a:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_GPIO_Init+0x2ec>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x202>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x2f4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x1fe>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a47      	ldr	r2, [pc, #284]	; (8001bd0 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x1fa>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a46      	ldr	r2, [pc, #280]	; (8001bd4 <HAL_GPIO_Init+0x2fc>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x1f6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a45      	ldr	r2, [pc, #276]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x1f2>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e008      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e004      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ada:	2300      	movs	r3, #0
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aec:	4935      	ldr	r1, [pc, #212]	; (8001bc4 <HAL_GPIO_Init+0x2ec>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a2f      	ldr	r2, [pc, #188]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_GPIO_Init+0x304>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f67f aea2 	bls.w	80018f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40013c00 	.word	0x40013c00

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e12b      	b.n	8001e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fe46 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c78:	f000 fd40 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8001c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a81      	ldr	r2, [pc, #516]	; (8001e88 <HAL_I2C_Init+0x274>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d807      	bhi.n	8001c98 <HAL_I2C_Init+0x84>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a80      	ldr	r2, [pc, #512]	; (8001e8c <HAL_I2C_Init+0x278>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e006      	b.n	8001ca6 <HAL_I2C_Init+0x92>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a7d      	ldr	r2, [pc, #500]	; (8001e90 <HAL_I2C_Init+0x27c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0e7      	b.n	8001e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a78      	ldr	r2, [pc, #480]	; (8001e94 <HAL_I2C_Init+0x280>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_I2C_Init+0x274>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d802      	bhi.n	8001ce8 <HAL_I2C_Init+0xd4>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	e009      	b.n	8001cfc <HAL_I2C_Init+0xe8>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_I2C_Init+0x284>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	495c      	ldr	r1, [pc, #368]	; (8001e88 <HAL_I2C_Init+0x274>)
 8001d18:	428b      	cmp	r3, r1
 8001d1a:	d819      	bhi.n	8001d50 <HAL_I2C_Init+0x13c>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e59      	subs	r1, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2a:	1c59      	adds	r1, r3, #1
 8001d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d30:	400b      	ands	r3, r1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_I2C_Init+0x138>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1e59      	subs	r1, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4a:	e051      	b.n	8001df0 <HAL_I2C_Init+0x1dc>
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	e04f      	b.n	8001df0 <HAL_I2C_Init+0x1dc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d111      	bne.n	8001d7c <HAL_I2C_Init+0x168>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1e58      	subs	r0, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e012      	b.n	8001da2 <HAL_I2C_Init+0x18e>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e58      	subs	r0, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	0099      	lsls	r1, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Init+0x196>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e022      	b.n	8001df0 <HAL_I2C_Init+0x1dc>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10e      	bne.n	8001dd0 <HAL_I2C_Init+0x1bc>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1e58      	subs	r0, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	440b      	add	r3, r1
 8001dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dce:	e00f      	b.n	8001df0 <HAL_I2C_Init+0x1dc>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	0099      	lsls	r1, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	6809      	ldr	r1, [r1, #0]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6911      	ldr	r1, [r2, #16]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68d2      	ldr	r2, [r2, #12]
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	000186a0 	.word	0x000186a0
 8001e8c:	001e847f 	.word	0x001e847f
 8001e90:	003d08ff 	.word	0x003d08ff
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	10624dd3 	.word	0x10624dd3

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e267      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e242      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a68      	ldr	r2, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fb92 	bl	800167c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fb8e 	bl	800167c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e207      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fb7e 	bl	800167c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fb7a 	bl	800167c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1f3      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff fb33 	bl	800167c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff fb2f 	bl	800167c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a8      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fb12 	bl	800167c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff fb0e 	bl	800167c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e187      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff faf2 	bl	800167c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff faee 	bl	800167c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e167      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e01b      	b.n	80020f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fadb 	bl	800167c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00e      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff fad7 	bl	800167c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d907      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e150      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470000 	.word	0x42470000
 80020e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ea      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8097 	beq.w	8002230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff fa97 	bl	800167c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7ff fa93 	bl	800167c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e10c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x2ea>
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x30c>
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7ff fa58 	bl	800167c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7ff fa54 	bl	800167c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0cb      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7ff fa42 	bl	800167c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7ff fa3e 	bl	800167c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0b5      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a1 	beq.w	800237c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d05c      	beq.n	8002300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d141      	bne.n	80022d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fa12 	bl	800167c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff fa0e 	bl	800167c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e087      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff f9e7 	bl	800167c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff f9e3 	bl	800167c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e05c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x416>
 80022d0:	e054      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff f9d0 	bl	800167c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f9cc 	bl	800167c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e038      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000
 8002314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d028      	beq.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d121      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11a      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7ff f8fe 	bl	800167c <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7ff f8fa 	bl	800167c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fde8 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08009dc4 	.word	0x08009dc4
 8002550:	20000018 	.word	0x20000018
 8002554:	2000001c 	.word	0x2000001c

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b090      	sub	sp, #64	; 0x40
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
 8002564:	2300      	movs	r3, #0
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800257c:	2b08      	cmp	r3, #8
 800257e:	f200 80a1 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e09b      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_GetSysClockFreq+0x184>)
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002590:	e09b      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002596:	e098      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d028      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	2200      	movs	r2, #0
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	627a      	str	r2, [r7, #36]	; 0x24
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025c0:	2100      	movs	r1, #0
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c4:	fb03 f201 	mul.w	r2, r3, r1
 80025c8:	2300      	movs	r3, #0
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	4a43      	ldr	r2, [pc, #268]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025d2:	fba0 1202 	umull	r1, r2, r0, r2
 80025d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d8:	460a      	mov	r2, r1
 80025da:	62ba      	str	r2, [r7, #40]	; 0x28
 80025dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025de:	4413      	add	r3, r2
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	2200      	movs	r2, #0
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	61fa      	str	r2, [r7, #28]
 80025ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025f2:	f7fd fe45 	bl	8000280 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4613      	mov	r3, r2
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fe:	e053      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002600:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	2200      	movs	r2, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	617a      	str	r2, [r7, #20]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002612:	f04f 0b00 	mov.w	fp, #0
 8002616:	4652      	mov	r2, sl
 8002618:	465b      	mov	r3, fp
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0159      	lsls	r1, r3, #5
 8002624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002628:	0150      	lsls	r0, r2, #5
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	ebb2 080a 	subs.w	r8, r2, sl
 8002632:	eb63 090b 	sbc.w	r9, r3, fp
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002642:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002646:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800264a:	ebb2 0408 	subs.w	r4, r2, r8
 800264e:	eb63 0509 	sbc.w	r5, r3, r9
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	00eb      	lsls	r3, r5, #3
 800265c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002660:	00e2      	lsls	r2, r4, #3
 8002662:	4614      	mov	r4, r2
 8002664:	461d      	mov	r5, r3
 8002666:	eb14 030a 	adds.w	r3, r4, sl
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	eb45 030b 	adc.w	r3, r5, fp
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	2200      	movs	r2, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800269c:	f7fd fdf0 	bl	8000280 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetSysClockFreq+0x184>)
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3740      	adds	r7, #64	; 0x40
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	017d7840 	.word	0x017d7840

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000018 	.word	0x20000018

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	08009dd4 	.word	0x08009dd4

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08009dd4 	.word	0x08009dd4

0800274c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	220f      	movs	r2, #15
 800275a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_GetClockConfig+0x5c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_RCC_GetClockConfig+0x5c>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_RCC_GetClockConfig+0x60>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0207 	and.w	r2, r3, #7
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	601a      	str	r2, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40023c00 	.word	0x40023c00

080027b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07b      	b.n	80028ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d2:	d009      	beq.n	80027e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
 80027da:	e005      	b.n	80027e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f9b6 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	ea42 0103 	orr.w	r1, r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0104 	and.w	r1, r3, #4
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f003 0210 	and.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b088      	sub	sp, #32
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_SPI_Transmit+0x22>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e126      	b.n	8002b32 <HAL_SPI_Transmit+0x270>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ec:	f7fe fec6 	bl	800167c <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002906:	e10b      	b.n	8002b20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_SPI_Transmit+0x52>
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002918:	e102      	b.n	8002b20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	d10f      	bne.n	8002982 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002980:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d007      	beq.n	80029a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a8:	d14b      	bne.n	8002a42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_SPI_Transmit+0xf6>
 80029b2:	8afb      	ldrh	r3, [r7, #22]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d13e      	bne.n	8002a36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029dc:	e02b      	b.n	8002a36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d112      	bne.n	8002a12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	881a      	ldrh	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	1c9a      	adds	r2, r3, #2
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a10:	e011      	b.n	8002a36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a12:	f7fe fe33 	bl	800167c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d803      	bhi.n	8002a2a <HAL_SPI_Transmit+0x168>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d102      	bne.n	8002a30 <HAL_SPI_Transmit+0x16e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a34:	e074      	b.n	8002b20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ce      	bne.n	80029de <HAL_SPI_Transmit+0x11c>
 8002a40:	e04c      	b.n	8002adc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Transmit+0x18e>
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d140      	bne.n	8002ad2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	7812      	ldrb	r2, [r2, #0]
 8002a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a76:	e02c      	b.n	8002ad2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d113      	bne.n	8002aae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aac:	e011      	b.n	8002ad2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aae:	f7fe fde5 	bl	800167c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d803      	bhi.n	8002ac6 <HAL_SPI_Transmit+0x204>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d102      	bne.n	8002acc <HAL_SPI_Transmit+0x20a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ad0:	e026      	b.n	8002b20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1cd      	bne.n	8002a78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f8b3 	bl	8002c4c <SPI_EndRxTxTransaction>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e000      	b.n	8002b20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b4c:	f7fe fd96 	bl	800167c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b5c:	f7fe fd8e 	bl	800167c <HAL_GetTick>
 8002b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	0d1b      	lsrs	r3, r3, #20
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b72:	e054      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d050      	beq.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b7c:	f7fe fd7e 	bl	800167c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d902      	bls.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13d      	bne.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d111      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d004      	beq.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d107      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d10f      	bne.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e017      	b.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d19b      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000018 	.word	0x20000018

08002c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <SPI_EndRxTxTransaction+0x7c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <SPI_EndRxTxTransaction+0x80>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0d5b      	lsrs	r3, r3, #21
 8002c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c76:	d112      	bne.n	8002c9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff ff5a 	bl	8002b3c <SPI_WaitFlagStateUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e00f      	b.n	8002cbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d0f2      	beq.n	8002c9e <SPI_EndRxTxTransaction+0x52>
 8002cb8:	e000      	b.n	8002cbc <SPI_EndRxTxTransaction+0x70>
        break;
 8002cba:	bf00      	nop
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000018 	.word	0x20000018
 8002ccc:	165e9f81 	.word	0x165e9f81

08002cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e041      	b.n	8002d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f839 	bl	8002d6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f000 fc10 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e044      	b.n	8002e26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_TIM_Base_Start_IT+0xb0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc6:	d013      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_TIM_Base_Start_IT+0xb8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_TIM_Base_Start_IT+0xbc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x6c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_TIM_Base_Start_IT+0xc0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d010      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	e007      	b.n	8002e24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40014000 	.word	0x40014000

08002e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e041      	b.n	8002ede <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe fb48 	bl	8001504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f000 fb54 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e097      	b.n	800302a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fa88 	bl	8001424 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
 8002f2e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 fafa 	bl	8003534 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f68:	f023 0303 	bic.w	r3, r3, #3
 8002f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f86:	f023 030c 	bic.w	r3, r3, #12
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	011a      	lsls	r2, r3, #4
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fc4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fcc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003042:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800304a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003052:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800305a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d110      	bne.n	8003084 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003068:	7b7b      	ldrb	r3, [r7, #13]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e069      	b.n	8003146 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003082:	e031      	b.n	80030e8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d110      	bne.n	80030ac <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003090:	7b3b      	ldrb	r3, [r7, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e055      	b.n	8003146 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030aa:	e01d      	b.n	80030e8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d108      	bne.n	80030c4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	7bbb      	ldrb	r3, [r7, #14]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030b8:	7b7b      	ldrb	r3, [r7, #13]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030be:	7b3b      	ldrb	r3, [r7, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e03e      	b.n	8003146 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_Encoder_Start+0xc4>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d008      	beq.n	8003106 <HAL_TIM_Encoder_Start+0xd4>
 80030f4:	e00f      	b.n	8003116 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fc24 	bl	800394c <TIM_CCxChannelCmd>
      break;
 8003104:	e016      	b.n	8003134 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	2104      	movs	r1, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fc1c 	bl	800394c <TIM_CCxChannelCmd>
      break;
 8003114:	e00e      	b.n	8003134 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fc14 	bl	800394c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	2104      	movs	r1, #4
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fc0d 	bl	800394c <TIM_CCxChannelCmd>
      break;
 8003132:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d122      	bne.n	80031aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d11b      	bne.n	80031aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f06f 0202 	mvn.w	r2, #2
 800317a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f9b1 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003196:	e005      	b.n	80031a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9a3 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9b4 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d122      	bne.n	80031fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d11b      	bne.n	80031fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f06f 0204 	mvn.w	r2, #4
 80031ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f987 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 80031ea:	e005      	b.n	80031f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f979 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f98a 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b08      	cmp	r3, #8
 800320a:	d122      	bne.n	8003252 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d11b      	bne.n	8003252 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0208 	mvn.w	r2, #8
 8003222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2204      	movs	r2, #4
 8003228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f95d 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 800323e:	e005      	b.n	800324c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f94f 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f960 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b10      	cmp	r3, #16
 800325e:	d122      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b10      	cmp	r3, #16
 800326c:	d11b      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0210 	mvn.w	r2, #16
 8003276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2208      	movs	r2, #8
 800327c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f933 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003292:	e005      	b.n	80032a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f925 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f936 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f06f 0201 	mvn.w	r2, #1
 80032ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fc03 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b80      	cmp	r3, #128	; 0x80
 80032de:	d10e      	bne.n	80032fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d107      	bne.n	80032fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fbc5 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d10e      	bne.n	800332a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d107      	bne.n	800332a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8fb 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b20      	cmp	r3, #32
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0220 	mvn.w	r2, #32
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fb8f 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800337a:	2302      	movs	r3, #2
 800337c:	e0ae      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	f200 809f 	bhi.w	80034cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033c9 	.word	0x080033c9
 8003398:	080034cd 	.word	0x080034cd
 800339c:	080034cd 	.word	0x080034cd
 80033a0:	080034cd 	.word	0x080034cd
 80033a4:	08003409 	.word	0x08003409
 80033a8:	080034cd 	.word	0x080034cd
 80033ac:	080034cd 	.word	0x080034cd
 80033b0:	080034cd 	.word	0x080034cd
 80033b4:	0800344b 	.word	0x0800344b
 80033b8:	080034cd 	.word	0x080034cd
 80033bc:	080034cd 	.word	0x080034cd
 80033c0:	080034cd 	.word	0x080034cd
 80033c4:	0800348b 	.word	0x0800348b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f930 	bl	8003634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	619a      	str	r2, [r3, #24]
      break;
 8003406:	e064      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f976 	bl	8003700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6999      	ldr	r1, [r3, #24]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	619a      	str	r2, [r3, #24]
      break;
 8003448:	e043      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f9c1 	bl	80037d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0208 	orr.w	r2, r2, #8
 8003464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0204 	bic.w	r2, r2, #4
 8003474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	61da      	str	r2, [r3, #28]
      break;
 8003488:	e023      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa0b 	bl	80038ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69d9      	ldr	r1, [r3, #28]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	021a      	lsls	r2, r3, #8
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	61da      	str	r2, [r3, #28]
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
      break;
 80034d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <TIM_Base_SetConfig+0xe4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00f      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d00b      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a31      	ldr	r2, [pc, #196]	; (800361c <TIM_Base_SetConfig+0xe8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a30      	ldr	r2, [pc, #192]	; (8003620 <TIM_Base_SetConfig+0xec>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <TIM_Base_SetConfig+0xf0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <TIM_Base_SetConfig+0xe4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01b      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d017      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a22      	ldr	r2, [pc, #136]	; (800361c <TIM_Base_SetConfig+0xe8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a21      	ldr	r2, [pc, #132]	; (8003620 <TIM_Base_SetConfig+0xec>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <TIM_Base_SetConfig+0xf0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <TIM_Base_SetConfig+0xf4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <TIM_Base_SetConfig+0xf8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <TIM_Base_SetConfig+0xfc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <TIM_Base_SetConfig+0xe4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400
 8003630:	40014800 	.word	0x40014800

08003634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0201 	bic.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0302 	bic.w	r3, r3, #2
 800367c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <TIM_OC1_SetConfig+0xc8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10c      	bne.n	80036aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0308 	bic.w	r3, r3, #8
 8003696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <TIM_OC1_SetConfig+0xc8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d111      	bne.n	80036d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	621a      	str	r2, [r3, #32]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40010000 	.word	0x40010000

08003700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f023 0210 	bic.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0320 	bic.w	r3, r3, #32
 800374a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <TIM_OC2_SetConfig+0xd4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10d      	bne.n	800377c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <TIM_OC2_SetConfig+0xd4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d113      	bne.n	80037ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000

080037d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <TIM_OC3_SetConfig+0xd0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <TIM_OC3_SetConfig+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d113      	bne.n	8003882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40010000 	.word	0x40010000

080038ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a10      	ldr	r2, [pc, #64]	; (8003948 <TIM_OC4_SetConfig+0x9c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d109      	bne.n	8003920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000

0800394c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e050      	b.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d013      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10c      	bne.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40014000 	.word	0x40014000

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <__NVIC_SetPriority>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SysTick_Handler+0x1c>)
 8003af6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003af8:	f001 ff12 	bl	8005920 <xTaskGetSchedulerState>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b02:	f002 fcf9 	bl	80064f8 <xPortSysTickHandler>
  }
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b14:	2100      	movs	r1, #0
 8003b16:	f06f 0004 	mvn.w	r0, #4
 8003b1a:	f7ff ffbf 	bl	8003a9c <__NVIC_SetPriority>
#endif
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b2a:	f3ef 8305 	mrs	r3, IPSR
 8003b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b36:	f06f 0305 	mvn.w	r3, #5
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	e00c      	b.n	8003b58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <osKernelInitialize+0x44>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <osKernelInitialize+0x44>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	e002      	b.n	8003b58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000250 	.word	0x20000250

08003b6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b72:	f3ef 8305 	mrs	r3, IPSR
 8003b76:	603b      	str	r3, [r7, #0]
  return(result);
 8003b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b7e:	f06f 0305 	mvn.w	r3, #5
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e010      	b.n	8003ba8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <osKernelStart+0x48>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d109      	bne.n	8003ba2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b8e:	f7ff ffbf 	bl	8003b10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <osKernelStart+0x48>)
 8003b94:	2202      	movs	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b98:	f001 fa66 	bl	8005068 <vTaskStartScheduler>
      stat = osOK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	e002      	b.n	8003ba8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ba8:	687b      	ldr	r3, [r7, #4]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000250 	.word	0x20000250

08003bb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08e      	sub	sp, #56	; 0x38
 8003bbc:	af04      	add	r7, sp, #16
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc8:	f3ef 8305 	mrs	r3, IPSR
 8003bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d17e      	bne.n	8003cd2 <osThreadNew+0x11a>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d07b      	beq.n	8003cd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003bde:	2318      	movs	r3, #24
 8003be0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d045      	beq.n	8003c7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <osThreadNew+0x48>
        name = attr->name;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <osThreadNew+0x6e>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b38      	cmp	r3, #56	; 0x38
 8003c18:	d805      	bhi.n	8003c26 <osThreadNew+0x6e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <osThreadNew+0x72>
        return (NULL);
 8003c26:	2300      	movs	r3, #0
 8003c28:	e054      	b.n	8003cd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <osThreadNew+0xa8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2bbb      	cmp	r3, #187	; 0xbb
 8003c48:	d90a      	bls.n	8003c60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <osThreadNew+0xa8>
        mem = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e010      	b.n	8003c82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <osThreadNew+0xca>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <osThreadNew+0xca>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d104      	bne.n	8003c82 <osThreadNew+0xca>
          mem = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	e001      	b.n	8003c82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d110      	bne.n	8003caa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c90:	9202      	str	r2, [sp, #8]
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fff6 	bl	8004c90 <xTaskCreateStatic>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e013      	b.n	8003cd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d110      	bne.n	8003cd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	f107 0310 	add.w	r3, r7, #16
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 f841 	bl	8004d4a <xTaskCreate>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <osThreadNew+0x11a>
            hTask = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cd2:	693b      	ldr	r3, [r7, #16]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3728      	adds	r7, #40	; 0x28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce4:	f3ef 8305 	mrs	r3, IPSR
 8003ce8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <osDelay+0x1c>
    stat = osErrorISR;
 8003cf0:	f06f 0305 	mvn.w	r3, #5
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e007      	b.n	8003d08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f001 f97c 	bl	8005000 <vTaskDelay>
    }
  }

  return (stat);
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b08a      	sub	sp, #40	; 0x28
 8003d16:	af02      	add	r7, sp, #8
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d22:	f3ef 8305 	mrs	r3, IPSR
 8003d26:	613b      	str	r3, [r7, #16]
  return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d15f      	bne.n	8003dee <osMessageQueueNew+0xdc>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05c      	beq.n	8003dee <osMessageQueueNew+0xdc>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d059      	beq.n	8003dee <osMessageQueueNew+0xdc>
    mem = -1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d029      	beq.n	8003d9a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d012      	beq.n	8003d74 <osMessageQueueNew+0x62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b4f      	cmp	r3, #79	; 0x4f
 8003d54:	d90e      	bls.n	8003d74 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <osMessageQueueNew+0x62>
        mem = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e014      	b.n	8003d9e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d110      	bne.n	8003d9e <osMessageQueueNew+0x8c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10c      	bne.n	8003d9e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <osMessageQueueNew+0x8c>
          mem = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	e001      	b.n	8003d9e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10b      	bne.n	8003dbc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2100      	movs	r1, #0
 8003dae:	9100      	str	r1, [sp, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fa2e 	bl	8004214 <xQueueGenericCreateStatic>
 8003db8:	61f8      	str	r0, [r7, #28]
 8003dba:	e008      	b.n	8003dce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fa9c 	bl	8004304 <xQueueGenericCreate>
 8003dcc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00c      	beq.n	8003dee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e001      	b.n	8003de6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003de6:	6979      	ldr	r1, [r7, #20]
 8003de8:	69f8      	ldr	r0, [r7, #28]
 8003dea:	f000 fef3 	bl	8004bd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003dee:	69fb      	ldr	r3, [r7, #28]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e10:	f3ef 8305 	mrs	r3, IPSR
 8003e14:	617b      	str	r3, [r7, #20]
  return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d028      	beq.n	8003e6e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <osMessageQueuePut+0x36>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <osMessageQueuePut+0x36>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003e2e:	f06f 0303 	mvn.w	r3, #3
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e038      	b.n	8003ea8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e3a:	f107 0210 	add.w	r2, r7, #16
 8003e3e:	2300      	movs	r3, #0
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	69b8      	ldr	r0, [r7, #24]
 8003e44:	f000 fbba 	bl	80045bc <xQueueGenericSendFromISR>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d003      	beq.n	8003e56 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003e4e:	f06f 0302 	mvn.w	r3, #2
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	e028      	b.n	8003ea8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d025      	beq.n	8003ea8 <osMessageQueuePut+0xb0>
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <osMessageQueuePut+0xbc>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	e01c      	b.n	8003ea8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <osMessageQueuePut+0x82>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003e7a:	f06f 0303 	mvn.w	r3, #3
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e012      	b.n	8003ea8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e82:	2300      	movs	r3, #0
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	69b8      	ldr	r0, [r7, #24]
 8003e8a:	f000 fa99 	bl	80043c0 <xQueueGenericSend>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d009      	beq.n	8003ea8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003e9a:	f06f 0301 	mvn.w	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e002      	b.n	8003ea8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003ea2:	f06f 0302 	mvn.w	r3, #2
 8003ea6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ece:	f3ef 8305 	mrs	r3, IPSR
 8003ed2:	617b      	str	r3, [r7, #20]
  return(result);
 8003ed4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d028      	beq.n	8003f2c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <osMessageQueueGet+0x34>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <osMessageQueueGet+0x34>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003eec:	f06f 0303 	mvn.w	r3, #3
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e037      	b.n	8003f64 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ef8:	f107 0310 	add.w	r3, r7, #16
 8003efc:	461a      	mov	r2, r3
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	69b8      	ldr	r0, [r7, #24]
 8003f02:	f000 fcd7 	bl	80048b4 <xQueueReceiveFromISR>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d003      	beq.n	8003f14 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003f0c:	f06f 0302 	mvn.w	r3, #2
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e027      	b.n	8003f64 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d024      	beq.n	8003f64 <osMessageQueueGet+0xac>
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <osMessageQueueGet+0xb8>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	e01b      	b.n	8003f64 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <osMessageQueueGet+0x80>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003f38:	f06f 0303 	mvn.w	r3, #3
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e011      	b.n	8003f64 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	69b8      	ldr	r0, [r7, #24]
 8003f46:	f000 fbd5 	bl	80046f4 <xQueueReceive>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d009      	beq.n	8003f64 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003f56:	f06f 0301 	mvn.w	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e002      	b.n	8003f64 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003f5e:	f06f 0302 	mvn.w	r3, #2
 8003f62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f64:	69fb      	ldr	r3, [r7, #28]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <vApplicationGetIdleTaskMemory+0x30>)
 8003f8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000254 	.word	0x20000254
 8003fa4:	20000310 	.word	0x20000310

08003fa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a06      	ldr	r2, [pc, #24]	; (8003fd8 <vApplicationGetTimerTaskMemory+0x30>)
 8003fbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc6:	601a      	str	r2, [r3, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20000510 	.word	0x20000510
 8003fd8:	200005cc 	.word	0x200005cc

08003fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f103 0208 	add.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f103 0208 	add.w	r2, r3, #8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f103 0208 	add.w	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d103      	bne.n	800409e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e00c      	b.n	80040b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3308      	adds	r3, #8
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e002      	b.n	80040ac <vListInsert+0x2e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d2f6      	bcs.n	80040a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6852      	ldr	r2, [r2, #4]
 8004110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d103      	bne.n	8004124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800416e:	f002 f931 	bl	80063d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	441a      	add	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	3b01      	subs	r3, #1
 80041a0:	68f9      	ldr	r1, [r7, #12]
 80041a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	441a      	add	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22ff      	movs	r2, #255	; 0xff
 80041b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	22ff      	movs	r2, #255	; 0xff
 80041ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d114      	bne.n	80041ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01a      	beq.n	8004202 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3310      	adds	r3, #16
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 f9e3 	bl	800559c <xTaskRemoveFromEventList>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d012      	beq.n	8004202 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <xQueueGenericReset+0xcc>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	e009      	b.n	8004202 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3310      	adds	r3, #16
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fef2 	bl	8003fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3324      	adds	r3, #36	; 0x24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff feed 	bl	8003fdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004202:	f002 f917 	bl	8006434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	; 0x38
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <xQueueGenericCreateStatic+0x52>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <xQueueGenericCreateStatic+0x56>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <xQueueGenericCreateStatic+0x58>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	623b      	str	r3, [r7, #32]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <xQueueGenericCreateStatic+0x7e>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <xQueueGenericCreateStatic+0x82>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <xQueueGenericCreateStatic+0x84>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	61fb      	str	r3, [r7, #28]
}
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042b2:	2350      	movs	r3, #80	; 0x50
 80042b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b50      	cmp	r3, #80	; 0x50
 80042ba:	d00a      	beq.n	80042d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	61bb      	str	r3, [r7, #24]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f83f 	bl	8004378 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3730      	adds	r7, #48	; 0x30
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	613b      	str	r3, [r7, #16]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3350      	adds	r3, #80	; 0x50
 800433c:	4618      	mov	r0, r3
 800433e:	f002 f96b 	bl	8006618 <pvPortMalloc>
 8004342:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d011      	beq.n	800436e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3350      	adds	r3, #80	; 0x50
 8004352:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800435c:	79fa      	ldrb	r2, [r7, #7]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f805 	bl	8004378 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800436e:	69bb      	ldr	r3, [r7, #24]
	}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e002      	b.n	800439a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043a6:	2101      	movs	r1, #1
 80043a8:	69b8      	ldr	r0, [r7, #24]
 80043aa:	f7ff fecb 	bl	8004144 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xQueueGenericSend+0x32>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <xQueueGenericSend+0x40>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <xQueueGenericSend+0x44>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <xQueueGenericSend+0x46>
 8004404:	2300      	movs	r3, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <xQueueGenericSend+0x60>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d103      	bne.n	800442e <xQueueGenericSend+0x6e>
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <xQueueGenericSend+0x72>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <xQueueGenericSend+0x74>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xQueueGenericSend+0x8e>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	623b      	str	r3, [r7, #32]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800444e:	f001 fa67 	bl	8005920 <xTaskGetSchedulerState>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <xQueueGenericSend+0x9e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <xQueueGenericSend+0xa2>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <xQueueGenericSend+0xa4>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericSend+0xbe>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61fb      	str	r3, [r7, #28]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800447e:	f001 ffa9 	bl	80063d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <xQueueGenericSend+0xd4>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d129      	bne.n	80044e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449a:	f000 fa8b 	bl	80049b4 <prvCopyDataToQueue>
 800449e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	3324      	adds	r3, #36	; 0x24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f875 	bl	800559c <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044b8:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <xQueueGenericSend+0x1f8>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	e00a      	b.n	80044e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044d0:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <xQueueGenericSend+0x1f8>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044e0:	f001 ffa8 	bl	8006434 <vPortExitCritical>
				return pdPASS;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e063      	b.n	80045b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ee:	f001 ffa1 	bl	8006434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e05c      	b.n	80045b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	4618      	mov	r0, r3
 8004502:	f001 f8af 	bl	8005664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004506:	2301      	movs	r3, #1
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800450a:	f001 ff93 	bl	8006434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800450e:	f000 fe1b 	bl	8005148 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004512:	f001 ff5f 	bl	80063d4 <vPortEnterCritical>
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800451c:	b25b      	sxtb	r3, r3
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d103      	bne.n	800452c <xQueueGenericSend+0x16c>
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004532:	b25b      	sxtb	r3, r3
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x182>
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004542:	f001 ff77 	bl	8006434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004546:	1d3a      	adds	r2, r7, #4
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f89e 	bl	8005690 <xTaskCheckForTimeOut>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d124      	bne.n	80045a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800455a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800455c:	f000 fb22 	bl	8004ba4 <prvIsQueueFull>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	3310      	adds	r3, #16
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ffc4 	bl	80054fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004576:	f000 faad 	bl	8004ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800457a:	f000 fdf3 	bl	8005164 <xTaskResumeAll>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f af7c 	bne.w	800447e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <xQueueGenericSend+0x1f8>)
 8004588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	e772      	b.n	800447e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459a:	f000 fa9b 	bl	8004ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800459e:	f000 fde1 	bl	8005164 <xTaskResumeAll>
 80045a2:	e76c      	b.n	800447e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a6:	f000 fa95 	bl	8004ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045aa:	f000 fddb 	bl	8005164 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3738      	adds	r7, #56	; 0x38
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b090      	sub	sp, #64	; 0x40
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d103      	bne.n	80045f8 <xQueueGenericSendFromISR+0x3c>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <xQueueGenericSendFromISR+0x40>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <xQueueGenericSendFromISR+0x42>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d103      	bne.n	8004626 <xQueueGenericSendFromISR+0x6a>
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <xQueueGenericSendFromISR+0x6e>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSendFromISR+0x70>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	623b      	str	r3, [r7, #32]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004646:	f001 ffa7 	bl	8006598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800464a:	f3ef 8211 	mrs	r2, BASEPRI
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	61fa      	str	r2, [r7, #28]
 8004660:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004662:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <xQueueGenericSendFromISR+0xbc>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d12f      	bne.n	80046d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800467e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800468e:	f000 f991 	bl	80049b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004692:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d112      	bne.n	80046c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d016      	beq.n	80046d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 ff77 	bl	800559c <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e007      	b.n	80046d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046c6:	3301      	adds	r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	b25a      	sxtb	r2, r3
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046d2:	2301      	movs	r3, #1
 80046d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80046d6:	e001      	b.n	80046dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3740      	adds	r7, #64	; 0x40
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	; 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <xQueueReceive+0x30>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	623b      	str	r3, [r7, #32]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <xQueueReceive+0x3e>
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueReceive+0x42>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueReceive+0x44>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueReceive+0x5e>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	61fb      	str	r3, [r7, #28]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004752:	f001 f8e5 	bl	8005920 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <xQueueReceive+0x6e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueReceive+0x72>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueReceive+0x74>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueReceive+0x8e>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61bb      	str	r3, [r7, #24]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004782:	f001 fe27 	bl	80063d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01f      	beq.n	80047d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004796:	f000 f977 	bl	8004a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1e5a      	subs	r2, r3, #1
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00f      	beq.n	80047ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	3310      	adds	r3, #16
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fef4 	bl	800559c <xTaskRemoveFromEventList>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047ba:	4b3d      	ldr	r3, [pc, #244]	; (80048b0 <xQueueReceive+0x1bc>)
 80047bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047ca:	f001 fe33 	bl	8006434 <vPortExitCritical>
				return pdPASS;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e069      	b.n	80048a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047d8:	f001 fe2c 	bl	8006434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047dc:	2300      	movs	r3, #0
 80047de:	e062      	b.n	80048a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 ff3a 	bl	8005664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047f4:	f001 fe1e 	bl	8006434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047f8:	f000 fca6 	bl	8005148 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047fc:	f001 fdea 	bl	80063d4 <vPortEnterCritical>
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004806:	b25b      	sxtb	r3, r3
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d103      	bne.n	8004816 <xQueueReceive+0x122>
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481c:	b25b      	sxtb	r3, r3
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d103      	bne.n	800482c <xQueueReceive+0x138>
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482c:	f001 fe02 	bl	8006434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004830:	1d3a      	adds	r2, r7, #4
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f000 ff29 	bl	8005690 <xTaskCheckForTimeOut>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d123      	bne.n	800488c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004846:	f000 f997 	bl	8004b78 <prvIsQueueEmpty>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d017      	beq.n	8004880 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	3324      	adds	r3, #36	; 0x24
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fe4f 	bl	80054fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800485e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004860:	f000 f938 	bl	8004ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004864:	f000 fc7e 	bl	8005164 <xTaskResumeAll>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d189      	bne.n	8004782 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <xQueueReceive+0x1bc>)
 8004870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	e780      	b.n	8004782 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004882:	f000 f927 	bl	8004ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004886:	f000 fc6d 	bl	8005164 <xTaskResumeAll>
 800488a:	e77a      	b.n	8004782 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800488c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488e:	f000 f921 	bl	8004ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004892:	f000 fc67 	bl	8005164 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004898:	f000 f96e 	bl	8004b78 <prvIsQueueEmpty>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f43f af6f 	beq.w	8004782 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3730      	adds	r7, #48	; 0x30
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	623b      	str	r3, [r7, #32]
}
 80048dc:	bf00      	nop
 80048de:	e7fe      	b.n	80048de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <xQueueReceiveFromISR+0x3a>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <xQueueReceiveFromISR+0x3e>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <xQueueReceiveFromISR+0x40>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61fb      	str	r3, [r7, #28]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800490e:	f001 fe43 	bl	8006598 <vPortValidateInterruptPriority>
	__asm volatile
 8004912:	f3ef 8211 	mrs	r2, BASEPRI
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	61ba      	str	r2, [r7, #24]
 8004928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800492a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02f      	beq.n	800499a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004948:	f000 f89e 	bl	8004a88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	1e5a      	subs	r2, r3, #1
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d112      	bne.n	8004984 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	3310      	adds	r3, #16
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fe16 	bl	800559c <xTaskRemoveFromEventList>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e007      	b.n	8004994 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004988:	3301      	adds	r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	b25a      	sxtb	r2, r3
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004994:	2301      	movs	r3, #1
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
 8004998:	e001      	b.n	800499e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800499a:	2300      	movs	r3, #0
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f383 8811 	msr	BASEPRI, r3
}
 80049a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3738      	adds	r7, #56	; 0x38
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d14d      	bne.n	8004a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ffbc 	bl	800595c <xTaskPriorityDisinherit>
 80049e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	e043      	b.n	8004a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d119      	bne.n	8004a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6858      	ldr	r0, [r3, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	461a      	mov	r2, r3
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	f002 f820 	bl	8006a44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d32b      	bcc.n	8004a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	e026      	b.n	8004a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68d8      	ldr	r0, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	461a      	mov	r2, r3
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	f002 f806 	bl	8006a44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	425b      	negs	r3, r3
 8004a42:	441a      	add	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d207      	bcs.n	8004a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	441a      	add	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d105      	bne.n	8004a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a7e:	697b      	ldr	r3, [r7, #20]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d303      	bcc.n	8004abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68d9      	ldr	r1, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6838      	ldr	r0, [r7, #0]
 8004ac8:	f001 ffbc 	bl	8006a44 <memcpy>
	}
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004adc:	f001 fc7a 	bl	80063d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ae8:	e011      	b.n	8004b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3324      	adds	r3, #36	; 0x24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fd50 	bl	800559c <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b02:	f000 fe27 	bl	8005754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dce9      	bgt.n	8004aea <prvUnlockQueue+0x16>
 8004b16:	e000      	b.n	8004b1a <prvUnlockQueue+0x46>
					break;
 8004b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b22:	f001 fc87 	bl	8006434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b26:	f001 fc55 	bl	80063d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b32:	e011      	b.n	8004b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3310      	adds	r3, #16
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fd2b 	bl	800559c <xTaskRemoveFromEventList>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b4c:	f000 fe02 	bl	8005754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dce9      	bgt.n	8004b34 <prvUnlockQueue+0x60>
 8004b60:	e000      	b.n	8004b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	22ff      	movs	r2, #255	; 0xff
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b6c:	f001 fc62 	bl	8006434 <vPortExitCritical>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b80:	f001 fc28 	bl	80063d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e001      	b.n	8004b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b96:	f001 fc4d 	bl	8006434 <vPortExitCritical>

	return xReturn;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bac:	f001 fc12 	bl	80063d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d102      	bne.n	8004bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e001      	b.n	8004bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bc6:	f001 fc35 	bl	8006434 <vPortExitCritical>

	return xReturn;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e014      	b.n	8004c0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <vQueueAddToRegistry+0x50>)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bf0:	490c      	ldr	r1, [pc, #48]	; (8004c24 <vQueueAddToRegistry+0x50>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bfa:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <vQueueAddToRegistry+0x50>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c06:	e006      	b.n	8004c16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	d9e7      	bls.n	8004be4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	200009cc 	.word	0x200009cc

08004c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c38:	f001 fbcc 	bl	80063d4 <vPortEnterCritical>
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d103      	bne.n	8004c52 <vQueueWaitForMessageRestricted+0x2a>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d103      	bne.n	8004c68 <vQueueWaitForMessageRestricted+0x40>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	f001 fbe4 	bl	8006434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3324      	adds	r3, #36	; 0x24
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fc61 	bl	8005544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c82:	6978      	ldr	r0, [r7, #20]
 8004c84:	f7ff ff26 	bl	8004ad4 <prvUnlockQueue>
	}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08e      	sub	sp, #56	; 0x38
 8004c94:	af04      	add	r7, sp, #16
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	623b      	str	r3, [r7, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61fb      	str	r3, [r7, #28]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cd6:	23bc      	movs	r3, #188	; 0xbc
 8004cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2bbc      	cmp	r3, #188	; 0xbc
 8004cde:	d00a      	beq.n	8004cf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61bb      	str	r3, [r7, #24]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01e      	beq.n	8004d3c <xTaskCreateStatic+0xac>
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01b      	beq.n	8004d3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d16:	2300      	movs	r3, #0
 8004d18:	9303      	str	r3, [sp, #12]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	9302      	str	r3, [sp, #8]
 8004d1e:	f107 0314 	add.w	r3, r7, #20
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f850 	bl	8004dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d36:	f000 f8f3 	bl	8004f20 <prvAddNewTaskToReadyList>
 8004d3a:	e001      	b.n	8004d40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d40:	697b      	ldr	r3, [r7, #20]
	}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	; 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08c      	sub	sp, #48	; 0x30
 8004d4e:	af04      	add	r7, sp, #16
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fc5a 	bl	8006618 <pvPortMalloc>
 8004d64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00e      	beq.n	8004d8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d6c:	20bc      	movs	r0, #188	; 0xbc
 8004d6e:	f001 fc53 	bl	8006618 <pvPortMalloc>
 8004d72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d80:	e005      	b.n	8004d8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f001 fd14 	bl	80067b0 <vPortFree>
 8004d88:	e001      	b.n	8004d8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d017      	beq.n	8004dc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d9c:	88fa      	ldrh	r2, [r7, #6]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9303      	str	r3, [sp, #12]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f80e 	bl	8004dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004db8:	69f8      	ldr	r0, [r7, #28]
 8004dba:	f000 f8b1 	bl	8004f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e002      	b.n	8004dca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dca:	69bb      	ldr	r3, [r7, #24]
	}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	461a      	mov	r2, r3
 8004dec:	21a5      	movs	r1, #165	; 0xa5
 8004dee:	f001 fe37 	bl	8006a60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f023 0307 	bic.w	r3, r3, #7
 8004e0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	617b      	str	r3, [r7, #20]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01f      	beq.n	8004e72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e012      	b.n	8004e5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	7819      	ldrb	r1, [r3, #0]
 8004e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	3334      	adds	r3, #52	; 0x34
 8004e48:	460a      	mov	r2, r1
 8004e4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d006      	beq.n	8004e66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b0f      	cmp	r3, #15
 8004e62:	d9e9      	bls.n	8004e38 <prvInitialiseNewTask+0x64>
 8004e64:	e000      	b.n	8004e68 <prvInitialiseNewTask+0x94>
			{
				break;
 8004e66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e70:	e003      	b.n	8004e7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2b37      	cmp	r3, #55	; 0x37
 8004e7e:	d901      	bls.n	8004e84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e80:	2337      	movs	r3, #55	; 0x37
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	2200      	movs	r2, #0
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f8be 	bl	800401c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff f8b9 	bl	800401c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	3354      	adds	r3, #84	; 0x54
 8004ed4:	2260      	movs	r2, #96	; 0x60
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fdc1 	bl	8006a60 <memset>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <prvInitialiseNewTask+0x140>)
 8004ee2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <prvInitialiseNewTask+0x144>)
 8004ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <prvInitialiseNewTask+0x148>)
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	69b8      	ldr	r0, [r7, #24]
 8004ef6:	f001 f941 	bl	800617c <pxPortInitialiseStack>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	08009dfc 	.word	0x08009dfc
 8004f18:	08009e1c 	.word	0x08009e1c
 8004f1c:	08009ddc 	.word	0x08009ddc

08004f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f28:	f001 fa54 	bl	80063d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <prvAddNewTaskToReadyList+0xc4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <prvAddNewTaskToReadyList+0xc4>)
 8004f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f36:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <prvAddNewTaskToReadyList+0xc4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d110      	bne.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f4c:	f000 fc26 	bl	800579c <prvInitialiseTaskLists>
 8004f50:	e00d      	b.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f52:	4b26      	ldr	r3, [pc, #152]	; (8004fec <prvAddNewTaskToReadyList+0xcc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f5a:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d802      	bhi.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f6e:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <prvAddNewTaskToReadyList+0xd0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <prvAddNewTaskToReadyList+0xd0>)
 8004f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <prvAddNewTaskToReadyList+0xd0>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <prvAddNewTaskToReadyList+0xd4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d903      	bls.n	8004f94 <prvAddNewTaskToReadyList+0x74>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <prvAddNewTaskToReadyList+0xd4>)
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <prvAddNewTaskToReadyList+0xd8>)
 8004fa2:	441a      	add	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7ff f843 	bl	8004036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fb0:	f001 fa40 	bl	8006434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <prvAddNewTaskToReadyList+0xcc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d207      	bcs.n	8004fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <prvAddNewTaskToReadyList+0xdc>)
 8004fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000ee0 	.word	0x20000ee0
 8004fe8:	20000a0c 	.word	0x20000a0c
 8004fec:	20000eec 	.word	0x20000eec
 8004ff0:	20000efc 	.word	0x20000efc
 8004ff4:	20000ee8 	.word	0x20000ee8
 8004ff8:	20000a10 	.word	0x20000a10
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <vTaskDelay+0x60>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <vTaskDelay+0x30>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	60bb      	str	r3, [r7, #8]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005030:	f000 f88a 	bl	8005148 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005034:	2100      	movs	r1, #0
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fcfe 	bl	8005a38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800503c:	f000 f892 	bl	8005164 <xTaskResumeAll>
 8005040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <vTaskDelay+0x64>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000f08 	.word	0x20000f08
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005076:	463a      	mov	r2, r7
 8005078:	1d39      	adds	r1, r7, #4
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe ff78 	bl	8003f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	9202      	str	r2, [sp, #8]
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	2300      	movs	r3, #0
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	460a      	mov	r2, r1
 8005096:	4924      	ldr	r1, [pc, #144]	; (8005128 <vTaskStartScheduler+0xc0>)
 8005098:	4824      	ldr	r0, [pc, #144]	; (800512c <vTaskStartScheduler+0xc4>)
 800509a:	f7ff fdf9 	bl	8004c90 <xTaskCreateStatic>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a23      	ldr	r2, [pc, #140]	; (8005130 <vTaskStartScheduler+0xc8>)
 80050a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050a4:	4b22      	ldr	r3, [pc, #136]	; (8005130 <vTaskStartScheduler+0xc8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e001      	b.n	80050b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d102      	bne.n	80050c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050bc:	f000 fd10 	bl	8005ae0 <xTimerCreateTimerTask>
 80050c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d11b      	bne.n	8005100 <vTaskStartScheduler+0x98>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	613b      	str	r3, [r7, #16]
}
 80050da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <vTaskStartScheduler+0xcc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3354      	adds	r3, #84	; 0x54
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <vTaskStartScheduler+0xd0>)
 80050e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <vTaskStartScheduler+0xd4>)
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <vTaskStartScheduler+0xd8>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <vTaskStartScheduler+0xdc>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050fa:	f001 f8c9 	bl	8006290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050fe:	e00e      	b.n	800511e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d10a      	bne.n	800511e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <vTaskStartScheduler+0xb4>
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	0800749c 	.word	0x0800749c
 800512c:	0800576d 	.word	0x0800576d
 8005130:	20000f04 	.word	0x20000f04
 8005134:	20000a0c 	.word	0x20000a0c
 8005138:	20000028 	.word	0x20000028
 800513c:	20000f00 	.word	0x20000f00
 8005140:	20000eec 	.word	0x20000eec
 8005144:	20000ee4 	.word	0x20000ee4

08005148 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <vTaskSuspendAll+0x18>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	4a03      	ldr	r2, [pc, #12]	; (8005160 <vTaskSuspendAll+0x18>)
 8005154:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005156:	bf00      	nop
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000f08 	.word	0x20000f08

08005164 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005172:	4b42      	ldr	r3, [pc, #264]	; (800527c <xTaskResumeAll+0x118>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xTaskResumeAll+0x2c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005190:	f001 f920 	bl	80063d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <xTaskResumeAll+0x118>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3b01      	subs	r3, #1
 800519a:	4a38      	ldr	r2, [pc, #224]	; (800527c <xTaskResumeAll+0x118>)
 800519c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <xTaskResumeAll+0x118>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d162      	bne.n	800526c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051a6:	4b36      	ldr	r3, [pc, #216]	; (8005280 <xTaskResumeAll+0x11c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d05e      	beq.n	800526c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ae:	e02f      	b.n	8005210 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b0:	4b34      	ldr	r3, [pc, #208]	; (8005284 <xTaskResumeAll+0x120>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3318      	adds	r3, #24
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe ff97 	bl	80040f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe ff92 	bl	80040f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <xTaskResumeAll+0x124>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d903      	bls.n	80051e0 <xTaskResumeAll+0x7c>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <xTaskResumeAll+0x124>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4a27      	ldr	r2, [pc, #156]	; (800528c <xTaskResumeAll+0x128>)
 80051ee:	441a      	add	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe ff1d 	bl	8004036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4b23      	ldr	r3, [pc, #140]	; (8005290 <xTaskResumeAll+0x12c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <xTaskResumeAll+0x130>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005210:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <xTaskResumeAll+0x120>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1cb      	bne.n	80051b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800521e:	f000 fb5f 	bl	80058e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005222:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <xTaskResumeAll+0x134>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800522e:	f000 f847 	bl	80052c0 <xTaskIncrementTick>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <xTaskResumeAll+0x130>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3b01      	subs	r3, #1
 8005242:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f1      	bne.n	800522e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <xTaskResumeAll+0x134>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <xTaskResumeAll+0x130>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d009      	beq.n	800526c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <xTaskResumeAll+0x138>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800526c:	f001 f8e2 	bl	8006434 <vPortExitCritical>

	return xAlreadyYielded;
 8005270:	68bb      	ldr	r3, [r7, #8]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000f08 	.word	0x20000f08
 8005280:	20000ee0 	.word	0x20000ee0
 8005284:	20000ea0 	.word	0x20000ea0
 8005288:	20000ee8 	.word	0x20000ee8
 800528c:	20000a10 	.word	0x20000a10
 8005290:	20000a0c 	.word	0x20000a0c
 8005294:	20000ef4 	.word	0x20000ef4
 8005298:	20000ef0 	.word	0x20000ef0
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <xTaskGetTickCount+0x1c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052ac:	687b      	ldr	r3, [r7, #4]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000ee4 	.word	0x20000ee4

080052c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ca:	4b4f      	ldr	r3, [pc, #316]	; (8005408 <xTaskIncrementTick+0x148>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 808f 	bne.w	80053f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052d4:	4b4d      	ldr	r3, [pc, #308]	; (800540c <xTaskIncrementTick+0x14c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052dc:	4a4b      	ldr	r2, [pc, #300]	; (800540c <xTaskIncrementTick+0x14c>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d120      	bne.n	800532a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052e8:	4b49      	ldr	r3, [pc, #292]	; (8005410 <xTaskIncrementTick+0x150>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <xTaskIncrementTick+0x48>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	603b      	str	r3, [r7, #0]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <xTaskIncrementTick+0x46>
 8005308:	4b41      	ldr	r3, [pc, #260]	; (8005410 <xTaskIncrementTick+0x150>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	4b41      	ldr	r3, [pc, #260]	; (8005414 <xTaskIncrementTick+0x154>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3f      	ldr	r2, [pc, #252]	; (8005410 <xTaskIncrementTick+0x150>)
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4a3f      	ldr	r2, [pc, #252]	; (8005414 <xTaskIncrementTick+0x154>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <xTaskIncrementTick+0x158>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a3d      	ldr	r2, [pc, #244]	; (8005418 <xTaskIncrementTick+0x158>)
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	f000 fadb 	bl	80058e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800532a:	4b3c      	ldr	r3, [pc, #240]	; (800541c <xTaskIncrementTick+0x15c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	429a      	cmp	r2, r3
 8005332:	d349      	bcc.n	80053c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005334:	4b36      	ldr	r3, [pc, #216]	; (8005410 <xTaskIncrementTick+0x150>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <xTaskIncrementTick+0x15c>)
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	601a      	str	r2, [r3, #0]
					break;
 8005346:	e03f      	b.n	80053c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <xTaskIncrementTick+0x150>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d203      	bcs.n	8005368 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005360:	4a2e      	ldr	r2, [pc, #184]	; (800541c <xTaskIncrementTick+0x15c>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005366:	e02f      	b.n	80053c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe febf 	bl	80040f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	3318      	adds	r3, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe feb6 	bl	80040f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <xTaskIncrementTick+0x160>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <xTaskIncrementTick+0xd8>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a22      	ldr	r2, [pc, #136]	; (8005420 <xTaskIncrementTick+0x160>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <xTaskIncrementTick+0x164>)
 80053a6:	441a      	add	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7fe fe41 	bl	8004036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <xTaskIncrementTick+0x168>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3b8      	bcc.n	8005334 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c6:	e7b5      	b.n	8005334 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053c8:	4b17      	ldr	r3, [pc, #92]	; (8005428 <xTaskIncrementTick+0x168>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ce:	4915      	ldr	r1, [pc, #84]	; (8005424 <xTaskIncrementTick+0x164>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d901      	bls.n	80053e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <xTaskIncrementTick+0x16c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e004      	b.n	80053fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <xTaskIncrementTick+0x170>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <xTaskIncrementTick+0x170>)
 80053fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053fc:	697b      	ldr	r3, [r7, #20]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000f08 	.word	0x20000f08
 800540c:	20000ee4 	.word	0x20000ee4
 8005410:	20000e98 	.word	0x20000e98
 8005414:	20000e9c 	.word	0x20000e9c
 8005418:	20000ef8 	.word	0x20000ef8
 800541c:	20000f00 	.word	0x20000f00
 8005420:	20000ee8 	.word	0x20000ee8
 8005424:	20000a10 	.word	0x20000a10
 8005428:	20000a0c 	.word	0x20000a0c
 800542c:	20000ef4 	.word	0x20000ef4
 8005430:	20000ef0 	.word	0x20000ef0

08005434 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800543a:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <vTaskSwitchContext+0xb0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005442:	4b29      	ldr	r3, [pc, #164]	; (80054e8 <vTaskSwitchContext+0xb4>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005448:	e046      	b.n	80054d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <vTaskSwitchContext+0xb4>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005450:	4b26      	ldr	r3, [pc, #152]	; (80054ec <vTaskSwitchContext+0xb8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e010      	b.n	800547a <vTaskSwitchContext+0x46>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <vTaskSwitchContext+0x40>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <vTaskSwitchContext+0x3e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	491d      	ldr	r1, [pc, #116]	; (80054f0 <vTaskSwitchContext+0xbc>)
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0e4      	beq.n	8005458 <vTaskSwitchContext+0x24>
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <vTaskSwitchContext+0xbc>)
 800549a:	4413      	add	r3, r2
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3308      	adds	r3, #8
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d104      	bne.n	80054be <vTaskSwitchContext+0x8a>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a0b      	ldr	r2, [pc, #44]	; (80054f4 <vTaskSwitchContext+0xc0>)
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <vTaskSwitchContext+0xb8>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054ce:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <vTaskSwitchContext+0xc0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3354      	adds	r3, #84	; 0x54
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <vTaskSwitchContext+0xc4>)
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000f08 	.word	0x20000f08
 80054e8:	20000ef4 	.word	0x20000ef4
 80054ec:	20000ee8 	.word	0x20000ee8
 80054f0:	20000a10 	.word	0x20000a10
 80054f4:	20000a0c 	.word	0x20000a0c
 80054f8:	20000028 	.word	0x20000028

080054fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005522:	4b07      	ldr	r3, [pc, #28]	; (8005540 <vTaskPlaceOnEventList+0x44>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3318      	adds	r3, #24
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fe fda7 	bl	800407e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005530:	2101      	movs	r1, #1
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f000 fa80 	bl	8005a38 <prvAddCurrentTaskToDelayedList>
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000a0c 	.word	0x20000a0c

08005544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10a      	bne.n	800556c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	617b      	str	r3, [r7, #20]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <vTaskPlaceOnEventListRestricted+0x54>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3318      	adds	r3, #24
 8005572:	4619      	mov	r1, r3
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7fe fd5e 	bl	8004036 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005580:	f04f 33ff 	mov.w	r3, #4294967295
 8005584:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	68b8      	ldr	r0, [r7, #8]
 800558a:	f000 fa55 	bl	8005a38 <prvAddCurrentTaskToDelayedList>
	}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000a0c 	.word	0x20000a0c

0800559c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	60fb      	str	r3, [r7, #12]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3318      	adds	r3, #24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe fd8f 	bl	80040f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d2:	4b1e      	ldr	r3, [pc, #120]	; (800564c <xTaskRemoveFromEventList+0xb0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11d      	bne.n	8005616 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3304      	adds	r3, #4
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fd86 	bl	80040f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <xTaskRemoveFromEventList+0xb4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <xTaskRemoveFromEventList+0x5c>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a16      	ldr	r2, [pc, #88]	; (8005650 <xTaskRemoveFromEventList+0xb4>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4a13      	ldr	r2, [pc, #76]	; (8005654 <xTaskRemoveFromEventList+0xb8>)
 8005606:	441a      	add	r2, r3
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fe fd11 	bl	8004036 <vListInsertEnd>
 8005614:	e005      	b.n	8005622 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3318      	adds	r3, #24
 800561a:	4619      	mov	r1, r3
 800561c:	480e      	ldr	r0, [pc, #56]	; (8005658 <xTaskRemoveFromEventList+0xbc>)
 800561e:	f7fe fd0a 	bl	8004036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <xTaskRemoveFromEventList+0xc0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	429a      	cmp	r2, r3
 800562e:	d905      	bls.n	800563c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <xTaskRemoveFromEventList+0xc4>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e001      	b.n	8005640 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005640:	697b      	ldr	r3, [r7, #20]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000f08 	.word	0x20000f08
 8005650:	20000ee8 	.word	0x20000ee8
 8005654:	20000a10 	.word	0x20000a10
 8005658:	20000ea0 	.word	0x20000ea0
 800565c:	20000a0c 	.word	0x20000a0c
 8005660:	20000ef4 	.word	0x20000ef4

08005664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <vTaskInternalSetTimeOutState+0x24>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <vTaskInternalSetTimeOutState+0x28>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000ef8 	.word	0x20000ef8
 800568c:	20000ee4 	.word	0x20000ee4

08005690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056d2:	f000 fe7f 	bl	80063d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <xTaskCheckForTimeOut+0xbc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d102      	bne.n	80056f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e023      	b.n	800573e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <xTaskCheckForTimeOut+0xc0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d007      	beq.n	8005712 <xTaskCheckForTimeOut+0x82>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	d302      	bcc.n	8005712 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e015      	b.n	800573e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	d20b      	bcs.n	8005734 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad2      	subs	r2, r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff9b 	bl	8005664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	e004      	b.n	800573e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800573a:	2301      	movs	r3, #1
 800573c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800573e:	f000 fe79 	bl	8006434 <vPortExitCritical>

	return xReturn;
 8005742:	69fb      	ldr	r3, [r7, #28]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000ee4 	.word	0x20000ee4
 8005750:	20000ef8 	.word	0x20000ef8

08005754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <vTaskMissedYield+0x14>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	20000ef4 	.word	0x20000ef4

0800576c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005774:	f000 f852 	bl	800581c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <prvIdleTask+0x28>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d9f9      	bls.n	8005774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <prvIdleTask+0x2c>)
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005790:	e7f0      	b.n	8005774 <prvIdleTask+0x8>
 8005792:	bf00      	nop
 8005794:	20000a10 	.word	0x20000a10
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057a2:	2300      	movs	r3, #0
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	e00c      	b.n	80057c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4a12      	ldr	r2, [pc, #72]	; (80057fc <prvInitialiseTaskLists+0x60>)
 80057b4:	4413      	add	r3, r2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fc10 	bl	8003fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3301      	adds	r3, #1
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b37      	cmp	r3, #55	; 0x37
 80057c6:	d9ef      	bls.n	80057a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057c8:	480d      	ldr	r0, [pc, #52]	; (8005800 <prvInitialiseTaskLists+0x64>)
 80057ca:	f7fe fc07 	bl	8003fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ce:	480d      	ldr	r0, [pc, #52]	; (8005804 <prvInitialiseTaskLists+0x68>)
 80057d0:	f7fe fc04 	bl	8003fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057d4:	480c      	ldr	r0, [pc, #48]	; (8005808 <prvInitialiseTaskLists+0x6c>)
 80057d6:	f7fe fc01 	bl	8003fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057da:	480c      	ldr	r0, [pc, #48]	; (800580c <prvInitialiseTaskLists+0x70>)
 80057dc:	f7fe fbfe 	bl	8003fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057e0:	480b      	ldr	r0, [pc, #44]	; (8005810 <prvInitialiseTaskLists+0x74>)
 80057e2:	f7fe fbfb 	bl	8003fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <prvInitialiseTaskLists+0x78>)
 80057e8:	4a05      	ldr	r2, [pc, #20]	; (8005800 <prvInitialiseTaskLists+0x64>)
 80057ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <prvInitialiseTaskLists+0x7c>)
 80057ee:	4a05      	ldr	r2, [pc, #20]	; (8005804 <prvInitialiseTaskLists+0x68>)
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000a10 	.word	0x20000a10
 8005800:	20000e70 	.word	0x20000e70
 8005804:	20000e84 	.word	0x20000e84
 8005808:	20000ea0 	.word	0x20000ea0
 800580c:	20000eb4 	.word	0x20000eb4
 8005810:	20000ecc 	.word	0x20000ecc
 8005814:	20000e98 	.word	0x20000e98
 8005818:	20000e9c 	.word	0x20000e9c

0800581c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005822:	e019      	b.n	8005858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005824:	f000 fdd6 	bl	80063d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <prvCheckTasksWaitingTermination+0x50>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fc5b 	bl	80040f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800583a:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <prvCheckTasksWaitingTermination+0x54>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <prvCheckTasksWaitingTermination+0x54>)
 8005842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <prvCheckTasksWaitingTermination+0x58>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <prvCheckTasksWaitingTermination+0x58>)
 800584c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800584e:	f000 fdf1 	bl	8006434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f810 	bl	8005878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <prvCheckTasksWaitingTermination+0x58>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e1      	bne.n	8005824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000eb4 	.word	0x20000eb4
 8005870:	20000ee0 	.word	0x20000ee0
 8005874:	20000ec8 	.word	0x20000ec8

08005878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3354      	adds	r3, #84	; 0x54
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f9e1 	bl	8006c4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005890:	2b00      	cmp	r3, #0
 8005892:	d108      	bne.n	80058a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	4618      	mov	r0, r3
 800589a:	f000 ff89 	bl	80067b0 <vPortFree>
				vPortFree( pxTCB );
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 ff86 	bl	80067b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058a4:	e018      	b.n	80058d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d103      	bne.n	80058b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 ff7d 	bl	80067b0 <vPortFree>
	}
 80058b6:	e00f      	b.n	80058d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d00a      	beq.n	80058d8 <prvDeleteTCB+0x60>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60fb      	str	r3, [r7, #12]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <prvDeleteTCB+0x5e>
	}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvResetNextTaskUnblockTime+0x38>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <prvResetNextTaskUnblockTime+0x3c>)
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058f8:	e008      	b.n	800590c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <prvResetNextTaskUnblockTime+0x38>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a04      	ldr	r2, [pc, #16]	; (800591c <prvResetNextTaskUnblockTime+0x3c>)
 800590a:	6013      	str	r3, [r2, #0]
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	20000e98 	.word	0x20000e98
 800591c:	20000f00 	.word	0x20000f00

08005920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <xTaskGetSchedulerState+0x34>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d102      	bne.n	8005934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800592e:	2301      	movs	r3, #1
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	e008      	b.n	8005946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005934:	4b08      	ldr	r3, [pc, #32]	; (8005958 <xTaskGetSchedulerState+0x38>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800593c:	2302      	movs	r3, #2
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	e001      	b.n	8005946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005946:	687b      	ldr	r3, [r7, #4]
	}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000eec 	.word	0x20000eec
 8005958:	20000f08 	.word	0x20000f08

0800595c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d056      	beq.n	8005a20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005972:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <xTaskPriorityDisinherit+0xd0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d00a      	beq.n	8005992 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60fb      	str	r3, [r7, #12]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60bb      	str	r3, [r7, #8]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	1e5a      	subs	r2, r3, #1
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d02c      	beq.n	8005a20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d128      	bne.n	8005a20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fb8c 	bl	80040f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <xTaskPriorityDisinherit+0xd4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d903      	bls.n	8005a00 <xTaskPriorityDisinherit+0xa4>
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	4a0c      	ldr	r2, [pc, #48]	; (8005a30 <xTaskPriorityDisinherit+0xd4>)
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <xTaskPriorityDisinherit+0xd8>)
 8005a0e:	441a      	add	r2, r3
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7fe fb0d 	bl	8004036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a20:	697b      	ldr	r3, [r7, #20]
	}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000a0c 	.word	0x20000a0c
 8005a30:	20000ee8 	.word	0x20000ee8
 8005a34:	20000a10 	.word	0x20000a10

08005a38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a42:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fb4e 	bl	80040f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d10a      	bne.n	8005a72 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4819      	ldr	r0, [pc, #100]	; (8005ad0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a6c:	f7fe fae3 	bl	8004036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a70:	e026      	b.n	8005ac0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d209      	bcs.n	8005a9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f7fe faf1 	bl	800407e <vListInsert>
}
 8005a9c:	e010      	b.n	8005ac0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvAddCurrentTaskToDelayedList+0x94>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7fe fae7 	bl	800407e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d202      	bcs.n	8005ac0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aba:	4a08      	ldr	r2, [pc, #32]	; (8005adc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000ee4 	.word	0x20000ee4
 8005acc:	20000a0c 	.word	0x20000a0c
 8005ad0:	20000ecc 	.word	0x20000ecc
 8005ad4:	20000e9c 	.word	0x20000e9c
 8005ad8:	20000e98 	.word	0x20000e98
 8005adc:	20000f00 	.word	0x20000f00

08005ae0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aea:	f000 fb07 	bl	80060fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005aee:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <xTimerCreateTimerTask+0x80>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d021      	beq.n	8005b3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005afe:	1d3a      	adds	r2, r7, #4
 8005b00:	f107 0108 	add.w	r1, r7, #8
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fa4d 	bl	8003fa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	9202      	str	r2, [sp, #8]
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	2302      	movs	r3, #2
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	460a      	mov	r2, r1
 8005b20:	4910      	ldr	r1, [pc, #64]	; (8005b64 <xTimerCreateTimerTask+0x84>)
 8005b22:	4811      	ldr	r0, [pc, #68]	; (8005b68 <xTimerCreateTimerTask+0x88>)
 8005b24:	f7ff f8b4 	bl	8004c90 <xTaskCreateStatic>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	4a10      	ldr	r2, [pc, #64]	; (8005b6c <xTimerCreateTimerTask+0x8c>)
 8005b2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <xTimerCreateTimerTask+0x8c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b36:	2301      	movs	r3, #1
 8005b38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b56:	697b      	ldr	r3, [r7, #20]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000f3c 	.word	0x20000f3c
 8005b64:	080074a4 	.word	0x080074a4
 8005b68:	08005ca5 	.word	0x08005ca5
 8005b6c:	20000f40 	.word	0x20000f40

08005b70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	623b      	str	r3, [r7, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	e7fe      	b.n	8005b9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <xTimerGenericCommand+0x98>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02a      	beq.n	8005bfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	dc18      	bgt.n	8005bea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bb8:	f7ff feb2 	bl	8005920 <xTaskGetSchedulerState>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d109      	bne.n	8005bd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <xTimerGenericCommand+0x98>)
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	f107 0110 	add.w	r1, r7, #16
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bce:	f7fe fbf7 	bl	80043c0 <xQueueGenericSend>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24
 8005bd4:	e012      	b.n	8005bfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <xTimerGenericCommand+0x98>)
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	f107 0110 	add.w	r1, r7, #16
 8005bde:	2300      	movs	r3, #0
 8005be0:	2200      	movs	r2, #0
 8005be2:	f7fe fbed 	bl	80043c0 <xQueueGenericSend>
 8005be6:	6278      	str	r0, [r7, #36]	; 0x24
 8005be8:	e008      	b.n	8005bfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <xTimerGenericCommand+0x98>)
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f107 0110 	add.w	r1, r7, #16
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	f7fe fce1 	bl	80045bc <xQueueGenericSendFromISR>
 8005bfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000f3c 	.word	0x20000f3c

08005c0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c16:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <prvProcessExpiredTimer+0x94>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fa63 	bl	80040f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d022      	beq.n	8005c7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	18d1      	adds	r1, r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	6978      	ldr	r0, [r7, #20]
 8005c46:	f000 f8d1 	bl	8005dec <prvInsertTimerInActiveList>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01f      	beq.n	8005c90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	2100      	movs	r1, #0
 8005c5a:	6978      	ldr	r0, [r7, #20]
 8005c5c:	f7ff ff88 	bl	8005b70 <xTimerGenericCommand>
 8005c60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d113      	bne.n	8005c90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	60fb      	str	r3, [r7, #12]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	6978      	ldr	r0, [r7, #20]
 8005c96:	4798      	blx	r3
}
 8005c98:	bf00      	nop
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000f34 	.word	0x20000f34

08005ca4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f857 	bl	8005d64 <prvGetNextExpireTime>
 8005cb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f803 	bl	8005cc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cc2:	f000 f8d5 	bl	8005e70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cc6:	e7f1      	b.n	8005cac <prvTimerTask+0x8>

08005cc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cd2:	f7ff fa39 	bl	8005148 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f866 	bl	8005dac <prvSampleTimeNow>
 8005ce0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d130      	bne.n	8005d4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <prvProcessTimerOrBlockTask+0x3c>
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d806      	bhi.n	8005d04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cf6:	f7ff fa35 	bl	8005164 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff85 	bl	8005c0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d02:	e024      	b.n	8005d4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <prvProcessTimerOrBlockTask+0x90>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <prvProcessTimerOrBlockTask+0x50>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <prvProcessTimerOrBlockTask+0x52>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <prvProcessTimerOrBlockTask+0x94>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f7fe ff7d 	bl	8004c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d2e:	f7ff fa19 	bl	8005164 <xTaskResumeAll>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d38:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <prvProcessTimerOrBlockTask+0x98>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
}
 8005d48:	e001      	b.n	8005d4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d4a:	f7ff fa0b 	bl	8005164 <xTaskResumeAll>
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000f38 	.word	0x20000f38
 8005d5c:	20000f3c 	.word	0x20000f3c
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <prvGetNextExpireTime+0x44>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <prvGetNextExpireTime+0x16>
 8005d76:	2201      	movs	r2, #1
 8005d78:	e000      	b.n	8005d7c <prvGetNextExpireTime+0x18>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <prvGetNextExpireTime+0x44>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e001      	b.n	8005d98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d98:	68fb      	ldr	r3, [r7, #12]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000f34 	.word	0x20000f34

08005dac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005db4:	f7ff fa74 	bl	80052a0 <xTaskGetTickCount>
 8005db8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvSampleTimeNow+0x3c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d205      	bcs.n	8005dd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005dc4:	f000 f936 	bl	8006034 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005dd6:	4a04      	ldr	r2, [pc, #16]	; (8005de8 <prvSampleTimeNow+0x3c>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000f44 	.word	0x20000f44

08005dec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d812      	bhi.n	8005e38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	1ad2      	subs	r2, r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d302      	bcc.n	8005e26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e01b      	b.n	8005e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <prvInsertTimerInActiveList+0x7c>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fe f924 	bl	800407e <vListInsert>
 8005e36:	e012      	b.n	8005e5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d206      	bcs.n	8005e4e <prvInsertTimerInActiveList+0x62>
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d302      	bcc.n	8005e4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e007      	b.n	8005e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <prvInsertTimerInActiveList+0x80>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3304      	adds	r3, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7fe f910 	bl	800407e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e5e:	697b      	ldr	r3, [r7, #20]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000f38 	.word	0x20000f38
 8005e6c:	20000f34 	.word	0x20000f34

08005e70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
 8005e74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e76:	e0ca      	b.n	800600e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da18      	bge.n	8005eb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	3304      	adds	r3, #4
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fb      	str	r3, [r7, #28]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea6:	6850      	ldr	r0, [r2, #4]
 8005ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	4611      	mov	r1, r2
 8005eae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f2c0 80aa 	blt.w	800600c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe f911 	bl	80040f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ece:	463b      	mov	r3, r7
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff6b 	bl	8005dac <prvSampleTimeNow>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	f200 8097 	bhi.w	800600e <prvProcessReceivedCommands+0x19e>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <prvProcessReceivedCommands+0x78>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f11 	.word	0x08005f11
 8005ef4:	08005f85 	.word	0x08005f85
 8005ef8:	08005f99 	.word	0x08005f99
 8005efc:	08005fe3 	.word	0x08005fe3
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005f11 	.word	0x08005f11
 8005f08:	08005f85 	.word	0x08005f85
 8005f0c:	08005f99 	.word	0x08005f99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	18d1      	adds	r1, r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f30:	f7ff ff5c 	bl	8005dec <prvInsertTimerInActiveList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d069      	beq.n	800600e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05e      	beq.n	800600e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	441a      	add	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f62:	f7ff fe05 	bl	8005b70 <xTimerGenericCommand>
 8005f66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d14f      	bne.n	800600e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	61bb      	str	r3, [r7, #24]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f96:	e03a      	b.n	800600e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	617b      	str	r3, [r7, #20]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	18d1      	adds	r1, r2, r3
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	f7ff ff06 	bl	8005dec <prvInsertTimerInActiveList>
					break;
 8005fe0:	e015      	b.n	800600e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff2:	f000 fbdd 	bl	80067b0 <vPortFree>
 8005ff6:	e00a      	b.n	800600e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800600a:	e000      	b.n	800600e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800600c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <prvProcessReceivedCommands+0x1c0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1d39      	adds	r1, r7, #4
 8006014:	2200      	movs	r2, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fb6c 	bl	80046f4 <xQueueReceive>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f af2a 	bne.w	8005e78 <prvProcessReceivedCommands+0x8>
	}
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3730      	adds	r7, #48	; 0x30
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000f3c 	.word	0x20000f3c

08006034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800603a:	e048      	b.n	80060ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <prvSwitchTimerLists+0xc0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <prvSwitchTimerLists+0xc0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe f84b 	bl	80040f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02e      	beq.n	80060ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d90e      	bls.n	80060a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <prvSwitchTimerLists+0xc0>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f7fd fff0 	bl	800407e <vListInsert>
 800609e:	e016      	b.n	80060ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060a0:	2300      	movs	r3, #0
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	2100      	movs	r1, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff fd60 	bl	8005b70 <xTimerGenericCommand>
 80060b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	603b      	str	r3, [r7, #0]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <prvSwitchTimerLists+0xc0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1b1      	bne.n	800603c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <prvSwitchTimerLists+0xc0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <prvSwitchTimerLists+0xc4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <prvSwitchTimerLists+0xc0>)
 80060e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060e6:	4a04      	ldr	r2, [pc, #16]	; (80060f8 <prvSwitchTimerLists+0xc4>)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000f34 	.word	0x20000f34
 80060f8:	20000f38 	.word	0x20000f38

080060fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006102:	f000 f967 	bl	80063d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <prvCheckForValidListAndQueue+0x60>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d120      	bne.n	8006150 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800610e:	4814      	ldr	r0, [pc, #80]	; (8006160 <prvCheckForValidListAndQueue+0x64>)
 8006110:	f7fd ff64 	bl	8003fdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006114:	4813      	ldr	r0, [pc, #76]	; (8006164 <prvCheckForValidListAndQueue+0x68>)
 8006116:	f7fd ff61 	bl	8003fdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <prvCheckForValidListAndQueue+0x6c>)
 800611c:	4a10      	ldr	r2, [pc, #64]	; (8006160 <prvCheckForValidListAndQueue+0x64>)
 800611e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006120:	4b12      	ldr	r3, [pc, #72]	; (800616c <prvCheckForValidListAndQueue+0x70>)
 8006122:	4a10      	ldr	r2, [pc, #64]	; (8006164 <prvCheckForValidListAndQueue+0x68>)
 8006124:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006126:	2300      	movs	r3, #0
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <prvCheckForValidListAndQueue+0x74>)
 800612c:	4a11      	ldr	r2, [pc, #68]	; (8006174 <prvCheckForValidListAndQueue+0x78>)
 800612e:	2110      	movs	r1, #16
 8006130:	200a      	movs	r0, #10
 8006132:	f7fe f86f 	bl	8004214 <xQueueGenericCreateStatic>
 8006136:	4603      	mov	r3, r0
 8006138:	4a08      	ldr	r2, [pc, #32]	; (800615c <prvCheckForValidListAndQueue+0x60>)
 800613a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800613c:	4b07      	ldr	r3, [pc, #28]	; (800615c <prvCheckForValidListAndQueue+0x60>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <prvCheckForValidListAndQueue+0x60>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	490b      	ldr	r1, [pc, #44]	; (8006178 <prvCheckForValidListAndQueue+0x7c>)
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fd42 	bl	8004bd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006150:	f000 f970 	bl	8006434 <vPortExitCritical>
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000f3c 	.word	0x20000f3c
 8006160:	20000f0c 	.word	0x20000f0c
 8006164:	20000f20 	.word	0x20000f20
 8006168:	20000f34 	.word	0x20000f34
 800616c:	20000f38 	.word	0x20000f38
 8006170:	20000fe8 	.word	0x20000fe8
 8006174:	20000f48 	.word	0x20000f48
 8006178:	080074ac 	.word	0x080074ac

0800617c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b04      	subs	r3, #4
 800618c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3b04      	subs	r3, #4
 800619a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3b04      	subs	r3, #4
 80061aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061ac:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <pxPortInitialiseStack+0x64>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b14      	subs	r3, #20
 80061b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b04      	subs	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f06f 0202 	mvn.w	r2, #2
 80061ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3b20      	subs	r3, #32
 80061d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061d2:	68fb      	ldr	r3, [r7, #12]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	080061e5 	.word	0x080061e5

080061e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <prvTaskExitError+0x54>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d00a      	beq.n	800620e <prvTaskExitError+0x2a>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60fb      	str	r3, [r7, #12]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <prvTaskExitError+0x28>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	60bb      	str	r3, [r7, #8]
}
 8006220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006222:	bf00      	nop
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0fc      	beq.n	8006224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000024 	.word	0x20000024
 800623c:	00000000 	.word	0x00000000

08006240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <pxCurrentTCBConst2>)
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	f380 8809 	msr	PSP, r0
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f380 8811 	msr	BASEPRI, r0
 800625a:	4770      	bx	lr
 800625c:	f3af 8000 	nop.w

08006260 <pxCurrentTCBConst2>:
 8006260:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006268:	4808      	ldr	r0, [pc, #32]	; (800628c <prvPortStartFirstTask+0x24>)
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f380 8808 	msr	MSP, r0
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f380 8814 	msr	CONTROL, r0
 800627a:	b662      	cpsie	i
 800627c:	b661      	cpsie	f
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	df00      	svc	0
 8006288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800628a:	bf00      	nop
 800628c:	e000ed08 	.word	0xe000ed08

08006290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006296:	4b46      	ldr	r3, [pc, #280]	; (80063b0 <xPortStartScheduler+0x120>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a46      	ldr	r2, [pc, #280]	; (80063b4 <xPortStartScheduler+0x124>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10a      	bne.n	80062b6 <xPortStartScheduler+0x26>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062b6:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <xPortStartScheduler+0x120>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <xPortStartScheduler+0x128>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10a      	bne.n	80062d6 <xPortStartScheduler+0x46>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	60fb      	str	r3, [r7, #12]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062d6:	4b39      	ldr	r3, [pc, #228]	; (80063bc <xPortStartScheduler+0x12c>)
 80062d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <xPortStartScheduler+0x130>)
 80062fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <xPortStartScheduler+0x134>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006304:	e009      	b.n	800631a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006306:	4b2f      	ldr	r3, [pc, #188]	; (80063c4 <xPortStartScheduler+0x134>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3b01      	subs	r3, #1
 800630c:	4a2d      	ldr	r2, [pc, #180]	; (80063c4 <xPortStartScheduler+0x134>)
 800630e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d0ef      	beq.n	8006306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006326:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <xPortStartScheduler+0x134>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f1c3 0307 	rsb	r3, r3, #7
 800632e:	2b04      	cmp	r3, #4
 8006330:	d00a      	beq.n	8006348 <xPortStartScheduler+0xb8>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60bb      	str	r3, [r7, #8]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <xPortStartScheduler+0x134>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <xPortStartScheduler+0x134>)
 8006350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006352:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <xPortStartScheduler+0x134>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800635a:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <xPortStartScheduler+0x134>)
 800635c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <xPortStartScheduler+0x138>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <xPortStartScheduler+0x138>)
 800636c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006372:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <xPortStartScheduler+0x138>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <xPortStartScheduler+0x138>)
 8006378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800637c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800637e:	f000 f8dd 	bl	800653c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <xPortStartScheduler+0x13c>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006388:	f000 f8fc 	bl	8006584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800638c:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <xPortStartScheduler+0x140>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0f      	ldr	r2, [pc, #60]	; (80063d0 <xPortStartScheduler+0x140>)
 8006392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006398:	f7ff ff66 	bl	8006268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800639c:	f7ff f84a 	bl	8005434 <vTaskSwitchContext>
	prvTaskExitError();
 80063a0:	f7ff ff20 	bl	80061e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	e000ed00 	.word	0xe000ed00
 80063b4:	410fc271 	.word	0x410fc271
 80063b8:	410fc270 	.word	0x410fc270
 80063bc:	e000e400 	.word	0xe000e400
 80063c0:	20001038 	.word	0x20001038
 80063c4:	2000103c 	.word	0x2000103c
 80063c8:	e000ed20 	.word	0xe000ed20
 80063cc:	20000024 	.word	0x20000024
 80063d0:	e000ef34 	.word	0xe000ef34

080063d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	607b      	str	r3, [r7, #4]
}
 80063ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <vPortEnterCritical+0x58>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3301      	adds	r3, #1
 80063f4:	4a0d      	ldr	r2, [pc, #52]	; (800642c <vPortEnterCritical+0x58>)
 80063f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063f8:	4b0c      	ldr	r3, [pc, #48]	; (800642c <vPortEnterCritical+0x58>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10f      	bne.n	8006420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <vPortEnterCritical+0x5c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <vPortEnterCritical+0x4c>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	603b      	str	r3, [r7, #0]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <vPortEnterCritical+0x4a>
	}
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	20000024 	.word	0x20000024
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <vPortExitCritical+0x50>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <vPortExitCritical+0x24>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	607b      	str	r3, [r7, #4]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <vPortExitCritical+0x50>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3b01      	subs	r3, #1
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <vPortExitCritical+0x50>)
 8006460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <vPortExitCritical+0x50>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <vPortExitCritical+0x42>
 800646a:	2300      	movs	r3, #0
 800646c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f383 8811 	msr	BASEPRI, r3
}
 8006474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000024 	.word	0x20000024
	...

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f01e 0f10 	tst.w	lr, #16
 80064a0:	bf08      	it	eq
 80064a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	6010      	str	r0, [r2, #0]
 80064ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064b4:	f380 8811 	msr	BASEPRI, r0
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f7fe ffb8 	bl	8005434 <vTaskSwitchContext>
 80064c4:	f04f 0000 	mov.w	r0, #0
 80064c8:	f380 8811 	msr	BASEPRI, r0
 80064cc:	bc09      	pop	{r0, r3}
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d6:	f01e 0f10 	tst.w	lr, #16
 80064da:	bf08      	it	eq
 80064dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064e0:	f380 8809 	msr	PSP, r0
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w

080064f0 <pxCurrentTCBConst>:
 80064f0:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006512:	f7fe fed5 	bl	80052c0 <xTaskIncrementTick>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800651c:	4b06      	ldr	r3, [pc, #24]	; (8006538 <xPortSysTickHandler+0x40>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <vPortSetupTimerInterrupt+0x38>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <vPortSetupTimerInterrupt+0x3c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0a      	ldr	r2, [pc, #40]	; (800657c <vPortSetupTimerInterrupt+0x40>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	4a09      	ldr	r2, [pc, #36]	; (8006580 <vPortSetupTimerInterrupt+0x44>)
 800655a:	3b01      	subs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800655e:	4b04      	ldr	r3, [pc, #16]	; (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	e000e010 	.word	0xe000e010
 8006574:	e000e018 	.word	0xe000e018
 8006578:	20000018 	.word	0x20000018
 800657c:	10624dd3 	.word	0x10624dd3
 8006580:	e000e014 	.word	0xe000e014

08006584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006594 <vPortEnableVFP+0x10>
 8006588:	6801      	ldr	r1, [r0, #0]
 800658a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800658e:	6001      	str	r1, [r0, #0]
 8006590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006592:	bf00      	nop
 8006594:	e000ed88 	.word	0xe000ed88

08006598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800659e:	f3ef 8305 	mrs	r3, IPSR
 80065a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d914      	bls.n	80065d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <vPortValidateInterruptPriority+0x70>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065b4:	4b15      	ldr	r3, [pc, #84]	; (800660c <vPortValidateInterruptPriority+0x74>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	7afa      	ldrb	r2, [r7, #11]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d20a      	bcs.n	80065d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <vPortValidateInterruptPriority+0x78>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <vPortValidateInterruptPriority+0x7c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d90a      	bls.n	80065fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	603b      	str	r3, [r7, #0]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <vPortValidateInterruptPriority+0x60>
	}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	e000e3f0 	.word	0xe000e3f0
 800660c:	20001038 	.word	0x20001038
 8006610:	e000ed0c 	.word	0xe000ed0c
 8006614:	2000103c 	.word	0x2000103c

08006618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006624:	f7fe fd90 	bl	8005148 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006628:	4b5b      	ldr	r3, [pc, #364]	; (8006798 <pvPortMalloc+0x180>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006630:	f000 f920 	bl	8006874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006634:	4b59      	ldr	r3, [pc, #356]	; (800679c <pvPortMalloc+0x184>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 8093 	bne.w	8006768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01d      	beq.n	8006684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006648:	2208      	movs	r2, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2b00      	cmp	r3, #0
 8006658:	d014      	beq.n	8006684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	3308      	adds	r3, #8
 8006662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <pvPortMalloc+0x6c>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	617b      	str	r3, [r7, #20]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d06e      	beq.n	8006768 <pvPortMalloc+0x150>
 800668a:	4b45      	ldr	r3, [pc, #276]	; (80067a0 <pvPortMalloc+0x188>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d869      	bhi.n	8006768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006694:	4b43      	ldr	r3, [pc, #268]	; (80067a4 <pvPortMalloc+0x18c>)
 8006696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006698:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <pvPortMalloc+0x18c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800669e:	e004      	b.n	80066aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d903      	bls.n	80066bc <pvPortMalloc+0xa4>
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f1      	bne.n	80066a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066bc:	4b36      	ldr	r3, [pc, #216]	; (8006798 <pvPortMalloc+0x180>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d050      	beq.n	8006768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2208      	movs	r2, #8
 80066cc:	4413      	add	r3, r2
 80066ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	2308      	movs	r3, #8
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d91f      	bls.n	8006728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <pvPortMalloc+0xf8>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	613b      	str	r3, [r7, #16]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	1ad2      	subs	r2, r2, r3
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	f000 f908 	bl	8006938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006728:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <pvPortMalloc+0x188>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <pvPortMalloc+0x188>)
 8006734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <pvPortMalloc+0x188>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <pvPortMalloc+0x190>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d203      	bcs.n	800674a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006742:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <pvPortMalloc+0x188>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <pvPortMalloc+0x190>)
 8006748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <pvPortMalloc+0x184>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	431a      	orrs	r2, r3
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <pvPortMalloc+0x194>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <pvPortMalloc+0x194>)
 8006766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006768:	f7fe fcfc 	bl	8005164 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <pvPortMalloc+0x174>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60fb      	str	r3, [r7, #12]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <pvPortMalloc+0x172>
	return pvReturn;
 800678c:	69fb      	ldr	r3, [r7, #28]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3728      	adds	r7, #40	; 0x28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20004c48 	.word	0x20004c48
 800679c:	20004c5c 	.word	0x20004c5c
 80067a0:	20004c4c 	.word	0x20004c4c
 80067a4:	20004c40 	.word	0x20004c40
 80067a8:	20004c50 	.word	0x20004c50
 80067ac:	20004c54 	.word	0x20004c54

080067b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d04d      	beq.n	800685e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067c2:	2308      	movs	r3, #8
 80067c4:	425b      	negs	r3, r3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4b24      	ldr	r3, [pc, #144]	; (8006868 <vPortFree+0xb8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <vPortFree+0x44>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60fb      	str	r3, [r7, #12]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <vPortFree+0x62>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60bb      	str	r3, [r7, #8]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <vPortFree+0xb8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01e      	beq.n	800685e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11a      	bne.n	800685e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <vPortFree+0xb8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006838:	f7fe fc86 	bl	8005148 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <vPortFree+0xbc>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4413      	add	r3, r2
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <vPortFree+0xbc>)
 8006848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f000 f874 	bl	8006938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <vPortFree+0xc0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a06      	ldr	r2, [pc, #24]	; (8006870 <vPortFree+0xc0>)
 8006858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800685a:	f7fe fc83 	bl	8005164 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20004c5c 	.word	0x20004c5c
 800686c:	20004c4c 	.word	0x20004c4c
 8006870:	20004c58 	.word	0x20004c58

08006874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800687a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800687e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006880:	4b27      	ldr	r3, [pc, #156]	; (8006920 <prvHeapInit+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3307      	adds	r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <prvHeapInit+0xac>)
 80068a4:	4413      	add	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ac:	4a1d      	ldr	r2, [pc, #116]	; (8006924 <prvHeapInit+0xb0>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <prvHeapInit+0xb0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4413      	add	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068c0:	2208      	movs	r2, #8
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a15      	ldr	r2, [pc, #84]	; (8006928 <prvHeapInit+0xb4>)
 80068d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <prvHeapInit+0xb4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068de:	4b12      	ldr	r3, [pc, #72]	; (8006928 <prvHeapInit+0xb4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvHeapInit+0xb4>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <prvHeapInit+0xb8>)
 8006902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <prvHeapInit+0xbc>)
 800690a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <prvHeapInit+0xc0>)
 800690e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20001040 	.word	0x20001040
 8006924:	20004c40 	.word	0x20004c40
 8006928:	20004c48 	.word	0x20004c48
 800692c:	20004c50 	.word	0x20004c50
 8006930:	20004c4c 	.word	0x20004c4c
 8006934:	20004c5c 	.word	0x20004c5c

08006938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006940:	4b28      	ldr	r3, [pc, #160]	; (80069e4 <prvInsertBlockIntoFreeList+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e002      	b.n	800694c <prvInsertBlockIntoFreeList+0x14>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d8f7      	bhi.n	8006946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d108      	bne.n	800697a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	441a      	add	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d118      	bne.n	80069c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d00d      	beq.n	80069b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e008      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvInsertBlockIntoFreeList+0xb0>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e003      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d002      	beq.n	80069d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20004c40 	.word	0x20004c40
 80069e8:	20004c48 	.word	0x20004c48

080069ec <__errno>:
 80069ec:	4b01      	ldr	r3, [pc, #4]	; (80069f4 <__errno+0x8>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000028 	.word	0x20000028

080069f8 <__libc_init_array>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4d0d      	ldr	r5, [pc, #52]	; (8006a30 <__libc_init_array+0x38>)
 80069fc:	4c0d      	ldr	r4, [pc, #52]	; (8006a34 <__libc_init_array+0x3c>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	2600      	movs	r6, #0
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	d109      	bne.n	8006a1c <__libc_init_array+0x24>
 8006a08:	4d0b      	ldr	r5, [pc, #44]	; (8006a38 <__libc_init_array+0x40>)
 8006a0a:	4c0c      	ldr	r4, [pc, #48]	; (8006a3c <__libc_init_array+0x44>)
 8006a0c:	f000 fd0c 	bl	8007428 <_init>
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	2600      	movs	r6, #0
 8006a16:	42a6      	cmp	r6, r4
 8006a18:	d105      	bne.n	8006a26 <__libc_init_array+0x2e>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a20:	4798      	blx	r3
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7ee      	b.n	8006a04 <__libc_init_array+0xc>
 8006a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2a:	4798      	blx	r3
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	e7f2      	b.n	8006a16 <__libc_init_array+0x1e>
 8006a30:	08009e78 	.word	0x08009e78
 8006a34:	08009e78 	.word	0x08009e78
 8006a38:	08009e78 	.word	0x08009e78
 8006a3c:	08009e7c 	.word	0x08009e7c

08006a40 <__retarget_lock_acquire_recursive>:
 8006a40:	4770      	bx	lr

08006a42 <__retarget_lock_release_recursive>:
 8006a42:	4770      	bx	lr

08006a44 <memcpy>:
 8006a44:	440a      	add	r2, r1
 8006a46:	4291      	cmp	r1, r2
 8006a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a4c:	d100      	bne.n	8006a50 <memcpy+0xc>
 8006a4e:	4770      	bx	lr
 8006a50:	b510      	push	{r4, lr}
 8006a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	d1f9      	bne.n	8006a52 <memcpy+0xe>
 8006a5e:	bd10      	pop	{r4, pc}

08006a60 <memset>:
 8006a60:	4402      	add	r2, r0
 8006a62:	4603      	mov	r3, r0
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d100      	bne.n	8006a6a <memset+0xa>
 8006a68:	4770      	bx	lr
 8006a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6e:	e7f9      	b.n	8006a64 <memset+0x4>

08006a70 <_free_r>:
 8006a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a72:	2900      	cmp	r1, #0
 8006a74:	d044      	beq.n	8006b00 <_free_r+0x90>
 8006a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7a:	9001      	str	r0, [sp, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a82:	bfb8      	it	lt
 8006a84:	18e4      	addlt	r4, r4, r3
 8006a86:	f000 f981 	bl	8006d8c <__malloc_lock>
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <_free_r+0x94>)
 8006a8c:	9801      	ldr	r0, [sp, #4]
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	b933      	cbnz	r3, 8006aa0 <_free_r+0x30>
 8006a92:	6063      	str	r3, [r4, #4]
 8006a94:	6014      	str	r4, [r2, #0]
 8006a96:	b003      	add	sp, #12
 8006a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a9c:	f000 b97c 	b.w	8006d98 <__malloc_unlock>
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d908      	bls.n	8006ab6 <_free_r+0x46>
 8006aa4:	6825      	ldr	r5, [r4, #0]
 8006aa6:	1961      	adds	r1, r4, r5
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf01      	itttt	eq
 8006aac:	6819      	ldreq	r1, [r3, #0]
 8006aae:	685b      	ldreq	r3, [r3, #4]
 8006ab0:	1949      	addeq	r1, r1, r5
 8006ab2:	6021      	streq	r1, [r4, #0]
 8006ab4:	e7ed      	b.n	8006a92 <_free_r+0x22>
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b10b      	cbz	r3, 8006ac0 <_free_r+0x50>
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d9fa      	bls.n	8006ab6 <_free_r+0x46>
 8006ac0:	6811      	ldr	r1, [r2, #0]
 8006ac2:	1855      	adds	r5, r2, r1
 8006ac4:	42a5      	cmp	r5, r4
 8006ac6:	d10b      	bne.n	8006ae0 <_free_r+0x70>
 8006ac8:	6824      	ldr	r4, [r4, #0]
 8006aca:	4421      	add	r1, r4
 8006acc:	1854      	adds	r4, r2, r1
 8006ace:	42a3      	cmp	r3, r4
 8006ad0:	6011      	str	r1, [r2, #0]
 8006ad2:	d1e0      	bne.n	8006a96 <_free_r+0x26>
 8006ad4:	681c      	ldr	r4, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	6053      	str	r3, [r2, #4]
 8006ada:	4421      	add	r1, r4
 8006adc:	6011      	str	r1, [r2, #0]
 8006ade:	e7da      	b.n	8006a96 <_free_r+0x26>
 8006ae0:	d902      	bls.n	8006ae8 <_free_r+0x78>
 8006ae2:	230c      	movs	r3, #12
 8006ae4:	6003      	str	r3, [r0, #0]
 8006ae6:	e7d6      	b.n	8006a96 <_free_r+0x26>
 8006ae8:	6825      	ldr	r5, [r4, #0]
 8006aea:	1961      	adds	r1, r4, r5
 8006aec:	428b      	cmp	r3, r1
 8006aee:	bf04      	itt	eq
 8006af0:	6819      	ldreq	r1, [r3, #0]
 8006af2:	685b      	ldreq	r3, [r3, #4]
 8006af4:	6063      	str	r3, [r4, #4]
 8006af6:	bf04      	itt	eq
 8006af8:	1949      	addeq	r1, r1, r5
 8006afa:	6021      	streq	r1, [r4, #0]
 8006afc:	6054      	str	r4, [r2, #4]
 8006afe:	e7ca      	b.n	8006a96 <_free_r+0x26>
 8006b00:	b003      	add	sp, #12
 8006b02:	bd30      	pop	{r4, r5, pc}
 8006b04:	20004c64 	.word	0x20004c64

08006b08 <sbrk_aligned>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4e0e      	ldr	r6, [pc, #56]	; (8006b44 <sbrk_aligned+0x3c>)
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	6831      	ldr	r1, [r6, #0]
 8006b10:	4605      	mov	r5, r0
 8006b12:	b911      	cbnz	r1, 8006b1a <sbrk_aligned+0x12>
 8006b14:	f000 f8f6 	bl	8006d04 <_sbrk_r>
 8006b18:	6030      	str	r0, [r6, #0]
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f000 f8f1 	bl	8006d04 <_sbrk_r>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d00a      	beq.n	8006b3c <sbrk_aligned+0x34>
 8006b26:	1cc4      	adds	r4, r0, #3
 8006b28:	f024 0403 	bic.w	r4, r4, #3
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d007      	beq.n	8006b40 <sbrk_aligned+0x38>
 8006b30:	1a21      	subs	r1, r4, r0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 f8e6 	bl	8006d04 <_sbrk_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d101      	bne.n	8006b40 <sbrk_aligned+0x38>
 8006b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b40:	4620      	mov	r0, r4
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	20004c68 	.word	0x20004c68

08006b48 <_malloc_r>:
 8006b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4c:	1ccd      	adds	r5, r1, #3
 8006b4e:	f025 0503 	bic.w	r5, r5, #3
 8006b52:	3508      	adds	r5, #8
 8006b54:	2d0c      	cmp	r5, #12
 8006b56:	bf38      	it	cc
 8006b58:	250c      	movcc	r5, #12
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	db01      	blt.n	8006b64 <_malloc_r+0x1c>
 8006b60:	42a9      	cmp	r1, r5
 8006b62:	d905      	bls.n	8006b70 <_malloc_r+0x28>
 8006b64:	230c      	movs	r3, #12
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	2600      	movs	r6, #0
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	4e2e      	ldr	r6, [pc, #184]	; (8006c2c <_malloc_r+0xe4>)
 8006b72:	f000 f90b 	bl	8006d8c <__malloc_lock>
 8006b76:	6833      	ldr	r3, [r6, #0]
 8006b78:	461c      	mov	r4, r3
 8006b7a:	bb34      	cbnz	r4, 8006bca <_malloc_r+0x82>
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f7ff ffc2 	bl	8006b08 <sbrk_aligned>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	4604      	mov	r4, r0
 8006b88:	d14d      	bne.n	8006c26 <_malloc_r+0xde>
 8006b8a:	6834      	ldr	r4, [r6, #0]
 8006b8c:	4626      	mov	r6, r4
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	d140      	bne.n	8006c14 <_malloc_r+0xcc>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	4631      	mov	r1, r6
 8006b96:	4638      	mov	r0, r7
 8006b98:	eb04 0803 	add.w	r8, r4, r3
 8006b9c:	f000 f8b2 	bl	8006d04 <_sbrk_r>
 8006ba0:	4580      	cmp	r8, r0
 8006ba2:	d13a      	bne.n	8006c1a <_malloc_r+0xd2>
 8006ba4:	6821      	ldr	r1, [r4, #0]
 8006ba6:	3503      	adds	r5, #3
 8006ba8:	1a6d      	subs	r5, r5, r1
 8006baa:	f025 0503 	bic.w	r5, r5, #3
 8006bae:	3508      	adds	r5, #8
 8006bb0:	2d0c      	cmp	r5, #12
 8006bb2:	bf38      	it	cc
 8006bb4:	250c      	movcc	r5, #12
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f7ff ffa5 	bl	8006b08 <sbrk_aligned>
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d02b      	beq.n	8006c1a <_malloc_r+0xd2>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	442b      	add	r3, r5
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	e00e      	b.n	8006be8 <_malloc_r+0xa0>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	1b52      	subs	r2, r2, r5
 8006bce:	d41e      	bmi.n	8006c0e <_malloc_r+0xc6>
 8006bd0:	2a0b      	cmp	r2, #11
 8006bd2:	d916      	bls.n	8006c02 <_malloc_r+0xba>
 8006bd4:	1961      	adds	r1, r4, r5
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	6025      	str	r5, [r4, #0]
 8006bda:	bf18      	it	ne
 8006bdc:	6059      	strne	r1, [r3, #4]
 8006bde:	6863      	ldr	r3, [r4, #4]
 8006be0:	bf08      	it	eq
 8006be2:	6031      	streq	r1, [r6, #0]
 8006be4:	5162      	str	r2, [r4, r5]
 8006be6:	604b      	str	r3, [r1, #4]
 8006be8:	4638      	mov	r0, r7
 8006bea:	f104 060b 	add.w	r6, r4, #11
 8006bee:	f000 f8d3 	bl	8006d98 <__malloc_unlock>
 8006bf2:	f026 0607 	bic.w	r6, r6, #7
 8006bf6:	1d23      	adds	r3, r4, #4
 8006bf8:	1af2      	subs	r2, r6, r3
 8006bfa:	d0b6      	beq.n	8006b6a <_malloc_r+0x22>
 8006bfc:	1b9b      	subs	r3, r3, r6
 8006bfe:	50a3      	str	r3, [r4, r2]
 8006c00:	e7b3      	b.n	8006b6a <_malloc_r+0x22>
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	bf0c      	ite	eq
 8006c08:	6032      	streq	r2, [r6, #0]
 8006c0a:	605a      	strne	r2, [r3, #4]
 8006c0c:	e7ec      	b.n	8006be8 <_malloc_r+0xa0>
 8006c0e:	4623      	mov	r3, r4
 8006c10:	6864      	ldr	r4, [r4, #4]
 8006c12:	e7b2      	b.n	8006b7a <_malloc_r+0x32>
 8006c14:	4634      	mov	r4, r6
 8006c16:	6876      	ldr	r6, [r6, #4]
 8006c18:	e7b9      	b.n	8006b8e <_malloc_r+0x46>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f000 f8ba 	bl	8006d98 <__malloc_unlock>
 8006c24:	e7a1      	b.n	8006b6a <_malloc_r+0x22>
 8006c26:	6025      	str	r5, [r4, #0]
 8006c28:	e7de      	b.n	8006be8 <_malloc_r+0xa0>
 8006c2a:	bf00      	nop
 8006c2c:	20004c64 	.word	0x20004c64

08006c30 <cleanup_glue>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	6809      	ldr	r1, [r1, #0]
 8006c36:	4605      	mov	r5, r0
 8006c38:	b109      	cbz	r1, 8006c3e <cleanup_glue+0xe>
 8006c3a:	f7ff fff9 	bl	8006c30 <cleanup_glue>
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c46:	f7ff bf13 	b.w	8006a70 <_free_r>
	...

08006c4c <_reclaim_reent>:
 8006c4c:	4b2c      	ldr	r3, [pc, #176]	; (8006d00 <_reclaim_reent+0xb4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4283      	cmp	r3, r0
 8006c52:	b570      	push	{r4, r5, r6, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	d051      	beq.n	8006cfc <_reclaim_reent+0xb0>
 8006c58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c5a:	b143      	cbz	r3, 8006c6e <_reclaim_reent+0x22>
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d14a      	bne.n	8006cf8 <_reclaim_reent+0xac>
 8006c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c64:	6819      	ldr	r1, [r3, #0]
 8006c66:	b111      	cbz	r1, 8006c6e <_reclaim_reent+0x22>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7ff ff01 	bl	8006a70 <_free_r>
 8006c6e:	6961      	ldr	r1, [r4, #20]
 8006c70:	b111      	cbz	r1, 8006c78 <_reclaim_reent+0x2c>
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff fefc 	bl	8006a70 <_free_r>
 8006c78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c7a:	b111      	cbz	r1, 8006c82 <_reclaim_reent+0x36>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7ff fef7 	bl	8006a70 <_free_r>
 8006c82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c84:	b111      	cbz	r1, 8006c8c <_reclaim_reent+0x40>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f7ff fef2 	bl	8006a70 <_free_r>
 8006c8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c8e:	b111      	cbz	r1, 8006c96 <_reclaim_reent+0x4a>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff feed 	bl	8006a70 <_free_r>
 8006c96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c98:	b111      	cbz	r1, 8006ca0 <_reclaim_reent+0x54>
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7ff fee8 	bl	8006a70 <_free_r>
 8006ca0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006ca2:	b111      	cbz	r1, 8006caa <_reclaim_reent+0x5e>
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f7ff fee3 	bl	8006a70 <_free_r>
 8006caa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006cac:	b111      	cbz	r1, 8006cb4 <_reclaim_reent+0x68>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f7ff fede 	bl	8006a70 <_free_r>
 8006cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb6:	b111      	cbz	r1, 8006cbe <_reclaim_reent+0x72>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7ff fed9 	bl	8006a70 <_free_r>
 8006cbe:	69a3      	ldr	r3, [r4, #24]
 8006cc0:	b1e3      	cbz	r3, 8006cfc <_reclaim_reent+0xb0>
 8006cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4798      	blx	r3
 8006cc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cca:	b1b9      	cbz	r1, 8006cfc <_reclaim_reent+0xb0>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cd2:	f7ff bfad 	b.w	8006c30 <cleanup_glue>
 8006cd6:	5949      	ldr	r1, [r1, r5]
 8006cd8:	b941      	cbnz	r1, 8006cec <_reclaim_reent+0xa0>
 8006cda:	3504      	adds	r5, #4
 8006cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cde:	2d80      	cmp	r5, #128	; 0x80
 8006ce0:	68d9      	ldr	r1, [r3, #12]
 8006ce2:	d1f8      	bne.n	8006cd6 <_reclaim_reent+0x8a>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7ff fec3 	bl	8006a70 <_free_r>
 8006cea:	e7ba      	b.n	8006c62 <_reclaim_reent+0x16>
 8006cec:	680e      	ldr	r6, [r1, #0]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7ff febe 	bl	8006a70 <_free_r>
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	e7ef      	b.n	8006cd8 <_reclaim_reent+0x8c>
 8006cf8:	2500      	movs	r5, #0
 8006cfa:	e7ef      	b.n	8006cdc <_reclaim_reent+0x90>
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000028 	.word	0x20000028

08006d04 <_sbrk_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d06      	ldr	r5, [pc, #24]	; (8006d20 <_sbrk_r+0x1c>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	602b      	str	r3, [r5, #0]
 8006d10:	f7fa fa92 	bl	8001238 <_sbrk>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_sbrk_r+0x1a>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_sbrk_r+0x1a>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20004c6c 	.word	0x20004c6c

08006d24 <sniprintf>:
 8006d24:	b40c      	push	{r2, r3}
 8006d26:	b530      	push	{r4, r5, lr}
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <sniprintf+0x64>)
 8006d2a:	1e0c      	subs	r4, r1, #0
 8006d2c:	681d      	ldr	r5, [r3, #0]
 8006d2e:	b09d      	sub	sp, #116	; 0x74
 8006d30:	da08      	bge.n	8006d44 <sniprintf+0x20>
 8006d32:	238b      	movs	r3, #139	; 0x8b
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	b01d      	add	sp, #116	; 0x74
 8006d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d40:	b002      	add	sp, #8
 8006d42:	4770      	bx	lr
 8006d44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d4c:	bf14      	ite	ne
 8006d4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d52:	4623      	moveq	r3, r4
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d5c:	9002      	str	r0, [sp, #8]
 8006d5e:	9006      	str	r0, [sp, #24]
 8006d60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d66:	ab21      	add	r3, sp, #132	; 0x84
 8006d68:	a902      	add	r1, sp, #8
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f000 f875 	bl	8006e5c <_svfiprintf_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	bfbc      	itt	lt
 8006d76:	238b      	movlt	r3, #139	; 0x8b
 8006d78:	602b      	strlt	r3, [r5, #0]
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d0dd      	beq.n	8006d3a <sniprintf+0x16>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e7d9      	b.n	8006d3a <sniprintf+0x16>
 8006d86:	bf00      	nop
 8006d88:	20000028 	.word	0x20000028

08006d8c <__malloc_lock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__malloc_lock+0x8>)
 8006d8e:	f7ff be57 	b.w	8006a40 <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	20004c60 	.word	0x20004c60

08006d98 <__malloc_unlock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_unlock+0x8>)
 8006d9a:	f7ff be52 	b.w	8006a42 <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	20004c60 	.word	0x20004c60

08006da4 <__ssputs_r>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	688e      	ldr	r6, [r1, #8]
 8006daa:	429e      	cmp	r6, r3
 8006dac:	4682      	mov	sl, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4690      	mov	r8, r2
 8006db2:	461f      	mov	r7, r3
 8006db4:	d838      	bhi.n	8006e28 <__ssputs_r+0x84>
 8006db6:	898a      	ldrh	r2, [r1, #12]
 8006db8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dbc:	d032      	beq.n	8006e24 <__ssputs_r+0x80>
 8006dbe:	6825      	ldr	r5, [r4, #0]
 8006dc0:	6909      	ldr	r1, [r1, #16]
 8006dc2:	eba5 0901 	sub.w	r9, r5, r1
 8006dc6:	6965      	ldr	r5, [r4, #20]
 8006dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	444b      	add	r3, r9
 8006dd4:	106d      	asrs	r5, r5, #1
 8006dd6:	429d      	cmp	r5, r3
 8006dd8:	bf38      	it	cc
 8006dda:	461d      	movcc	r5, r3
 8006ddc:	0553      	lsls	r3, r2, #21
 8006dde:	d531      	bpl.n	8006e44 <__ssputs_r+0xa0>
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7ff feb1 	bl	8006b48 <_malloc_r>
 8006de6:	4606      	mov	r6, r0
 8006de8:	b950      	cbnz	r0, 8006e00 <__ssputs_r+0x5c>
 8006dea:	230c      	movs	r3, #12
 8006dec:	f8ca 3000 	str.w	r3, [sl]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e00:	6921      	ldr	r1, [r4, #16]
 8006e02:	464a      	mov	r2, r9
 8006e04:	f7ff fe1e 	bl	8006a44 <memcpy>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	6126      	str	r6, [r4, #16]
 8006e16:	6165      	str	r5, [r4, #20]
 8006e18:	444e      	add	r6, r9
 8006e1a:	eba5 0509 	sub.w	r5, r5, r9
 8006e1e:	6026      	str	r6, [r4, #0]
 8006e20:	60a5      	str	r5, [r4, #8]
 8006e22:	463e      	mov	r6, r7
 8006e24:	42be      	cmp	r6, r7
 8006e26:	d900      	bls.n	8006e2a <__ssputs_r+0x86>
 8006e28:	463e      	mov	r6, r7
 8006e2a:	6820      	ldr	r0, [r4, #0]
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4641      	mov	r1, r8
 8006e30:	f000 faa8 	bl	8007384 <memmove>
 8006e34:	68a3      	ldr	r3, [r4, #8]
 8006e36:	1b9b      	subs	r3, r3, r6
 8006e38:	60a3      	str	r3, [r4, #8]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	4433      	add	r3, r6
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7db      	b.n	8006dfc <__ssputs_r+0x58>
 8006e44:	462a      	mov	r2, r5
 8006e46:	f000 fab7 	bl	80073b8 <_realloc_r>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1e1      	bne.n	8006e14 <__ssputs_r+0x70>
 8006e50:	6921      	ldr	r1, [r4, #16]
 8006e52:	4650      	mov	r0, sl
 8006e54:	f7ff fe0c 	bl	8006a70 <_free_r>
 8006e58:	e7c7      	b.n	8006dea <__ssputs_r+0x46>
	...

08006e5c <_svfiprintf_r>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	4698      	mov	r8, r3
 8006e62:	898b      	ldrh	r3, [r1, #12]
 8006e64:	061b      	lsls	r3, r3, #24
 8006e66:	b09d      	sub	sp, #116	; 0x74
 8006e68:	4607      	mov	r7, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	d50e      	bpl.n	8006e8e <_svfiprintf_r+0x32>
 8006e70:	690b      	ldr	r3, [r1, #16]
 8006e72:	b963      	cbnz	r3, 8006e8e <_svfiprintf_r+0x32>
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	f7ff fe67 	bl	8006b48 <_malloc_r>
 8006e7a:	6028      	str	r0, [r5, #0]
 8006e7c:	6128      	str	r0, [r5, #16]
 8006e7e:	b920      	cbnz	r0, 8006e8a <_svfiprintf_r+0x2e>
 8006e80:	230c      	movs	r3, #12
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	e0d1      	b.n	800702e <_svfiprintf_r+0x1d2>
 8006e8a:	2340      	movs	r3, #64	; 0x40
 8006e8c:	616b      	str	r3, [r5, #20]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	2320      	movs	r3, #32
 8006e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e9c:	2330      	movs	r3, #48	; 0x30
 8006e9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007048 <_svfiprintf_r+0x1ec>
 8006ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ea6:	f04f 0901 	mov.w	r9, #1
 8006eaa:	4623      	mov	r3, r4
 8006eac:	469a      	mov	sl, r3
 8006eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eb2:	b10a      	cbz	r2, 8006eb8 <_svfiprintf_r+0x5c>
 8006eb4:	2a25      	cmp	r2, #37	; 0x25
 8006eb6:	d1f9      	bne.n	8006eac <_svfiprintf_r+0x50>
 8006eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ebc:	d00b      	beq.n	8006ed6 <_svfiprintf_r+0x7a>
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ff6d 	bl	8006da4 <__ssputs_r>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f000 80aa 	beq.w	8007024 <_svfiprintf_r+0x1c8>
 8006ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ed2:	445a      	add	r2, fp
 8006ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80a2 	beq.w	8007024 <_svfiprintf_r+0x1c8>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eea:	f10a 0a01 	add.w	sl, sl, #1
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef8:	4654      	mov	r4, sl
 8006efa:	2205      	movs	r2, #5
 8006efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f00:	4851      	ldr	r0, [pc, #324]	; (8007048 <_svfiprintf_r+0x1ec>)
 8006f02:	f7f9 f96d 	bl	80001e0 <memchr>
 8006f06:	9a04      	ldr	r2, [sp, #16]
 8006f08:	b9d8      	cbnz	r0, 8006f42 <_svfiprintf_r+0xe6>
 8006f0a:	06d0      	lsls	r0, r2, #27
 8006f0c:	bf44      	itt	mi
 8006f0e:	2320      	movmi	r3, #32
 8006f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f14:	0711      	lsls	r1, r2, #28
 8006f16:	bf44      	itt	mi
 8006f18:	232b      	movmi	r3, #43	; 0x2b
 8006f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f22:	2b2a      	cmp	r3, #42	; 0x2a
 8006f24:	d015      	beq.n	8006f52 <_svfiprintf_r+0xf6>
 8006f26:	9a07      	ldr	r2, [sp, #28]
 8006f28:	4654      	mov	r4, sl
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f04f 0c0a 	mov.w	ip, #10
 8006f30:	4621      	mov	r1, r4
 8006f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f36:	3b30      	subs	r3, #48	; 0x30
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d94e      	bls.n	8006fda <_svfiprintf_r+0x17e>
 8006f3c:	b1b0      	cbz	r0, 8006f6c <_svfiprintf_r+0x110>
 8006f3e:	9207      	str	r2, [sp, #28]
 8006f40:	e014      	b.n	8006f6c <_svfiprintf_r+0x110>
 8006f42:	eba0 0308 	sub.w	r3, r0, r8
 8006f46:	fa09 f303 	lsl.w	r3, r9, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	9304      	str	r3, [sp, #16]
 8006f4e:	46a2      	mov	sl, r4
 8006f50:	e7d2      	b.n	8006ef8 <_svfiprintf_r+0x9c>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	1d19      	adds	r1, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	9103      	str	r1, [sp, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfbb      	ittet	lt
 8006f5e:	425b      	neglt	r3, r3
 8006f60:	f042 0202 	orrlt.w	r2, r2, #2
 8006f64:	9307      	strge	r3, [sp, #28]
 8006f66:	9307      	strlt	r3, [sp, #28]
 8006f68:	bfb8      	it	lt
 8006f6a:	9204      	strlt	r2, [sp, #16]
 8006f6c:	7823      	ldrb	r3, [r4, #0]
 8006f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f70:	d10c      	bne.n	8006f8c <_svfiprintf_r+0x130>
 8006f72:	7863      	ldrb	r3, [r4, #1]
 8006f74:	2b2a      	cmp	r3, #42	; 0x2a
 8006f76:	d135      	bne.n	8006fe4 <_svfiprintf_r+0x188>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	1d1a      	adds	r2, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	9203      	str	r2, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfb8      	it	lt
 8006f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f88:	3402      	adds	r4, #2
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007058 <_svfiprintf_r+0x1fc>
 8006f90:	7821      	ldrb	r1, [r4, #0]
 8006f92:	2203      	movs	r2, #3
 8006f94:	4650      	mov	r0, sl
 8006f96:	f7f9 f923 	bl	80001e0 <memchr>
 8006f9a:	b140      	cbz	r0, 8006fae <_svfiprintf_r+0x152>
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	eba0 000a 	sub.w	r0, r0, sl
 8006fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	4303      	orrs	r3, r0
 8006faa:	3401      	adds	r4, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb2:	4826      	ldr	r0, [pc, #152]	; (800704c <_svfiprintf_r+0x1f0>)
 8006fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb8:	2206      	movs	r2, #6
 8006fba:	f7f9 f911 	bl	80001e0 <memchr>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d038      	beq.n	8007034 <_svfiprintf_r+0x1d8>
 8006fc2:	4b23      	ldr	r3, [pc, #140]	; (8007050 <_svfiprintf_r+0x1f4>)
 8006fc4:	bb1b      	cbnz	r3, 800700e <_svfiprintf_r+0x1b2>
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	3307      	adds	r3, #7
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	3308      	adds	r3, #8
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd4:	4433      	add	r3, r6
 8006fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd8:	e767      	b.n	8006eaa <_svfiprintf_r+0x4e>
 8006fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7a5      	b.n	8006f30 <_svfiprintf_r+0xd4>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	3401      	adds	r4, #1
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	4619      	mov	r1, r3
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff6:	3a30      	subs	r2, #48	; 0x30
 8006ff8:	2a09      	cmp	r2, #9
 8006ffa:	d903      	bls.n	8007004 <_svfiprintf_r+0x1a8>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0c5      	beq.n	8006f8c <_svfiprintf_r+0x130>
 8007000:	9105      	str	r1, [sp, #20]
 8007002:	e7c3      	b.n	8006f8c <_svfiprintf_r+0x130>
 8007004:	fb0c 2101 	mla	r1, ip, r1, r2
 8007008:	4604      	mov	r4, r0
 800700a:	2301      	movs	r3, #1
 800700c:	e7f0      	b.n	8006ff0 <_svfiprintf_r+0x194>
 800700e:	ab03      	add	r3, sp, #12
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	462a      	mov	r2, r5
 8007014:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <_svfiprintf_r+0x1f8>)
 8007016:	a904      	add	r1, sp, #16
 8007018:	4638      	mov	r0, r7
 800701a:	f3af 8000 	nop.w
 800701e:	1c42      	adds	r2, r0, #1
 8007020:	4606      	mov	r6, r0
 8007022:	d1d6      	bne.n	8006fd2 <_svfiprintf_r+0x176>
 8007024:	89ab      	ldrh	r3, [r5, #12]
 8007026:	065b      	lsls	r3, r3, #25
 8007028:	f53f af2c 	bmi.w	8006e84 <_svfiprintf_r+0x28>
 800702c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702e:	b01d      	add	sp, #116	; 0x74
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <_svfiprintf_r+0x1f8>)
 800703c:	a904      	add	r1, sp, #16
 800703e:	4638      	mov	r0, r7
 8007040:	f000 f87a 	bl	8007138 <_printf_i>
 8007044:	e7eb      	b.n	800701e <_svfiprintf_r+0x1c2>
 8007046:	bf00      	nop
 8007048:	08009e3c 	.word	0x08009e3c
 800704c:	08009e46 	.word	0x08009e46
 8007050:	00000000 	.word	0x00000000
 8007054:	08006da5 	.word	0x08006da5
 8007058:	08009e42 	.word	0x08009e42

0800705c <_printf_common>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4616      	mov	r6, r2
 8007062:	4699      	mov	r9, r3
 8007064:	688a      	ldr	r2, [r1, #8]
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800706c:	4293      	cmp	r3, r2
 800706e:	bfb8      	it	lt
 8007070:	4613      	movlt	r3, r2
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007078:	4607      	mov	r7, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b10a      	cbz	r2, 8007082 <_printf_common+0x26>
 800707e:	3301      	adds	r3, #1
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	6833      	ldrmi	r3, [r6, #0]
 800708a:	3302      	addmi	r3, #2
 800708c:	6033      	strmi	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d106      	bne.n	80070a4 <_printf_common+0x48>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	6832      	ldr	r2, [r6, #0]
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc26      	bgt.n	80070f2 <_printf_common+0x96>
 80070a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a8:	1e13      	subs	r3, r2, #0
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	bf18      	it	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	0692      	lsls	r2, r2, #26
 80070b2:	d42b      	bmi.n	800710c <_printf_common+0xb0>
 80070b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b8:	4649      	mov	r1, r9
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c0      	blx	r8
 80070be:	3001      	adds	r0, #1
 80070c0:	d01e      	beq.n	8007100 <_printf_common+0xa4>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	68e5      	ldr	r5, [r4, #12]
 80070c6:	6832      	ldr	r2, [r6, #0]
 80070c8:	f003 0306 	and.w	r3, r3, #6
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	bf08      	it	eq
 80070d0:	1aad      	subeq	r5, r5, r2
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	bf0c      	ite	eq
 80070d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070dc:	2500      	movne	r5, #0
 80070de:	4293      	cmp	r3, r2
 80070e0:	bfc4      	itt	gt
 80070e2:	1a9b      	subgt	r3, r3, r2
 80070e4:	18ed      	addgt	r5, r5, r3
 80070e6:	2600      	movs	r6, #0
 80070e8:	341a      	adds	r4, #26
 80070ea:	42b5      	cmp	r5, r6
 80070ec:	d11a      	bne.n	8007124 <_printf_common+0xc8>
 80070ee:	2000      	movs	r0, #0
 80070f0:	e008      	b.n	8007104 <_printf_common+0xa8>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4652      	mov	r2, sl
 80070f6:	4649      	mov	r1, r9
 80070f8:	4638      	mov	r0, r7
 80070fa:	47c0      	blx	r8
 80070fc:	3001      	adds	r0, #1
 80070fe:	d103      	bne.n	8007108 <_printf_common+0xac>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	3501      	adds	r5, #1
 800710a:	e7c6      	b.n	800709a <_printf_common+0x3e>
 800710c:	18e1      	adds	r1, r4, r3
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	2030      	movs	r0, #48	; 0x30
 8007112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007116:	4422      	add	r2, r4
 8007118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800711c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007120:	3302      	adds	r3, #2
 8007122:	e7c7      	b.n	80070b4 <_printf_common+0x58>
 8007124:	2301      	movs	r3, #1
 8007126:	4622      	mov	r2, r4
 8007128:	4649      	mov	r1, r9
 800712a:	4638      	mov	r0, r7
 800712c:	47c0      	blx	r8
 800712e:	3001      	adds	r0, #1
 8007130:	d0e6      	beq.n	8007100 <_printf_common+0xa4>
 8007132:	3601      	adds	r6, #1
 8007134:	e7d9      	b.n	80070ea <_printf_common+0x8e>
	...

08007138 <_printf_i>:
 8007138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	7e0f      	ldrb	r7, [r1, #24]
 800713e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007140:	2f78      	cmp	r7, #120	; 0x78
 8007142:	4691      	mov	r9, r2
 8007144:	4680      	mov	r8, r0
 8007146:	460c      	mov	r4, r1
 8007148:	469a      	mov	sl, r3
 800714a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800714e:	d807      	bhi.n	8007160 <_printf_i+0x28>
 8007150:	2f62      	cmp	r7, #98	; 0x62
 8007152:	d80a      	bhi.n	800716a <_printf_i+0x32>
 8007154:	2f00      	cmp	r7, #0
 8007156:	f000 80d8 	beq.w	800730a <_printf_i+0x1d2>
 800715a:	2f58      	cmp	r7, #88	; 0x58
 800715c:	f000 80a3 	beq.w	80072a6 <_printf_i+0x16e>
 8007160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007168:	e03a      	b.n	80071e0 <_printf_i+0xa8>
 800716a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800716e:	2b15      	cmp	r3, #21
 8007170:	d8f6      	bhi.n	8007160 <_printf_i+0x28>
 8007172:	a101      	add	r1, pc, #4	; (adr r1, 8007178 <_printf_i+0x40>)
 8007174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007178:	080071d1 	.word	0x080071d1
 800717c:	080071e5 	.word	0x080071e5
 8007180:	08007161 	.word	0x08007161
 8007184:	08007161 	.word	0x08007161
 8007188:	08007161 	.word	0x08007161
 800718c:	08007161 	.word	0x08007161
 8007190:	080071e5 	.word	0x080071e5
 8007194:	08007161 	.word	0x08007161
 8007198:	08007161 	.word	0x08007161
 800719c:	08007161 	.word	0x08007161
 80071a0:	08007161 	.word	0x08007161
 80071a4:	080072f1 	.word	0x080072f1
 80071a8:	08007215 	.word	0x08007215
 80071ac:	080072d3 	.word	0x080072d3
 80071b0:	08007161 	.word	0x08007161
 80071b4:	08007161 	.word	0x08007161
 80071b8:	08007313 	.word	0x08007313
 80071bc:	08007161 	.word	0x08007161
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007161 	.word	0x08007161
 80071c8:	08007161 	.word	0x08007161
 80071cc:	080072db 	.word	0x080072db
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0a3      	b.n	800732c <_printf_i+0x1f4>
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	6829      	ldr	r1, [r5, #0]
 80071e8:	0606      	lsls	r6, r0, #24
 80071ea:	f101 0304 	add.w	r3, r1, #4
 80071ee:	d50a      	bpl.n	8007206 <_printf_i+0xce>
 80071f0:	680e      	ldr	r6, [r1, #0]
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	da03      	bge.n	8007200 <_printf_i+0xc8>
 80071f8:	232d      	movs	r3, #45	; 0x2d
 80071fa:	4276      	negs	r6, r6
 80071fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007200:	485e      	ldr	r0, [pc, #376]	; (800737c <_printf_i+0x244>)
 8007202:	230a      	movs	r3, #10
 8007204:	e019      	b.n	800723a <_printf_i+0x102>
 8007206:	680e      	ldr	r6, [r1, #0]
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800720e:	bf18      	it	ne
 8007210:	b236      	sxthne	r6, r6
 8007212:	e7ef      	b.n	80071f4 <_printf_i+0xbc>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1d19      	adds	r1, r3, #4
 800721a:	6029      	str	r1, [r5, #0]
 800721c:	0601      	lsls	r1, r0, #24
 800721e:	d501      	bpl.n	8007224 <_printf_i+0xec>
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	e002      	b.n	800722a <_printf_i+0xf2>
 8007224:	0646      	lsls	r6, r0, #25
 8007226:	d5fb      	bpl.n	8007220 <_printf_i+0xe8>
 8007228:	881e      	ldrh	r6, [r3, #0]
 800722a:	4854      	ldr	r0, [pc, #336]	; (800737c <_printf_i+0x244>)
 800722c:	2f6f      	cmp	r7, #111	; 0x6f
 800722e:	bf0c      	ite	eq
 8007230:	2308      	moveq	r3, #8
 8007232:	230a      	movne	r3, #10
 8007234:	2100      	movs	r1, #0
 8007236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800723a:	6865      	ldr	r5, [r4, #4]
 800723c:	60a5      	str	r5, [r4, #8]
 800723e:	2d00      	cmp	r5, #0
 8007240:	bfa2      	ittt	ge
 8007242:	6821      	ldrge	r1, [r4, #0]
 8007244:	f021 0104 	bicge.w	r1, r1, #4
 8007248:	6021      	strge	r1, [r4, #0]
 800724a:	b90e      	cbnz	r6, 8007250 <_printf_i+0x118>
 800724c:	2d00      	cmp	r5, #0
 800724e:	d04d      	beq.n	80072ec <_printf_i+0x1b4>
 8007250:	4615      	mov	r5, r2
 8007252:	fbb6 f1f3 	udiv	r1, r6, r3
 8007256:	fb03 6711 	mls	r7, r3, r1, r6
 800725a:	5dc7      	ldrb	r7, [r0, r7]
 800725c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007260:	4637      	mov	r7, r6
 8007262:	42bb      	cmp	r3, r7
 8007264:	460e      	mov	r6, r1
 8007266:	d9f4      	bls.n	8007252 <_printf_i+0x11a>
 8007268:	2b08      	cmp	r3, #8
 800726a:	d10b      	bne.n	8007284 <_printf_i+0x14c>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07de      	lsls	r6, r3, #31
 8007270:	d508      	bpl.n	8007284 <_printf_i+0x14c>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	6861      	ldr	r1, [r4, #4]
 8007276:	4299      	cmp	r1, r3
 8007278:	bfde      	ittt	le
 800727a:	2330      	movle	r3, #48	; 0x30
 800727c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007280:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007284:	1b52      	subs	r2, r2, r5
 8007286:	6122      	str	r2, [r4, #16]
 8007288:	f8cd a000 	str.w	sl, [sp]
 800728c:	464b      	mov	r3, r9
 800728e:	aa03      	add	r2, sp, #12
 8007290:	4621      	mov	r1, r4
 8007292:	4640      	mov	r0, r8
 8007294:	f7ff fee2 	bl	800705c <_printf_common>
 8007298:	3001      	adds	r0, #1
 800729a:	d14c      	bne.n	8007336 <_printf_i+0x1fe>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	b004      	add	sp, #16
 80072a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a6:	4835      	ldr	r0, [pc, #212]	; (800737c <_printf_i+0x244>)
 80072a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072ac:	6829      	ldr	r1, [r5, #0]
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80072b4:	6029      	str	r1, [r5, #0]
 80072b6:	061d      	lsls	r5, r3, #24
 80072b8:	d514      	bpl.n	80072e4 <_printf_i+0x1ac>
 80072ba:	07df      	lsls	r7, r3, #31
 80072bc:	bf44      	itt	mi
 80072be:	f043 0320 	orrmi.w	r3, r3, #32
 80072c2:	6023      	strmi	r3, [r4, #0]
 80072c4:	b91e      	cbnz	r6, 80072ce <_printf_i+0x196>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	f023 0320 	bic.w	r3, r3, #32
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	2310      	movs	r3, #16
 80072d0:	e7b0      	b.n	8007234 <_printf_i+0xfc>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2378      	movs	r3, #120	; 0x78
 80072dc:	4828      	ldr	r0, [pc, #160]	; (8007380 <_printf_i+0x248>)
 80072de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072e2:	e7e3      	b.n	80072ac <_printf_i+0x174>
 80072e4:	0659      	lsls	r1, r3, #25
 80072e6:	bf48      	it	mi
 80072e8:	b2b6      	uxthmi	r6, r6
 80072ea:	e7e6      	b.n	80072ba <_printf_i+0x182>
 80072ec:	4615      	mov	r5, r2
 80072ee:	e7bb      	b.n	8007268 <_printf_i+0x130>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	6826      	ldr	r6, [r4, #0]
 80072f4:	6961      	ldr	r1, [r4, #20]
 80072f6:	1d18      	adds	r0, r3, #4
 80072f8:	6028      	str	r0, [r5, #0]
 80072fa:	0635      	lsls	r5, r6, #24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	d501      	bpl.n	8007304 <_printf_i+0x1cc>
 8007300:	6019      	str	r1, [r3, #0]
 8007302:	e002      	b.n	800730a <_printf_i+0x1d2>
 8007304:	0670      	lsls	r0, r6, #25
 8007306:	d5fb      	bpl.n	8007300 <_printf_i+0x1c8>
 8007308:	8019      	strh	r1, [r3, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	4615      	mov	r5, r2
 8007310:	e7ba      	b.n	8007288 <_printf_i+0x150>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	1d1a      	adds	r2, r3, #4
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	681d      	ldr	r5, [r3, #0]
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	2100      	movs	r1, #0
 800731e:	4628      	mov	r0, r5
 8007320:	f7f8 ff5e 	bl	80001e0 <memchr>
 8007324:	b108      	cbz	r0, 800732a <_printf_i+0x1f2>
 8007326:	1b40      	subs	r0, r0, r5
 8007328:	6060      	str	r0, [r4, #4]
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	6123      	str	r3, [r4, #16]
 800732e:	2300      	movs	r3, #0
 8007330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007334:	e7a8      	b.n	8007288 <_printf_i+0x150>
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	462a      	mov	r2, r5
 800733a:	4649      	mov	r1, r9
 800733c:	4640      	mov	r0, r8
 800733e:	47d0      	blx	sl
 8007340:	3001      	adds	r0, #1
 8007342:	d0ab      	beq.n	800729c <_printf_i+0x164>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	079b      	lsls	r3, r3, #30
 8007348:	d413      	bmi.n	8007372 <_printf_i+0x23a>
 800734a:	68e0      	ldr	r0, [r4, #12]
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	4298      	cmp	r0, r3
 8007350:	bfb8      	it	lt
 8007352:	4618      	movlt	r0, r3
 8007354:	e7a4      	b.n	80072a0 <_printf_i+0x168>
 8007356:	2301      	movs	r3, #1
 8007358:	4632      	mov	r2, r6
 800735a:	4649      	mov	r1, r9
 800735c:	4640      	mov	r0, r8
 800735e:	47d0      	blx	sl
 8007360:	3001      	adds	r0, #1
 8007362:	d09b      	beq.n	800729c <_printf_i+0x164>
 8007364:	3501      	adds	r5, #1
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	9903      	ldr	r1, [sp, #12]
 800736a:	1a5b      	subs	r3, r3, r1
 800736c:	42ab      	cmp	r3, r5
 800736e:	dcf2      	bgt.n	8007356 <_printf_i+0x21e>
 8007370:	e7eb      	b.n	800734a <_printf_i+0x212>
 8007372:	2500      	movs	r5, #0
 8007374:	f104 0619 	add.w	r6, r4, #25
 8007378:	e7f5      	b.n	8007366 <_printf_i+0x22e>
 800737a:	bf00      	nop
 800737c:	08009e4d 	.word	0x08009e4d
 8007380:	08009e5e 	.word	0x08009e5e

08007384 <memmove>:
 8007384:	4288      	cmp	r0, r1
 8007386:	b510      	push	{r4, lr}
 8007388:	eb01 0402 	add.w	r4, r1, r2
 800738c:	d902      	bls.n	8007394 <memmove+0x10>
 800738e:	4284      	cmp	r4, r0
 8007390:	4623      	mov	r3, r4
 8007392:	d807      	bhi.n	80073a4 <memmove+0x20>
 8007394:	1e43      	subs	r3, r0, #1
 8007396:	42a1      	cmp	r1, r4
 8007398:	d008      	beq.n	80073ac <memmove+0x28>
 800739a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073a2:	e7f8      	b.n	8007396 <memmove+0x12>
 80073a4:	4402      	add	r2, r0
 80073a6:	4601      	mov	r1, r0
 80073a8:	428a      	cmp	r2, r1
 80073aa:	d100      	bne.n	80073ae <memmove+0x2a>
 80073ac:	bd10      	pop	{r4, pc}
 80073ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073b6:	e7f7      	b.n	80073a8 <memmove+0x24>

080073b8 <_realloc_r>:
 80073b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073bc:	4680      	mov	r8, r0
 80073be:	4614      	mov	r4, r2
 80073c0:	460e      	mov	r6, r1
 80073c2:	b921      	cbnz	r1, 80073ce <_realloc_r+0x16>
 80073c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	4611      	mov	r1, r2
 80073ca:	f7ff bbbd 	b.w	8006b48 <_malloc_r>
 80073ce:	b92a      	cbnz	r2, 80073dc <_realloc_r+0x24>
 80073d0:	f7ff fb4e 	bl	8006a70 <_free_r>
 80073d4:	4625      	mov	r5, r4
 80073d6:	4628      	mov	r0, r5
 80073d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073dc:	f000 f81b 	bl	8007416 <_malloc_usable_size_r>
 80073e0:	4284      	cmp	r4, r0
 80073e2:	4607      	mov	r7, r0
 80073e4:	d802      	bhi.n	80073ec <_realloc_r+0x34>
 80073e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ea:	d812      	bhi.n	8007412 <_realloc_r+0x5a>
 80073ec:	4621      	mov	r1, r4
 80073ee:	4640      	mov	r0, r8
 80073f0:	f7ff fbaa 	bl	8006b48 <_malloc_r>
 80073f4:	4605      	mov	r5, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d0ed      	beq.n	80073d6 <_realloc_r+0x1e>
 80073fa:	42bc      	cmp	r4, r7
 80073fc:	4622      	mov	r2, r4
 80073fe:	4631      	mov	r1, r6
 8007400:	bf28      	it	cs
 8007402:	463a      	movcs	r2, r7
 8007404:	f7ff fb1e 	bl	8006a44 <memcpy>
 8007408:	4631      	mov	r1, r6
 800740a:	4640      	mov	r0, r8
 800740c:	f7ff fb30 	bl	8006a70 <_free_r>
 8007410:	e7e1      	b.n	80073d6 <_realloc_r+0x1e>
 8007412:	4635      	mov	r5, r6
 8007414:	e7df      	b.n	80073d6 <_realloc_r+0x1e>

08007416 <_malloc_usable_size_r>:
 8007416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800741a:	1f18      	subs	r0, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfbc      	itt	lt
 8007420:	580b      	ldrlt	r3, [r1, r0]
 8007422:	18c0      	addlt	r0, r0, r3
 8007424:	4770      	bx	lr
	...

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr

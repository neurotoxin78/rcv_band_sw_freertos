
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eef0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d50  0800f090  0800f090  0001f090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011de0  08011de0  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08011de0  08011de0  00021de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011de8  08011de8  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011de8  08011de8  00021de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dec  08011dec  00021dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08011df0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001afe0  200002b4  080120a4  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  2001b294  080120a4  0003b294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028f06  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000600d  00000000  00000000  000591ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  0005f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e20  00000000  00000000  000612b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eab6  00000000  00000000  000630d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b036  00000000  00000000  00081b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b51  00000000  00000000  000acbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e70d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091b8  00000000  00000000  0014e760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f078 	.word	0x0800f078

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	0800f078 	.word	0x0800f078

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f898 	bl	80016cc <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f88f 	bl	80016cc <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 f886 	bl	80016cc <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 ffba 	bl	8001552 <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 ffab 	bl	8001552 <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 ff9c 	bl	8001552 <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 ff8d 	bl	8001552 <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	0800f090 	.word	0x0800f090
 8000650:	0800f098 	.word	0x0800f098
 8000654:	0800f0a0 	.word	0x0800f0a0
 8000658:	0800f0a4 	.word	0x0800f0a4

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f000 ff68 	bl	8001552 <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f000 ff4a 	bl	8001552 <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00d fd04 	bl	800e130 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 ff06 	bl	8001552 <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00d fcef 	bl	800e130 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 fef1 	bl	8001552 <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	0800f0a8 	.word	0x0800f0a8
 8000784:	200002d0 	.word	0x200002d0
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	0800f0b4 	.word	0x0800f0b4
 8000798:	2000000c 	.word	0x2000000c

0800079c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <getRunTimeCounterValue+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000350 	.word	0x20000350

080007c4 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_FREERTOS_Init+0x38>)
 80007da:	2100      	movs	r1, #0
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_FREERTOS_Init+0x3c>)
 80007de:	f009 ff73 	bl	800a6c8 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <MX_FREERTOS_Init+0x40>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_FREERTOS_Init+0x44>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_FREERTOS_Init+0x48>)
 80007ee:	f009 ff6b 	bl	800a6c8 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <MX_FREERTOS_Init+0x4c>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* creation of buttonsTask */
  buttonsTaskHandle = osThreadNew(StartButtonsTask, NULL, &buttonsTask_attributes);
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <MX_FREERTOS_Init+0x50>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <MX_FREERTOS_Init+0x54>)
 80007fe:	f009 ff63 	bl	800a6c8 <osThreadNew>
 8000802:	4603      	mov	r3, r0
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <MX_FREERTOS_Init+0x58>)
 8000806:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08011c4c 	.word	0x08011c4c
 8000810:	08000831 	.word	0x08000831
 8000814:	200002f0 	.word	0x200002f0
 8000818:	08011c70 	.word	0x08011c70
 800081c:	08000881 	.word	0x08000881
 8000820:	200002f4 	.word	0x200002f4
 8000824:	08011c94 	.word	0x08011c94
 8000828:	080009f9 	.word	0x080009f9
 800082c:	200002f8 	.word	0x200002f8

08000830 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000838:	f00c fc98 	bl	800d16c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <StartDefaultTask+0x44>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <StartDefaultTask+0x48>)
 8000844:	460b      	mov	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	440b      	add	r3, r1
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	3304      	adds	r3, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <StartDefaultTask+0x4c>)
 8000856:	601a      	str	r2, [r3, #0]
	si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_8MA);
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <StartDefaultTask+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	2103      	movs	r1, #3
 8000860:	4618      	mov	r0, r3
 8000862:	f007 fdef 	bl	8008444 <si5351_SetupCLK0>
	si5351_EnableOutputs(1 << 0);
 8000866:	2001      	movs	r0, #1
 8000868:	f007 fe0d 	bl	8008486 <si5351_EnableOutputs>
	/* Timer*/
	for (;;) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		osDelay(250);
 800086c:	20fa      	movs	r0, #250	; 0xfa
 800086e:	f009 ffbd 	bl	800a7ec <osDelay>
 8000872:	e7fb      	b.n	800086c <StartDefaultTask+0x3c>
 8000874:	2000014e 	.word	0x2000014e
 8000878:	2000005c 	.word	0x2000005c
 800087c:	20000354 	.word	0x20000354

08000880 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */

	int32_t prevCounter = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
	/*  */
	max_freq = band[current_band].maxFreq;
 800088c:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <StartEncoderTask+0x158>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	4a52      	ldr	r2, [pc, #328]	; (80009dc <StartEncoderTask+0x15c>)
 8000894:	460b      	mov	r3, r1
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	440b      	add	r3, r1
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	3308      	adds	r3, #8
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <StartEncoderTask+0x160>)
 80008a6:	601a      	str	r2, [r3, #0]
	min_freq = band[current_band].minFreq;
 80008a8:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <StartEncoderTask+0x158>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4a4b      	ldr	r2, [pc, #300]	; (80009dc <StartEncoderTask+0x15c>)
 80008b0:	460b      	mov	r3, r1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	440b      	add	r3, r1
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	3304      	adds	r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <StartEncoderTask+0x164>)
 80008c2:	601a      	str	r2, [r3, #0]
	current_freq = min_freq;
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <StartEncoderTask+0x164>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a47      	ldr	r2, [pc, #284]	; (80009e8 <StartEncoderTask+0x168>)
 80008ca:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 80008cc:	f7ff fe5a 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 80008d0:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <StartEncoderTask+0x158>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4a41      	ldr	r2, [pc, #260]	; (80009dc <StartEncoderTask+0x15c>)
 80008d8:	460b      	mov	r3, r1
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	440b      	add	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff feb9 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 80008ea:	4b40      	ldr	r3, [pc, #256]	; (80009ec <StartEncoderTask+0x16c>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <StartEncoderTask+0x170>)
 80008f2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fece 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <StartEncoderTask+0x168>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fee7 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000906:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <StartEncoderTask+0x174>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090c:	613b      	str	r3, [r7, #16]
		uint16_t step_value = step[current_step].step;
 800090e:	4b37      	ldr	r3, [pc, #220]	; (80009ec <StartEncoderTask+0x16c>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	4a37      	ldr	r2, [pc, #220]	; (80009f0 <StartEncoderTask+0x170>)
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	81fb      	strh	r3, [r7, #14]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	3b01      	subs	r3, #1
 8000920:	b29b      	uxth	r3, r3
 8000922:	0fda      	lsrs	r2, r3, #31
 8000924:	4413      	add	r3, r2
 8000926:	105b      	asrs	r3, r3, #1
 8000928:	425b      	negs	r3, r3
 800092a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800092e:	337f      	adds	r3, #127	; 0x7f
 8000930:	613b      	str	r3, [r7, #16]

		if (currCounter != prevCounter) {
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	429a      	cmp	r2, r3
 8000938:	d04a      	beq.n	80009d0 <StartEncoderTask+0x150>
			if (currCounter > prevCounter) {
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	429a      	cmp	r2, r3
 8000940:	dd20      	ble.n	8000984 <StartEncoderTask+0x104>
				if (current_freq != min_freq) {
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <StartEncoderTask+0x168>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <StartEncoderTask+0x164>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	429a      	cmp	r2, r3
 800094c:	d006      	beq.n	800095c <StartEncoderTask+0xdc>
					current_freq -= step_value;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <StartEncoderTask+0x168>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <StartEncoderTask+0x168>)
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	e003      	b.n	8000964 <StartEncoderTask+0xe4>
				} else {
					current_freq = max_freq;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <StartEncoderTask+0x160>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <StartEncoderTask+0x168>)
 8000962:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <StartEncoderTask+0x168>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f007 fd69 	bl	8008444 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <StartEncoderTask+0x168>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff feac 	bl	80006d4 <displayFrequency>
				osDelay(5);
 800097c:	2005      	movs	r0, #5
 800097e:	f009 ff35 	bl	800a7ec <osDelay>
 8000982:	e023      	b.n	80009cc <StartEncoderTask+0x14c>
			} else if (currCounter < prevCounter) {
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	429a      	cmp	r2, r3
 800098a:	da1f      	bge.n	80009cc <StartEncoderTask+0x14c>
				if (current_freq != max_freq) {
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <StartEncoderTask+0x168>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <StartEncoderTask+0x160>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	429a      	cmp	r2, r3
 8000996:	d006      	beq.n	80009a6 <StartEncoderTask+0x126>
					current_freq += step_value;
 8000998:	89fa      	ldrh	r2, [r7, #14]
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <StartEncoderTask+0x168>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <StartEncoderTask+0x168>)
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e003      	b.n	80009ae <StartEncoderTask+0x12e>
				} else {
					current_freq = min_freq;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <StartEncoderTask+0x164>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <StartEncoderTask+0x168>)
 80009ac:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <StartEncoderTask+0x168>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f007 fd44 	bl	8008444 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <StartEncoderTask+0x168>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe87 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009c6:	2005      	movs	r0, #5
 80009c8:	f009 ff10 	bl	800a7ec <osDelay>
			} else {

			}
			prevCounter = currCounter;
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	617b      	str	r3, [r7, #20]
		}

		osDelay(5);
 80009d0:	2005      	movs	r0, #5
 80009d2:	f009 ff0b 	bl	800a7ec <osDelay>
	for (;;) {
 80009d6:	e796      	b.n	8000906 <StartEncoderTask+0x86>
 80009d8:	2000014e 	.word	0x2000014e
 80009dc:	2000005c 	.word	0x2000005c
 80009e0:	200002e8 	.word	0x200002e8
 80009e4:	200002ec 	.word	0x200002ec
 80009e8:	20000354 	.word	0x20000354
 80009ec:	2000014c 	.word	0x2000014c
 80009f0:	2000001c 	.word	0x2000001c
 80009f4:	20000408 	.word	0x20000408

080009f8 <StartButtonsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonsTask */
void StartButtonsTask(void *argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonsTask */
	/* Infinite loop */
	for (;;) {
		/* BUTTON */
		//printf("Step %d\n\r", current_step);
		if (buttonPressed[buttonNumber]) {
 8000a00:	4ba7      	ldr	r3, [pc, #668]	; (8000ca0 <StartButtonsTask+0x2a8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4ba7      	ldr	r3, [pc, #668]	; (8000ca4 <StartButtonsTask+0x2ac>)
 8000a08:	5c9b      	ldrb	r3, [r3, r2]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 8143 	beq.w	8000c98 <StartButtonsTask+0x2a0>
			buttonPressed[buttonNumber] = 0;
 8000a12:	4ba3      	ldr	r3, [pc, #652]	; (8000ca0 <StartButtonsTask+0x2a8>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4ba2      	ldr	r3, [pc, #648]	; (8000ca4 <StartButtonsTask+0x2ac>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	5499      	strb	r1, [r3, r2]
			if (buttonNumber == 0) {
 8000a1e:	4ba0      	ldr	r3, [pc, #640]	; (8000ca0 <StartButtonsTask+0x2a8>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d121      	bne.n	8000a6a <StartButtonsTask+0x72>
				if (current_step != lastStep) {
 8000a26:	4ba0      	ldr	r3, [pc, #640]	; (8000ca8 <StartButtonsTask+0x2b0>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d00f      	beq.n	8000a52 <StartButtonsTask+0x5a>
					current_step++;
 8000a32:	4b9d      	ldr	r3, [pc, #628]	; (8000ca8 <StartButtonsTask+0x2b0>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b9b      	ldr	r3, [pc, #620]	; (8000ca8 <StartButtonsTask+0x2b0>)
 8000a3c:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000a3e:	4b9a      	ldr	r3, [pc, #616]	; (8000ca8 <StartButtonsTask+0x2b0>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b99      	ldr	r3, [pc, #612]	; (8000cac <StartButtonsTask+0x2b4>)
 8000a46:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe24 	bl	8000698 <displayStep>
 8000a50:	e00b      	b.n	8000a6a <StartButtonsTask+0x72>
				} else {
					current_step = 0;
 8000a52:	4b95      	ldr	r3, [pc, #596]	; (8000ca8 <StartButtonsTask+0x2b0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000a58:	4b93      	ldr	r3, [pc, #588]	; (8000ca8 <StartButtonsTask+0x2b0>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b93      	ldr	r3, [pc, #588]	; (8000cac <StartButtonsTask+0x2b4>)
 8000a60:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe17 	bl	8000698 <displayStep>
				}
			}
			if (buttonNumber == 1) {
 8000a6a:	4b8d      	ldr	r3, [pc, #564]	; (8000ca0 <StartButtonsTask+0x2a8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	f040 8087 	bne.w	8000b82 <StartButtonsTask+0x18a>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a78:	488d      	ldr	r0, [pc, #564]	; (8000cb0 <StartButtonsTask+0x2b8>)
 8000a7a:	f001 fda1 	bl	80025c0 <HAL_GPIO_TogglePin>
				if (current_band != lastBand) {
 8000a7e:	4b8d      	ldr	r3, [pc, #564]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	2313      	movs	r3, #19
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d03f      	beq.n	8000b0a <StartButtonsTask+0x112>
					current_band++;
 8000a8a:	4b8a      	ldr	r3, [pc, #552]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b88      	ldr	r3, [pc, #544]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000a94:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000a96:	4b87      	ldr	r3, [pc, #540]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4a86      	ldr	r2, [pc, #536]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	440b      	add	r3, r1
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fdd6 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000ab0:	4b80      	ldr	r3, [pc, #512]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4a80      	ldr	r2, [pc, #512]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b7c      	ldr	r3, [pc, #496]	; (8000cbc <StartButtonsTask+0x2c4>)
 8000aca:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000acc:	4b79      	ldr	r3, [pc, #484]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4a79      	ldr	r2, [pc, #484]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	3304      	adds	r3, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b76      	ldr	r3, [pc, #472]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000ae6:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000ae8:	4b75      	ldr	r3, [pc, #468]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a75      	ldr	r2, [pc, #468]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000aee:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000af0:	4b74      	ldr	r3, [pc, #464]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fded 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000afa:	4b72      	ldr	r3, [pc, #456]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f007 fc9e 	bl	8008444 <si5351_SetupCLK0>
 8000b08:	e03b      	b.n	8000b82 <StartButtonsTask+0x18a>
				} else {
					current_band = 0;
 8000b0a:	4b6a      	ldr	r3, [pc, #424]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b10:	4b68      	ldr	r3, [pc, #416]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4a68      	ldr	r2, [pc, #416]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000b18:	460b      	mov	r3, r1
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	440b      	add	r3, r1
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd99 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000b2a:	4b62      	ldr	r3, [pc, #392]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4a61      	ldr	r2, [pc, #388]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000b32:	460b      	mov	r3, r1
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	440b      	add	r3, r1
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b5e      	ldr	r3, [pc, #376]	; (8000cbc <StartButtonsTask+0x2c4>)
 8000b44:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000b46:	4b5b      	ldr	r3, [pc, #364]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4a5a      	ldr	r2, [pc, #360]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000b4e:	460b      	mov	r3, r1
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	440b      	add	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	3304      	adds	r3, #4
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b58      	ldr	r3, [pc, #352]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000b60:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000b62:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a57      	ldr	r2, [pc, #348]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000b68:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000b6a:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fdb0 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000b74:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 fc61 	bl	8008444 <si5351_SetupCLK0>
				}
			}
			if (buttonNumber == 2) {
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <StartButtonsTask+0x2a8>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	f040 8086 	bne.w	8000c98 <StartButtonsTask+0x2a0>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	4847      	ldr	r0, [pc, #284]	; (8000cb0 <StartButtonsTask+0x2b8>)
 8000b92:	f001 fd15 	bl	80025c0 <HAL_GPIO_TogglePin>
							if (current_band != 0) {
 8000b96:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d03f      	beq.n	8000c1e <StartButtonsTask+0x226>
								current_band--;
 8000b9e:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000ba8:	701a      	strb	r2, [r3, #0]
								displayBand(band[current_band].name);
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4a41      	ldr	r2, [pc, #260]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	440b      	add	r3, r1
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fd4c 	bl	800065c <displayBand>
								max_freq = band[current_band].maxFreq;
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4a3b      	ldr	r2, [pc, #236]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000bcc:	460b      	mov	r3, r1
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	440b      	add	r3, r1
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <StartButtonsTask+0x2c4>)
 8000bde:	601a      	str	r2, [r3, #0]
								min_freq = band[current_band].minFreq;
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000be8:	460b      	mov	r3, r1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	440b      	add	r3, r1
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000bfa:	601a      	str	r2, [r3, #0]
								current_freq = min_freq;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a30      	ldr	r2, [pc, #192]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000c02:	6013      	str	r3, [r2, #0]
								displayFrequency(current_freq);
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd63 	bl	80006d4 <displayFrequency>
								si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	2101      	movs	r1, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f007 fc14 	bl	8008444 <si5351_SetupCLK0>
 8000c1c:	e03c      	b.n	8000c98 <StartButtonsTask+0x2a0>
							} else {
								current_band = lastBand;
 8000c1e:	2313      	movs	r3, #19
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000c24:	701a      	strb	r2, [r3, #0]
								displayBand(band[current_band].name);
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000c2e:	460b      	mov	r3, r1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	440b      	add	r3, r1
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fd0e 	bl	800065c <displayBand>
								max_freq = band[current_band].maxFreq;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000c48:	460b      	mov	r3, r1
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	440b      	add	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	3308      	adds	r3, #8
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <StartButtonsTask+0x2c4>)
 8000c5a:	601a      	str	r2, [r3, #0]
								min_freq = band[current_band].minFreq;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <StartButtonsTask+0x2bc>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <StartButtonsTask+0x2c0>)
 8000c64:	460b      	mov	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3304      	adds	r3, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000c76:	601a      	str	r2, [r3, #0]
								current_freq = min_freq;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <StartButtonsTask+0x2c8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000c7e:	6013      	str	r3, [r2, #0]
								displayFrequency(current_freq);
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd25 	bl	80006d4 <displayFrequency>
								si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <StartButtonsTask+0x2cc>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	2101      	movs	r1, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f007 fbd6 	bl	8008444 <si5351_SetupCLK0>
							}
						}
		}
		osDelay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f009 fda7 	bl	800a7ec <osDelay>
		if (buttonPressed[buttonNumber]) {
 8000c9e:	e6af      	b.n	8000a00 <StartButtonsTask+0x8>
 8000ca0:	200002e4 	.word	0x200002e4
 8000ca4:	200003fc 	.word	0x200003fc
 8000ca8:	2000014c 	.word	0x2000014c
 8000cac:	2000001c 	.word	0x2000001c
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	2000014e 	.word	0x2000014e
 8000cb8:	2000005c 	.word	0x2000005c
 8000cbc:	200002e8 	.word	0x200002e8
 8000cc0:	200002ec 	.word	0x200002ec
 8000cc4:	20000354 	.word	0x20000354

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a53      	ldr	r2, [pc, #332]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_GPIO_Init+0x16c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	4838      	ldr	r0, [pc, #224]	; (8000e38 <MX_GPIO_Init+0x170>)
 8000d56:	f001 fc01 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4837      	ldr	r0, [pc, #220]	; (8000e3c <MX_GPIO_Init+0x174>)
 8000d60:	f001 fbfc 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	211c      	movs	r1, #28
 8000d68:	4834      	ldr	r0, [pc, #208]	; (8000e3c <MX_GPIO_Init+0x174>)
 8000d6a:	f001 fbf7 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	482c      	ldr	r0, [pc, #176]	; (8000e38 <MX_GPIO_Init+0x170>)
 8000d88:	f001 f94e 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BAND_PLUS_BTN_Pin|BAND_MINUS_BTN_Pin;
 8000d8c:	f240 1301 	movw	r3, #257	; 0x101
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4826      	ldr	r0, [pc, #152]	; (8000e3c <MX_GPIO_Init+0x174>)
 8000da4:	f001 f940 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8000da8:	2302      	movs	r3, #2
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481f      	ldr	r0, [pc, #124]	; (8000e3c <MX_GPIO_Init+0x174>)
 8000dc0:	f001 f932 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000dc4:	231c      	movs	r3, #28
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <MX_GPIO_Init+0x174>)
 8000ddc:	f001 f924 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000de0:	2304      	movs	r3, #4
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <MX_GPIO_Init+0x178>)
 8000df6:	f001 f917 	bl	8002028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f001 f8ce 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e04:	2006      	movs	r0, #6
 8000e06:	f001 f8f7 	bl	8001ff8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2008      	movs	r0, #8
 8000e10:	f001 f8c6 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e14:	2008      	movs	r0, #8
 8000e16:	f001 f8ef 	bl	8001ff8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2017      	movs	r0, #23
 8000e20:	f001 f8be 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e24:	2017      	movs	r0, #23
 8000e26:	f001 f8e7 	bl	8001ff8 <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020400 	.word	0x40020400

08000e44 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e4a:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <MX_I2C2_Init+0x54>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_I2C2_Init+0x58>)
 8000e52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_I2C2_Init+0x50>)
 8000e82:	f001 fbdd 	bl	8002640 <HAL_I2C_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e8c:	f000 f956 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200002fc 	.word	0x200002fc
 8000e98:	40005800 	.word	0x40005800
 8000e9c:	00061a80 	.word	0x00061a80

08000ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <HAL_I2C_MspInit+0xa4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d13c      	bne.n	8000f3c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_I2C_MspInit+0xa8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_I2C_MspInit+0xa8>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_I2C_MspInit+0xa8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee4:	2312      	movs	r3, #18
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <HAL_I2C_MspInit+0xac>)
 8000efc:	f001 f894 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f00:	2308      	movs	r3, #8
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f10:	2309      	movs	r3, #9
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <HAL_I2C_MspInit+0xac>)
 8000f1c:	f001 f884 	bl	8002028 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_I2C_MspInit+0xa8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_I2C_MspInit+0xa8>)
 8000f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_I2C_MspInit+0xa8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40005800 	.word	0x40005800
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020400 	.word	0x40020400

08000f50 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000f56:	f000 fa6b 	bl	8001430 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000f5a:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000f5e:	f000 fc39 	bl	80017d4 <ST7735_FillScreen>
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <Display_Init+0x5c>)
 8000f64:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000f68:	9202      	str	r2, [sp, #8]
 8000f6a:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <Display_Init+0x60>)
 8000f78:	210a      	movs	r1, #10
 8000f7a:	2008      	movs	r0, #8
 8000f7c:	f000 fae9 	bl	8001552 <ST7735_WriteString>
    ST7735_WriteString(15, 35, "SDR RECEIVER", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <Display_Init+0x64>)
 8000f82:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000f86:	9202      	str	r2, [sp, #8]
 8000f88:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000f8c:	9201      	str	r2, [sp, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	9200      	str	r2, [sp, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <Display_Init+0x68>)
 8000f96:	2123      	movs	r1, #35	; 0x23
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f000 fada 	bl	8001552 <ST7735_WriteString>
    HAL_Delay(2000);
 8000f9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fa2:	f000 ff0b 	bl	8001dbc <HAL_Delay>
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	0800f180 	.word	0x0800f180
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	0800f18c 	.word	0x0800f18c

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc0:	f000 feba 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc4:	f000 f81c 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc8:	f7ff fe7e 	bl	8000cc8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fcc:	f000 fdc6 	bl	8001b5c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000fd0:	f000 f8ca 	bl	8001168 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fd4:	f7ff ff36 	bl	8000e44 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000fd8:	f00c f8c8 	bl	800d16c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fdc:	213c      	movs	r1, #60	; 0x3c
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <main+0x40>)
 8000fe0:	f005 f850 	bl	8006084 <HAL_TIM_Encoder_Start>
  //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);

  /* Display */
  //setBacklight(100);
  Display_Init();
 8000fe4:	f7ff ffb4 	bl	8000f50 <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f007 f845 	bl	8008078 <si5351_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fee:	f009 fb21 	bl	800a634 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ff2:	f7ff fbef 	bl	80007d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ff6:	f009 fb41 	bl	800a67c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <main+0x3e>
 8000ffc:	20000408 	.word	0x20000408

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00c fefe 	bl	800de10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <SystemClock_Config+0xd0>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <SystemClock_Config+0xd0>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <SystemClock_Config+0xd0>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <SystemClock_Config+0xd4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <SystemClock_Config+0xd4>)
 800104a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <SystemClock_Config+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106a:	2310      	movs	r3, #16
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001078:	230f      	movs	r3, #15
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800107c:	2390      	movs	r3, #144	; 0x90
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001080:	2306      	movs	r3, #6
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001084:	2305      	movs	r3, #5
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fb7d 	bl	800478c <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001098:	f000 f850 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fe8f 	bl	8004ddc <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010c4:	f000 f83a 	bl	800113c <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	; 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, uint8_t *ptr, int len) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	68b8      	ldr	r0, [r7, #8]
 80010ec:	f00c f8fc 	bl	800d2e8 <CDC_Transmit_FS>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_write+0x40>)
 80010f6:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_write+0x40>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d0f1      	beq.n	80010e4 <_write+0xc>

    if (USBD_FAIL == rc) {
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <_write+0x40>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d101      	bne.n	800110c <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001108:	2300      	movs	r3, #0
 800110a:	e000      	b.n	800110e <_write+0x36>
    }
    return len;
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000358 	.word	0x20000358

0800111c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112c:	d101      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112e:	f000 fe25 	bl	8001d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error_Handler");
 8001144:	4801      	ldr	r0, [pc, #4]	; (800114c <Error_Handler+0x10>)
 8001146:	f00c ff4b 	bl	800dfe0 <iprintf>
 800114a:	e7fb      	b.n	8001144 <Error_Handler+0x8>
 800114c:	0800f19c 	.word	0x0800f19c

08001150 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI1_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI1_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI1_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI1_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_SPI1_Init+0x64>)
 80011ba:	f004 f8b5 	bl	8005328 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f7ff ffba 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000035c 	.word	0x2000035c
 80011d0:	40013000 	.word	0x40013000

080011d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_SPI_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_SPI_MspInit+0x88>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_SPI_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123e:	2305      	movs	r3, #5
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 800124a:	f000 feed 	bl	8002028 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40013000 	.word	0x40013000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2110      	movs	r1, #16
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <ST7735_Select+0x14>)
 800126e:	f001 f975 	bl	800255c <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000

0800127c <ST7735_Unselect>:

void ST7735_Unselect() {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2110      	movs	r1, #16
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <ST7735_Unselect+0x14>)
 8001286:	f001 f969 	bl	800255c <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020000 	.word	0x40020000

08001294 <ST7735_Reset>:

static void ST7735_Reset() {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2108      	movs	r1, #8
 800129c:	4806      	ldr	r0, [pc, #24]	; (80012b8 <ST7735_Reset+0x24>)
 800129e:	f001 f95d 	bl	800255c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80012a2:	2005      	movs	r0, #5
 80012a4:	f000 fd8a 	bl	8001dbc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2108      	movs	r1, #8
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <ST7735_Reset+0x24>)
 80012ae:	f001 f955 	bl	800255c <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020000 	.word	0x40020000

080012bc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2104      	movs	r1, #4
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <ST7735_WriteCommand+0x2c>)
 80012cc:	f001 f946 	bl	800255c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012d0:	1df9      	adds	r1, r7, #7
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2201      	movs	r2, #1
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <ST7735_WriteCommand+0x30>)
 80012da:	f004 f9c1 	bl	8005660 <HAL_SPI_Transmit>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020000 	.word	0x40020000
 80012ec:	2000035c 	.word	0x2000035c

080012f0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2104      	movs	r1, #4
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <ST7735_WriteData+0x2c>)
 8001300:	f001 f92c 	bl	800255c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b29a      	uxth	r2, r3
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <ST7735_WriteData+0x30>)
 8001310:	f004 f9a6 	bl	8005660 <HAL_SPI_Transmit>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40020000 	.word	0x40020000
 8001320:	2000035c 	.word	0x2000035c

08001324 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001336:	e034      	b.n	80013a2 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001342:	7afb      	ldrb	r3, [r7, #11]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ffb9 	bl	80012bc <ST7735_WriteCommand>

        numArgs = *addr++;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001354:	7abb      	ldrb	r3, [r7, #10]
 8001356:	b29b      	uxth	r3, r3
 8001358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800135e:	7abb      	ldrb	r3, [r7, #10]
 8001360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001364:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001366:	7abb      	ldrb	r3, [r7, #10]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800136c:	7abb      	ldrb	r3, [r7, #10]
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffbd 	bl	80012f0 <ST7735_WriteData>
            addr += numArgs;
 8001376:	7abb      	ldrb	r3, [r7, #10]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800137e:	89bb      	ldrh	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00e      	beq.n	80013a2 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800138e:	89bb      	ldrh	r3, [r7, #12]
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d102      	bne.n	800139a <ST7735_ExecuteCommandList+0x76>
 8001394:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001398:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800139a:	89bb      	ldrh	r3, [r7, #12]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd0d 	bl	8001dbc <HAL_Delay>
    while(numCommands--) {
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	73fa      	strb	r2, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1c5      	bne.n	8001338 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4604      	mov	r4, r0
 80013be:	4608      	mov	r0, r1
 80013c0:	4611      	mov	r1, r2
 80013c2:	461a      	mov	r2, r3
 80013c4:	4623      	mov	r3, r4
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4603      	mov	r3, r0
 80013ca:	71bb      	strb	r3, [r7, #6]
 80013cc:	460b      	mov	r3, r1
 80013ce:	717b      	strb	r3, [r7, #5]
 80013d0:	4613      	mov	r3, r2
 80013d2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80013d4:	202a      	movs	r0, #42	; 0x2a
 80013d6:	f7ff ff71 	bl	80012bc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80013da:	2300      	movs	r3, #0
 80013dc:	733b      	strb	r3, [r7, #12]
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	737b      	strb	r3, [r7, #13]
 80013e6:	2300      	movs	r3, #0
 80013e8:	73bb      	strb	r3, [r7, #14]
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2104      	movs	r1, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff79 	bl	80012f0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80013fe:	202b      	movs	r0, #43	; 0x2b
 8001400:	f7ff ff5c 	bl	80012bc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	331a      	adds	r3, #26
 8001408:	b2db      	uxtb	r3, r3
 800140a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	331a      	adds	r3, #26
 8001410:	b2db      	uxtb	r3, r3
 8001412:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff68 	bl	80012f0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001420:	202c      	movs	r0, #44	; 0x2c
 8001422:	f7ff ff4b 	bl	80012bc <ST7735_WriteCommand>
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}
	...

08001430 <ST7735_Init>:

void ST7735_Init() {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001434:	f7ff ff16 	bl	8001264 <ST7735_Select>
    ST7735_Reset();
 8001438:	f7ff ff2c 	bl	8001294 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <ST7735_Init+0x28>)
 800143e:	f7ff ff71 	bl	8001324 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <ST7735_Init+0x2c>)
 8001444:	f7ff ff6e 	bl	8001324 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <ST7735_Init+0x30>)
 800144a:	f7ff ff6b 	bl	8001324 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800144e:	f7ff ff15 	bl	800127c <ST7735_Unselect>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	08011cb8 	.word	0x08011cb8
 800145c:	08011cf4 	.word	0x08011cf4
 8001460:	08011d04 	.word	0x08011d04

08001464 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001464:	b082      	sub	sp, #8
 8001466:	b590      	push	{r4, r7, lr}
 8001468:	b089      	sub	sp, #36	; 0x24
 800146a:	af00      	add	r7, sp, #0
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
 8001472:	460b      	mov	r3, r1
 8001474:	80bb      	strh	r3, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2d8      	uxtb	r0, r3
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800148a:	4413      	add	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b2dc      	uxtb	r4, r3
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4622      	mov	r2, r4
 80014a4:	f7ff ff87 	bl	80013b6 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e043      	b.n	8001536 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80014ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	3b20      	subs	r3, #32
 80014b4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	440b      	add	r3, r1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e029      	b.n	8001524 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00e      	beq.n	80014fe <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	743b      	strb	r3, [r7, #16]
 80014ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2102      	movs	r1, #2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fefa 	bl	80012f0 <ST7735_WriteData>
 80014fc:	e00f      	b.n	800151e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80014fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	733b      	strb	r3, [r7, #12]
 800150a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800150e:	b2db      	uxtb	r3, r3
 8001510:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fee9 	bl	80012f0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	3301      	adds	r3, #1
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001528:	461a      	mov	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4293      	cmp	r3, r2
 800152e:	d3cf      	bcc.n	80014d0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3301      	adds	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800153a:	461a      	mov	r2, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4293      	cmp	r3, r2
 8001540:	d3b5      	bcc.n	80014ae <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3724      	adds	r7, #36	; 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800154e:	b002      	add	sp, #8
 8001550:	4770      	bx	lr

08001552 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001552:	b082      	sub	sp, #8
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af04      	add	r7, sp, #16
 800155a:	603a      	str	r2, [r7, #0]
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	460b      	mov	r3, r1
 8001564:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001566:	f7ff fe7d 	bl	8001264 <ST7735_Select>

    while(*str) {
 800156a:	e02d      	b.n	80015c8 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	7d3a      	ldrb	r2, [r7, #20]
 8001570:	4413      	add	r3, r2
 8001572:	2b9f      	cmp	r3, #159	; 0x9f
 8001574:	dd13      	ble.n	800159e <ST7735_WriteString+0x4c>
            x = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	b29a      	uxth	r2, r3
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	7d7a      	ldrb	r2, [r7, #21]
 8001588:	4413      	add	r3, r2
 800158a:	2b4f      	cmp	r3, #79	; 0x4f
 800158c:	dc21      	bgt.n	80015d2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b20      	cmp	r3, #32
 8001594:	d103      	bne.n	800159e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	603b      	str	r3, [r7, #0]
                continue;
 800159c:	e014      	b.n	80015c8 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	88b9      	ldrh	r1, [r7, #4]
 80015a4:	88f8      	ldrh	r0, [r7, #6]
 80015a6:	8c3b      	ldrh	r3, [r7, #32]
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f7ff ff56 	bl	8001464 <ST7735_WriteChar>
        x += font.width;
 80015b8:	7d3b      	ldrb	r3, [r7, #20]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4413      	add	r3, r2
 80015c0:	80fb      	strh	r3, [r7, #6]
        str++;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1cd      	bne.n	800156c <ST7735_WriteString+0x1a>
 80015d0:	e000      	b.n	80015d4 <ST7735_WriteString+0x82>
                break;
 80015d2:	bf00      	nop
    }

    ST7735_Unselect();
 80015d4:	f7ff fe52 	bl	800127c <ST7735_Unselect>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015e2:	b002      	add	sp, #8
 80015e4:	4770      	bx	lr
	...

080015e8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4603      	mov	r3, r0
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	2b9f      	cmp	r3, #159	; 0x9f
 800160a:	d857      	bhi.n	80016bc <ST7735_FillRectangle+0xd4>
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	2b4f      	cmp	r3, #79	; 0x4f
 8001610:	d854      	bhi.n	80016bc <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	2ba0      	cmp	r3, #160	; 0xa0
 800161a:	dd03      	ble.n	8001624 <ST7735_FillRectangle+0x3c>
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001622:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001624:	88ba      	ldrh	r2, [r7, #4]
 8001626:	883b      	ldrh	r3, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	2b50      	cmp	r3, #80	; 0x50
 800162c:	dd03      	ble.n	8001636 <ST7735_FillRectangle+0x4e>
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001634:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001636:	f7ff fe15 	bl	8001264 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	b2d9      	uxtb	r1, r3
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4413      	add	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b2dc      	uxtb	r4, r3
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	883b      	ldrh	r3, [r7, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4622      	mov	r2, r4
 8001664:	f7ff fea7 	bl	80013b6 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001668:	8c3b      	ldrh	r3, [r7, #32]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	733b      	strb	r3, [r7, #12]
 8001672:	8c3b      	ldrh	r3, [r7, #32]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2104      	movs	r1, #4
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <ST7735_FillRectangle+0xdc>)
 800167e:	f000 ff6d 	bl	800255c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001682:	883b      	ldrh	r3, [r7, #0]
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	e013      	b.n	80016b0 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	e00a      	b.n	80016a4 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800168e:	f107 010c 	add.w	r1, r7, #12
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	2202      	movs	r2, #2
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <ST7735_FillRectangle+0xe0>)
 800169a:	f003 ffe1 	bl	8005660 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	80fb      	strh	r3, [r7, #6]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f1      	bne.n	800168e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	80bb      	strh	r3, [r7, #4]
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1e8      	bne.n	8001688 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 80016b6:	f7ff fde1 	bl	800127c <ST7735_Unselect>
 80016ba:	e000      	b.n	80016be <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80016bc:	bf00      	nop
}
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	40020000 	.word	0x40020000
 80016c8:	2000035c 	.word	0x2000035c

080016cc <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2b9f      	cmp	r3, #159	; 0x9f
 80016ee:	d869      	bhi.n	80017c4 <ST7735_FillRectangleFast+0xf8>
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	2b4f      	cmp	r3, #79	; 0x4f
 80016f4:	d866      	bhi.n	80017c4 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4413      	add	r3, r2
 80016fc:	2ba0      	cmp	r3, #160	; 0xa0
 80016fe:	dd03      	ble.n	8001708 <ST7735_FillRectangleFast+0x3c>
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001706:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001708:	88ba      	ldrh	r2, [r7, #4]
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	2b50      	cmp	r3, #80	; 0x50
 8001710:	dd03      	ble.n	800171a <ST7735_FillRectangleFast+0x4e>
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001718:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800171a:	f7ff fda3 	bl	8001264 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b2d8      	uxtb	r0, r3
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	b2d9      	uxtb	r1, r3
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b2dc      	uxtb	r4, r3
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	883b      	ldrh	r3, [r7, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4413      	add	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4622      	mov	r2, r4
 8001748:	f7ff fe35 	bl	80013b6 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800174c:	8c3b      	ldrh	r3, [r7, #32]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	b29b      	uxth	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	723b      	strb	r3, [r7, #8]
 8001756:	8c3b      	ldrh	r3, [r7, #32]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f00c fb37 	bl	800ddd4 <malloc>
 8001766:	4603      	mov	r3, r0
 8001768:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800176a:	2300      	movs	r3, #0
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	e008      	b.n	8001782 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	893a      	ldrh	r2, [r7, #8]
 800177a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	3301      	adds	r3, #1
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	88fa      	ldrh	r2, [r7, #6]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3f2      	bcc.n	8001770 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2104      	movs	r1, #4
 800178e:	480f      	ldr	r0, [pc, #60]	; (80017cc <ST7735_FillRectangleFast+0x100>)
 8001790:	f000 fee4 	bl	800255c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001794:	883b      	ldrh	r3, [r7, #0]
 8001796:	80bb      	strh	r3, [r7, #4]
 8001798:	e00b      	b.n	80017b2 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	480a      	ldr	r0, [pc, #40]	; (80017d0 <ST7735_FillRectangleFast+0x104>)
 80017a8:	f003 ff5a 	bl	8005660 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <ST7735_FillRectangleFast+0xce>

    free(line);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f00c fb13 	bl	800dde4 <free>
    ST7735_Unselect();
 80017be:	f7ff fd5d 	bl	800127c <ST7735_Unselect>
 80017c2:	e000      	b.n	80017c6 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80017c4:	bf00      	nop
}
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	40020000 	.word	0x40020000
 80017d0:	2000035c 	.word	0x2000035c

080017d4 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af02      	add	r7, sp, #8
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2350      	movs	r3, #80	; 0x50
 80017e4:	22a0      	movs	r2, #160	; 0xa0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fefd 	bl	80015e8 <ST7735_FillRectangle>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_MspInit+0x54>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_MspInit+0x54>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x54>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_MspInit+0x54>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_MspInit+0x54>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_MspInit+0x54>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	210f      	movs	r1, #15
 800183a:	f06f 0001 	mvn.w	r0, #1
 800183e:	f000 fbaf 	bl	8001fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	201c      	movs	r0, #28
 8001866:	f000 fb9b 	bl	8001fa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186a:	201c      	movs	r0, #28
 800186c:	f000 fbc4 	bl	8001ff8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_InitTick+0xa8>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <HAL_InitTick+0xa8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_InitTick+0xa8>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188c:	f107 0210 	add.w	r2, r7, #16
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fd14 	bl	80052c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800189c:	f003 fcfe 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 80018a0:	4603      	mov	r3, r0
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_InitTick+0xac>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	3b01      	subs	r3, #1
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0xb0>)
 80018b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_InitTick+0xb0>)
 80018be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_InitTick+0xb0>)
 80018c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_InitTick+0xb0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_InitTick+0xb0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80018d6:	480a      	ldr	r0, [pc, #40]	; (8001900 <HAL_InitTick+0xb0>)
 80018d8:	f004 f8d8 	bl	8005a8c <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <HAL_InitTick+0xb0>)
 80018e4:	f004 f9a2 	bl	8005c2c <HAL_TIM_Base_Start_IT>
 80018e8:	4603      	mov	r3, r0
 80018ea:	e000      	b.n	80018ee <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	200003b4 	.word	0x200003b4

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAND_PLUS_BTN_Pin);
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fe6b 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001942:	2004      	movs	r0, #4
 8001944:	f000 fe64 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAND_MINUS_BTN_Pin);
 8001950:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001954:	f000 fe5c 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <TIM2_IRQHandler+0x10>)
 8001962:	f004 fc4d 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200003b4 	.word	0x200003b4

08001970 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <TIM3_IRQHandler+0x28>)
 8001976:	f004 fc43 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <TIM3_IRQHandler+0x2c>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <TIM3_IRQHandler+0x2c>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <TIM3_IRQHandler+0x2c>)
 800198c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001990:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000408 	.word	0x20000408
 800199c:	40000400 	.word	0x40000400

080019a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <OTG_FS_IRQHandler+0x10>)
 80019a6:	f001 fdc4 	bl	8003532 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2001ab58 	.word	0x2001ab58

080019b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
	buttonNumber = -1;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x68>)
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	701a      	strb	r2, [r3, #0]
    if(GPIO_Pin == ENC_BTN_Pin)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d103      	bne.n	80019d2 <HAL_GPIO_EXTI_Callback+0x1e>
    {
		buttonNumber = 0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x68>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e00d      	b.n	80019ee <HAL_GPIO_EXTI_Callback+0x3a>
    } else if(GPIO_Pin == BAND_PLUS_BTN_Pin)
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d103      	bne.n	80019e0 <HAL_GPIO_EXTI_Callback+0x2c>
    {
		buttonNumber = 1;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x68>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e006      	b.n	80019ee <HAL_GPIO_EXTI_Callback+0x3a>
    } else if(GPIO_Pin == BAND_MINUS_BTN_Pin)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e6:	d102      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0x3a>
    	buttonNumber = 2;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x68>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	701a      	strb	r2, [r3, #0]
	if(buttonNumber < 0) {
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80019ee:	f000 f9d9 	bl	8001da4 <HAL_GetTick>
 80019f2:	60f8      	str	r0, [r7, #12]
    if(tstamp - lastPressed < 250)
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2bf9      	cmp	r3, #249	; 0xf9
 80019fe:	d909      	bls.n	8001a14 <HAL_GPIO_EXTI_Callback+0x60>
        return;
    lastPressed = tstamp;
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_EXTI_Callback+0x62>
        return;
 8001a14:	bf00      	nop
}
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200002e4 	.word	0x200002e4
 8001a20:	20000400 	.word	0x20000400
 8001a24:	200003fc 	.word	0x200003fc

08001a28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
	}

return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_isatty>:

int _isatty(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
	return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f00c f846 	bl	800db8c <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20020000 	.word	0x20020000
 8001b2c:	00000800 	.word	0x00000800
 8001b30:	20000404 	.word	0x20000404
 8001b34:	2001b298 	.word	0x2001b298

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00c f950 	bl	800de10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <MX_TIM3_Init+0xa4>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001bca:	f004 f8c1 	bl	8005d50 <HAL_TIM_Encoder_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f7ff fab2 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_TIM3_Init+0xa0>)
 8001be6:	f004 fd27 	bl	8006638 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bf0:	f7ff faa4 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	; 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000408 	.word	0x20000408
 8001c00:	40000400 	.word	0x40000400

08001c04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d151      	bne.n	8001cca <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001c7a:	2340      	movs	r3, #64	; 0x40
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HAL_TIM_Encoder_MspInit+0xd8>)
 8001c96:	f000 f9c7 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001caa:	2302      	movs	r3, #2
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480a      	ldr	r0, [pc, #40]	; (8001ce0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cb6:	f000 f9b7 	bl	8002028 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	201d      	movs	r0, #29
 8001cc0:	f000 f96e 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f000 f997 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cea:	490e      	ldr	r1, [pc, #56]	; (8001d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d00:	4c0b      	ldr	r4, [pc, #44]	; (8001d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d0e:	f7ff ff13 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f00c f837 	bl	800dd84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff f951 	bl	8000fbc <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8001d28:	08011df0 	.word	0x08011df0
  ldr r2, =_sbss
 8001d2c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001d30:	2001b294 	.word	0x2001b294

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f8fd 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f7ff fd72 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fd44 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000158 	.word	0x20000158
 8001da0:	20000450 	.word	0x20000450

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000450 	.word	0x20000450

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000158 	.word	0x20000158

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b07      	cmp	r3, #7
 8001f6c:	d00f      	beq.n	8001f8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	d00c      	beq.n	8001f8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d009      	beq.n	8001f8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d006      	beq.n	8001f8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d003      	beq.n	8001f8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f86:	2190      	movs	r1, #144	; 0x90
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001f8a:	f7ff f8e1 	bl	8001150 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff38 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	0800f1ac 	.word	0x0800f1ac

08001fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d903      	bls.n	8001fc0 <HAL_NVIC_SetPriority+0x20>
 8001fb8:	21a8      	movs	r1, #168	; 0xa8
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <HAL_NVIC_SetPriority+0x54>)
 8001fbc:	f7ff f8c8 	bl	8001150 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	d903      	bls.n	8001fce <HAL_NVIC_SetPriority+0x2e>
 8001fc6:	21a9      	movs	r1, #169	; 0xa9
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <HAL_NVIC_SetPriority+0x54>)
 8001fca:	f7ff f8c1 	bl	8001150 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fce:	f7ff ff3d 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff ff8d 	bl	8001ef8 <NVIC_EncodePriority>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff5c 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	0800f1ac 	.word	0x0800f1ac

08001ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da03      	bge.n	8002012 <HAL_NVIC_EnableIRQ+0x1a>
 800200a:	21bc      	movs	r1, #188	; 0xbc
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <HAL_NVIC_EnableIRQ+0x2c>)
 800200e:	f7ff f89f 	bl	8001150 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff26 	bl	8001e68 <__NVIC_EnableIRQ>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	0800f1ac 	.word	0x0800f1ac

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a33      	ldr	r2, [pc, #204]	; (8002110 <HAL_GPIO_Init+0xe8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d017      	beq.n	8002076 <HAL_GPIO_Init+0x4e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_GPIO_Init+0xec>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x4e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a31      	ldr	r2, [pc, #196]	; (8002118 <HAL_GPIO_Init+0xf0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00f      	beq.n	8002076 <HAL_GPIO_Init+0x4e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_GPIO_Init+0xf4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00b      	beq.n	8002076 <HAL_GPIO_Init+0x4e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_GPIO_Init+0xf8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x4e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_GPIO_Init+0xfc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x4e>
 800206e:	21ac      	movs	r1, #172	; 0xac
 8002070:	482d      	ldr	r0, [pc, #180]	; (8002128 <HAL_GPIO_Init+0x100>)
 8002072:	f7ff f86d 	bl	8001150 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_GPIO_Init+0x64>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x6c>
 800208c:	21ad      	movs	r1, #173	; 0xad
 800208e:	4826      	ldr	r0, [pc, #152]	; (8002128 <HAL_GPIO_Init+0x100>)
 8002090:	f7ff f85e 	bl	8001150 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d035      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d031      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b11      	cmp	r3, #17
 80020aa:	d02d      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d029      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b12      	cmp	r3, #18
 80020ba:	d025      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80020c4:	d020      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80020ce:	d01b      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80020d8:	d016      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80020e2:	d011      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80020ec:	d00c      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80020f6:	d007      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0xe0>
 8002100:	21ae      	movs	r1, #174	; 0xae
 8002102:	4809      	ldr	r0, [pc, #36]	; (8002128 <HAL_GPIO_Init+0x100>)
 8002104:	f7ff f824 	bl	8001150 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	e20c      	b.n	8002528 <HAL_GPIO_Init+0x500>
 800210e:	bf00      	nop
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40021c00 	.word	0x40021c00
 8002128:	0800f1e8 	.word	0x0800f1e8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 81ec 	bne.w	8002522 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d144      	bne.n	80021ec <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00f      	beq.n	800218a <HAL_GPIO_Init+0x162>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00b      	beq.n	800218a <HAL_GPIO_Init+0x162>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x162>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x162>
 8002182:	21c0      	movs	r1, #192	; 0xc0
 8002184:	4884      	ldr	r0, [pc, #528]	; (8002398 <HAL_GPIO_Init+0x370>)
 8002186:	f7fe ffe3 	bl	8001150 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d027      	beq.n	8002248 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <HAL_GPIO_Init+0x1f0>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1f0>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x1f0>
 8002210:	21d1      	movs	r1, #209	; 0xd1
 8002212:	4861      	ldr	r0, [pc, #388]	; (8002398 <HAL_GPIO_Init+0x370>)
 8002214:	f7fe ff9c 	bl	8001150 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	f040 80a3 	bne.w	800239c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d077      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b09      	cmp	r3, #9
 8002264:	d073      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d06f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d067      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d05f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d05b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d057      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d053      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d04f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d04b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d047      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d043      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d03f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d03b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d037      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d033      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d02f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d02b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d027      	beq.n	800234e <HAL_GPIO_Init+0x326>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b07      	cmp	r3, #7
 8002304:	d023      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b07      	cmp	r3, #7
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b07      	cmp	r3, #7
 8002314:	d01b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d00f      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d00b      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x326>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x326>
 8002346:	21de      	movs	r1, #222	; 0xde
 8002348:	4813      	ldr	r0, [pc, #76]	; (8002398 <HAL_GPIO_Init+0x370>)
 800234a:	f7fe ff01 	bl	8001150 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002396:	e001      	b.n	800239c <HAL_GPIO_Init+0x374>
 8002398:	0800f1e8 	.word	0x0800f1e8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a2 	beq.w	8002522 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <HAL_GPIO_Init+0x514>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a55      	ldr	r2, [pc, #340]	; (800253c <HAL_GPIO_Init+0x514>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b53      	ldr	r3, [pc, #332]	; (800253c <HAL_GPIO_Init+0x514>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_GPIO_Init+0x518>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a48      	ldr	r2, [pc, #288]	; (8002544 <HAL_GPIO_Init+0x51c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x432>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_GPIO_Init+0x520>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x42e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a46      	ldr	r2, [pc, #280]	; (800254c <HAL_GPIO_Init+0x524>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x42a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a45      	ldr	r2, [pc, #276]	; (8002550 <HAL_GPIO_Init+0x528>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x426>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a44      	ldr	r2, [pc, #272]	; (8002554 <HAL_GPIO_Init+0x52c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x422>
 8002446:	2304      	movs	r3, #4
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x434>
 800244a:	2307      	movs	r3, #7
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x434>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x434>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x434>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x434>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4934      	ldr	r1, [pc, #208]	; (8002540 <HAL_GPIO_Init+0x518>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <HAL_GPIO_Init+0x530>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <HAL_GPIO_Init+0x530>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_GPIO_Init+0x530>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <HAL_GPIO_Init+0x530>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_GPIO_Init+0x530>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_GPIO_Init+0x530>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_GPIO_Init+0x530>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_GPIO_Init+0x530>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f adfe 	bls.w	800212c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40013c00 	.word	0x40013c00

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_GPIO_WritePin+0x20>
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_GPIO_WritePin+0x2a>
 800257c:	f240 119d 	movw	r1, #413	; 0x19d
 8002580:	480e      	ldr	r0, [pc, #56]	; (80025bc <HAL_GPIO_WritePin+0x60>)
 8002582:	f7fe fde5 	bl	8001150 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002586:	787b      	ldrb	r3, [r7, #1]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_GPIO_WritePin+0x40>
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d004      	beq.n	800259c <HAL_GPIO_WritePin+0x40>
 8002592:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002596:	4809      	ldr	r0, [pc, #36]	; (80025bc <HAL_GPIO_WritePin+0x60>)
 8002598:	f7fe fdda 	bl	8001150 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a8:	e003      	b.n	80025b2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	0800f1e8 	.word	0x0800f1e8

080025c0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025cc:	887b      	ldrh	r3, [r7, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_GPIO_TogglePin+0x1c>
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_GPIO_TogglePin+0x26>
 80025dc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80025e0:	480a      	ldr	r0, [pc, #40]	; (800260c <HAL_GPIO_TogglePin+0x4c>)
 80025e2:	f7fe fdb5 	bl	8001150 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ec:	887a      	ldrh	r2, [r7, #2]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	041a      	lsls	r2, r3, #16
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	400b      	ands	r3, r1
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	0800f1e8 	.word	0x0800f1e8

08002610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f9c0 	bl	80019b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40013c00 	.word	0x40013c00

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1bd      	b.n	80029ce <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a93      	ldr	r2, [pc, #588]	; (80028a4 <HAL_I2C_Init+0x264>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00e      	beq.n	800267a <HAL_I2C_Init+0x3a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a91      	ldr	r2, [pc, #580]	; (80028a8 <HAL_I2C_Init+0x268>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_I2C_Init+0x3a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a90      	ldr	r2, [pc, #576]	; (80028ac <HAL_I2C_Init+0x26c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_I2C_Init+0x3a>
 8002670:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002674:	488e      	ldr	r0, [pc, #568]	; (80028b0 <HAL_I2C_Init+0x270>)
 8002676:	f7fe fd6b 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <HAL_I2C_Init+0x4c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a8b      	ldr	r2, [pc, #556]	; (80028b4 <HAL_I2C_Init+0x274>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d904      	bls.n	8002696 <HAL_I2C_Init+0x56>
 800268c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002690:	4887      	ldr	r0, [pc, #540]	; (80028b0 <HAL_I2C_Init+0x270>)
 8002692:	f7fe fd5d 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_I2C_Init+0x72>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a6:	d004      	beq.n	80026b2 <HAL_I2C_Init+0x72>
 80026a8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80026ac:	4880      	ldr	r0, [pc, #512]	; (80028b0 <HAL_I2C_Init+0x270>)
 80026ae:	f7fe fd4f 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ba:	f023 0303 	bic.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_I2C_Init+0x8c>
 80026c2:	f240 11c1 	movw	r1, #449	; 0x1c1
 80026c6:	487a      	ldr	r0, [pc, #488]	; (80028b0 <HAL_I2C_Init+0x270>)
 80026c8:	f7fe fd42 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026d4:	d009      	beq.n	80026ea <HAL_I2C_Init+0xaa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026de:	d004      	beq.n	80026ea <HAL_I2C_Init+0xaa>
 80026e0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80026e4:	4872      	ldr	r0, [pc, #456]	; (80028b0 <HAL_I2C_Init+0x270>)
 80026e6:	f7fe fd33 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_I2C_Init+0xc4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d004      	beq.n	8002704 <HAL_I2C_Init+0xc4>
 80026fa:	f240 11c3 	movw	r1, #451	; 0x1c3
 80026fe:	486c      	ldr	r0, [pc, #432]	; (80028b0 <HAL_I2C_Init+0x270>)
 8002700:	f7fe fd26 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_I2C_Init+0xda>
 8002710:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002714:	4866      	ldr	r0, [pc, #408]	; (80028b0 <HAL_I2C_Init+0x270>)
 8002716:	f7fe fd1b 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_I2C_Init+0xf4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d004      	beq.n	8002734 <HAL_I2C_Init+0xf4>
 800272a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800272e:	4860      	ldr	r0, [pc, #384]	; (80028b0 <HAL_I2C_Init+0x270>)
 8002730:	f7fe fd0e 	bl	8001150 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_I2C_Init+0x10e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d004      	beq.n	800274e <HAL_I2C_Init+0x10e>
 8002744:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002748:	4859      	ldr	r0, [pc, #356]	; (80028b0 <HAL_I2C_Init+0x270>)
 800274a:	f7fe fd01 	bl	8001150 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fb9c 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a0:	f002 fd7c 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a43      	ldr	r2, [pc, #268]	; (80028b8 <HAL_I2C_Init+0x278>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <HAL_I2C_Init+0x180>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_I2C_Init+0x27c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e006      	b.n	80027ce <HAL_I2C_Init+0x18e>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a3f      	ldr	r2, [pc, #252]	; (80028c0 <HAL_I2C_Init+0x280>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0fb      	b.n	80029ce <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_I2C_Init+0x284>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_I2C_Init+0x278>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d802      	bhi.n	8002810 <HAL_I2C_Init+0x1d0>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	e009      	b.n	8002824 <HAL_I2C_Init+0x1e4>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_I2C_Init+0x288>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	491e      	ldr	r1, [pc, #120]	; (80028b8 <HAL_I2C_Init+0x278>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d819      	bhi.n	8002878 <HAL_I2C_Init+0x238>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e59      	subs	r1, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002858:	400b      	ands	r3, r1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_Init+0x234>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e59      	subs	r1, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	e065      	b.n	8002940 <HAL_I2C_Init+0x300>
 8002874:	2304      	movs	r3, #4
 8002876:	e063      	b.n	8002940 <HAL_I2C_Init+0x300>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d125      	bne.n	80028cc <HAL_I2C_Init+0x28c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e026      	b.n	80028f2 <HAL_I2C_Init+0x2b2>
 80028a4:	40005400 	.word	0x40005400
 80028a8:	40005800 	.word	0x40005800
 80028ac:	40005c00 	.word	0x40005c00
 80028b0:	0800f224 	.word	0x0800f224
 80028b4:	00061a80 	.word	0x00061a80
 80028b8:	000186a0 	.word	0x000186a0
 80028bc:	001e847f 	.word	0x001e847f
 80028c0:	003d08ff 	.word	0x003d08ff
 80028c4:	431bde83 	.word	0x431bde83
 80028c8:	10624dd3 	.word	0x10624dd3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x2ba>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_I2C_Init+0x300>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <HAL_I2C_Init+0x2e0>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e58      	subs	r0, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	440b      	add	r3, r1
 8002910:	fbb0 f3f3 	udiv	r3, r0, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Init+0x300>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800296e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6911      	ldr	r1, [r2, #16]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop

080029d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f2:	f7ff f9d7 	bl	8001da4 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <HAL_I2C_Mem_Write+0x36>
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d004      	beq.n	8002a0e <HAL_I2C_Mem_Write+0x36>
 8002a04:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002a08:	4873      	ldr	r0, [pc, #460]	; (8002bd8 <HAL_I2C_Mem_Write+0x200>)
 8002a0a:	f7fe fba1 	bl	8001150 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	f040 80d9 	bne.w	8002bce <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2319      	movs	r3, #25
 8002a22:	2201      	movs	r2, #1
 8002a24:	496d      	ldr	r1, [pc, #436]	; (8002bdc <HAL_I2C_Mem_Write+0x204>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 faa0 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0cc      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2C_Mem_Write+0x6c>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0c5      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x1f8>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d007      	beq.n	8002a6a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a78:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2221      	movs	r2, #33	; 0x21
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2240      	movs	r2, #64	; 0x40
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a3a      	ldr	r2, [r7, #32]
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_I2C_Mem_Write+0x208>)
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aac:	88f8      	ldrh	r0, [r7, #6]
 8002aae:	893a      	ldrh	r2, [r7, #8]
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4603      	mov	r3, r0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9bf 	bl	8002e40 <I2C_RequestMemoryWrite>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d052      	beq.n	8002b6e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e081      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fb21 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d107      	bne.n	8002af4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e06b      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d11b      	bne.n	8002b6e <HAL_I2C_Mem_Write+0x196>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1aa      	bne.n	8002acc <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fb0d 	bl	800319a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e016      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	0800f224 	.word	0x0800f224
 8002bdc:	00100002 	.word	0x00100002
 8002be0:	ffff0000 	.word	0xffff0000

08002be4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff f8d6 	bl	8001da4 <HAL_GetTick>
 8002bf8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 8111 	bne.w	8002e2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	4988      	ldr	r1, [pc, #544]	; (8002e38 <HAL_I2C_IsDeviceReady+0x254>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f9a8 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e104      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_IsDeviceReady+0x50>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0fd      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2224      	movs	r2, #36	; 0x24
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a70      	ldr	r2, [pc, #448]	; (8002e3c <HAL_I2C_IsDeviceReady+0x258>)
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f966 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb4:	d103      	bne.n	8002cbe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0b6      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cd0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f867 	bl	8001da4 <HAL_GetTick>
 8002cd6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d06:	e025      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d08:	f7ff f84c 	bl	8001da4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <HAL_I2C_IsDeviceReady+0x13a>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22a0      	movs	r2, #160	; 0xa0
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2ba0      	cmp	r3, #160	; 0xa0
 8002d5e:	d005      	beq.n	8002d6c <HAL_I2C_IsDeviceReady+0x188>
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_I2C_IsDeviceReady+0x188>
 8002d66:	7dbb      	ldrb	r3, [r7, #22]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0cd      	beq.n	8002d08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d129      	bne.n	8002dd6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2319      	movs	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	4921      	ldr	r1, [pc, #132]	; (8002e38 <HAL_I2C_IsDeviceReady+0x254>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f8da 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e036      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e02c      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	490f      	ldr	r1, [pc, #60]	; (8002e38 <HAL_I2C_IsDeviceReady+0x254>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f8b6 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e012      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f4ff af32 	bcc.w	8002c7e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00100002 	.word	0x00100002
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f878 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e90:	d103      	bne.n	8002e9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e05f      	b.n	8002f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	492d      	ldr	r1, [pc, #180]	; (8002f68 <I2C_RequestMemoryWrite+0x128>)
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f8b0 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e04c      	b.n	8002f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	6a39      	ldr	r1, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f91a 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d107      	bne.n	8002f02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e02b      	b.n	8002f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]
 8002f16:	e021      	b.n	8002f5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f8f4 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e005      	b.n	8002f5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f52:	893b      	ldrh	r3, [r7, #8]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	00010002 	.word	0x00010002

08002f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	e025      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d021      	beq.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fe ff0d 	bl	8001da4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d116      	bne.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e023      	b.n	8003012 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10d      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	e00c      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d0b6      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003028:	e051      	b.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d123      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e046      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d021      	beq.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe fe8b 	bl	8001da4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10c      	bne.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	e00b      	b.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d18d      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003124:	e02d      	b.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f878 	bl	800321c <I2C_IsAcknowledgeFailed>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e02d      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d021      	beq.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7fe fe31 	bl	8001da4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d116      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d1ca      	bne.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a6:	e02d      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f837 	bl	800321c <I2C_IsAcknowledgeFailed>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e02d      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d021      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c0:	f7fe fdf0 	bl	8001da4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d302      	bcc.n	80031d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d1ca      	bne.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d11b      	bne.n	800326c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b08f      	sub	sp, #60	; 0x3c
 8003280:	af0a      	add	r7, sp, #40	; 0x28
 8003282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e118      	b.n	80034c0 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003296:	d003      	beq.n	80032a0 <HAL_PCD_Init+0x24>
 8003298:	2187      	movs	r1, #135	; 0x87
 800329a:	488b      	ldr	r0, [pc, #556]	; (80034c8 <HAL_PCD_Init+0x24c>)
 800329c:	f7fd ff58 	bl	8001150 <assert_failed>

  USBx = hpcd->Instance;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f00a f95c 	bl	800d578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2203      	movs	r2, #3
 80032c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fb91 	bl	8006a06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	687e      	ldr	r6, [r7, #4]
 80032ec:	466d      	mov	r5, sp
 80032ee:	f106 0410 	add.w	r4, r6, #16
 80032f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003302:	1d33      	adds	r3, r6, #4
 8003304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	f003 fa68 	bl	80067dc <USB_CoreInit>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0d0      	b.n	80034c0 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f003 fb7f 	bl	8006a28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	e04a      	b.n	80033c6 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003330:	7bfa      	ldrb	r2, [r7, #15]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	333d      	adds	r3, #61	; 0x3d
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	333c      	adds	r3, #60	; 0x3c
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	b298      	uxth	r0, r3
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3344      	adds	r3, #68	; 0x44
 800336c:	4602      	mov	r2, r0
 800336e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3340      	adds	r3, #64	; 0x40
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3348      	adds	r3, #72	; 0x48
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334c      	adds	r3, #76	; 0x4c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3354      	adds	r3, #84	; 0x54
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	3301      	adds	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d3af      	bcc.n	8003330 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e044      	b.n	8003460 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033ec:	7bfa      	ldrb	r2, [r7, #15]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	429a      	cmp	r2, r3
 8003468:	d3b5      	bcc.n	80033d6 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	687e      	ldr	r6, [r7, #4]
 8003472:	466d      	mov	r5, sp
 8003474:	f106 0410 	add.w	r4, r6, #16
 8003478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003484:	e885 0003 	stmia.w	r5, {r0, r1}
 8003488:	1d33      	adds	r3, r6, #4
 800348a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	f003 fb17 	bl	8006ac0 <USB_DevInit>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e00d      	b.n	80034c0 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f004 fc66 	bl	8007d8a <USB_DevDisconnect>

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	0800f25c 	.word	0x0800f25c

080034cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_Start+0x1c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e020      	b.n	800352a <HAL_PCD_Start+0x5e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d109      	bne.n	800350c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d005      	beq.n	800350c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fa67 	bl	80069e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fc14 	bl	8007d48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003532:	b590      	push	{r4, r7, lr}
 8003534:	b08d      	sub	sp, #52	; 0x34
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f004 fcd2 	bl	8007ef2 <USB_GetMode>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 848a 	bne.w	8003e6a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fc36 	bl	8007dcc <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8480 	beq.w	8003e68 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f004 fc23 	bl	8007dcc <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b02      	cmp	r3, #2
 800358e:	d107      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f002 0202 	and.w	r2, r2, #2
 800359e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fc11 	bl	8007dcc <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d161      	bne.n	8003678 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0210 	bic.w	r2, r2, #16
 80035c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	0c5b      	lsrs	r3, r3, #17
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d124      	bne.n	800363a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d035      	beq.n	8003668 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	6a38      	ldr	r0, [r7, #32]
 8003610:	f004 fa48 	bl	8007aa4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003620:	441a      	add	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003632:	441a      	add	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]
 8003638:	e016      	b.n	8003668 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	0c5b      	lsrs	r3, r3, #17
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	2b06      	cmp	r3, #6
 8003644:	d110      	bne.n	8003668 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800364c:	2208      	movs	r2, #8
 800364e:	4619      	mov	r1, r3
 8003650:	6a38      	ldr	r0, [r7, #32]
 8003652:	f004 fa27 	bl	8007aa4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003662:	441a      	add	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0210 	orr.w	r2, r2, #16
 8003676:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f004 fba5 	bl	8007dcc <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003688:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800368c:	f040 80a7 	bne.w	80037de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f004 fbaa 	bl	8007df2 <USB_ReadDevAllOutEpInterrupt>
 800369e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80036a0:	e099      	b.n	80037d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 808e 	beq.w	80037ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 fbce 	bl	8007e5a <USB_ReadDevOutEPInterrupt>
 80036be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	461a      	mov	r2, r3
 80036d8:	2301      	movs	r3, #1
 80036da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fec2 	bl	8004468 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	461a      	mov	r2, r3
 80036fc:	2308      	movs	r3, #8
 80036fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 ff98 	bl	8004638 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371e:	461a      	mov	r2, r3
 8003720:	2310      	movs	r3, #16
 8003722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d030      	beq.n	8003790 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b80      	cmp	r3, #128	; 0x80
 8003738:	d109      	bne.n	800374e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d108      	bne.n	800377e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	b2db      	uxtb	r3, r3
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f009 fff9 	bl	800d770 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378a:	461a      	mov	r2, r3
 800378c:	2302      	movs	r3, #2
 800378e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a6:	461a      	mov	r2, r3
 80037a8:	2320      	movs	r3, #32
 80037aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	461a      	mov	r2, r3
 80037c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	3301      	adds	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f af62 	bne.w	80036a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 faf2 	bl	8007dcc <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f2:	f040 80db 	bne.w	80039ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 fb13 	bl	8007e26 <USB_ReadDevAllInEpInterrupt>
 8003800:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003806:	e0cd      	b.n	80039a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80c2 	beq.w	8003998 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fb39 	bl	8007e96 <USB_ReadDevInEPInterrupt>
 8003824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d057      	beq.n	80038e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	2201      	movs	r2, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003850:	4013      	ands	r3, r2
 8003852:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	461a      	mov	r2, r3
 8003862:	2301      	movs	r3, #1
 8003864:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d132      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	334c      	adds	r3, #76	; 0x4c
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4403      	add	r3, r0
 800388e:	3348      	adds	r3, #72	; 0x48
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4419      	add	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4403      	add	r3, r0
 80038a2:	334c      	adds	r3, #76	; 0x4c
 80038a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d113      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x3a2>
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3354      	adds	r3, #84	; 0x54
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038cc:	461a      	mov	r2, r3
 80038ce:	2101      	movs	r1, #1
 80038d0:	f004 fb40 	bl	8007f54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f009 fecd 	bl	800d67a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f6:	461a      	mov	r2, r3
 80038f8:	2308      	movs	r3, #8
 80038fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	2310      	movs	r3, #16
 8003916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	461a      	mov	r2, r3
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800393e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003940:	6a38      	ldr	r0, [r7, #32]
 8003942:	f003 fa21 	bl	8006d88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3338      	adds	r3, #56	; 0x38
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	78db      	ldrb	r3, [r3, #3]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d108      	bne.n	8003974 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f009 ff10 	bl	800d794 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	461a      	mov	r2, r3
 8003982:	2302      	movs	r3, #2
 8003984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fcdb 	bl	800434e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	3301      	adds	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f47f af2e 	bne.w	8003808 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 fa0b 	bl	8007dcc <USB_ReadInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c0:	d122      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d108      	bne.n	80039f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039e8:	2100      	movs	r1, #0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fec2 	bl	8004774 <HAL_PCDEx_LPM_Callback>
 80039f0:	e002      	b.n	80039f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f009 feae 	bl	800d754 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 f9dd 	bl	8007dcc <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1c:	d112      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f009 fe6a 	bl	800d708 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a42:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 f9bf 	bl	8007dcc <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a58:	f040 80b7 	bne.w	8003bca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2110      	movs	r1, #16
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 f986 	bl	8006d88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	e046      	b.n	8003b10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa6:	0151      	lsls	r1, r2, #5
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	440a      	add	r2, r1
 8003aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ab4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ae8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d3b3      	bcc.n	8003a82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b46:	f043 030b 	orr.w	r3, r3, #11
 8003b4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5c:	f043 030b 	orr.w	r3, r3, #11
 8003b60:	6453      	str	r3, [r2, #68]	; 0x44
 8003b62:	e015      	b.n	8003b90 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8a:	f043 030b 	orr.w	r3, r3, #11
 8003b8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ba2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f004 f9cd 	bl	8007f54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 f8fc 	bl	8007dcc <USB_ReadInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d124      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 f992 	bl	8007f0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 f947 	bl	8006e82 <USB_GetDevSpeed>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681c      	ldr	r4, [r3, #0]
 8003c00:	f001 fb40 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 8003c04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f002 fe46 	bl	80068a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f009 fd58 	bl	800d6ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f004 f8cc 	bl	8007dcc <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d10a      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f009 fd35 	bl	800d6ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f002 0208 	and.w	r2, r2, #8
 8003c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f004 f8b7 	bl	8007dcc <USB_ReadInterrupts>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d122      	bne.n	8003cae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	e014      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb27 	bl	80042ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3e5      	bcc.n	8003c7a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f004 f88a 	bl	8007dcc <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc2:	d13b      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	e02b      	b.n	8003d22 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3340      	adds	r3, #64	; 0x40
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d115      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da12      	bge.n	8003d1c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	333f      	adds	r3, #63	; 0x3f
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fae8 	bl	80042ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	3301      	adds	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3ce      	bcc.n	8003cca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f004 f843 	bl	8007dcc <USB_ReadInterrupts>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d50:	d155      	bne.n	8003dfe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d52:	2301      	movs	r3, #1
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	e045      	b.n	8003de4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d12e      	bne.n	8003dde <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da2b      	bge.n	8003dde <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d121      	bne.n	8003dde <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dda:	6053      	str	r3, [r2, #4]
            break;
 8003ddc:	e007      	b.n	8003dee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	3301      	adds	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d3b4      	bcc.n	8003d58 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f003 ffe2 	bl	8007dcc <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d10a      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f009 fccf 	bl	800d7b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 ffcc 	bl	8007dcc <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d115      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f009 fcbf 	bl	800d7d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	e000      	b.n	8003e6a <HAL_PCD_IRQHandler+0x938>
      return;
 8003e68:	bf00      	nop
    }
  }
}
 8003e6a:	3734      	adds	r7, #52	; 0x34
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd90      	pop	{r4, r7, pc}

08003e70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_PCD_SetAddress+0x1a>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e013      	b.n	8003eb2 <HAL_PCD_SetAddress+0x42>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f003 ff2a 	bl	8007cfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4603      	mov	r3, r0
 8003eca:	70fb      	strb	r3, [r7, #3]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	803b      	strh	r3, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	da0f      	bge.n	8003f00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	3338      	adds	r3, #56	; 0x38
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	705a      	strb	r2, [r3, #1]
 8003efe:	e00f      	b.n	8003f20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	f003 020f 	and.w	r2, r3, #15
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	3304      	adds	r3, #4
 8003f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f2c:	883a      	ldrh	r2, [r7, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	78ba      	ldrb	r2, [r7, #2]
 8003f36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f4a:	78bb      	ldrb	r3, [r7, #2]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d102      	bne.n	8003f56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_PCD_EP_Open+0xaa>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e00e      	b.n	8003f82 <HAL_PCD_EP_Open+0xc8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68f9      	ldr	r1, [r7, #12]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f002 ffaa 	bl	8006ecc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f80:	7afb      	ldrb	r3, [r7, #11]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da0f      	bge.n	8003fbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	705a      	strb	r2, [r3, #1]
 8003fbc:	e00f      	b.n	8003fde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_PCD_EP_Close+0x6e>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e00e      	b.n	8004016 <HAL_PCD_EP_Close+0x8c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68f9      	ldr	r1, [r7, #12]
 8004006:	4618      	mov	r0, r3
 8004008:	f002 ffe8 	bl	8006fdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	460b      	mov	r3, r1
 800402c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800402e:	7afb      	ldrb	r3, [r7, #11]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	3304      	adds	r3, #4
 8004046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2200      	movs	r2, #0
 8004058:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	b2da      	uxtb	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800407a:	7afb      	ldrb	r3, [r7, #11]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	f003 fac7 	bl	8007624 <USB_EP0StartXfer>
 8004096:	e008      	b.n	80040aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	f003 f875 	bl	8007194 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	f003 020f 	and.w	r2, r3, #15
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	3338      	adds	r3, #56	; 0x38
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2201      	movs	r2, #1
 8004122:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004124:	7afb      	ldrb	r3, [r7, #11]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	b2da      	uxtb	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d102      	bne.n	800413e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	6979      	ldr	r1, [r7, #20]
 8004156:	f003 fa65 	bl	8007624 <USB_EP0StartXfer>
 800415a:	e008      	b.n	800416e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	f003 f813 	bl	8007194 <USB_EPStartXfer>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d901      	bls.n	8004196 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e050      	b.n	8004238 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800419a:	2b00      	cmp	r3, #0
 800419c:	da0f      	bge.n	80041be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	3338      	adds	r3, #56	; 0x38
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	3304      	adds	r3, #4
 80041b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	705a      	strb	r2, [r3, #1]
 80041bc:	e00d      	b.n	80041da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_PCD_EP_SetStall+0x82>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e01e      	b.n	8004238 <HAL_PCD_EP_SetStall+0xc0>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	4618      	mov	r0, r3
 800420a:	f003 fca3 	bl	8007b54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	b2d9      	uxtb	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004228:	461a      	mov	r2, r3
 800422a:	f003 fe93 	bl	8007f54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 020f 	and.w	r2, r3, #15
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d901      	bls.n	800425e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e042      	b.n	80042e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800425e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da0f      	bge.n	8004286 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	3338      	adds	r3, #56	; 0x38
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	705a      	strb	r2, [r3, #1]
 8004284:	e00f      	b.n	80042a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 020f 	and.w	r2, r3, #15
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_PCD_EP_ClrStall+0x86>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e00e      	b.n	80042e4 <HAL_PCD_EP_ClrStall+0xa4>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f003 fcab 	bl	8007c30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80042f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da0c      	bge.n	800431a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	f003 020f 	and.w	r2, r3, #15
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	3338      	adds	r3, #56	; 0x38
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	3304      	adds	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e00c      	b.n	8004334 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4618      	mov	r0, r3
 800433c:	f003 faca 	bl	80078d4 <USB_EPStopXfer>
 8004340:	4603      	mov	r3, r0
 8004342:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004344:	7afb      	ldrb	r3, [r7, #11]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b08a      	sub	sp, #40	; 0x28
 8004352:	af02      	add	r7, sp, #8
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	3338      	adds	r3, #56	; 0x38
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	3304      	adds	r3, #4
 8004374:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	429a      	cmp	r2, r3
 8004380:	d901      	bls.n	8004386 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06c      	b.n	8004460 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	429a      	cmp	r2, r3
 800439a:	d902      	bls.n	80043a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3303      	adds	r3, #3
 80043a6:	089b      	lsrs	r3, r3, #2
 80043a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043aa:	e02b      	b.n	8004404 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d902      	bls.n	80043c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	3303      	adds	r3, #3
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6919      	ldr	r1, [r3, #16]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4603      	mov	r3, r0
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f003 fb1e 	bl	8007a28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	441a      	add	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	441a      	add	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	b29b      	uxth	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	d809      	bhi.n	800442e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1a      	ldr	r2, [r3, #32]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004422:	429a      	cmp	r2, r3
 8004424:	d203      	bcs.n	800442e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1be      	bne.n	80043ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	429a      	cmp	r2, r3
 8004438:	d811      	bhi.n	800445e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	2201      	movs	r2, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	43db      	mvns	r3, r3
 8004454:	6939      	ldr	r1, [r7, #16]
 8004456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800445a:	4013      	ands	r3, r2
 800445c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	333c      	adds	r3, #60	; 0x3c
 8004480:	3304      	adds	r3, #4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d17b      	bne.n	8004596 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4a61      	ldr	r2, [pc, #388]	; (8004630 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	f240 80b9 	bls.w	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80b3 	beq.w	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	461a      	mov	r2, r3
 80044cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d0:	6093      	str	r3, [r2, #8]
 80044d2:	e0a7      	b.n	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	461a      	mov	r2, r3
 80044ec:	2320      	movs	r3, #32
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	e098      	b.n	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 8093 	bne.w	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4a4b      	ldr	r2, [pc, #300]	; (8004630 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d90f      	bls.n	8004526 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	e07e      	b.n	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	0159      	lsls	r1, r3, #5
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	440b      	add	r3, r1
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004552:	1ad2      	subs	r2, r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d114      	bne.n	8004588 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004570:	461a      	mov	r2, r3
 8004572:	2101      	movs	r1, #1
 8004574:	f003 fcee 	bl	8007f54 <USB_EP0_OutStart>
 8004578:	e006      	b.n	8004588 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	441a      	add	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f009 f858 	bl	800d644 <HAL_PCD_DataOutStageCallback>
 8004594:	e046      	b.n	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4a26      	ldr	r2, [pc, #152]	; (8004634 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d124      	bne.n	80045e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	461a      	mov	r2, r3
 80045b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	e032      	b.n	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	461a      	mov	r2, r3
 80045d6:	2320      	movs	r3, #32
 80045d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f009 f82f 	bl	800d644 <HAL_PCD_DataOutStageCallback>
 80045e6:	e01d      	b.n	8004624 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d114      	bne.n	8004618 <PCD_EP_OutXfrComplete_int+0x1b0>
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004610:	461a      	mov	r2, r3
 8004612:	2100      	movs	r1, #0
 8004614:	f003 fc9e 	bl	8007f54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f009 f810 	bl	800d644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	4f54300a 	.word	0x4f54300a
 8004634:	4f54310a 	.word	0x4f54310a

08004638 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	333c      	adds	r3, #60	; 0x3c
 8004650:	3304      	adds	r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d90e      	bls.n	800468c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f008 ffc7 	bl	800d620 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d90c      	bls.n	80046b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046ac:	461a      	mov	r2, r3
 80046ae:	2101      	movs	r1, #1
 80046b0:	f003 fc50 	bl	8007f54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	4f54300a 	.word	0x4f54300a

080046c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
 80046d0:	4613      	mov	r3, r2
 80046d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046e2:	883b      	ldrh	r3, [r7, #0]
 80046e4:	0419      	lsls	r1, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
 80046f0:	e028      	b.n	8004744 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4413      	add	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e00d      	b.n	8004722 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	3340      	adds	r3, #64	; 0x40
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	0c1b      	lsrs	r3, r3, #16
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4413      	add	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	3301      	adds	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	3b01      	subs	r3, #1
 8004728:	429a      	cmp	r2, r3
 800472a:	d3ec      	bcc.n	8004706 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800472c:	883b      	ldrh	r3, [r7, #0]
 800472e:	0418      	lsls	r0, r3, #16
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	3b01      	subs	r3, #1
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4302      	orrs	r2, r0
 800473c:	3340      	adds	r3, #64	; 0x40
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e314      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d903      	bls.n	80047ae <HAL_RCC_OscConfig+0x22>
 80047a6:	21e6      	movs	r1, #230	; 0xe6
 80047a8:	4897      	ldr	r0, [pc, #604]	; (8004a08 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	f7fc fcd1 	bl	8001150 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8088 	beq.w	80048cc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00d      	beq.n	80047e0 <HAL_RCC_OscConfig+0x54>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d008      	beq.n	80047e0 <HAL_RCC_OscConfig+0x54>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d6:	d003      	beq.n	80047e0 <HAL_RCC_OscConfig+0x54>
 80047d8:	21eb      	movs	r1, #235	; 0xeb
 80047da:	488b      	ldr	r0, [pc, #556]	; (8004a08 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	f7fc fcb8 	bl	8001150 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e0:	4b8a      	ldr	r3, [pc, #552]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d00c      	beq.n	8004806 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ec:	4b87      	ldr	r3, [pc, #540]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d112      	bne.n	800481e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f8:	4b84      	ldr	r3, [pc, #528]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004804:	d10b      	bne.n	800481e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004806:	4b81      	ldr	r3, [pc, #516]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d05b      	beq.n	80048ca <HAL_RCC_OscConfig+0x13e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d157      	bne.n	80048ca <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e2d4      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0xaa>
 8004828:	4b78      	ldr	r3, [pc, #480]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a77      	ldr	r2, [pc, #476]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e01d      	b.n	8004872 <HAL_RCC_OscConfig+0xe6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800483e:	d10c      	bne.n	800485a <HAL_RCC_OscConfig+0xce>
 8004840:	4b72      	ldr	r3, [pc, #456]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a71      	ldr	r2, [pc, #452]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b6f      	ldr	r3, [pc, #444]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6e      	ldr	r2, [pc, #440]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	e00b      	b.n	8004872 <HAL_RCC_OscConfig+0xe6>
 800485a:	4b6c      	ldr	r3, [pc, #432]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6b      	ldr	r2, [pc, #428]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b69      	ldr	r3, [pc, #420]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a68      	ldr	r2, [pc, #416]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800486c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d013      	beq.n	80048a2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fd fa93 	bl	8001da4 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004882:	f7fd fa8f 	bl	8001da4 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b64      	cmp	r3, #100	; 0x64
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e299      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004894:	4b5d      	ldr	r3, [pc, #372]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0xf6>
 80048a0:	e014      	b.n	80048cc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fd fa7f 	bl	8001da4 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048aa:	f7fd fa7b 	bl	8001da4 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b64      	cmp	r3, #100	; 0x64
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e285      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x11e>
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d079      	beq.n	80049cc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_OscConfig+0x166>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d004      	beq.n	80048f2 <HAL_RCC_OscConfig+0x166>
 80048e8:	f240 111d 	movw	r1, #285	; 0x11d
 80048ec:	4846      	ldr	r0, [pc, #280]	; (8004a08 <HAL_RCC_OscConfig+0x27c>)
 80048ee:	f7fc fc2f 	bl	8001150 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b1f      	cmp	r3, #31
 80048f8:	d904      	bls.n	8004904 <HAL_RCC_OscConfig+0x178>
 80048fa:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80048fe:	4842      	ldr	r0, [pc, #264]	; (8004a08 <HAL_RCC_OscConfig+0x27c>)
 8004900:	f7fc fc26 	bl	8001150 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004904:	4b41      	ldr	r3, [pc, #260]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004910:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004918:	2b08      	cmp	r3, #8
 800491a:	d11c      	bne.n	8004956 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491c:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d116      	bne.n	8004956 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004928:	4b38      	ldr	r3, [pc, #224]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_OscConfig+0x1b4>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e243      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	492f      	ldr	r1, [pc, #188]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004954:	e03a      	b.n	80049cc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <HAL_RCC_OscConfig+0x284>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd fa1e 	bl	8001da4 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496c:	f7fd fa1a 	bl	8001da4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e224      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497e:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	491c      	ldr	r1, [pc, #112]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
 800499e:	e015      	b.n	80049cc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a0:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x284>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fd f9fd 	bl	8001da4 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ae:	f7fd f9f9 	bl	8001da4 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e203      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCC_OscConfig+0x280>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d045      	beq.n	8004a64 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_OscConfig+0x266>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d004      	beq.n	80049f2 <HAL_RCC_OscConfig+0x266>
 80049e8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80049ec:	4806      	ldr	r0, [pc, #24]	; (8004a08 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	f7fc fbaf 	bl	8001150 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01e      	beq.n	8004a38 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x288>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd f9d0 	bl	8001da4 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	e010      	b.n	8004a2a <HAL_RCC_OscConfig+0x29e>
 8004a08:	0800f294 	.word	0x0800f294
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	42470000 	.word	0x42470000
 8004a14:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a18:	f7fd f9c4 	bl	8001da4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e1ce      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	4b5e      	ldr	r3, [pc, #376]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x28c>
 8004a36:	e015      	b.n	8004a64 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a38:	4b5b      	ldr	r3, [pc, #364]	; (8004ba8 <HAL_RCC_OscConfig+0x41c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3e:	f7fd f9b1 	bl	8001da4 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a46:	f7fd f9ad 	bl	8001da4 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1b7      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80b0 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x30c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d008      	beq.n	8004a98 <HAL_RCC_OscConfig+0x30c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d004      	beq.n	8004a98 <HAL_RCC_OscConfig+0x30c>
 8004a8e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004a92:	4846      	ldr	r0, [pc, #280]	; (8004bac <HAL_RCC_OscConfig+0x420>)
 8004a94:	f7fc fb5c 	bl	8001150 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	4a3d      	ldr	r2, [pc, #244]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCC_OscConfig+0x424>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d118      	bne.n	8004b02 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad0:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x424>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a36      	ldr	r2, [pc, #216]	; (8004bb0 <HAL_RCC_OscConfig+0x424>)
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004adc:	f7fd f962 	bl	8001da4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae4:	f7fd f95e 	bl	8001da4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e168      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCC_OscConfig+0x424>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d106      	bne.n	8004b18 <HAL_RCC_OscConfig+0x38c>
 8004b0a:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6713      	str	r3, [r2, #112]	; 0x70
 8004b16:	e01c      	b.n	8004b52 <HAL_RCC_OscConfig+0x3c6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3ae>
 8004b20:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b26:	f043 0304 	orr.w	r3, r3, #4
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6713      	str	r3, [r2, #112]	; 0x70
 8004b38:	e00b      	b.n	8004b52 <HAL_RCC_OscConfig+0x3c6>
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
 8004b46:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d015      	beq.n	8004b86 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd f923 	bl	8001da4 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd f91f 	bl	8001da4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e127      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_OscConfig+0x418>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ee      	beq.n	8004b62 <HAL_RCC_OscConfig+0x3d6>
 8004b84:	e01c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b86:	f7fd f90d 	bl	8001da4 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8c:	e012      	b.n	8004bb4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd f909 	bl	8001da4 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d909      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e111      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	42470e80 	.word	0x42470e80
 8004bac:	0800f294 	.word	0x0800f294
 8004bb0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb4:	4b86      	ldr	r3, [pc, #536]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b82      	ldr	r3, [pc, #520]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	4a81      	ldr	r2, [pc, #516]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x468>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x468>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d004      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x468>
 8004bea:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004bee:	4879      	ldr	r0, [pc, #484]	; (8004dd4 <HAL_RCC_OscConfig+0x648>)
 8004bf0:	f7fc faae 	bl	8001150 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80e4 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bfe:	4b74      	ldr	r3, [pc, #464]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	f000 80a5 	beq.w	8004d56 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f040 8089 	bne.w	8004d28 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCC_OscConfig+0x4a6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c26:	d004      	beq.n	8004c32 <HAL_RCC_OscConfig+0x4a6>
 8004c28:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004c2c:	4869      	ldr	r0, [pc, #420]	; (8004dd4 <HAL_RCC_OscConfig+0x648>)
 8004c2e:	f7fc fa8f 	bl	8001150 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	2b3f      	cmp	r3, #63	; 0x3f
 8004c38:	d904      	bls.n	8004c44 <HAL_RCC_OscConfig+0x4b8>
 8004c3a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004c3e:	4865      	ldr	r0, [pc, #404]	; (8004dd4 <HAL_RCC_OscConfig+0x648>)
 8004c40:	f7fc fa86 	bl	8001150 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	2b31      	cmp	r3, #49	; 0x31
 8004c4a:	d904      	bls.n	8004c56 <HAL_RCC_OscConfig+0x4ca>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004c54:	d904      	bls.n	8004c60 <HAL_RCC_OscConfig+0x4d4>
 8004c56:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004c5a:	485e      	ldr	r0, [pc, #376]	; (8004dd4 <HAL_RCC_OscConfig+0x648>)
 8004c5c:	f7fc fa78 	bl	8001150 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4fe>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d00c      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4fe>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4fe>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4fe>
 8004c80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c84:	4853      	ldr	r0, [pc, #332]	; (8004dd4 <HAL_RCC_OscConfig+0x648>)
 8004c86:	f7fc fa63 	bl	8001150 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d903      	bls.n	8004c9a <HAL_RCC_OscConfig+0x50e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	2b0f      	cmp	r3, #15
 8004c98:	d904      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x518>
 8004c9a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004c9e:	484d      	ldr	r0, [pc, #308]	; (8004dd4 <HAL_RCC_OscConfig+0x648>)
 8004ca0:	f7fc fa56 	bl	8001150 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca4:	4b4c      	ldr	r3, [pc, #304]	; (8004dd8 <HAL_RCC_OscConfig+0x64c>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fd f87b 	bl	8001da4 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb2:	f7fd f877 	bl	8001da4 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e081      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	019b      	lsls	r3, r3, #6
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	4936      	ldr	r1, [pc, #216]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cfa:	4b37      	ldr	r3, [pc, #220]	; (8004dd8 <HAL_RCC_OscConfig+0x64c>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fd f850 	bl	8001da4 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd f84c 	bl	8001da4 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e056      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x57c>
 8004d26:	e04e      	b.n	8004dc6 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_RCC_OscConfig+0x64c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2e:	f7fd f839 	bl	8001da4 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fd f835 	bl	8001da4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e03f      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d48:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x5aa>
 8004d54:	e037      	b.n	8004dc6 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e032      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x644>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d028      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d121      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d11a      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d111      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	0800f294 	.word	0x0800f294
 8004dd8:	42470060 	.word	0x42470060

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e174      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x24>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b0f      	cmp	r3, #15
 8004dfe:	d904      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x2e>
 8004e00:	f240 215a 	movw	r1, #602	; 0x25a
 8004e04:	487b      	ldr	r0, [pc, #492]	; (8004ff4 <HAL_RCC_ClockConfig+0x218>)
 8004e06:	f7fc f9a3 	bl	8001150 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d019      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d016      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d013      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d010      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d007      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	d004      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x68>
 8004e3a:	f240 215b 	movw	r1, #603	; 0x25b
 8004e3e:	486d      	ldr	r0, [pc, #436]	; (8004ff4 <HAL_RCC_ClockConfig+0x218>)
 8004e40:	f7fc f986 	bl	8001150 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b6c      	ldr	r3, [pc, #432]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d90c      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b69      	ldr	r3, [pc, #420]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e136      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d049      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b5d      	ldr	r3, [pc, #372]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a5c      	ldr	r2, [pc, #368]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b57      	ldr	r3, [pc, #348]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a56      	ldr	r2, [pc, #344]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d024      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d020      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b90      	cmp	r3, #144	; 0x90
 8004ebe:	d01c      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2ba0      	cmp	r3, #160	; 0xa0
 8004ec6:	d018      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2bb0      	cmp	r3, #176	; 0xb0
 8004ece:	d014      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2bd0      	cmp	r3, #208	; 0xd0
 8004ede:	d00c      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2be0      	cmp	r3, #224	; 0xe0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2bf0      	cmp	r3, #240	; 0xf0
 8004eee:	d004      	beq.n	8004efa <HAL_RCC_ClockConfig+0x11e>
 8004ef0:	f240 217e 	movw	r1, #638	; 0x27e
 8004ef4:	483f      	ldr	r0, [pc, #252]	; (8004ff4 <HAL_RCC_ClockConfig+0x218>)
 8004ef6:	f7fc f92b 	bl	8001150 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efa:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	493d      	ldr	r1, [pc, #244]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d059      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d00c      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d004      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x166>
 8004f38:	f240 2185 	movw	r1, #645	; 0x285
 8004f3c:	482d      	ldr	r0, [pc, #180]	; (8004ff4 <HAL_RCC_ClockConfig+0x218>)
 8004f3e:	f7fc f907 	bl	8001150 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d119      	bne.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0bf      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d003      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0af      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e0a7      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f023 0203 	bic.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4919      	ldr	r1, [pc, #100]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f9c:	f7fc ff02 	bl	8001da4 <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa4:	f7fc fefe 	bl	8001da4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e08f      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 020c 	and.w	r2, r3, #12
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1eb      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d212      	bcs.n	8005000 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d007      	beq.n	8005000 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e072      	b.n	80050da <HAL_RCC_ClockConfig+0x2fe>
 8004ff4:	0800f294 	.word	0x0800f294
 8004ff8:	40023c00 	.word	0x40023c00
 8004ffc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d025      	beq.n	8005058 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d018      	beq.n	8005046 <HAL_RCC_ClockConfig+0x26a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d013      	beq.n	8005046 <HAL_RCC_ClockConfig+0x26a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005026:	d00e      	beq.n	8005046 <HAL_RCC_ClockConfig+0x26a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005030:	d009      	beq.n	8005046 <HAL_RCC_ClockConfig+0x26a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800503a:	d004      	beq.n	8005046 <HAL_RCC_ClockConfig+0x26a>
 800503c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005040:	4828      	ldr	r0, [pc, #160]	; (80050e4 <HAL_RCC_ClockConfig+0x308>)
 8005042:	f7fc f885 	bl	8001150 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4925      	ldr	r1, [pc, #148]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d026      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d018      	beq.n	800509e <HAL_RCC_ClockConfig+0x2c2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005074:	d013      	beq.n	800509e <HAL_RCC_ClockConfig+0x2c2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800507e:	d00e      	beq.n	800509e <HAL_RCC_ClockConfig+0x2c2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005088:	d009      	beq.n	800509e <HAL_RCC_ClockConfig+0x2c2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005092:	d004      	beq.n	800509e <HAL_RCC_ClockConfig+0x2c2>
 8005094:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005098:	4812      	ldr	r0, [pc, #72]	; (80050e4 <HAL_RCC_ClockConfig+0x308>)
 800509a:	f7fc f859 	bl	8001150 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	490e      	ldr	r1, [pc, #56]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050b2:	f000 f821 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	490a      	ldr	r1, [pc, #40]	; (80050ec <HAL_RCC_ClockConfig+0x310>)
 80050c4:	5ccb      	ldrb	r3, [r1, r3]
 80050c6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ca:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <HAL_RCC_ClockConfig+0x314>)
 80050cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x318>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc fbbc 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	0800f294 	.word	0x0800f294
 80050e8:	40023800 	.word	0x40023800
 80050ec:	08011d30 	.word	0x08011d30
 80050f0:	20000150 	.word	0x20000150
 80050f4:	20000154 	.word	0x20000154

080050f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050fc:	b090      	sub	sp, #64	; 0x40
 80050fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	2300      	movs	r3, #0
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005108:	2300      	movs	r3, #0
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <HAL_RCC_GetSysClockFreq+0x180>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d00d      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x40>
 800511c:	2b08      	cmp	r3, #8
 800511e:	f200 80a1 	bhi.w	8005264 <HAL_RCC_GetSysClockFreq+0x16c>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x34>
 8005126:	2b04      	cmp	r3, #4
 8005128:	d003      	beq.n	8005132 <HAL_RCC_GetSysClockFreq+0x3a>
 800512a:	e09b      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800512c:	4b53      	ldr	r3, [pc, #332]	; (800527c <HAL_RCC_GetSysClockFreq+0x184>)
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005130:	e09b      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005132:	4b53      	ldr	r3, [pc, #332]	; (8005280 <HAL_RCC_GetSysClockFreq+0x188>)
 8005134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005136:	e098      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005138:	4b4f      	ldr	r3, [pc, #316]	; (8005278 <HAL_RCC_GetSysClockFreq+0x180>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005142:	4b4d      	ldr	r3, [pc, #308]	; (8005278 <HAL_RCC_GetSysClockFreq+0x180>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d028      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b4a      	ldr	r3, [pc, #296]	; (8005278 <HAL_RCC_GetSysClockFreq+0x180>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	2200      	movs	r2, #0
 8005156:	623b      	str	r3, [r7, #32]
 8005158:	627a      	str	r2, [r7, #36]	; 0x24
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005160:	2100      	movs	r1, #0
 8005162:	4b47      	ldr	r3, [pc, #284]	; (8005280 <HAL_RCC_GetSysClockFreq+0x188>)
 8005164:	fb03 f201 	mul.w	r2, r3, r1
 8005168:	2300      	movs	r3, #0
 800516a:	fb00 f303 	mul.w	r3, r0, r3
 800516e:	4413      	add	r3, r2
 8005170:	4a43      	ldr	r2, [pc, #268]	; (8005280 <HAL_RCC_GetSysClockFreq+0x188>)
 8005172:	fba0 1202 	umull	r1, r2, r0, r2
 8005176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005178:	460a      	mov	r2, r1
 800517a:	62ba      	str	r2, [r7, #40]	; 0x28
 800517c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517e:	4413      	add	r3, r2
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	2200      	movs	r2, #0
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	61fa      	str	r2, [r7, #28]
 800518a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800518e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005192:	f7fb f875 	bl	8000280 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4613      	mov	r3, r2
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519e:	e053      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <HAL_RCC_GetSysClockFreq+0x180>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	2200      	movs	r2, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	617a      	str	r2, [r7, #20]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80051b2:	f04f 0b00 	mov.w	fp, #0
 80051b6:	4652      	mov	r2, sl
 80051b8:	465b      	mov	r3, fp
 80051ba:	f04f 0000 	mov.w	r0, #0
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	0159      	lsls	r1, r3, #5
 80051c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c8:	0150      	lsls	r0, r2, #5
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	ebb2 080a 	subs.w	r8, r2, sl
 80051d2:	eb63 090b 	sbc.w	r9, r3, fp
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051ea:	ebb2 0408 	subs.w	r4, r2, r8
 80051ee:	eb63 0509 	sbc.w	r5, r3, r9
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	00eb      	lsls	r3, r5, #3
 80051fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005200:	00e2      	lsls	r2, r4, #3
 8005202:	4614      	mov	r4, r2
 8005204:	461d      	mov	r5, r3
 8005206:	eb14 030a 	adds.w	r3, r4, sl
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	eb45 030b 	adc.w	r3, r5, fp
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800521e:	4629      	mov	r1, r5
 8005220:	028b      	lsls	r3, r1, #10
 8005222:	4621      	mov	r1, r4
 8005224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005228:	4621      	mov	r1, r4
 800522a:	028a      	lsls	r2, r1, #10
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	2200      	movs	r2, #0
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	60fa      	str	r2, [r7, #12]
 8005238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800523c:	f7fb f820 	bl	8000280 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4613      	mov	r3, r2
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_GetSysClockFreq+0x180>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	3301      	adds	r3, #1
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005262:	e002      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCC_GetSysClockFreq+0x184>)
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800526c:	4618      	mov	r0, r3
 800526e:	3740      	adds	r7, #64	; 0x40
 8005270:	46bd      	mov	sp, r7
 8005272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	00f42400 	.word	0x00f42400
 8005280:	017d7840 	.word	0x017d7840

08005284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_GetHCLKFreq+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000150 	.word	0x20000150

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052a0:	f7ff fff0 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0a9b      	lsrs	r3, r3, #10
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	08011d40 	.word	0x08011d40

080052c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	220f      	movs	r2, #15
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0203 	and.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	08db      	lsrs	r3, r3, #3
 80052fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_RCC_GetClockConfig+0x60>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0207 	and.w	r2, r3, #7
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	601a      	str	r2, [r3, #0]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	40023c00 	.word	0x40023c00

08005328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e18c      	b.n	8005654 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a75      	ldr	r2, [pc, #468]	; (8005514 <HAL_SPI_Init+0x1ec>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <HAL_SPI_Init+0x4e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a73      	ldr	r2, [pc, #460]	; (8005518 <HAL_SPI_Init+0x1f0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_SPI_Init+0x4e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a72      	ldr	r2, [pc, #456]	; (800551c <HAL_SPI_Init+0x1f4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_SPI_Init+0x4e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a70      	ldr	r2, [pc, #448]	; (8005520 <HAL_SPI_Init+0x1f8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_SPI_Init+0x4e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6f      	ldr	r2, [pc, #444]	; (8005524 <HAL_SPI_Init+0x1fc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_SPI_Init+0x4e>
 800536c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005370:	486d      	ldr	r0, [pc, #436]	; (8005528 <HAL_SPI_Init+0x200>)
 8005372:	f7fb feed 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_SPI_Init+0x6a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005386:	d004      	beq.n	8005392 <HAL_SPI_Init+0x6a>
 8005388:	f240 1141 	movw	r1, #321	; 0x141
 800538c:	4866      	ldr	r0, [pc, #408]	; (8005528 <HAL_SPI_Init+0x200>)
 800538e:	f7fb fedf 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00e      	beq.n	80053b8 <HAL_SPI_Init+0x90>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d009      	beq.n	80053b8 <HAL_SPI_Init+0x90>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ac:	d004      	beq.n	80053b8 <HAL_SPI_Init+0x90>
 80053ae:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80053b2:	485d      	ldr	r0, [pc, #372]	; (8005528 <HAL_SPI_Init+0x200>)
 80053b4:	f7fb fecc 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c0:	d008      	beq.n	80053d4 <HAL_SPI_Init+0xac>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_SPI_Init+0xac>
 80053ca:	f240 1143 	movw	r1, #323	; 0x143
 80053ce:	4856      	ldr	r0, [pc, #344]	; (8005528 <HAL_SPI_Init+0x200>)
 80053d0:	f7fb febe 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053dc:	d00d      	beq.n	80053fa <HAL_SPI_Init+0xd2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_SPI_Init+0xd2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ee:	d004      	beq.n	80053fa <HAL_SPI_Init+0xd2>
 80053f0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80053f4:	484c      	ldr	r0, [pc, #304]	; (8005528 <HAL_SPI_Init+0x200>)
 80053f6:	f7fb feab 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d020      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b08      	cmp	r3, #8
 8005408:	d01c      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2b10      	cmp	r3, #16
 8005410:	d018      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2b18      	cmp	r3, #24
 8005418:	d014      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	2b20      	cmp	r3, #32
 8005420:	d010      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	2b28      	cmp	r3, #40	; 0x28
 8005428:	d00c      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b30      	cmp	r3, #48	; 0x30
 8005430:	d008      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b38      	cmp	r3, #56	; 0x38
 8005438:	d004      	beq.n	8005444 <HAL_SPI_Init+0x11c>
 800543a:	f240 1145 	movw	r1, #325	; 0x145
 800543e:	483a      	ldr	r0, [pc, #232]	; (8005528 <HAL_SPI_Init+0x200>)
 8005440:	f7fb fe86 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_SPI_Init+0x136>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d004      	beq.n	800545e <HAL_SPI_Init+0x136>
 8005454:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005458:	4833      	ldr	r0, [pc, #204]	; (8005528 <HAL_SPI_Init+0x200>)
 800545a:	f7fb fe79 	bl	8001150 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_SPI_Init+0x150>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b10      	cmp	r3, #16
 800546c:	d004      	beq.n	8005478 <HAL_SPI_Init+0x150>
 800546e:	f240 1147 	movw	r1, #327	; 0x147
 8005472:	482d      	ldr	r0, [pc, #180]	; (8005528 <HAL_SPI_Init+0x200>)
 8005474:	f7fb fe6c 	bl	8001150 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d155      	bne.n	800552c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_SPI_Init+0x172>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d004      	beq.n	800549a <HAL_SPI_Init+0x172>
 8005490:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005494:	4824      	ldr	r0, [pc, #144]	; (8005528 <HAL_SPI_Init+0x200>)
 8005496:	f7fb fe5b 	bl	8001150 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_SPI_Init+0x18c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d004      	beq.n	80054b4 <HAL_SPI_Init+0x18c>
 80054aa:	f240 114b 	movw	r1, #331	; 0x14b
 80054ae:	481e      	ldr	r0, [pc, #120]	; (8005528 <HAL_SPI_Init+0x200>)
 80054b0:	f7fb fe4e 	bl	8001150 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054bc:	d125      	bne.n	800550a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d05d      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d059      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d055      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b18      	cmp	r3, #24
 80054dc:	d051      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d04d      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	2b28      	cmp	r3, #40	; 0x28
 80054ec:	d049      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b30      	cmp	r3, #48	; 0x30
 80054f4:	d045      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	2b38      	cmp	r3, #56	; 0x38
 80054fc:	d041      	beq.n	8005582 <HAL_SPI_Init+0x25a>
 80054fe:	f240 114f 	movw	r1, #335	; 0x14f
 8005502:	4809      	ldr	r0, [pc, #36]	; (8005528 <HAL_SPI_Init+0x200>)
 8005504:	f7fb fe24 	bl	8001150 <assert_failed>
 8005508:	e03b      	b.n	8005582 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	61da      	str	r2, [r3, #28]
 8005510:	e037      	b.n	8005582 <HAL_SPI_Init+0x25a>
 8005512:	bf00      	nop
 8005514:	40013000 	.word	0x40013000
 8005518:	40003800 	.word	0x40003800
 800551c:	40003c00 	.word	0x40003c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40015000 	.word	0x40015000
 8005528:	0800f2cc 	.word	0x0800f2cc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d01c      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b10      	cmp	r3, #16
 8005542:	d018      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	2b18      	cmp	r3, #24
 800554a:	d014      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	2b20      	cmp	r3, #32
 8005552:	d010      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	2b28      	cmp	r3, #40	; 0x28
 800555a:	d00c      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d008      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	2b38      	cmp	r3, #56	; 0x38
 800556a:	d004      	beq.n	8005576 <HAL_SPI_Init+0x24e>
 800556c:	f240 1159 	movw	r1, #345	; 0x159
 8005570:	483a      	ldr	r0, [pc, #232]	; (800565c <HAL_SPI_Init+0x334>)
 8005572:	f7fb fded 	bl	8001150 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fb fe19 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	ea42 0103 	orr.w	r1, r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 0104 	and.w	r1, r3, #4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0210 	and.w	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005642:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	0800f2cc 	.word	0x0800f2cc

08005660 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <HAL_SPI_Transmit+0x30>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005684:	d004      	beq.n	8005690 <HAL_SPI_Transmit+0x30>
 8005686:	f44f 7142 	mov.w	r1, #776	; 0x308
 800568a:	4880      	ldr	r0, [pc, #512]	; (800588c <HAL_SPI_Transmit+0x22c>)
 800568c:	f7fb fd60 	bl	8001150 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_SPI_Transmit+0x3e>
 800569a:	2302      	movs	r3, #2
 800569c:	e128      	b.n	80058f0 <HAL_SPI_Transmit+0x290>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a6:	f7fc fb7d 	bl	8001da4 <HAL_GetTick>
 80056aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
 80056be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056c0:	e10d      	b.n	80058de <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_Transmit+0x6e>
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056d2:	e104      	b.n	80058de <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2203      	movs	r2, #3
 80056d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571a:	d10f      	bne.n	800573c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800573a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d007      	beq.n	800575a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005762:	d14b      	bne.n	80057fc <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_SPI_Transmit+0x112>
 800576c:	8afb      	ldrh	r3, [r7, #22]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d13e      	bne.n	80057f0 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	881a      	ldrh	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005796:	e02b      	b.n	80057f0 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d112      	bne.n	80057cc <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	881a      	ldrh	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80057ca:	e011      	b.n	80057f0 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057cc:	f7fc faea 	bl	8001da4 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d803      	bhi.n	80057e4 <HAL_SPI_Transmit+0x184>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d102      	bne.n	80057ea <HAL_SPI_Transmit+0x18a>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ee:	e076      	b.n	80058de <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ce      	bne.n	8005798 <HAL_SPI_Transmit+0x138>
 80057fa:	e04e      	b.n	800589a <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Transmit+0x1aa>
 8005804:	8afb      	ldrh	r3, [r7, #22]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d142      	bne.n	8005890 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005830:	e02e      	b.n	8005890 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	d113      	bne.n	8005868 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	7812      	ldrb	r2, [r2, #0]
 800584c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	86da      	strh	r2, [r3, #54]	; 0x36
 8005866:	e013      	b.n	8005890 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005868:	f7fc fa9c 	bl	8001da4 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d803      	bhi.n	8005880 <HAL_SPI_Transmit+0x220>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Transmit+0x226>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	77fb      	strb	r3, [r7, #31]
          goto error;
 800588a:	e028      	b.n	80058de <HAL_SPI_Transmit+0x27e>
 800588c:	0800f2cc 	.word	0x0800f2cc
    while (hspi->TxXferCount > 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1cb      	bne.n	8005832 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f8b2 	bl	8005a08 <SPI_EndRxTxTransaction>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e000      	b.n	80058de <HAL_SPI_Transmit+0x27e>
  }

error:
 80058dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005908:	f7fc fa4c 	bl	8001da4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005918:	f7fc fa44 	bl	8001da4 <HAL_GetTick>
 800591c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800591e:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	0d1b      	lsrs	r3, r3, #20
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800592e:	e054      	b.n	80059da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d050      	beq.n	80059da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005938:	f7fc fa34 	bl	8001da4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	429a      	cmp	r2, r3
 8005946:	d902      	bls.n	800594e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d13d      	bne.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800595c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d111      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d004      	beq.n	800597c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d107      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005994:	d10f      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e017      	b.n	80059fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d19b      	bne.n	8005930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000150 	.word	0x20000150

08005a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <SPI_EndRxTxTransaction+0x7c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <SPI_EndRxTxTransaction+0x80>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	0d5b      	lsrs	r3, r3, #21
 8005a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a32:	d112      	bne.n	8005a5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff ff5a 	bl	80058f8 <SPI_WaitFlagStateUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e00f      	b.n	8005a7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b80      	cmp	r3, #128	; 0x80
 8005a72:	d0f2      	beq.n	8005a5a <SPI_EndRxTxTransaction+0x52>
 8005a74:	e000      	b.n	8005a78 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a76:	bf00      	nop
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000150 	.word	0x20000150
 8005a88:	165e9f81 	.word	0x165e9f81

08005a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0a7      	b.n	8005bee <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a55      	ldr	r2, [pc, #340]	; (8005bf8 <HAL_TIM_Base_Init+0x16c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d027      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab0:	d022      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a51      	ldr	r2, [pc, #324]	; (8005bfc <HAL_TIM_Base_Init+0x170>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d01d      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a4f      	ldr	r2, [pc, #316]	; (8005c00 <HAL_TIM_Base_Init+0x174>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4e      	ldr	r2, [pc, #312]	; (8005c04 <HAL_TIM_Base_Init+0x178>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a4c      	ldr	r2, [pc, #304]	; (8005c08 <HAL_TIM_Base_Init+0x17c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a4b      	ldr	r2, [pc, #300]	; (8005c0c <HAL_TIM_Base_Init+0x180>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a49      	ldr	r2, [pc, #292]	; (8005c10 <HAL_TIM_Base_Init+0x184>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_Base_Init+0x6c>
 8005aee:	f240 1113 	movw	r1, #275	; 0x113
 8005af2:	4848      	ldr	r0, [pc, #288]	; (8005c14 <HAL_TIM_Base_Init+0x188>)
 8005af4:	f7fb fb2c 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d014      	beq.n	8005b2a <HAL_TIM_Base_Init+0x9e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d010      	beq.n	8005b2a <HAL_TIM_Base_Init+0x9e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d00c      	beq.n	8005b2a <HAL_TIM_Base_Init+0x9e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d008      	beq.n	8005b2a <HAL_TIM_Base_Init+0x9e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b60      	cmp	r3, #96	; 0x60
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIM_Base_Init+0x9e>
 8005b20:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005b24:	483b      	ldr	r0, [pc, #236]	; (8005c14 <HAL_TIM_Base_Init+0x188>)
 8005b26:	f7fb fb13 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_TIM_Base_Init+0xc4>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3a:	d009      	beq.n	8005b50 <HAL_TIM_Base_Init+0xc4>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b44:	d004      	beq.n	8005b50 <HAL_TIM_Base_Init+0xc4>
 8005b46:	f240 1115 	movw	r1, #277	; 0x115
 8005b4a:	4832      	ldr	r0, [pc, #200]	; (8005c14 <HAL_TIM_Base_Init+0x188>)
 8005b4c:	f7fb fb00 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_TIM_Base_Init+0xde>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIM_Base_Init+0xde>
 8005b60:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005b64:	482b      	ldr	r0, [pc, #172]	; (8005c14 <HAL_TIM_Base_Init+0x188>)
 8005b66:	f7fb faf3 	bl	8001150 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f84a 	bl	8005c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f000 fc62 	bl	8006460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800
 8005c14:	0800f304 	.word	0x0800f304

08005c18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a3d      	ldr	r2, [pc, #244]	; (8005d30 <HAL_TIM_Base_Start_IT+0x104>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d027      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c46:	d022      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a39      	ldr	r2, [pc, #228]	; (8005d34 <HAL_TIM_Base_Start_IT+0x108>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01d      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a38      	ldr	r2, [pc, #224]	; (8005d38 <HAL_TIM_Base_Start_IT+0x10c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d018      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a36      	ldr	r2, [pc, #216]	; (8005d3c <HAL_TIM_Base_Start_IT+0x110>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a35      	ldr	r2, [pc, #212]	; (8005d40 <HAL_TIM_Base_Start_IT+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00e      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a33      	ldr	r2, [pc, #204]	; (8005d44 <HAL_TIM_Base_Start_IT+0x118>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d009      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a32      	ldr	r2, [pc, #200]	; (8005d48 <HAL_TIM_Base_Start_IT+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x62>
 8005c84:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005c88:	4830      	ldr	r0, [pc, #192]	; (8005d4c <HAL_TIM_Base_Start_IT+0x120>)
 8005c8a:	f7fb fa61 	bl	8001150 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d001      	beq.n	8005c9e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e044      	b.n	8005d28 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <HAL_TIM_Base_Start_IT+0x104>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0xc6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d013      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0xc6>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <HAL_TIM_Base_Start_IT+0x108>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0xc6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <HAL_TIM_Base_Start_IT+0x10c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0xc6>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIM_Base_Start_IT+0x110>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0xc6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <HAL_TIM_Base_Start_IT+0x114>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d111      	bne.n	8005d16 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d010      	beq.n	8005d26 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d14:	e007      	b.n	8005d26 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800
 8005d4c:	0800f304 	.word	0x0800f304

08005d50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e18a      	b.n	800607a <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a78      	ldr	r2, [pc, #480]	; (8005f4c <HAL_TIM_Encoder_Init+0x1fc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <HAL_TIM_Encoder_Init+0x5a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d76:	d018      	beq.n	8005daa <HAL_TIM_Encoder_Init+0x5a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a74      	ldr	r2, [pc, #464]	; (8005f50 <HAL_TIM_Encoder_Init+0x200>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_TIM_Encoder_Init+0x5a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a73      	ldr	r2, [pc, #460]	; (8005f54 <HAL_TIM_Encoder_Init+0x204>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_TIM_Encoder_Init+0x5a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a71      	ldr	r2, [pc, #452]	; (8005f58 <HAL_TIM_Encoder_Init+0x208>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_TIM_Encoder_Init+0x5a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a70      	ldr	r2, [pc, #448]	; (8005f5c <HAL_TIM_Encoder_Init+0x20c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_TIM_Encoder_Init+0x5a>
 8005da0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8005da4:	486e      	ldr	r0, [pc, #440]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005da6:	f7fb f9d3 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d014      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0x8c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d010      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0x8c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d00c      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0x8c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d008      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0x8c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b60      	cmp	r3, #96	; 0x60
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0x8c>
 8005dd2:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8005dd6:	4862      	ldr	r0, [pc, #392]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005dd8:	f7fb f9ba 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00e      	beq.n	8005e02 <HAL_TIM_Encoder_Init+0xb2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d009      	beq.n	8005e02 <HAL_TIM_Encoder_Init+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df6:	d004      	beq.n	8005e02 <HAL_TIM_Encoder_Init+0xb2>
 8005df8:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8005dfc:	4858      	ldr	r0, [pc, #352]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005dfe:	f7fb f9a7 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_TIM_Encoder_Init+0xcc>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_Encoder_Init+0xcc>
 8005e12:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8005e16:	4852      	ldr	r0, [pc, #328]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005e18:	f7fb f99a 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d00c      	beq.n	8005e3e <HAL_TIM_Encoder_Init+0xee>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d008      	beq.n	8005e3e <HAL_TIM_Encoder_Init+0xee>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d004      	beq.n	8005e3e <HAL_TIM_Encoder_Init+0xee>
 8005e34:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8005e38:	4849      	ldr	r0, [pc, #292]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005e3a:	f7fb f989 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d00c      	beq.n	8005e60 <HAL_TIM_Encoder_Init+0x110>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d008      	beq.n	8005e60 <HAL_TIM_Encoder_Init+0x110>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d004      	beq.n	8005e60 <HAL_TIM_Encoder_Init+0x110>
 8005e56:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8005e5a:	4841      	ldr	r0, [pc, #260]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005e5c:	f7fb f978 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d00c      	beq.n	8005e82 <HAL_TIM_Encoder_Init+0x132>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d008      	beq.n	8005e82 <HAL_TIM_Encoder_Init+0x132>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d004      	beq.n	8005e82 <HAL_TIM_Encoder_Init+0x132>
 8005e78:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8005e7c:	4838      	ldr	r0, [pc, #224]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005e7e:	f7fb f967 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_TIM_Encoder_Init+0x14c>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_Encoder_Init+0x14c>
 8005e92:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8005e96:	4832      	ldr	r0, [pc, #200]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005e98:	f7fb f95a 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_TIM_Encoder_Init+0x166>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_Encoder_Init+0x166>
 8005eac:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8005eb0:	482b      	ldr	r0, [pc, #172]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005eb2:	f7fb f94d 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <HAL_TIM_Encoder_Init+0x190>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_TIM_Encoder_Init+0x190>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d008      	beq.n	8005ee0 <HAL_TIM_Encoder_Init+0x190>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIM_Encoder_Init+0x190>
 8005ed6:	f640 31da 	movw	r1, #3034	; 0xbda
 8005eda:	4821      	ldr	r0, [pc, #132]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005edc:	f7fb f938 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <HAL_TIM_Encoder_Init+0x1ba>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d00c      	beq.n	8005f0a <HAL_TIM_Encoder_Init+0x1ba>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d008      	beq.n	8005f0a <HAL_TIM_Encoder_Init+0x1ba>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d004      	beq.n	8005f0a <HAL_TIM_Encoder_Init+0x1ba>
 8005f00:	f640 31db 	movw	r1, #3035	; 0xbdb
 8005f04:	4816      	ldr	r0, [pc, #88]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005f06:	f7fb f923 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	d904      	bls.n	8005f1c <HAL_TIM_Encoder_Init+0x1cc>
 8005f12:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8005f16:	4812      	ldr	r0, [pc, #72]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005f18:	f7fb f91a 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	2b0f      	cmp	r3, #15
 8005f22:	d904      	bls.n	8005f2e <HAL_TIM_Encoder_Init+0x1de>
 8005f24:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8005f28:	480d      	ldr	r0, [pc, #52]	; (8005f60 <HAL_TIM_Encoder_Init+0x210>)
 8005f2a:	f7fb f911 	bl	8001150 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d114      	bne.n	8005f64 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb fe5e 	bl	8001c04 <HAL_TIM_Encoder_MspInit>
 8005f48:	e00c      	b.n	8005f64 <HAL_TIM_Encoder_Init+0x214>
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	0800f304 	.word	0x0800f304
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7a:	f023 0307 	bic.w	r3, r3, #7
 8005f7e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f000 fa68 	bl	8006460 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fd6:	f023 030c 	bic.w	r3, r3, #12
 8005fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	011a      	lsls	r2, r3, #4
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	4313      	orrs	r3, r2
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006014:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800601c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	4313      	orrs	r3, r2
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop

08006084 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006094:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800609c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a4d      	ldr	r2, [pc, #308]	; (80061e8 <HAL_TIM_Encoder_Start+0x164>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x70>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d018      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x70>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a49      	ldr	r2, [pc, #292]	; (80061ec <HAL_TIM_Encoder_Start+0x168>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x70>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a47      	ldr	r2, [pc, #284]	; (80061f0 <HAL_TIM_Encoder_Start+0x16c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x70>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a46      	ldr	r2, [pc, #280]	; (80061f4 <HAL_TIM_Encoder_Start+0x170>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x70>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a44      	ldr	r2, [pc, #272]	; (80061f8 <HAL_TIM_Encoder_Start+0x174>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIM_Encoder_Start+0x70>
 80060ea:	f640 418e 	movw	r1, #3214	; 0xc8e
 80060ee:	4843      	ldr	r0, [pc, #268]	; (80061fc <HAL_TIM_Encoder_Start+0x178>)
 80060f0:	f7fb f82e 	bl	8001150 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006100:	7b7b      	ldrb	r3, [r7, #13]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d001      	beq.n	800610a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e069      	b.n	80061de <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800611a:	e031      	b.n	8006180 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b04      	cmp	r3, #4
 8006120:	d110      	bne.n	8006144 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d102      	bne.n	800612e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006128:	7b3b      	ldrb	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d001      	beq.n	8006132 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e055      	b.n	80061de <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006142:	e01d      	b.n	8006180 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d108      	bne.n	800615c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d105      	bne.n	800615c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006150:	7b7b      	ldrb	r3, [r7, #13]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d102      	bne.n	800615c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006156:	7b3b      	ldrb	r3, [r7, #12]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d001      	beq.n	8006160 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e03e      	b.n	80061de <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_TIM_Encoder_Start+0x10a>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d008      	beq.n	800619e <HAL_TIM_Encoder_Start+0x11a>
 800618c:	e00f      	b.n	80061ae <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2201      	movs	r2, #1
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f9e2 	bl	8006560 <TIM_CCxChannelCmd>
      break;
 800619c:	e016      	b.n	80061cc <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	2104      	movs	r1, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f9da 	bl	8006560 <TIM_CCxChannelCmd>
      break;
 80061ac:	e00e      	b.n	80061cc <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2201      	movs	r2, #1
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f9d2 	bl	8006560 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2201      	movs	r2, #1
 80061c2:	2104      	movs	r1, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f9cb 	bl	8006560 <TIM_CCxChannelCmd>
      break;
 80061ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40014000 	.word	0x40014000
 80061fc:	0800f304 	.word	0x0800f304

08006200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0202 	mvn.w	r2, #2
 800622c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8ee 	bl	8006424 <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f8e0 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8f1 	bl	8006438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b04      	cmp	r3, #4
 8006268:	d122      	bne.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b04      	cmp	r3, #4
 8006276:	d11b      	bne.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0204 	mvn.w	r2, #4
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f8c4 	bl	8006424 <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8b6 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8c7 	bl	8006438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d122      	bne.n	8006304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d11b      	bne.n	8006304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0208 	mvn.w	r2, #8
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2204      	movs	r2, #4
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f89a 	bl	8006424 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f88c 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f89d 	bl	8006438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b10      	cmp	r3, #16
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b10      	cmp	r3, #16
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0210 	mvn.w	r2, #16
 8006328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2208      	movs	r2, #8
 800632e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f870 	bl	8006424 <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f862 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f873 	bl	8006438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10e      	bne.n	8006384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0201 	mvn.w	r2, #1
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fa fecc 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d10e      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b80      	cmp	r3, #128	; 0x80
 800639e:	d107      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa0c 	bl	80067c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d10e      	bne.n	80063dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d107      	bne.n	80063dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f838 	bl	800644c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0220 	mvn.w	r2, #32
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9d6 	bl	80067b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a34      	ldr	r2, [pc, #208]	; (8006544 <TIM_Base_SetConfig+0xe4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00f      	beq.n	8006498 <TIM_Base_SetConfig+0x38>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647e:	d00b      	beq.n	8006498 <TIM_Base_SetConfig+0x38>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a31      	ldr	r2, [pc, #196]	; (8006548 <TIM_Base_SetConfig+0xe8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0x38>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a30      	ldr	r2, [pc, #192]	; (800654c <TIM_Base_SetConfig+0xec>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0x38>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2f      	ldr	r2, [pc, #188]	; (8006550 <TIM_Base_SetConfig+0xf0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a25      	ldr	r2, [pc, #148]	; (8006544 <TIM_Base_SetConfig+0xe4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01b      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d017      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a22      	ldr	r2, [pc, #136]	; (8006548 <TIM_Base_SetConfig+0xe8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <TIM_Base_SetConfig+0xec>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00f      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a20      	ldr	r2, [pc, #128]	; (8006550 <TIM_Base_SetConfig+0xf0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00b      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <TIM_Base_SetConfig+0xf4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d007      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1e      	ldr	r2, [pc, #120]	; (8006558 <TIM_Base_SetConfig+0xf8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_Base_SetConfig+0x8a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <TIM_Base_SetConfig+0xfc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d108      	bne.n	80064fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a08      	ldr	r2, [pc, #32]	; (8006544 <TIM_Base_SetConfig+0xe4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d103      	bne.n	8006530 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	615a      	str	r2, [r3, #20]
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <TIM_CCxChannelCmd+0xb8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d020      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657a:	d01c      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4a27      	ldr	r2, [pc, #156]	; (800661c <TIM_CCxChannelCmd+0xbc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d018      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <TIM_CCxChannelCmd+0xc0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d014      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a25      	ldr	r2, [pc, #148]	; (8006624 <TIM_CCxChannelCmd+0xc4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d010      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a24      	ldr	r2, [pc, #144]	; (8006628 <TIM_CCxChannelCmd+0xc8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00c      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a23      	ldr	r2, [pc, #140]	; (800662c <TIM_CCxChannelCmd+0xcc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d008      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4a22      	ldr	r2, [pc, #136]	; (8006630 <TIM_CCxChannelCmd+0xd0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <TIM_CCxChannelCmd+0x56>
 80065ac:	f641 5194 	movw	r1, #7572	; 0x1d94
 80065b0:	4820      	ldr	r0, [pc, #128]	; (8006634 <TIM_CCxChannelCmd+0xd4>)
 80065b2:	f7fa fdcd 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d010      	beq.n	80065de <TIM_CCxChannelCmd+0x7e>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d00d      	beq.n	80065de <TIM_CCxChannelCmd+0x7e>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d00a      	beq.n	80065de <TIM_CCxChannelCmd+0x7e>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b0c      	cmp	r3, #12
 80065cc:	d007      	beq.n	80065de <TIM_CCxChannelCmd+0x7e>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b3c      	cmp	r3, #60	; 0x3c
 80065d2:	d004      	beq.n	80065de <TIM_CCxChannelCmd+0x7e>
 80065d4:	f641 5195 	movw	r1, #7573	; 0x1d95
 80065d8:	4816      	ldr	r0, [pc, #88]	; (8006634 <TIM_CCxChannelCmd+0xd4>)
 80065da:	f7fa fdb9 	bl	8001150 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1a      	ldr	r2, [r3, #32]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	43db      	mvns	r3, r3
 80065f4:	401a      	ands	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1a      	ldr	r2, [r3, #32]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	431a      	orrs	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800
 8006634:	0800f304 	.word	0x0800f304

08006638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a55      	ldr	r2, [pc, #340]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d013      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a51      	ldr	r2, [pc, #324]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a4f      	ldr	r2, [pc, #316]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a4e      	ldr	r2, [pc, #312]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006674:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8006678:	484c      	ldr	r0, [pc, #304]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800667a:	f7fa fd69 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d020      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b10      	cmp	r3, #16
 800668c:	d01c      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b20      	cmp	r3, #32
 8006694:	d018      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b30      	cmp	r3, #48	; 0x30
 800669c:	d014      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d010      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b50      	cmp	r3, #80	; 0x50
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b60      	cmp	r3, #96	; 0x60
 80066b4:	d008      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b70      	cmp	r3, #112	; 0x70
 80066bc:	d004      	beq.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80066be:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80066c2:	483a      	ldr	r0, [pc, #232]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80066c4:	f7fa fd44 	bl	8001150 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b80      	cmp	r3, #128	; 0x80
 80066ce:	d008      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80066d8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80066dc:	4833      	ldr	r0, [pc, #204]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80066de:	f7fa fd37 	bl	8001150 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e050      	b.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1b      	ldr	r2, [pc, #108]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d013      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10c      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800676c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4313      	orrs	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	40000c00 	.word	0x40000c00
 80067ac:	0800f33c 	.word	0x0800f33c
 80067b0:	40014000 	.word	0x40014000

080067b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067dc:	b084      	sub	sp, #16
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	f107 001c 	add.w	r0, r7, #28
 80067ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d122      	bne.n	800683a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800681c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d105      	bne.n	800682e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fbee 	bl	8008010 <USB_CoreReset>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
 8006838:	e01a      	b.n	8006870 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fbe2 	bl	8008010 <USB_CoreReset>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
 8006862:	e005      	b.n	8006870 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10b      	bne.n	800688e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f043 0206 	orr.w	r2, r3, #6
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f043 0220 	orr.w	r2, r3, #32
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800689a:	b004      	add	sp, #16
 800689c:	4770      	bx	lr
	...

080068a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d165      	bne.n	8006980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a41      	ldr	r2, [pc, #260]	; (80069bc <USB_SetTurnaroundTime+0x11c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d906      	bls.n	80068ca <USB_SetTurnaroundTime+0x2a>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a40      	ldr	r2, [pc, #256]	; (80069c0 <USB_SetTurnaroundTime+0x120>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d202      	bcs.n	80068ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068c4:	230f      	movs	r3, #15
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e062      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <USB_SetTurnaroundTime+0x120>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d306      	bcc.n	80068e0 <USB_SetTurnaroundTime+0x40>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4a3b      	ldr	r2, [pc, #236]	; (80069c4 <USB_SetTurnaroundTime+0x124>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d202      	bcs.n	80068e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068da:	230e      	movs	r3, #14
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e057      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a38      	ldr	r2, [pc, #224]	; (80069c4 <USB_SetTurnaroundTime+0x124>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d306      	bcc.n	80068f6 <USB_SetTurnaroundTime+0x56>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4a37      	ldr	r2, [pc, #220]	; (80069c8 <USB_SetTurnaroundTime+0x128>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d202      	bcs.n	80068f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068f0:	230d      	movs	r3, #13
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e04c      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a33      	ldr	r2, [pc, #204]	; (80069c8 <USB_SetTurnaroundTime+0x128>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d306      	bcc.n	800690c <USB_SetTurnaroundTime+0x6c>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a32      	ldr	r2, [pc, #200]	; (80069cc <USB_SetTurnaroundTime+0x12c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d802      	bhi.n	800690c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006906:	230c      	movs	r3, #12
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	e041      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <USB_SetTurnaroundTime+0x12c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d906      	bls.n	8006922 <USB_SetTurnaroundTime+0x82>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <USB_SetTurnaroundTime+0x130>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d802      	bhi.n	8006922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800691c:	230b      	movs	r3, #11
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e036      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <USB_SetTurnaroundTime+0x130>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d906      	bls.n	8006938 <USB_SetTurnaroundTime+0x98>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a29      	ldr	r2, [pc, #164]	; (80069d4 <USB_SetTurnaroundTime+0x134>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d802      	bhi.n	8006938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006932:	230a      	movs	r3, #10
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e02b      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a26      	ldr	r2, [pc, #152]	; (80069d4 <USB_SetTurnaroundTime+0x134>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d906      	bls.n	800694e <USB_SetTurnaroundTime+0xae>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a25      	ldr	r2, [pc, #148]	; (80069d8 <USB_SetTurnaroundTime+0x138>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d202      	bcs.n	800694e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006948:	2309      	movs	r3, #9
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e020      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <USB_SetTurnaroundTime+0x138>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d306      	bcc.n	8006964 <USB_SetTurnaroundTime+0xc4>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a20      	ldr	r2, [pc, #128]	; (80069dc <USB_SetTurnaroundTime+0x13c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d802      	bhi.n	8006964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800695e:	2308      	movs	r3, #8
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	e015      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <USB_SetTurnaroundTime+0x13c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d906      	bls.n	800697a <USB_SetTurnaroundTime+0xda>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <USB_SetTurnaroundTime+0x140>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d202      	bcs.n	800697a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006974:	2307      	movs	r3, #7
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e00a      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800697a:	2306      	movs	r3, #6
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e007      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006986:	2309      	movs	r3, #9
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e001      	b.n	8006990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800698c:	2309      	movs	r3, #9
 800698e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	029b      	lsls	r3, r3, #10
 80069a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80069a8:	431a      	orrs	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	00d8acbf 	.word	0x00d8acbf
 80069c0:	00e4e1c0 	.word	0x00e4e1c0
 80069c4:	00f42400 	.word	0x00f42400
 80069c8:	01067380 	.word	0x01067380
 80069cc:	011a499f 	.word	0x011a499f
 80069d0:	01312cff 	.word	0x01312cff
 80069d4:	014ca43f 	.word	0x014ca43f
 80069d8:	016e3600 	.word	0x016e3600
 80069dc:	01a6ab1f 	.word	0x01a6ab1f
 80069e0:	01e84800 	.word	0x01e84800

080069e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f043 0201 	orr.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d115      	bne.n	8006a76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a56:	2001      	movs	r0, #1
 8006a58:	f7fb f9b0 	bl	8001dbc <HAL_Delay>
      ms++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fa45 	bl	8007ef2 <USB_GetMode>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d01e      	beq.n	8006aac <USB_SetCurrentMode+0x84>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b31      	cmp	r3, #49	; 0x31
 8006a72:	d9f0      	bls.n	8006a56 <USB_SetCurrentMode+0x2e>
 8006a74:	e01a      	b.n	8006aac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d115      	bne.n	8006aa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a88:	2001      	movs	r0, #1
 8006a8a:	f7fb f997 	bl	8001dbc <HAL_Delay>
      ms++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3301      	adds	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 fa2c 	bl	8007ef2 <USB_GetMode>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <USB_SetCurrentMode+0x84>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b31      	cmp	r3, #49	; 0x31
 8006aa4:	d9f0      	bls.n	8006a88 <USB_SetCurrentMode+0x60>
 8006aa6:	e001      	b.n	8006aac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e005      	b.n	8006ab8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b32      	cmp	r3, #50	; 0x32
 8006ab0:	d101      	bne.n	8006ab6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e009      	b.n	8006af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3340      	adds	r3, #64	; 0x40
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3301      	adds	r3, #1
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b0e      	cmp	r3, #14
 8006af8:	d9f2      	bls.n	8006ae0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11c      	bne.n	8006b3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0e:	f043 0302 	orr.w	r3, r3, #2
 8006b12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
 8006b38:	e00b      	b.n	8006b52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	4619      	mov	r1, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	680b      	ldr	r3, [r1, #0]
 8006b70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d10c      	bne.n	8006b92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b7e:	2100      	movs	r1, #0
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f965 	bl	8006e50 <USB_SetDevSpeed>
 8006b86:	e008      	b.n	8006b9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b88:	2101      	movs	r1, #1
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f960 	bl	8006e50 <USB_SetDevSpeed>
 8006b90:	e003      	b.n	8006b9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b92:	2103      	movs	r1, #3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f95b 	bl	8006e50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b9a:	2110      	movs	r1, #16
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8f3 	bl	8006d88 <USB_FlushTxFifo>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f91f 	bl	8006df0 <USB_FlushRxFifo>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e043      	b.n	8006c6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bfc:	d118      	bne.n	8006c30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	461a      	mov	r2, r3
 8006c12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	e013      	b.n	8006c42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	461a      	mov	r2, r3
 8006c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e008      	b.n	8006c42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	461a      	mov	r2, r3
 8006c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d3b7      	bcc.n	8006be6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e043      	b.n	8006d04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c92:	d118      	bne.n	8006cc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e013      	b.n	8006cd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	e008      	b.n	8006cd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d3b7      	bcc.n	8006c7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d105      	bne.n	8006d40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f043 0210 	orr.w	r2, r3, #16
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	4b0f      	ldr	r3, [pc, #60]	; (8006d84 <USB_DevInit+0x2c4>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f043 0208 	orr.w	r2, r3, #8
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	f043 0304 	orr.w	r3, r3, #4
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d80:	b004      	add	sp, #16
 8006d82:	4770      	bx	lr
 8006d84:	803c3800 	.word	0x803c3800

08006d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4a13      	ldr	r2, [pc, #76]	; (8006dec <USB_FlushTxFifo+0x64>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e01b      	b.n	8006de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	daf2      	bge.n	8006d96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	019b      	lsls	r3, r3, #6
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a08      	ldr	r2, [pc, #32]	; (8006dec <USB_FlushTxFifo+0x64>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e006      	b.n	8006de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d0f0      	beq.n	8006dc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	00030d40 	.word	0x00030d40

08006df0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <USB_FlushRxFifo+0x5c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e018      	b.n	8006e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	daf2      	bge.n	8006dfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <USB_FlushRxFifo+0x5c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e006      	b.n	8006e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d0f0      	beq.n	8006e20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	00030d40 	.word	0x00030d40

08006e50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e70:	4313      	orrs	r3, r2
 8006e72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0306 	and.w	r3, r3, #6
 8006e9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]
 8006ea6:	e00a      	b.n	8006ebe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d002      	beq.n	8006eb4 <USB_GetDevSpeed+0x32>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b06      	cmp	r3, #6
 8006eb2:	d102      	bne.n	8006eba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	75fb      	strb	r3, [r7, #23]
 8006eb8:	e001      	b.n	8006ebe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006eba:	230f      	movs	r3, #15
 8006ebc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d13a      	bne.n	8006f5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	2101      	movs	r1, #1
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d155      	bne.n	8006fcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	059b      	lsls	r3, r3, #22
 8006f42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f44:	4313      	orrs	r3, r2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	e036      	b.n	8006fcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	2101      	movs	r1, #1
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	041b      	lsls	r3, r3, #16
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d11a      	bne.n	8006fcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	791b      	ldrb	r3, [r3, #4]
 8006fb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
	...

08006fdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d161      	bne.n	80070bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700e:	d11f      	bne.n	8007050 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800702e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800704e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	b29b      	uxth	r3, r3
 8007068:	43db      	mvns	r3, r3
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007070:	4013      	ands	r3, r2
 8007072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	2101      	movs	r1, #1
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007094:	4013      	ands	r3, r2
 8007096:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	0159      	lsls	r1, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	4619      	mov	r1, r3
 80070b4:	4b35      	ldr	r3, [pc, #212]	; (800718c <USB_DeactivateEndpoint+0x1b0>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	600b      	str	r3, [r1, #0]
 80070ba:	e060      	b.n	800717e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d2:	d11f      	bne.n	8007114 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f303 	lsl.w	r3, r1, r3
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	43db      	mvns	r3, r3
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007134:	4013      	ands	r3, r2
 8007136:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	2101      	movs	r1, #1
 800714a:	fa01 f303 	lsl.w	r3, r1, r3
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	43db      	mvns	r3, r3
 8007152:	68f9      	ldr	r1, [r7, #12]
 8007154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007158:	4013      	ands	r3, r2
 800715a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	0159      	lsls	r1, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	440b      	add	r3, r1
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	4619      	mov	r1, r3
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <USB_DeactivateEndpoint+0x1b4>)
 800717a:	4013      	ands	r3, r2
 800717c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	ec337800 	.word	0xec337800
 8007190:	eff37800 	.word	0xeff37800

08007194 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f040 815c 	bne.w	800746e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d132      	bne.n	8007224 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	0cdb      	lsrs	r3, r3, #19
 800721e:	04db      	lsls	r3, r3, #19
 8007220:	6113      	str	r3, [r2, #16]
 8007222:	e074      	b.n	800730e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723e:	0cdb      	lsrs	r3, r3, #19
 8007240:	04db      	lsls	r3, r3, #19
 8007242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	440b      	add	r3, r1
 8007280:	1e59      	subs	r1, r3, #1
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	fbb1 f3f3 	udiv	r3, r1, r3
 800728a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800728c:	4b9d      	ldr	r3, [pc, #628]	; (8007504 <USB_EPStartXfer+0x370>)
 800728e:	400b      	ands	r3, r1
 8007290:	69b9      	ldr	r1, [r7, #24]
 8007292:	0148      	lsls	r0, r1, #5
 8007294:	69f9      	ldr	r1, [r7, #28]
 8007296:	4401      	add	r1, r0
 8007298:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800729c:	4313      	orrs	r3, r2
 800729e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b6:	69b9      	ldr	r1, [r7, #24]
 80072b8:	0148      	lsls	r0, r1, #5
 80072ba:	69f9      	ldr	r1, [r7, #28]
 80072bc:	4401      	add	r1, r0
 80072be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072c2:	4313      	orrs	r3, r2
 80072c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	791b      	ldrb	r3, [r3, #4]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d11f      	bne.n	800730e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800730c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d14b      	bne.n	80073ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007328:	461a      	mov	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	791b      	ldrb	r3, [r3, #4]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d128      	bne.n	800738a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007344:	2b00      	cmp	r3, #0
 8007346:	d110      	bne.n	800736a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	440a      	add	r2, r1
 800735e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	e00f      	b.n	800738a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007388:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e133      	b.n	8007614 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	791b      	ldrb	r3, [r3, #4]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d015      	beq.n	8007400 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 811b 	beq.w	8007614 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	2101      	movs	r1, #1
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	69f9      	ldr	r1, [r7, #28]
 80073f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073fa:	4313      	orrs	r3, r2
 80073fc:	634b      	str	r3, [r1, #52]	; 0x34
 80073fe:	e109      	b.n	8007614 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d110      	bne.n	8007432 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	e00f      	b.n	8007452 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007450:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6919      	ldr	r1, [r3, #16]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	781a      	ldrb	r2, [r3, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	b298      	uxth	r0, r3
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4603      	mov	r3, r0
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fade 	bl	8007a28 <USB_WritePacket>
 800746c:	e0d2      	b.n	8007614 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007488:	0cdb      	lsrs	r3, r3, #19
 800748a:	04db      	lsls	r3, r3, #19
 800748c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d126      	bne.n	8007508 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d0:	69b9      	ldr	r1, [r7, #24]
 80074d2:	0148      	lsls	r0, r1, #5
 80074d4:	69f9      	ldr	r1, [r7, #28]
 80074d6:	4401      	add	r1, r0
 80074d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074dc:	4313      	orrs	r3, r2
 80074de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074fe:	6113      	str	r3, [r2, #16]
 8007500:	e03a      	b.n	8007578 <USB_EPStartXfer+0x3e4>
 8007502:	bf00      	nop
 8007504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4413      	add	r3, r2
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	8afa      	ldrh	r2, [r7, #22]
 8007524:	fb03 f202 	mul.w	r2, r3, r2
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	691a      	ldr	r2, [r3, #16]
 800753a:	8afb      	ldrh	r3, [r7, #22]
 800753c:	04d9      	lsls	r1, r3, #19
 800753e:	4b38      	ldr	r3, [pc, #224]	; (8007620 <USB_EPStartXfer+0x48c>)
 8007540:	400b      	ands	r3, r1
 8007542:	69b9      	ldr	r1, [r7, #24]
 8007544:	0148      	lsls	r0, r1, #5
 8007546:	69f9      	ldr	r1, [r7, #28]
 8007548:	4401      	add	r1, r0
 800754a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800754e:	4313      	orrs	r3, r2
 8007550:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	0148      	lsls	r0, r1, #5
 800756c:	69f9      	ldr	r1, [r7, #28]
 800756e:	4401      	add	r1, r0
 8007570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007574:	4313      	orrs	r3, r2
 8007576:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10d      	bne.n	800759a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6919      	ldr	r1, [r3, #16]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007596:	460a      	mov	r2, r1
 8007598:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	791b      	ldrb	r3, [r3, #4]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d128      	bne.n	80075f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d110      	bne.n	80075d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e00f      	b.n	80075f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	1ff80000 	.word	0x1ff80000

08007624 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	f040 80ce 	bne.w	80077e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d132      	bne.n	80076b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800766c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ac:	0cdb      	lsrs	r3, r3, #19
 80076ae:	04db      	lsls	r3, r3, #19
 80076b0:	6113      	str	r3, [r2, #16]
 80076b2:	e04e      	b.n	8007752 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ce:	0cdb      	lsrs	r3, r3, #19
 80076d0:	04db      	lsls	r3, r3, #19
 80076d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	429a      	cmp	r2, r3
 8007702:	d903      	bls.n	800770c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800772a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007742:	6939      	ldr	r1, [r7, #16]
 8007744:	0148      	lsls	r0, r1, #5
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	4401      	add	r1, r0
 800774a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800774e:	4313      	orrs	r3, r2
 8007750:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d11e      	bne.n	8007796 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	461a      	mov	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e097      	b.n	80078c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8083 	beq.w	80078c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f303 	lsl.w	r3, r1, r3
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077dc:	4313      	orrs	r3, r2
 80077de:	634b      	str	r3, [r1, #52]	; 0x34
 80077e0:	e071      	b.n	80078c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077fc:	0cdb      	lsrs	r3, r3, #19
 80077fe:	04db      	lsls	r3, r3, #19
 8007800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007824:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800785c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007874:	6939      	ldr	r1, [r7, #16]
 8007876:	0148      	lsls	r0, r1, #5
 8007878:	6979      	ldr	r1, [r7, #20]
 800787a:	4401      	add	r1, r0
 800787c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007880:	4313      	orrs	r3, r2
 8007882:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d10d      	bne.n	80078a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	6919      	ldr	r1, [r3, #16]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	460a      	mov	r2, r1
 80078a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d14a      	bne.n	8007988 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790a:	f040 8086 	bne.w	8007a1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007930:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007954:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3301      	adds	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007962:	4293      	cmp	r3, r2
 8007964:	d902      	bls.n	800796c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	75fb      	strb	r3, [r7, #23]
          break;
 800796a:	e056      	b.n	8007a1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007984:	d0e7      	beq.n	8007956 <USB_EPStopXfer+0x82>
 8007986:	e048      	b.n	8007a1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800799c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079a0:	d13b      	bne.n	8007a1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	7812      	ldrb	r2, [r2, #0]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	7812      	ldrb	r2, [r2, #0]
 80079da:	0151      	lsls	r1, r2, #5
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	440a      	add	r2, r1
 80079e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d902      	bls.n	8007a00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
          break;
 80079fe:	e00c      	b.n	8007a1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a18:	d0e7      	beq.n	80079ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b089      	sub	sp, #36	; 0x24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	460b      	mov	r3, r1
 8007a38:	71fb      	strb	r3, [r7, #7]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d123      	bne.n	8007a96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a4e:	88bb      	ldrh	r3, [r7, #4]
 8007a50:	3303      	adds	r3, #3
 8007a52:	089b      	lsrs	r3, r3, #2
 8007a54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	e018      	b.n	8007a8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	031a      	lsls	r2, r3, #12
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a68:	461a      	mov	r2, r3
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	3301      	adds	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d3e2      	bcc.n	8007a5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3724      	adds	r7, #36	; 0x24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08b      	sub	sp, #44	; 0x2c
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	089b      	lsrs	r3, r3, #2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	623b      	str	r3, [r7, #32]
 8007ace:	e014      	b.n	8007afa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	601a      	str	r2, [r3, #0]
    pDest++;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	3301      	adds	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	3301      	adds	r3, #1
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	3301      	adds	r3, #1
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	3301      	adds	r3, #1
 8007af8:	623b      	str	r3, [r7, #32]
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3e6      	bcc.n	8007ad0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b02:	8bfb      	ldrh	r3, [r7, #30]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01e      	beq.n	8007b46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b12:	461a      	mov	r2, r3
 8007b14:	f107 0310 	add.w	r3, r7, #16
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	701a      	strb	r2, [r3, #0]
      i++;
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	3301      	adds	r3, #1
 8007b32:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	3301      	adds	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b3a:	8bfb      	ldrh	r3, [r7, #30]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b40:	8bfb      	ldrh	r3, [r7, #30]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1ea      	bne.n	8007b1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	372c      	adds	r7, #44	; 0x2c
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d12c      	bne.n	8007bca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	db12      	blt.n	8007ba8 <USB_EPSetStall+0x54>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00f      	beq.n	8007ba8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	e02b      	b.n	8007c22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	db12      	blt.n	8007c02 <USB_EPSetStall+0xae>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d128      	bne.n	8007c9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	791b      	ldrb	r3, [r3, #4]
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d003      	beq.n	8007c7c <USB_EPClearStall+0x4c>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	791b      	ldrb	r3, [r3, #4]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d138      	bne.n	8007cee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e027      	b.n	8007cee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d003      	beq.n	8007cce <USB_EPClearStall+0x9e>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	791b      	ldrb	r3, [r3, #4]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d10f      	bne.n	8007cee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d30:	68f9      	ldr	r1, [r7, #12]
 8007d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d36:	4313      	orrs	r3, r2
 8007d38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d76:	f023 0302 	bic.w	r3, r3, #2
 8007d7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007da4:	f023 0303 	bic.w	r3, r3, #3
 8007da8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007db8:	f043 0302 	orr.w	r3, r3, #2
 8007dbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4013      	ands	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007de4:	68fb      	ldr	r3, [r7, #12]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	0c1b      	lsrs	r3, r3, #16
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	4013      	ands	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	b29b      	uxth	r3, r3
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	4013      	ands	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e88:	68bb      	ldr	r3, [r7, #8]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec6:	01db      	lsls	r3, r3, #7
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	f003 0301 	and.w	r3, r3, #1
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f2c:	f023 0307 	bic.w	r3, r3, #7
 8007f30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	333c      	adds	r3, #60	; 0x3c
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4a26      	ldr	r2, [pc, #152]	; (800800c <USB_EP0_OutStart+0xb8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d90a      	bls.n	8007f8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f88:	d101      	bne.n	8007f8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e037      	b.n	8007ffe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	461a      	mov	r2, r3
 8007f96:	2300      	movs	r3, #0
 8007f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fbc:	f043 0318 	orr.w	r3, r3, #24
 8007fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007fd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fd6:	7afb      	ldrb	r3, [r7, #11]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d10f      	bne.n	8007ffc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	4f54300a 	.word	0x4f54300a

08008010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4a13      	ldr	r2, [pc, #76]	; (8008074 <USB_CoreReset+0x64>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e01b      	b.n	8008066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	daf2      	bge.n	800801c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f043 0201 	orr.w	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a09      	ldr	r2, [pc, #36]	; (8008074 <USB_CoreReset+0x64>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d901      	bls.n	8008058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e006      	b.n	8008066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d0f0      	beq.n	8008046 <USB_CoreReset+0x36>

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	00030d40 	.word	0x00030d40

08008078 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8008080:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <si5351_Init+0x6c>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8008086:	21ff      	movs	r1, #255	; 0xff
 8008088:	2003      	movs	r0, #3
 800808a:	f000 fa0d 	bl	80084a8 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800808e:	2180      	movs	r1, #128	; 0x80
 8008090:	2010      	movs	r0, #16
 8008092:	f000 fa09 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8008096:	2180      	movs	r1, #128	; 0x80
 8008098:	2011      	movs	r0, #17
 800809a:	f000 fa05 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800809e:	2180      	movs	r1, #128	; 0x80
 80080a0:	2012      	movs	r0, #18
 80080a2:	f000 fa01 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 80080a6:	2180      	movs	r1, #128	; 0x80
 80080a8:	2013      	movs	r0, #19
 80080aa:	f000 f9fd 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	2014      	movs	r0, #20
 80080b2:	f000 f9f9 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	2015      	movs	r0, #21
 80080ba:	f000 f9f5 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 80080be:	2180      	movs	r1, #128	; 0x80
 80080c0:	2016      	movs	r0, #22
 80080c2:	f000 f9f1 	bl	80084a8 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 80080c6:	2180      	movs	r1, #128	; 0x80
 80080c8:	2017      	movs	r0, #23
 80080ca:	f000 f9ed 	bl	80084a8 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 80080ce:	23c0      	movs	r3, #192	; 0xc0
 80080d0:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	4619      	mov	r1, r3
 80080d6:	20b7      	movs	r0, #183	; 0xb7
 80080d8:	f000 f9e6 	bl	80084a8 <si5351_write>
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000454 	.word	0x20000454

080080e8 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08c      	sub	sp, #48	; 0x30
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	01da      	lsls	r2, r3, #7
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	01d9      	lsls	r1, r3, #7
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	fb91 f3f3 	sdiv	r3, r1, r3
 8008114:	4413      	add	r3, r2
 8008116:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800811a:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	01db      	lsls	r3, r3, #7
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	fb93 f2f2 	sdiv	r2, r3, r2
 8008126:	69f9      	ldr	r1, [r7, #28]
 8008128:	fb01 f202 	mul.w	r2, r1, r2
 800812c:	1a9b      	subs	r3, r3, r2
 800812e:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <si5351_SetupPLL+0x56>
 800813a:	231a      	movs	r3, #26
 800813c:	e000      	b.n	8008140 <si5351_SetupPLL+0x58>
 800813e:	2322      	movs	r3, #34	; 0x22
 8008140:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8008142:	7bf8      	ldrb	r0, [r7, #15]
 8008144:	2300      	movs	r3, #0
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	69b9      	ldr	r1, [r7, #24]
 8008152:	f000 f9d1 	bl	80084f8 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 8008156:	21a0      	movs	r1, #160	; 0xa0
 8008158:	20b1      	movs	r0, #177	; 0xb1
 800815a:	f000 f9a5 	bl	80084a8 <si5351_write>
}
 800815e:	bf00      	nop
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 8008166:	b580      	push	{r7, lr}
 8008168:	b08c      	sub	sp, #48	; 0x30
 800816a:	af02      	add	r7, sp, #8
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
 8008172:	460b      	mov	r3, r1
 8008174:	71bb      	strb	r3, [r7, #6]
 8008176:	4613      	mov	r3, r2
 8008178:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <si5351_SetupOutput+0x36>
        return 1;
 8008198:	2301      	movs	r3, #1
 800819a:	e08d      	b.n	80082b8 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <si5351_SetupOutput+0x54>
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b07      	cmp	r3, #7
 80081a8:	dd05      	ble.n	80081b6 <si5351_SetupOutput+0x50>
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d104      	bne.n	80081ba <si5351_SetupOutput+0x54>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 80081b6:	2302      	movs	r3, #2
 80081b8:	e07e      	b.n	80082b8 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d109      	bne.n	80081d4 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	623b      	str	r3, [r7, #32]
        P2 = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 80081c8:	2301      	movs	r3, #1
 80081ca:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 80081cc:	2303      	movs	r3, #3
 80081ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081d2:	e016      	b.n	8008202 <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	01da      	lsls	r2, r3, #7
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	01d9      	lsls	r1, r3, #7
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	fb91 f3f3 	sdiv	r3, r1, r3
 80081e2:	4413      	add	r3, r2
 80081e4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80081e8:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	01db      	lsls	r3, r3, #7
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	fb93 f2f2 	sdiv	r2, r3, r2
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	fb01 f202 	mul.w	r2, r1, r2
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d014      	beq.n	800823e <si5351_SetupOutput+0xd8>
 8008214:	2b02      	cmp	r3, #2
 8008216:	dc19      	bgt.n	800824c <si5351_SetupOutput+0xe6>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <si5351_SetupOutput+0xbc>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d007      	beq.n	8008230 <si5351_SetupOutput+0xca>
 8008220:	e014      	b.n	800824c <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8008222:	232a      	movs	r3, #42	; 0x2a
 8008224:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 8008226:	23a5      	movs	r3, #165	; 0xa5
 8008228:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800822a:	2310      	movs	r3, #16
 800822c:	757b      	strb	r3, [r7, #21]
        break;
 800822e:	e00d      	b.n	800824c <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8008230:	2332      	movs	r3, #50	; 0x32
 8008232:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 8008234:	23a6      	movs	r3, #166	; 0xa6
 8008236:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8008238:	2311      	movs	r3, #17
 800823a:	757b      	strb	r3, [r7, #21]
        break;
 800823c:	e006      	b.n	800824c <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800823e:	233a      	movs	r3, #58	; 0x3a
 8008240:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 8008242:	23a7      	movs	r3, #167	; 0xa7
 8008244:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 8008246:	2312      	movs	r3, #18
 8008248:	757b      	strb	r3, [r7, #21]
        break;
 800824a:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800824c:	797b      	ldrb	r3, [r7, #5]
 800824e:	f043 030c 	orr.w	r3, r3, #12
 8008252:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 8008254:	79bb      	ldrb	r3, [r7, #6]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d103      	bne.n	8008262 <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800825a:	7d3b      	ldrb	r3, [r7, #20]
 800825c:	f043 0320 	orr.w	r3, r3, #32
 8008260:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <si5351_SetupOutput+0x118>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <si5351_SetupOutput+0x110>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d103      	bne.n	800827e <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 8008276:	7d3b      	ldrb	r3, [r7, #20]
 8008278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827c:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800827e:	7d3a      	ldrb	r2, [r7, #20]
 8008280:	7d7b      	ldrb	r3, [r7, #21]
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f90f 	bl	80084a8 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	7c1b      	ldrb	r3, [r3, #16]
 800828e:	7df8      	ldrb	r0, [r7, #23]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	6a39      	ldr	r1, [r7, #32]
 800829e:	f000 f92b 	bl	80084f8 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 80082a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80082a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	7dbb      	ldrb	r3, [r7, #22]
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f8f9 	bl	80084a8 <si5351_write>

    return 0;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3728      	adds	r7, #40	; 0x28
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 80082c0:	b480      	push	{r7}
 80082c2:	b08f      	sub	sp, #60	; 0x3c
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80082d2:	da03      	bge.n	80082dc <si5351_Calc+0x1c>
 80082d4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e005      	b.n	80082e8 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a4f      	ldr	r2, [pc, #316]	; (800841c <si5351_Calc+0x15c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	dd01      	ble.n	80082e8 <si5351_Calc+0x28>
 80082e4:	4b4d      	ldr	r3, [pc, #308]	; (800841c <si5351_Calc+0x15c>)
 80082e6:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a4b      	ldr	r2, [pc, #300]	; (8008420 <si5351_Calc+0x160>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	dc06      	bgt.n	8008304 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	019b      	lsls	r3, r3, #6
 80082fa:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2206      	movs	r2, #6
 8008300:	741a      	strb	r2, [r3, #16]
 8008302:	e002      	b.n	800830a <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4a45      	ldr	r2, [pc, #276]	; (8008424 <si5351_Calc+0x164>)
 800830e:	fb82 1203 	smull	r1, r2, r2, r3
 8008312:	1492      	asrs	r2, r2, #18
 8008314:	17db      	asrs	r3, r3, #31
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	4a43      	ldr	r2, [pc, #268]	; (8008428 <si5351_Calc+0x168>)
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	fb02 f303 	mul.w	r3, r2, r3
 8008320:	4a42      	ldr	r2, [pc, #264]	; (800842c <si5351_Calc+0x16c>)
 8008322:	fb82 1203 	smull	r1, r2, r2, r3
 8008326:	1152      	asrs	r2, r2, #5
 8008328:	17db      	asrs	r3, r3, #31
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 8008332:	4b3f      	ldr	r3, [pc, #252]	; (8008430 <si5351_Calc+0x170>)
 8008334:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4a3e      	ldr	r2, [pc, #248]	; (8008434 <si5351_Calc+0x174>)
 800833a:	4293      	cmp	r3, r2
 800833c:	dc22      	bgt.n	8008384 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800833e:	2324      	movs	r3, #36	; 0x24
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800834a:	4b3b      	ldr	r3, [pc, #236]	; (8008438 <si5351_Calc+0x178>)
 800834c:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	fb92 f3f3 	sdiv	r3, r2, r3
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	151b      	asrs	r3, r3, #20
 800835c:	3301      	adds	r3, #1
 800835e:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	fb93 f2f2 	sdiv	r2, r3, r2
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	fb01 f202 	mul.w	r2, r1, r2
 800836e:	1a9a      	subs	r2, r3, r2
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	fb92 f3f3 	sdiv	r3, r2, r3
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008380:	623b      	str	r3, [r7, #32]
 8008382:	e032      	b.n	80083ea <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a2d      	ldr	r2, [pc, #180]	; (800843c <si5351_Calc+0x17c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	dd02      	ble.n	8008392 <si5351_Calc+0xd2>
            x = 4;
 800838c:	2304      	movs	r3, #4
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008390:	e008      	b.n	80083a4 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <si5351_Calc+0x180>)
 8008396:	4293      	cmp	r3, r2
 8008398:	dd02      	ble.n	80083a0 <si5351_Calc+0xe0>
            x = 6;
 800839a:	2306      	movs	r3, #6
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
 800839e:	e001      	b.n	80083a4 <si5351_Calc+0xe4>
        } else {
            x = 8;
 80083a0:	2308      	movs	r3, #8
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 80083a8:	2301      	movs	r3, #1
 80083aa:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	fb02 f303 	mul.w	r3, r2, r3
 80083b4:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80083be:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	151b      	asrs	r3, r3, #20
 80083c4:	3301      	adds	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	fb93 f2f2 	sdiv	r2, r3, r2
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	fb01 f202 	mul.w	r2, r1, r2
 80083d6:	1a9a      	subs	r2, r3, r2
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	fb92 f3f3 	sdiv	r3, r2, r3
 80083de:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ee:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f4:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083fa:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008400:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008406:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a3a      	ldr	r2, [r7, #32]
 800840c:	60da      	str	r2, [r3, #12]
}
 800840e:	bf00      	nop
 8008410:	373c      	adds	r7, #60	; 0x3c
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	09896800 	.word	0x09896800
 8008420:	000f423f 	.word	0x000f423f
 8008424:	431bde83 	.word	0x431bde83
 8008428:	20000454 	.word	0x20000454
 800842c:	51eb851f 	.word	0x51eb851f
 8008430:	017d7840 	.word	0x017d7840
 8008434:	04d3f63f 	.word	0x04d3f63f
 8008438:	35a4e900 	.word	0x35a4e900
 800843c:	08f0d17f 	.word	0x08f0d17f
 8008440:	05f5e0ff 	.word	0x05f5e0ff

08008444 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8008444:	b580      	push	{r7, lr}
 8008446:	b08c      	sub	sp, #48	; 0x30
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 8008450:	f107 0208 	add.w	r2, r7, #8
 8008454:	f107 031c 	add.w	r3, r7, #28
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff ff30 	bl	80082c0 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 8008460:	f107 031c 	add.w	r3, r7, #28
 8008464:	4619      	mov	r1, r3
 8008466:	2000      	movs	r0, #0
 8008468:	f7ff fe3e 	bl	80080e8 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	2100      	movs	r1, #0
 8008474:	9100      	str	r1, [sp, #0]
 8008476:	2100      	movs	r1, #0
 8008478:	2000      	movs	r0, #0
 800847a:	f7ff fe74 	bl	8008166 <si5351_SetupOutput>
}
 800847e:	bf00      	nop
 8008480:	3728      	adds	r7, #40	; 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	4603      	mov	r3, r0
 800848e:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	43db      	mvns	r3, r3
 8008494:	b2db      	uxtb	r3, r3
 8008496:	4619      	mov	r1, r3
 8008498:	2003      	movs	r0, #3
 800849a:	f000 f805 	bl	80084a8 <si5351_write>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af04      	add	r7, sp, #16
 80084ae:	4603      	mov	r3, r0
 80084b0:	460a      	mov	r2, r1
 80084b2:	71fb      	strb	r3, [r7, #7]
 80084b4:	4613      	mov	r3, r2
 80084b6:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 80084b8:	bf00      	nop
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295
 80084be:	2203      	movs	r2, #3
 80084c0:	21c0      	movs	r1, #192	; 0xc0
 80084c2:	480c      	ldr	r0, [pc, #48]	; (80084f4 <si5351_write+0x4c>)
 80084c4:	f7fa fb8e 	bl	8002be4 <HAL_I2C_IsDeviceReady>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1f5      	bne.n	80084ba <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	9302      	str	r3, [sp, #8]
 80084d8:	2301      	movs	r3, #1
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	1dbb      	adds	r3, r7, #6
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	2301      	movs	r3, #1
 80084e2:	21c0      	movs	r1, #192	; 0xc0
 80084e4:	4803      	ldr	r0, [pc, #12]	; (80084f4 <si5351_write+0x4c>)
 80084e6:	f7fa fa77 	bl	80029d8 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200002fc 	.word	0x200002fc

080084f8 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	121b      	asrs	r3, r3, #8
 800850c:	b2da      	uxtb	r2, r3
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7ff ffc8 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	3301      	adds	r3, #1
 800851c:	b2db      	uxtb	r3, r3
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ffbf 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	3302      	adds	r3, #2
 800852e:	b2d8      	uxtb	r0, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	141b      	asrs	r3, r3, #16
 8008534:	b25b      	sxtb	r3, r3
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	b25a      	sxtb	r2, r3
 800853c:	7e3b      	ldrb	r3, [r7, #24]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	b25b      	sxtb	r3, r3
 8008542:	f003 030c 	and.w	r3, r3, #12
 8008546:	b25b      	sxtb	r3, r3
 8008548:	4313      	orrs	r3, r2
 800854a:	b25a      	sxtb	r2, r3
 800854c:	7f3b      	ldrb	r3, [r7, #28]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	b25b      	sxtb	r3, r3
 8008552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008556:	b25b      	sxtb	r3, r3
 8008558:	4313      	orrs	r3, r2
 800855a:	b25b      	sxtb	r3, r3
 800855c:	b2db      	uxtb	r3, r3
 800855e:	4619      	mov	r1, r3
 8008560:	f7ff ffa2 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	3303      	adds	r3, #3
 8008568:	b2da      	uxtb	r2, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	121b      	asrs	r3, r3, #8
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f7ff ff98 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	3304      	adds	r3, #4
 800857c:	b2db      	uxtb	r3, r3
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	b2d2      	uxtb	r2, r2
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff ff8f 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	3305      	adds	r3, #5
 800858e:	b2d8      	uxtb	r0, r3
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	131b      	asrs	r3, r3, #12
 8008594:	b25b      	sxtb	r3, r3
 8008596:	f023 030f 	bic.w	r3, r3, #15
 800859a:	b25a      	sxtb	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	141b      	asrs	r3, r3, #16
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	f7ff ff7a 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	3306      	adds	r3, #6
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	121b      	asrs	r3, r3, #8
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7ff ff70 	bl	80084a8 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	3307      	adds	r3, #7
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	b2d2      	uxtb	r2, r2
 80085d2:	4611      	mov	r1, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff ff67 	bl	80084a8 <si5351_write>
}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80085f4:	f005 fa86 	bl	800db04 <USBD_static_malloc>
 80085f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	32b0      	adds	r2, #176	; 0xb0
 800860a:	2100      	movs	r1, #0
 800860c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008610:	2302      	movs	r3, #2
 8008612:	e0d4      	b.n	80087be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008614:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008618:	2100      	movs	r1, #0
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f005 fbf8 	bl	800de10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	32b0      	adds	r2, #176	; 0xb0
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	32b0      	adds	r2, #176	; 0xb0
 800863a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7c1b      	ldrb	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d138      	bne.n	80086be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800864c:	4b5e      	ldr	r3, [pc, #376]	; (80087c8 <USBD_CDC_Init+0x1e4>)
 800864e:	7819      	ldrb	r1, [r3, #0]
 8008650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008654:	2202      	movs	r2, #2
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f005 f931 	bl	800d8be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800865c:	4b5a      	ldr	r3, [pc, #360]	; (80087c8 <USBD_CDC_Init+0x1e4>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	3324      	adds	r3, #36	; 0x24
 8008672:	2201      	movs	r2, #1
 8008674:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008676:	4b55      	ldr	r3, [pc, #340]	; (80087cc <USBD_CDC_Init+0x1e8>)
 8008678:	7819      	ldrb	r1, [r3, #0]
 800867a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800867e:	2202      	movs	r2, #2
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f005 f91c 	bl	800d8be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008686:	4b51      	ldr	r3, [pc, #324]	; (80087cc <USBD_CDC_Init+0x1e8>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800869e:	2201      	movs	r2, #1
 80086a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086a2:	4b4b      	ldr	r3, [pc, #300]	; (80087d0 <USBD_CDC_Init+0x1ec>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	f003 020f 	and.w	r2, r3, #15
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	3326      	adds	r3, #38	; 0x26
 80086b8:	2210      	movs	r2, #16
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e035      	b.n	800872a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086be:	4b42      	ldr	r3, [pc, #264]	; (80087c8 <USBD_CDC_Init+0x1e4>)
 80086c0:	7819      	ldrb	r1, [r3, #0]
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	2202      	movs	r2, #2
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f005 f8f9 	bl	800d8be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086cc:	4b3e      	ldr	r3, [pc, #248]	; (80087c8 <USBD_CDC_Init+0x1e4>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	3324      	adds	r3, #36	; 0x24
 80086e2:	2201      	movs	r2, #1
 80086e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086e6:	4b39      	ldr	r3, [pc, #228]	; (80087cc <USBD_CDC_Init+0x1e8>)
 80086e8:	7819      	ldrb	r1, [r3, #0]
 80086ea:	2340      	movs	r3, #64	; 0x40
 80086ec:	2202      	movs	r2, #2
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f005 f8e5 	bl	800d8be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086f4:	4b35      	ldr	r3, [pc, #212]	; (80087cc <USBD_CDC_Init+0x1e8>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	440b      	add	r3, r1
 8008708:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800870c:	2201      	movs	r2, #1
 800870e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008710:	4b2f      	ldr	r3, [pc, #188]	; (80087d0 <USBD_CDC_Init+0x1ec>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	3326      	adds	r3, #38	; 0x26
 8008726:	2210      	movs	r2, #16
 8008728:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800872a:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <USBD_CDC_Init+0x1ec>)
 800872c:	7819      	ldrb	r1, [r3, #0]
 800872e:	2308      	movs	r3, #8
 8008730:	2203      	movs	r2, #3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f005 f8c3 	bl	800d8be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008738:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <USBD_CDC_Init+0x1ec>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3324      	adds	r3, #36	; 0x24
 800874e:	2201      	movs	r2, #1
 8008750:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	33b0      	adds	r3, #176	; 0xb0
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008788:	2302      	movs	r3, #2
 800878a:	e018      	b.n	80087be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7c1b      	ldrb	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008794:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <USBD_CDC_Init+0x1e8>)
 8008796:	7819      	ldrb	r1, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800879e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f005 f97a 	bl	800da9c <USBD_LL_PrepareReceive>
 80087a8:	e008      	b.n	80087bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087aa:	4b08      	ldr	r3, [pc, #32]	; (80087cc <USBD_CDC_Init+0x1e8>)
 80087ac:	7819      	ldrb	r1, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f005 f970 	bl	800da9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	200001e3 	.word	0x200001e3
 80087cc:	200001e4 	.word	0x200001e4
 80087d0:	200001e5 	.word	0x200001e5

080087d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087e0:	4b3a      	ldr	r3, [pc, #232]	; (80088cc <USBD_CDC_DeInit+0xf8>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f005 f88f 	bl	800d90a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80087ec:	4b37      	ldr	r3, [pc, #220]	; (80088cc <USBD_CDC_DeInit+0xf8>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 020f 	and.w	r2, r3, #15
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	3324      	adds	r3, #36	; 0x24
 8008802:	2200      	movs	r2, #0
 8008804:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008806:	4b32      	ldr	r3, [pc, #200]	; (80088d0 <USBD_CDC_DeInit+0xfc>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f005 f87c 	bl	800d90a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008812:	4b2f      	ldr	r3, [pc, #188]	; (80088d0 <USBD_CDC_DeInit+0xfc>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f003 020f 	and.w	r2, r3, #15
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800882a:	2200      	movs	r2, #0
 800882c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800882e:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <USBD_CDC_DeInit+0x100>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f005 f868 	bl	800d90a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800883a:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <USBD_CDC_DeInit+0x100>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 020f 	and.w	r2, r3, #15
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	2200      	movs	r2, #0
 8008852:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008854:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <USBD_CDC_DeInit+0x100>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3326      	adds	r3, #38	; 0x26
 800886a:	2200      	movs	r2, #0
 800886c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	32b0      	adds	r2, #176	; 0xb0
 8008878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01f      	beq.n	80088c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	33b0      	adds	r3, #176	; 0xb0
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	32b0      	adds	r2, #176	; 0xb0
 800889e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f005 f93c 	bl	800db20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32b0      	adds	r2, #176	; 0xb0
 80088b2:	2100      	movs	r1, #0
 80088b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200001e3 	.word	0x200001e3
 80088d0:	200001e4 	.word	0x200001e4
 80088d4:	200001e5 	.word	0x200001e5

080088d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	32b0      	adds	r2, #176	; 0xb0
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	e0bf      	b.n	8008a88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008910:	2b00      	cmp	r3, #0
 8008912:	d050      	beq.n	80089b6 <USBD_CDC_Setup+0xde>
 8008914:	2b20      	cmp	r3, #32
 8008916:	f040 80af 	bne.w	8008a78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	88db      	ldrh	r3, [r3, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d03a      	beq.n	8008998 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	b25b      	sxtb	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	da1b      	bge.n	8008964 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	33b0      	adds	r3, #176	; 0xb0
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008942:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	88d2      	ldrh	r2, [r2, #6]
 8008948:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	2b07      	cmp	r3, #7
 8008950:	bf28      	it	cs
 8008952:	2307      	movcs	r3, #7
 8008954:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	89fa      	ldrh	r2, [r7, #14]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fda5 	bl	800a4ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008962:	e090      	b.n	8008a86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	785a      	ldrb	r2, [r3, #1]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b3f      	cmp	r3, #63	; 0x3f
 8008974:	d803      	bhi.n	800897e <USBD_CDC_Setup+0xa6>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	88db      	ldrh	r3, [r3, #6]
 800897a:	b2da      	uxtb	r2, r3
 800897c:	e000      	b.n	8008980 <USBD_CDC_Setup+0xa8>
 800897e:	2240      	movs	r2, #64	; 0x40
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008986:	6939      	ldr	r1, [r7, #16]
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800898e:	461a      	mov	r2, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fdb7 	bl	800a504 <USBD_CtlPrepareRx>
      break;
 8008996:	e076      	b.n	8008a86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	33b0      	adds	r3, #176	; 0xb0
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	7850      	ldrb	r0, [r2, #1]
 80089ae:	2200      	movs	r2, #0
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	4798      	blx	r3
      break;
 80089b4:	e067      	b.n	8008a86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b0b      	cmp	r3, #11
 80089bc:	d851      	bhi.n	8008a62 <USBD_CDC_Setup+0x18a>
 80089be:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <USBD_CDC_Setup+0xec>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089f5 	.word	0x080089f5
 80089c8:	08008a71 	.word	0x08008a71
 80089cc:	08008a63 	.word	0x08008a63
 80089d0:	08008a63 	.word	0x08008a63
 80089d4:	08008a63 	.word	0x08008a63
 80089d8:	08008a63 	.word	0x08008a63
 80089dc:	08008a63 	.word	0x08008a63
 80089e0:	08008a63 	.word	0x08008a63
 80089e4:	08008a63 	.word	0x08008a63
 80089e8:	08008a63 	.word	0x08008a63
 80089ec:	08008a1f 	.word	0x08008a1f
 80089f0:	08008a49 	.word	0x08008a49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d107      	bne.n	8008a10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a00:	f107 030a 	add.w	r3, r7, #10
 8008a04:	2202      	movs	r2, #2
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fd4f 	bl	800a4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a0e:	e032      	b.n	8008a76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fcd9 	bl	800a3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a1c:	e02b      	b.n	8008a76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d107      	bne.n	8008a3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a2a:	f107 030d 	add.w	r3, r7, #13
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 fd3a 	bl	800a4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a38:	e01d      	b.n	8008a76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 fcc4 	bl	800a3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	75fb      	strb	r3, [r7, #23]
          break;
 8008a46:	e016      	b.n	8008a76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d00f      	beq.n	8008a74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fcb7 	bl	800a3ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a60:	e008      	b.n	8008a74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 fcb0 	bl	800a3ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a6e:	e002      	b.n	8008a76 <USBD_CDC_Setup+0x19e>
          break;
 8008a70:	bf00      	nop
 8008a72:	e008      	b.n	8008a86 <USBD_CDC_Setup+0x1ae>
          break;
 8008a74:	bf00      	nop
      }
      break;
 8008a76:	e006      	b.n	8008a86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 fca5 	bl	800a3ca <USBD_CtlError>
      ret = USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	75fb      	strb	r3, [r7, #23]
      break;
 8008a84:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32b0      	adds	r2, #176	; 0xb0
 8008aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e065      	b.n	8008b86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	32b0      	adds	r2, #176	; 0xb0
 8008ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	f003 020f 	and.w	r2, r3, #15
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	3318      	adds	r3, #24
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02f      	beq.n	8008b44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	f003 020f 	and.w	r2, r3, #15
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	3318      	adds	r3, #24
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	f003 010f 	and.w	r1, r3, #15
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	460b      	mov	r3, r1
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	440b      	add	r3, r1
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4403      	add	r3, r0
 8008b0c:	3348      	adds	r3, #72	; 0x48
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d112      	bne.n	8008b44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	3318      	adds	r3, #24
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b36:	78f9      	ldrb	r1, [r7, #3]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f004 ff8c 	bl	800da5a <USBD_LL_Transmit>
 8008b42:	e01f      	b.n	8008b84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	33b0      	adds	r3, #176	; 0xb0
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d010      	beq.n	8008b84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	33b0      	adds	r3, #176	; 0xb0
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008b80:	78fa      	ldrb	r2, [r7, #3]
 8008b82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32b0      	adds	r2, #176	; 0xb0
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	32b0      	adds	r2, #176	; 0xb0
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e01a      	b.n	8008bf6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f004 ff8a 	bl	800dade <USBD_LL_GetRxDataSize>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	33b0      	adds	r3, #176	; 0xb0
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	32b0      	adds	r2, #176	; 0xb0
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e025      	b.n	8008c6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	33b0      	adds	r3, #176	; 0xb0
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01a      	beq.n	8008c6a <USBD_CDC_EP0_RxReady+0x6c>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c3a:	2bff      	cmp	r3, #255	; 0xff
 8008c3c:	d015      	beq.n	8008c6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	33b0      	adds	r3, #176	; 0xb0
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c5e:	b292      	uxth	r2, r2
 8008c60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	22ff      	movs	r2, #255	; 0xff
 8008c66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c7c:	2182      	movs	r1, #130	; 0x82
 8008c7e:	4818      	ldr	r0, [pc, #96]	; (8008ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c80:	f000 fd6b 	bl	800975a <USBD_GetEpDesc>
 8008c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c86:	2101      	movs	r1, #1
 8008c88:	4815      	ldr	r0, [pc, #84]	; (8008ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c8a:	f000 fd66 	bl	800975a <USBD_GetEpDesc>
 8008c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c90:	2181      	movs	r1, #129	; 0x81
 8008c92:	4813      	ldr	r0, [pc, #76]	; (8008ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c94:	f000 fd61 	bl	800975a <USBD_GetEpDesc>
 8008c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2210      	movs	r2, #16
 8008ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d006      	beq.n	8008cba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb4:	711a      	strb	r2, [r3, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d006      	beq.n	8008cce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc8:	711a      	strb	r2, [r3, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2243      	movs	r2, #67	; 0x43
 8008cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	200001a0 	.word	0x200001a0

08008ce4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cec:	2182      	movs	r1, #130	; 0x82
 8008cee:	4818      	ldr	r0, [pc, #96]	; (8008d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cf0:	f000 fd33 	bl	800975a <USBD_GetEpDesc>
 8008cf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4815      	ldr	r0, [pc, #84]	; (8008d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cfa:	f000 fd2e 	bl	800975a <USBD_GetEpDesc>
 8008cfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d00:	2181      	movs	r1, #129	; 0x81
 8008d02:	4813      	ldr	r0, [pc, #76]	; (8008d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d04:	f000 fd29 	bl	800975a <USBD_GetEpDesc>
 8008d08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2210      	movs	r2, #16
 8008d14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d006      	beq.n	8008d2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	711a      	strb	r2, [r3, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f042 0202 	orr.w	r2, r2, #2
 8008d28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d006      	beq.n	8008d3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	711a      	strb	r2, [r3, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f042 0202 	orr.w	r2, r2, #2
 8008d3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2243      	movs	r2, #67	; 0x43
 8008d42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200001a0 	.word	0x200001a0

08008d54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d5c:	2182      	movs	r1, #130	; 0x82
 8008d5e:	4818      	ldr	r0, [pc, #96]	; (8008dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d60:	f000 fcfb 	bl	800975a <USBD_GetEpDesc>
 8008d64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d66:	2101      	movs	r1, #1
 8008d68:	4815      	ldr	r0, [pc, #84]	; (8008dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d6a:	f000 fcf6 	bl	800975a <USBD_GetEpDesc>
 8008d6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d70:	2181      	movs	r1, #129	; 0x81
 8008d72:	4813      	ldr	r0, [pc, #76]	; (8008dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d74:	f000 fcf1 	bl	800975a <USBD_GetEpDesc>
 8008d78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2210      	movs	r2, #16
 8008d84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d006      	beq.n	8008d9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d94:	711a      	strb	r2, [r3, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d006      	beq.n	8008dae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008da8:	711a      	strb	r2, [r3, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2243      	movs	r2, #67	; 0x43
 8008db2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008db4:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200001a0 	.word	0x200001a0

08008dc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	220a      	movs	r2, #10
 8008dd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008dd2:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	2000015c 	.word	0x2000015c

08008de4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e009      	b.n	8008e0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	33b0      	adds	r3, #176	; 0xb0
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	32b0      	adds	r2, #176	; 0xb0
 8008e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e008      	b.n	8008e50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	32b0      	adds	r2, #176	; 0xb0
 8008e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e004      	b.n	8008e8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	32b0      	adds	r2, #176	; 0xb0
 8008eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32b0      	adds	r2, #176	; 0xb0
 8008ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e025      	b.n	8008f16 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11f      	bne.n	8008f14 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008edc:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <USBD_CDC_TransmitPacket+0x88>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 020f 	and.w	r2, r3, #15
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4403      	add	r3, r0
 8008ef6:	3318      	adds	r3, #24
 8008ef8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <USBD_CDC_TransmitPacket+0x88>)
 8008efc:	7819      	ldrb	r1, [r3, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f004 fda5 	bl	800da5a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200001e3 	.word	0x200001e3

08008f24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	32b0      	adds	r2, #176	; 0xb0
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	32b0      	adds	r2, #176	; 0xb0
 8008f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e018      	b.n	8008f84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7c1b      	ldrb	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <USBD_CDC_ReceivePacket+0x68>)
 8008f5c:	7819      	ldrb	r1, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f004 fd97 	bl	800da9c <USBD_LL_PrepareReceive>
 8008f6e:	e008      	b.n	8008f82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <USBD_CDC_ReceivePacket+0x68>)
 8008f72:	7819      	ldrb	r1, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f7a:	2340      	movs	r3, #64	; 0x40
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f004 fd8d 	bl	800da9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200001e4 	.word	0x200001e4

08008f90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008fa4:	4817      	ldr	r0, [pc, #92]	; (8009004 <USBD_Init+0x74>)
 8008fa6:	f005 f81b 	bl	800dfe0 <iprintf>
 8008faa:	4817      	ldr	r0, [pc, #92]	; (8009008 <USBD_Init+0x78>)
 8008fac:	f005 f818 	bl	800dfe0 <iprintf>
 8008fb0:	200a      	movs	r0, #10
 8008fb2:	f005 f82d 	bl	800e010 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e01f      	b.n	8008ffa <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	79fa      	ldrb	r2, [r7, #7]
 8008fec:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f004 fbfe 	bl	800d7f0 <USBD_LL_Init>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	0800f378 	.word	0x0800f378
 8009008:	0800f380 	.word	0x0800f380

0800900c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009020:	481a      	ldr	r0, [pc, #104]	; (800908c <USBD_RegisterClass+0x80>)
 8009022:	f004 ffdd 	bl	800dfe0 <iprintf>
 8009026:	481a      	ldr	r0, [pc, #104]	; (8009090 <USBD_RegisterClass+0x84>)
 8009028:	f004 ffda 	bl	800dfe0 <iprintf>
 800902c:	200a      	movs	r0, #10
 800902e:	f004 ffef 	bl	800e010 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009032:	2303      	movs	r3, #3
 8009034:	e025      	b.n	8009082 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32ae      	adds	r2, #174	; 0xae
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00f      	beq.n	8009072 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	32ae      	adds	r2, #174	; 0xae
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	f107 020e 	add.w	r2, r7, #14
 8009066:	4610      	mov	r0, r2
 8009068:	4798      	blx	r3
 800906a:	4602      	mov	r2, r0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	0800f378 	.word	0x0800f378
 8009090:	0800f398 	.word	0x0800f398

08009094 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f004 fbf3 	bl	800d888 <USBD_LL_Start>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	4611      	mov	r1, r2
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	4611      	mov	r1, r2
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009120:	2303      	movs	r3, #3
 8009122:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	4618      	mov	r0, r3
 8009142:	f001 f908 	bl	800a356 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009154:	461a      	mov	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	2b02      	cmp	r3, #2
 8009168:	d01a      	beq.n	80091a0 <USBD_LL_SetupStage+0x72>
 800916a:	2b02      	cmp	r3, #2
 800916c:	d822      	bhi.n	80091b4 <USBD_LL_SetupStage+0x86>
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <USBD_LL_SetupStage+0x4a>
 8009172:	2b01      	cmp	r3, #1
 8009174:	d00a      	beq.n	800918c <USBD_LL_SetupStage+0x5e>
 8009176:	e01d      	b.n	80091b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fb5f 	bl	8009844 <USBD_StdDevReq>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
      break;
 800918a:	e020      	b.n	80091ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fbc7 	bl	8009928 <USBD_StdItfReq>
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]
      break;
 800919e:	e016      	b.n	80091ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fc29 	bl	8009a00 <USBD_StdEPReq>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
      break;
 80091b2:	e00c      	b.n	80091ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f004 fbc0 	bl	800d948 <USBD_LL_StallEP>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]
      break;
 80091cc:	bf00      	nop
  }

  return ret;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	460b      	mov	r3, r1
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d16e      	bne.n	80092ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091fe:	2b03      	cmp	r3, #3
 8009200:	f040 8098 	bne.w	8009334 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	429a      	cmp	r2, r3
 800920e:	d913      	bls.n	8009238 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	1ad2      	subs	r2, r2, r3
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	4293      	cmp	r3, r2
 8009228:	bf28      	it	cs
 800922a:	4613      	movcs	r3, r2
 800922c:	461a      	mov	r2, r3
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f001 f984 	bl	800a53e <USBD_CtlContinueRx>
 8009236:	e07d      	b.n	8009334 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800923e:	f003 031f 	and.w	r3, r3, #31
 8009242:	2b02      	cmp	r3, #2
 8009244:	d014      	beq.n	8009270 <USBD_LL_DataOutStage+0x98>
 8009246:	2b02      	cmp	r3, #2
 8009248:	d81d      	bhi.n	8009286 <USBD_LL_DataOutStage+0xae>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <USBD_LL_DataOutStage+0x7c>
 800924e:	2b01      	cmp	r3, #1
 8009250:	d003      	beq.n	800925a <USBD_LL_DataOutStage+0x82>
 8009252:	e018      	b.n	8009286 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	75bb      	strb	r3, [r7, #22]
            break;
 8009258:	e018      	b.n	800928c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009260:	b2db      	uxtb	r3, r3
 8009262:	4619      	mov	r1, r3
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fa5e 	bl	8009726 <USBD_CoreFindIF>
 800926a:	4603      	mov	r3, r0
 800926c:	75bb      	strb	r3, [r7, #22]
            break;
 800926e:	e00d      	b.n	800928c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009276:	b2db      	uxtb	r3, r3
 8009278:	4619      	mov	r1, r3
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fa60 	bl	8009740 <USBD_CoreFindEP>
 8009280:	4603      	mov	r3, r0
 8009282:	75bb      	strb	r3, [r7, #22]
            break;
 8009284:	e002      	b.n	800928c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	75bb      	strb	r3, [r7, #22]
            break;
 800928a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800928c:	7dbb      	ldrb	r3, [r7, #22]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d119      	bne.n	80092c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b03      	cmp	r3, #3
 800929c:	d113      	bne.n	80092c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800929e:	7dba      	ldrb	r2, [r7, #22]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	32ae      	adds	r2, #174	; 0xae
 80092a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00b      	beq.n	80092c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80092ae:	7dba      	ldrb	r2, [r7, #22]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80092b6:	7dba      	ldrb	r2, [r7, #22]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	32ae      	adds	r2, #174	; 0xae
 80092bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f001 f94a 	bl	800a560 <USBD_CtlSendStatus>
 80092cc:	e032      	b.n	8009334 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fa31 	bl	8009740 <USBD_CoreFindEP>
 80092de:	4603      	mov	r3, r0
 80092e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092e2:	7dbb      	ldrb	r3, [r7, #22]
 80092e4:	2bff      	cmp	r3, #255	; 0xff
 80092e6:	d025      	beq.n	8009334 <USBD_LL_DataOutStage+0x15c>
 80092e8:	7dbb      	ldrb	r3, [r7, #22]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d122      	bne.n	8009334 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d117      	bne.n	800932a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80092fa:	7dba      	ldrb	r2, [r7, #22]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	32ae      	adds	r2, #174	; 0xae
 8009300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00f      	beq.n	800932a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800930a:	7dba      	ldrb	r2, [r7, #22]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009312:	7dba      	ldrb	r2, [r7, #22]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	32ae      	adds	r2, #174	; 0xae
 8009318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	7afa      	ldrb	r2, [r7, #11]
 8009320:	4611      	mov	r1, r2
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	4798      	blx	r3
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	e000      	b.n	8009336 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b086      	sub	sp, #24
 8009342:	af00      	add	r7, sp, #0
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	460b      	mov	r3, r1
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d16f      	bne.n	8009432 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3314      	adds	r3, #20
 8009356:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800935e:	2b02      	cmp	r3, #2
 8009360:	d15a      	bne.n	8009418 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	429a      	cmp	r2, r3
 800936c:	d914      	bls.n	8009398 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	1ad2      	subs	r2, r2, r3
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	461a      	mov	r2, r3
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f001 f8ac 	bl	800a4e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f004 fb83 	bl	800da9c <USBD_LL_PrepareReceive>
 8009396:	e03f      	b.n	8009418 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d11c      	bne.n	80093de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d316      	bcc.n	80093de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d20f      	bcs.n	80093de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093be:	2200      	movs	r2, #0
 80093c0:	2100      	movs	r1, #0
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f001 f88d 	bl	800a4e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093d0:	2300      	movs	r3, #0
 80093d2:	2200      	movs	r2, #0
 80093d4:	2100      	movs	r1, #0
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f004 fb60 	bl	800da9c <USBD_LL_PrepareReceive>
 80093dc:	e01c      	b.n	8009418 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d10f      	bne.n	800940a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d009      	beq.n	800940a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f004 fa9b 	bl	800d948 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f001 f8b7 	bl	800a586 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d03a      	beq.n	8009498 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fe42 	bl	80090ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009430:	e032      	b.n	8009498 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009432:	7afb      	ldrb	r3, [r7, #11]
 8009434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009438:	b2db      	uxtb	r3, r3
 800943a:	4619      	mov	r1, r3
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f97f 	bl	8009740 <USBD_CoreFindEP>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	2bff      	cmp	r3, #255	; 0xff
 800944a:	d025      	beq.n	8009498 <USBD_LL_DataInStage+0x15a>
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d122      	bne.n	8009498 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b03      	cmp	r3, #3
 800945c:	d11c      	bne.n	8009498 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800945e:	7dfa      	ldrb	r2, [r7, #23]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	32ae      	adds	r2, #174	; 0xae
 8009464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d014      	beq.n	8009498 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800946e:	7dfa      	ldrb	r2, [r7, #23]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009476:	7dfa      	ldrb	r2, [r7, #23]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	32ae      	adds	r2, #174	; 0xae
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	7afa      	ldrb	r2, [r7, #11]
 8009484:	4611      	mov	r1, r2
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800948e:	7dbb      	ldrb	r3, [r7, #22]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009494:	7dbb      	ldrb	r3, [r7, #22]
 8009496:	e000      	b.n	800949a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d014      	beq.n	8009508 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00e      	beq.n	8009508 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6852      	ldr	r2, [r2, #4]
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	4611      	mov	r1, r2
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f004 f9d5 	bl	800d8be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2240      	movs	r2, #64	; 0x40
 8009520:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009524:	2340      	movs	r3, #64	; 0x40
 8009526:	2200      	movs	r2, #0
 8009528:	2180      	movs	r1, #128	; 0x80
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f004 f9c7 	bl	800d8be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2240      	movs	r2, #64	; 0x40
 800953a:	621a      	str	r2, [r3, #32]

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009574:	b2da      	uxtb	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2204      	movs	r2, #4
 8009580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d106      	bne.n	80095b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d110      	bne.n	80095f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	32ae      	adds	r2, #174	; 0xae
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	e01c      	b.n	800965e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b03      	cmp	r3, #3
 800962e:	d115      	bne.n	800965c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32ae      	adds	r2, #174	; 0xae
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32ae      	adds	r2, #174	; 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4611      	mov	r1, r2
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	32ae      	adds	r2, #174	; 0xae
 800967c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	e01c      	b.n	80096c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b03      	cmp	r3, #3
 8009692:	d115      	bne.n	80096c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	32ae      	adds	r2, #174	; 0xae
 800969e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	32ae      	adds	r2, #174	; 0xae
 80096b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	4611      	mov	r1, r2
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00e      	beq.n	800971c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	6852      	ldr	r2, [r2, #4]
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	4611      	mov	r1, r2
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009718:	2303      	movs	r3, #3
 800971a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009732:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800974c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	885b      	ldrh	r3, [r3, #2]
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	429a      	cmp	r2, r3
 8009780:	d920      	bls.n	80097c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800978a:	e013      	b.n	80097b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800978c:	f107 030a 	add.w	r3, r7, #10
 8009790:	4619      	mov	r1, r3
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f000 f81b 	bl	80097ce <USBD_GetNextDesc>
 8009798:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b05      	cmp	r3, #5
 80097a0:	d108      	bne.n	80097b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	789b      	ldrb	r3, [r3, #2]
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d008      	beq.n	80097c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	885b      	ldrh	r3, [r3, #2]
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	897b      	ldrh	r3, [r7, #10]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d8e5      	bhi.n	800978c <USBD_GetEpDesc+0x32>
 80097c0:	e000      	b.n	80097c4 <USBD_GetEpDesc+0x6a>
          break;
 80097c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80097c4:	693b      	ldr	r3, [r7, #16]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	881a      	ldrh	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	4413      	add	r3, r2
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097fa:	68fb      	ldr	r3, [r7, #12]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	3301      	adds	r3, #1
 800981e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009826:	8a3b      	ldrh	r3, [r7, #16]
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b21a      	sxth	r2, r3
 800982c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009830:	4313      	orrs	r3, r2
 8009832:	b21b      	sxth	r3, r3
 8009834:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009836:	89fb      	ldrh	r3, [r7, #14]
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800985a:	2b40      	cmp	r3, #64	; 0x40
 800985c:	d005      	beq.n	800986a <USBD_StdDevReq+0x26>
 800985e:	2b40      	cmp	r3, #64	; 0x40
 8009860:	d857      	bhi.n	8009912 <USBD_StdDevReq+0xce>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00f      	beq.n	8009886 <USBD_StdDevReq+0x42>
 8009866:	2b20      	cmp	r3, #32
 8009868:	d153      	bne.n	8009912 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	32ae      	adds	r2, #174	; 0xae
 8009874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
      break;
 8009884:	e04a      	b.n	800991c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b09      	cmp	r3, #9
 800988c:	d83b      	bhi.n	8009906 <USBD_StdDevReq+0xc2>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <USBD_StdDevReq+0x50>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098e9 	.word	0x080098e9
 8009898:	080098fd 	.word	0x080098fd
 800989c:	08009907 	.word	0x08009907
 80098a0:	080098f3 	.word	0x080098f3
 80098a4:	08009907 	.word	0x08009907
 80098a8:	080098c7 	.word	0x080098c7
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	08009907 	.word	0x08009907
 80098b4:	080098df 	.word	0x080098df
 80098b8:	080098d1 	.word	0x080098d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa3c 	bl	8009d3c <USBD_GetDescriptor>
          break;
 80098c4:	e024      	b.n	8009910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fba1 	bl	800a010 <USBD_SetAddress>
          break;
 80098ce:	e01f      	b.n	8009910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fbe0 	bl	800a098 <USBD_SetConfig>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
          break;
 80098dc:	e018      	b.n	8009910 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fc83 	bl	800a1ec <USBD_GetConfig>
          break;
 80098e6:	e013      	b.n	8009910 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fcb4 	bl	800a258 <USBD_GetStatus>
          break;
 80098f0:	e00e      	b.n	8009910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fce3 	bl	800a2c0 <USBD_SetFeature>
          break;
 80098fa:	e009      	b.n	8009910 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fd07 	bl	800a312 <USBD_ClrFeature>
          break;
 8009904:	e004      	b.n	8009910 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fd5e 	bl	800a3ca <USBD_CtlError>
          break;
 800990e:	bf00      	nop
      }
      break;
 8009910:	e004      	b.n	800991c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fd58 	bl	800a3ca <USBD_CtlError>
      break;
 800991a:	bf00      	nop
  }

  return ret;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop

08009928 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d005      	beq.n	800994e <USBD_StdItfReq+0x26>
 8009942:	2b40      	cmp	r3, #64	; 0x40
 8009944:	d852      	bhi.n	80099ec <USBD_StdItfReq+0xc4>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <USBD_StdItfReq+0x26>
 800994a:	2b20      	cmp	r3, #32
 800994c:	d14e      	bne.n	80099ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009954:	b2db      	uxtb	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	2b02      	cmp	r3, #2
 800995a:	d840      	bhi.n	80099de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	889b      	ldrh	r3, [r3, #4]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b01      	cmp	r3, #1
 8009964:	d836      	bhi.n	80099d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	889b      	ldrh	r3, [r3, #4]
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff fed9 	bl	8009726 <USBD_CoreFindIF>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2bff      	cmp	r3, #255	; 0xff
 800997c:	d01d      	beq.n	80099ba <USBD_StdItfReq+0x92>
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d11a      	bne.n	80099ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009984:	7bba      	ldrb	r2, [r7, #14]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	32ae      	adds	r2, #174	; 0xae
 800998a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00f      	beq.n	80099b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009994:	7bba      	ldrb	r2, [r7, #14]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800999c:	7bba      	ldrb	r2, [r7, #14]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32ae      	adds	r2, #174	; 0xae
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4798      	blx	r3
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099b2:	e004      	b.n	80099be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80099b4:	2303      	movs	r3, #3
 80099b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099b8:	e001      	b.n	80099be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88db      	ldrh	r3, [r3, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d110      	bne.n	80099e8 <USBD_StdItfReq+0xc0>
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10d      	bne.n	80099e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fdc7 	bl	800a560 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099d2:	e009      	b.n	80099e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fcf7 	bl	800a3ca <USBD_CtlError>
          break;
 80099dc:	e004      	b.n	80099e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fcf2 	bl	800a3ca <USBD_CtlError>
          break;
 80099e6:	e000      	b.n	80099ea <USBD_StdItfReq+0xc2>
          break;
 80099e8:	bf00      	nop
      }
      break;
 80099ea:	e004      	b.n	80099f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fceb 	bl	800a3ca <USBD_CtlError>
      break;
 80099f4:	bf00      	nop
  }

  return ret;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	889b      	ldrh	r3, [r3, #4]
 8009a12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a1c:	2b40      	cmp	r3, #64	; 0x40
 8009a1e:	d007      	beq.n	8009a30 <USBD_StdEPReq+0x30>
 8009a20:	2b40      	cmp	r3, #64	; 0x40
 8009a22:	f200 817f 	bhi.w	8009d24 <USBD_StdEPReq+0x324>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d02a      	beq.n	8009a80 <USBD_StdEPReq+0x80>
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	f040 817a 	bne.w	8009d24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff fe83 	bl	8009740 <USBD_CoreFindEP>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a3e:	7b7b      	ldrb	r3, [r7, #13]
 8009a40:	2bff      	cmp	r3, #255	; 0xff
 8009a42:	f000 8174 	beq.w	8009d2e <USBD_StdEPReq+0x32e>
 8009a46:	7b7b      	ldrb	r3, [r7, #13]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 8170 	bne.w	8009d2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a4e:	7b7a      	ldrb	r2, [r7, #13]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a56:	7b7a      	ldrb	r2, [r7, #13]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	32ae      	adds	r2, #174	; 0xae
 8009a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 8163 	beq.w	8009d2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a68:	7b7a      	ldrb	r2, [r7, #13]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	32ae      	adds	r2, #174	; 0xae
 8009a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a7e:	e156      	b.n	8009d2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	785b      	ldrb	r3, [r3, #1]
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d008      	beq.n	8009a9a <USBD_StdEPReq+0x9a>
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	f300 8145 	bgt.w	8009d18 <USBD_StdEPReq+0x318>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 809b 	beq.w	8009bca <USBD_StdEPReq+0x1ca>
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d03c      	beq.n	8009b12 <USBD_StdEPReq+0x112>
 8009a98:	e13e      	b.n	8009d18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d002      	beq.n	8009aac <USBD_StdEPReq+0xac>
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d016      	beq.n	8009ad8 <USBD_StdEPReq+0xd8>
 8009aaa:	e02c      	b.n	8009b06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00d      	beq.n	8009ace <USBD_StdEPReq+0xce>
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b80      	cmp	r3, #128	; 0x80
 8009ab6:	d00a      	beq.n	8009ace <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f003 ff43 	bl	800d948 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ac2:	2180      	movs	r1, #128	; 0x80
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f003 ff3f 	bl	800d948 <USBD_LL_StallEP>
 8009aca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009acc:	e020      	b.n	8009b10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fc7a 	bl	800a3ca <USBD_CtlError>
              break;
 8009ad6:	e01b      	b.n	8009b10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	885b      	ldrh	r3, [r3, #2]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10e      	bne.n	8009afe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <USBD_StdEPReq+0xfe>
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b80      	cmp	r3, #128	; 0x80
 8009aea:	d008      	beq.n	8009afe <USBD_StdEPReq+0xfe>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	88db      	ldrh	r3, [r3, #6]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f003 ff25 	bl	800d948 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fd2e 	bl	800a560 <USBD_CtlSendStatus>

              break;
 8009b04:	e004      	b.n	8009b10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fc5e 	bl	800a3ca <USBD_CtlError>
              break;
 8009b0e:	bf00      	nop
          }
          break;
 8009b10:	e107      	b.n	8009d22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d002      	beq.n	8009b24 <USBD_StdEPReq+0x124>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d016      	beq.n	8009b50 <USBD_StdEPReq+0x150>
 8009b22:	e04b      	b.n	8009bbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00d      	beq.n	8009b46 <USBD_StdEPReq+0x146>
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d00a      	beq.n	8009b46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f003 ff07 	bl	800d948 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b3a:	2180      	movs	r1, #128	; 0x80
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f003 ff03 	bl	800d948 <USBD_LL_StallEP>
 8009b42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b44:	e040      	b.n	8009bc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fc3e 	bl	800a3ca <USBD_CtlError>
              break;
 8009b4e:	e03b      	b.n	8009bc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	885b      	ldrh	r3, [r3, #2]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d136      	bne.n	8009bc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f003 ff0d 	bl	800d986 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fcf7 	bl	800a560 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff fde2 	bl	8009740 <USBD_CoreFindEP>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b80:	7b7b      	ldrb	r3, [r7, #13]
 8009b82:	2bff      	cmp	r3, #255	; 0xff
 8009b84:	d01f      	beq.n	8009bc6 <USBD_StdEPReq+0x1c6>
 8009b86:	7b7b      	ldrb	r3, [r7, #13]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d11c      	bne.n	8009bc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b8c:	7b7a      	ldrb	r2, [r7, #13]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b94:	7b7a      	ldrb	r2, [r7, #13]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32ae      	adds	r2, #174	; 0xae
 8009b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d010      	beq.n	8009bc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ba4:	7b7a      	ldrb	r2, [r7, #13]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	32ae      	adds	r2, #174	; 0xae
 8009baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	4798      	blx	r3
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009bba:	e004      	b.n	8009bc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fc03 	bl	800a3ca <USBD_CtlError>
              break;
 8009bc4:	e000      	b.n	8009bc8 <USBD_StdEPReq+0x1c8>
              break;
 8009bc6:	bf00      	nop
          }
          break;
 8009bc8:	e0ab      	b.n	8009d22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d002      	beq.n	8009bdc <USBD_StdEPReq+0x1dc>
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d032      	beq.n	8009c40 <USBD_StdEPReq+0x240>
 8009bda:	e097      	b.n	8009d0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d007      	beq.n	8009bf2 <USBD_StdEPReq+0x1f2>
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b80      	cmp	r3, #128	; 0x80
 8009be6:	d004      	beq.n	8009bf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fbed 	bl	800a3ca <USBD_CtlError>
                break;
 8009bf0:	e091      	b.n	8009d16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	da0b      	bge.n	8009c12 <USBD_StdEPReq+0x212>
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	3310      	adds	r3, #16
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3304      	adds	r3, #4
 8009c10:	e00b      	b.n	8009c2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4413      	add	r3, r2
 8009c28:	3304      	adds	r3, #4
 8009c2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2202      	movs	r2, #2
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fc37 	bl	800a4ac <USBD_CtlSendData>
              break;
 8009c3e:	e06a      	b.n	8009d16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da11      	bge.n	8009c6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	f003 020f 	and.w	r2, r3, #15
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	3324      	adds	r3, #36	; 0x24
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d117      	bne.n	8009c92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fbb0 	bl	800a3ca <USBD_CtlError>
                  break;
 8009c6a:	e054      	b.n	8009d16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	f003 020f 	and.w	r2, r3, #15
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d104      	bne.n	8009c92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fb9d 	bl	800a3ca <USBD_CtlError>
                  break;
 8009c90:	e041      	b.n	8009d16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	da0b      	bge.n	8009cb2 <USBD_StdEPReq+0x2b2>
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	3310      	adds	r3, #16
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	4413      	add	r3, r2
 8009cae:	3304      	adds	r3, #4
 8009cb0:	e00b      	b.n	8009cca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	3304      	adds	r3, #4
 8009cca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <USBD_StdEPReq+0x2d8>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d103      	bne.n	8009ce0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	e00e      	b.n	8009cfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f003 fe6d 	bl	800d9c4 <USBD_LL_IsStallEP>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	e002      	b.n	8009cfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2202      	movs	r2, #2
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fbd1 	bl	800a4ac <USBD_CtlSendData>
              break;
 8009d0a:	e004      	b.n	8009d16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb5b 	bl	800a3ca <USBD_CtlError>
              break;
 8009d14:	bf00      	nop
          }
          break;
 8009d16:	e004      	b.n	8009d22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb55 	bl	800a3ca <USBD_CtlError>
          break;
 8009d20:	bf00      	nop
      }
      break;
 8009d22:	e005      	b.n	8009d30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fb4f 	bl	800a3ca <USBD_CtlError>
      break;
 8009d2c:	e000      	b.n	8009d30 <USBD_StdEPReq+0x330>
      break;
 8009d2e:	bf00      	nop
  }

  return ret;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	885b      	ldrh	r3, [r3, #2]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	2b06      	cmp	r3, #6
 8009d5e:	f200 8128 	bhi.w	8009fb2 <USBD_GetDescriptor+0x276>
 8009d62:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBD_GetDescriptor+0x2c>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d85 	.word	0x08009d85
 8009d6c:	08009d9d 	.word	0x08009d9d
 8009d70:	08009ddd 	.word	0x08009ddd
 8009d74:	08009fb3 	.word	0x08009fb3
 8009d78:	08009fb3 	.word	0x08009fb3
 8009d7c:	08009f53 	.word	0x08009f53
 8009d80:	08009f7f 	.word	0x08009f7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	7c12      	ldrb	r2, [r2, #16]
 8009d90:	f107 0108 	add.w	r1, r7, #8
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	60f8      	str	r0, [r7, #12]
      break;
 8009d9a:	e112      	b.n	8009fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7c1b      	ldrb	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10d      	bne.n	8009dc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	f107 0208 	add.w	r2, r7, #8
 8009db0:	4610      	mov	r0, r2
 8009db2:	4798      	blx	r3
 8009db4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3301      	adds	r3, #1
 8009dba:	2202      	movs	r2, #2
 8009dbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dbe:	e100      	b.n	8009fc2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	f107 0208 	add.w	r2, r7, #8
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4798      	blx	r3
 8009dd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	701a      	strb	r2, [r3, #0]
      break;
 8009dda:	e0f2      	b.n	8009fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	885b      	ldrh	r3, [r3, #2]
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b05      	cmp	r3, #5
 8009de4:	f200 80ac 	bhi.w	8009f40 <USBD_GetDescriptor+0x204>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <USBD_GetDescriptor+0xb4>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009e3d 	.word	0x08009e3d
 8009df8:	08009e71 	.word	0x08009e71
 8009dfc:	08009ea5 	.word	0x08009ea5
 8009e00:	08009ed9 	.word	0x08009ed9
 8009e04:	08009f0d 	.word	0x08009f0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00b      	beq.n	8009e2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	7c12      	ldrb	r2, [r2, #16]
 8009e20:	f107 0108 	add.w	r1, r7, #8
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e2a:	e091      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 facb 	bl	800a3ca <USBD_CtlError>
            err++;
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	3301      	adds	r3, #1
 8009e38:	72fb      	strb	r3, [r7, #11]
          break;
 8009e3a:	e089      	b.n	8009f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00b      	beq.n	8009e60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	7c12      	ldrb	r2, [r2, #16]
 8009e54:	f107 0108 	add.w	r1, r7, #8
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4798      	blx	r3
 8009e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5e:	e077      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fab1 	bl	800a3ca <USBD_CtlError>
            err++;
 8009e68:	7afb      	ldrb	r3, [r7, #11]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6e:	e06f      	b.n	8009f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7c12      	ldrb	r2, [r2, #16]
 8009e88:	f107 0108 	add.w	r1, r7, #8
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	4798      	blx	r3
 8009e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e92:	e05d      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fa97 	bl	800a3ca <USBD_CtlError>
            err++;
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ea2:	e055      	b.n	8009f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00b      	beq.n	8009ec8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	7c12      	ldrb	r2, [r2, #16]
 8009ebc:	f107 0108 	add.w	r1, r7, #8
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4798      	blx	r3
 8009ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec6:	e043      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fa7d 	bl	800a3ca <USBD_CtlError>
            err++;
 8009ed0:	7afb      	ldrb	r3, [r7, #11]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed6:	e03b      	b.n	8009f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00b      	beq.n	8009efc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	7c12      	ldrb	r2, [r2, #16]
 8009ef0:	f107 0108 	add.w	r1, r7, #8
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
 8009ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009efa:	e029      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa63 	bl	800a3ca <USBD_CtlError>
            err++;
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	3301      	adds	r3, #1
 8009f08:	72fb      	strb	r3, [r7, #11]
          break;
 8009f0a:	e021      	b.n	8009f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7c12      	ldrb	r2, [r2, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
 8009f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2e:	e00f      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fa49 	bl	800a3ca <USBD_CtlError>
            err++;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3e:	e007      	b.n	8009f50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa41 	bl	800a3ca <USBD_CtlError>
          err++;
 8009f48:	7afb      	ldrb	r3, [r7, #11]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f4e:	bf00      	nop
      }
      break;
 8009f50:	e037      	b.n	8009fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7c1b      	ldrb	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f62:	f107 0208 	add.w	r2, r7, #8
 8009f66:	4610      	mov	r0, r2
 8009f68:	4798      	blx	r3
 8009f6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f6c:	e029      	b.n	8009fc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fa2a 	bl	800a3ca <USBD_CtlError>
        err++;
 8009f76:	7afb      	ldrb	r3, [r7, #11]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f7c:	e021      	b.n	8009fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7c1b      	ldrb	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10d      	bne.n	8009fa2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	4610      	mov	r0, r2
 8009f94:	4798      	blx	r3
 8009f96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	2207      	movs	r2, #7
 8009f9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fa0:	e00f      	b.n	8009fc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fa10 	bl	800a3ca <USBD_CtlError>
        err++;
 8009faa:	7afb      	ldrb	r3, [r7, #11]
 8009fac:	3301      	adds	r3, #1
 8009fae:	72fb      	strb	r3, [r7, #11]
      break;
 8009fb0:	e007      	b.n	8009fc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fa08 	bl	800a3ca <USBD_CtlError>
      err++;
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc0:	bf00      	nop
  }

  if (err != 0U)
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11e      	bne.n	800a006 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	88db      	ldrh	r3, [r3, #6]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d016      	beq.n	8009ffe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fd0:	893b      	ldrh	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00e      	beq.n	8009ff4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88da      	ldrh	r2, [r3, #6]
 8009fda:	893b      	ldrh	r3, [r7, #8]
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	bf28      	it	cs
 8009fe0:	4613      	movcs	r3, r2
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fe6:	893b      	ldrh	r3, [r7, #8]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fa5d 	bl	800a4ac <USBD_CtlSendData>
 8009ff2:	e009      	b.n	800a008 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f9e7 	bl	800a3ca <USBD_CtlError>
 8009ffc:	e004      	b.n	800a008 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 faae 	bl	800a560 <USBD_CtlSendStatus>
 800a004:	e000      	b.n	800a008 <USBD_GetDescriptor+0x2cc>
    return;
 800a006:	bf00      	nop
  }
}
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop

0800a010 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	889b      	ldrh	r3, [r3, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d131      	bne.n	800a086 <USBD_SetAddress+0x76>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	88db      	ldrh	r3, [r3, #6]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d12d      	bne.n	800a086 <USBD_SetAddress+0x76>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	2b7f      	cmp	r3, #127	; 0x7f
 800a030:	d829      	bhi.n	800a086 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	885b      	ldrh	r3, [r3, #2]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b03      	cmp	r3, #3
 800a048:	d104      	bne.n	800a054 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f9bc 	bl	800a3ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	e01d      	b.n	800a090 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7bfa      	ldrb	r2, [r7, #15]
 800a058:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f003 fcdb 	bl	800da1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fa7a 	bl	800a560 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	e009      	b.n	800a090 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a084:	e004      	b.n	800a090 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f99e 	bl	800a3ca <USBD_CtlError>
  }
}
 800a08e:	bf00      	nop
 800a090:	bf00      	nop
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	4b4e      	ldr	r3, [pc, #312]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a0ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0b0:	4b4d      	ldr	r3, [pc, #308]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d905      	bls.n	800a0c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f985 	bl	800a3ca <USBD_CtlError>
    return USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e08c      	b.n	800a1de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d002      	beq.n	800a0d6 <USBD_SetConfig+0x3e>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d029      	beq.n	800a128 <USBD_SetConfig+0x90>
 800a0d4:	e075      	b.n	800a1c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0d6:	4b44      	ldr	r3, [pc, #272]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d020      	beq.n	800a120 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a0de:	4b42      	ldr	r3, [pc, #264]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0e8:	4b3f      	ldr	r3, [pc, #252]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7fe ffe7 	bl	80090c2 <USBD_SetClassConfig>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f962 	bl	800a3ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2202      	movs	r2, #2
 800a10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a10e:	e065      	b.n	800a1dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fa25 	bl	800a560 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2203      	movs	r2, #3
 800a11a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a11e:	e05d      	b.n	800a1dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fa1d 	bl	800a560 <USBD_CtlSendStatus>
      break;
 800a126:	e059      	b.n	800a1dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a128:	4b2f      	ldr	r3, [pc, #188]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d112      	bne.n	800a156 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a138:	4b2b      	ldr	r3, [pc, #172]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a142:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7fe ffd6 	bl	80090fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa06 	bl	800a560 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a154:	e042      	b.n	800a1dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a156:	4b24      	ldr	r3, [pc, #144]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d02a      	beq.n	800a1ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7fe ffc4 	bl	80090fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a172:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a17c:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7fe ff9d 	bl	80090c2 <USBD_SetClassConfig>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00f      	beq.n	800a1b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f918 	bl	800a3ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7fe ffa9 	bl	80090fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1b0:	e014      	b.n	800a1dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f9d4 	bl	800a560 <USBD_CtlSendStatus>
      break;
 800a1b8:	e010      	b.n	800a1dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f9d0 	bl	800a560 <USBD_CtlSendStatus>
      break;
 800a1c0:	e00c      	b.n	800a1dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f900 	bl	800a3ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <USBD_SetConfig+0x150>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7fe ff92 	bl	80090fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1da:	bf00      	nop
  }

  return ret;
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000458 	.word	0x20000458

0800a1ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	88db      	ldrh	r3, [r3, #6]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d004      	beq.n	800a208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f8e2 	bl	800a3ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a206:	e023      	b.n	800a250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	dc02      	bgt.n	800a21a <USBD_GetConfig+0x2e>
 800a214:	2b00      	cmp	r3, #0
 800a216:	dc03      	bgt.n	800a220 <USBD_GetConfig+0x34>
 800a218:	e015      	b.n	800a246 <USBD_GetConfig+0x5a>
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d00b      	beq.n	800a236 <USBD_GetConfig+0x4a>
 800a21e:	e012      	b.n	800a246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3308      	adds	r3, #8
 800a22a:	2201      	movs	r2, #1
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f93c 	bl	800a4ac <USBD_CtlSendData>
        break;
 800a234:	e00c      	b.n	800a250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3304      	adds	r3, #4
 800a23a:	2201      	movs	r2, #1
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f934 	bl	800a4ac <USBD_CtlSendData>
        break;
 800a244:	e004      	b.n	800a250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f8be 	bl	800a3ca <USBD_CtlError>
        break;
 800a24e:	bf00      	nop
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d81e      	bhi.n	800a2ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	88db      	ldrh	r3, [r3, #6]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d004      	beq.n	800a282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f8a5 	bl	800a3ca <USBD_CtlError>
        break;
 800a280:	e01a      	b.n	800a2b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d005      	beq.n	800a29e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f043 0202 	orr.w	r2, r3, #2
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f900 	bl	800a4ac <USBD_CtlSendData>
      break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f88a 	bl	800a3ca <USBD_CtlError>
      break;
 800a2b6:	bf00      	nop
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d107      	bne.n	800a2e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f940 	bl	800a560 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2e0:	e013      	b.n	800a30a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	885b      	ldrh	r3, [r3, #2]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d10b      	bne.n	800a302 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	889b      	ldrh	r3, [r3, #4]
 800a2ee:	0a1b      	lsrs	r3, r3, #8
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f930 	bl	800a560 <USBD_CtlSendStatus>
}
 800a300:	e003      	b.n	800a30a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f860 	bl	800a3ca <USBD_CtlError>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a322:	b2db      	uxtb	r3, r3
 800a324:	3b01      	subs	r3, #1
 800a326:	2b02      	cmp	r3, #2
 800a328:	d80b      	bhi.n	800a342 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	885b      	ldrh	r3, [r3, #2]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d10c      	bne.n	800a34c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f910 	bl	800a560 <USBD_CtlSendStatus>
      }
      break;
 800a340:	e004      	b.n	800a34c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f840 	bl	800a3ca <USBD_CtlError>
      break;
 800a34a:	e000      	b.n	800a34e <USBD_ClrFeature+0x3c>
      break;
 800a34c:	bf00      	nop
  }
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3301      	adds	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f7ff fa41 	bl	8009808 <SWAPBYTE>
 800a386:	4603      	mov	r3, r0
 800a388:	461a      	mov	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3301      	adds	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff fa34 	bl	8009808 <SWAPBYTE>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fa27 	bl	8009808 <SWAPBYTE>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	461a      	mov	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	80da      	strh	r2, [r3, #6]
}
 800a3c2:	bf00      	nop
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3d4:	2180      	movs	r1, #128	; 0x80
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f003 fab6 	bl	800d948 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3dc:	2100      	movs	r1, #0
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f003 fab2 	bl	800d948 <USBD_LL_StallEP>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d036      	beq.n	800a470 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a406:	6938      	ldr	r0, [r7, #16]
 800a408:	f000 f836 	bl	800a478 <USBD_GetLen>
 800a40c:	4603      	mov	r3, r0
 800a40e:	3301      	adds	r3, #1
 800a410:	b29b      	uxth	r3, r3
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	4413      	add	r3, r2
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	7812      	ldrb	r2, [r2, #0]
 800a424:	701a      	strb	r2, [r3, #0]
  idx++;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	3301      	adds	r3, #1
 800a42a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	4413      	add	r3, r2
 800a432:	2203      	movs	r2, #3
 800a434:	701a      	strb	r2, [r3, #0]
  idx++;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	3301      	adds	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a43c:	e013      	b.n	800a466 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	4413      	add	r3, r2
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3301      	adds	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
    idx++;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	3301      	adds	r3, #1
 800a454:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	4413      	add	r3, r2
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	3301      	adds	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e7      	bne.n	800a43e <USBD_GetString+0x52>
 800a46e:	e000      	b.n	800a472 <USBD_GetString+0x86>
    return;
 800a470:	bf00      	nop
  }
}
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a488:	e005      	b.n	800a496 <USBD_GetLen+0x1e>
  {
    len++;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	3301      	adds	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	3301      	adds	r3, #1
 800a494:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f5      	bne.n	800a48a <USBD_GetLen+0x12>
  }

  return len;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f003 fac1 	bl	800da5a <USBD_LL_Transmit>

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f003 fab0 	bl	800da5a <USBD_LL_Transmit>

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2203      	movs	r2, #3
 800a514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	2100      	movs	r1, #0
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f003 fab4 	bl	800da9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f003 faa3 	bl	800da9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2204      	movs	r2, #4
 800a56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a570:	2300      	movs	r3, #0
 800a572:	2200      	movs	r2, #0
 800a574:	2100      	movs	r1, #0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f003 fa6f 	bl	800da5a <USBD_LL_Transmit>

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2205      	movs	r2, #5
 800a592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f003 fa7d 	bl	800da9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <__NVIC_SetPriority>:
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	db0a      	blt.n	800a5d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	490c      	ldr	r1, [pc, #48]	; (800a5f8 <__NVIC_SetPriority+0x4c>)
 800a5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ca:	0112      	lsls	r2, r2, #4
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5d4:	e00a      	b.n	800a5ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	4908      	ldr	r1, [pc, #32]	; (800a5fc <__NVIC_SetPriority+0x50>)
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	0112      	lsls	r2, r2, #4
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	761a      	strb	r2, [r3, #24]
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	e000e100 	.word	0xe000e100
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <SysTick_Handler+0x1c>)
 800a606:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a608:	f001 fd4c 	bl	800c0a4 <xTaskGetSchedulerState>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d001      	beq.n	800a616 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a612:	f002 fb31 	bl	800cc78 <xPortSysTickHandler>
  }
}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	e000e010 	.word	0xe000e010

0800a620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a624:	2100      	movs	r1, #0
 800a626:	f06f 0004 	mvn.w	r0, #4
 800a62a:	f7ff ffbf 	bl	800a5ac <__NVIC_SetPriority>
#endif
}
 800a62e:	bf00      	nop
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a63a:	f3ef 8305 	mrs	r3, IPSR
 800a63e:	603b      	str	r3, [r7, #0]
  return(result);
 800a640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a646:	f06f 0305 	mvn.w	r3, #5
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	e00c      	b.n	800a668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <osKernelInitialize+0x44>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <osKernelInitialize+0x44>)
 800a658:	2201      	movs	r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	607b      	str	r3, [r7, #4]
 800a660:	e002      	b.n	800a668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a668:	687b      	ldr	r3, [r7, #4]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	2000045c 	.word	0x2000045c

0800a67c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a682:	f3ef 8305 	mrs	r3, IPSR
 800a686:	603b      	str	r3, [r7, #0]
  return(result);
 800a688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a68e:	f06f 0305 	mvn.w	r3, #5
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	e010      	b.n	800a6b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <osKernelStart+0x48>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d109      	bne.n	800a6b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a69e:	f7ff ffbf 	bl	800a620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <osKernelStart+0x48>)
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6a8:	f001 f880 	bl	800b7ac <vTaskStartScheduler>
      stat = osOK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	e002      	b.n	800a6b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6b8:	687b      	ldr	r3, [r7, #4]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	2000045c 	.word	0x2000045c

0800a6c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08e      	sub	sp, #56	; 0x38
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6d8:	f3ef 8305 	mrs	r3, IPSR
 800a6dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a6de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d17e      	bne.n	800a7e2 <osThreadNew+0x11a>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d07b      	beq.n	800a7e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a6ea:	2380      	movs	r3, #128	; 0x80
 800a6ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a6ee:	2318      	movs	r3, #24
 800a6f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d045      	beq.n	800a78e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <osThreadNew+0x48>
        name = attr->name;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d008      	beq.n	800a736 <osThreadNew+0x6e>
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	2b38      	cmp	r3, #56	; 0x38
 800a728:	d805      	bhi.n	800a736 <osThreadNew+0x6e>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <osThreadNew+0x72>
        return (NULL);
 800a736:	2300      	movs	r3, #0
 800a738:	e054      	b.n	800a7e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	089b      	lsrs	r3, r3, #2
 800a748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00e      	beq.n	800a770 <osThreadNew+0xa8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2bbf      	cmp	r3, #191	; 0xbf
 800a758:	d90a      	bls.n	800a770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <osThreadNew+0xa8>
        mem = 1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	e010      	b.n	800a792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10c      	bne.n	800a792 <osThreadNew+0xca>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d108      	bne.n	800a792 <osThreadNew+0xca>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d104      	bne.n	800a792 <osThreadNew+0xca>
          mem = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	e001      	b.n	800a792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d110      	bne.n	800a7ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7a0:	9202      	str	r2, [sp, #8]
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	6a3a      	ldr	r2, [r7, #32]
 800a7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fe0c 	bl	800b3cc <xTaskCreateStatic>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	613b      	str	r3, [r7, #16]
 800a7b8:	e013      	b.n	800a7e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d110      	bne.n	800a7e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	f107 0310 	add.w	r3, r7, #16
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 fe57 	bl	800b486 <xTaskCreate>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d001      	beq.n	800a7e2 <osThreadNew+0x11a>
            hTask = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7e2:	693b      	ldr	r3, [r7, #16]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3728      	adds	r7, #40	; 0x28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f4:	f3ef 8305 	mrs	r3, IPSR
 800a7f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <osDelay+0x1c>
    stat = osErrorISR;
 800a800:	f06f 0305 	mvn.w	r3, #5
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	e007      	b.n	800a818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 ff96 	bl	800b744 <vTaskDelay>
    }
  }

  return (stat);
 800a818:	68fb      	ldr	r3, [r7, #12]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a07      	ldr	r2, [pc, #28]	; (800a850 <vApplicationGetIdleTaskMemory+0x2c>)
 800a834:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4a06      	ldr	r2, [pc, #24]	; (800a854 <vApplicationGetIdleTaskMemory+0x30>)
 800a83a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2280      	movs	r2, #128	; 0x80
 800a840:	601a      	str	r2, [r3, #0]
}
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	20000460 	.word	0x20000460
 800a854:	20000520 	.word	0x20000520

0800a858 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4a07      	ldr	r2, [pc, #28]	; (800a884 <vApplicationGetTimerTaskMemory+0x2c>)
 800a868:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4a06      	ldr	r2, [pc, #24]	; (800a888 <vApplicationGetTimerTaskMemory+0x30>)
 800a86e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a876:	601a      	str	r2, [r3, #0]
}
 800a878:	bf00      	nop
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	20000720 	.word	0x20000720
 800a888:	200007e0 	.word	0x200007e0

0800a88c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f103 0208 	add.w	r2, r3, #8
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f103 0208 	add.w	r2, r3, #8
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f103 0208 	add.w	r2, r3, #8
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d103      	bne.n	800a94e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	e00c      	b.n	800a968 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3308      	adds	r3, #8
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e002      	b.n	800a95c <vListInsert+0x2e>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	429a      	cmp	r2, r3
 800a966:	d2f6      	bcs.n	800a956 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	601a      	str	r2, [r3, #0]
}
 800a994:	bf00      	nop
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6892      	ldr	r2, [r2, #8]
 800a9b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	6852      	ldr	r2, [r2, #4]
 800a9c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d103      	bne.n	800a9d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1e5a      	subs	r2, r3, #1
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa1e:	f002 f899 	bl	800cb54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa2e:	fb01 f303 	mul.w	r3, r1, r3
 800aa32:	441a      	add	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	68f9      	ldr	r1, [r7, #12]
 800aa52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	441a      	add	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	22ff      	movs	r2, #255	; 0xff
 800aa62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	22ff      	movs	r2, #255	; 0xff
 800aa6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d114      	bne.n	800aa9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01a      	beq.n	800aab2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3310      	adds	r3, #16
 800aa80:	4618      	mov	r0, r3
 800aa82:	f001 f94b 	bl	800bd1c <xTaskRemoveFromEventList>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d012      	beq.n	800aab2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa8c:	4b0c      	ldr	r3, [pc, #48]	; (800aac0 <xQueueGenericReset+0xcc>)
 800aa8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	e009      	b.n	800aab2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3310      	adds	r3, #16
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fef2 	bl	800a88c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3324      	adds	r3, #36	; 0x24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff feed 	bl	800a88c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aab2:	f002 f87f 	bl	800cbb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aab6:	2301      	movs	r3, #1
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	e000ed04 	.word	0xe000ed04

0800aac4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08e      	sub	sp, #56	; 0x38
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <xQueueGenericCreateStatic+0x52>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <xQueueGenericCreateStatic+0x56>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueGenericCreateStatic+0x58>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	623b      	str	r3, [r7, #32]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <xQueueGenericCreateStatic+0x7e>
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <xQueueGenericCreateStatic+0x82>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e000      	b.n	800ab48 <xQueueGenericCreateStatic+0x84>
 800ab46:	2300      	movs	r3, #0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	61fb      	str	r3, [r7, #28]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab62:	2350      	movs	r3, #80	; 0x50
 800ab64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b50      	cmp	r3, #80	; 0x50
 800ab6a:	d00a      	beq.n	800ab82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	61bb      	str	r3, [r7, #24]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00d      	beq.n	800abaa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 f805 	bl	800abb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800abac:	4618      	mov	r0, r3
 800abae:	3730      	adds	r7, #48	; 0x30
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d103      	bne.n	800abd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	e002      	b.n	800abd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800abe2:	2101      	movs	r1, #1
 800abe4:	69b8      	ldr	r0, [r7, #24]
 800abe6:	f7ff ff05 	bl	800a9f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	78fa      	ldrb	r2, [r7, #3]
 800abee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08e      	sub	sp, #56	; 0x38
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <xQueueGenericSend+0x32>
	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <xQueueGenericSend+0x40>
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <xQueueGenericSend+0x44>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e000      	b.n	800ac42 <xQueueGenericSend+0x46>
 800ac40:	2300      	movs	r3, #0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10a      	bne.n	800ac5c <xQueueGenericSend+0x60>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d103      	bne.n	800ac6a <xQueueGenericSend+0x6e>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d101      	bne.n	800ac6e <xQueueGenericSend+0x72>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <xQueueGenericSend+0x74>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueGenericSend+0x8e>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	623b      	str	r3, [r7, #32]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac8a:	f001 fa0b 	bl	800c0a4 <xTaskGetSchedulerState>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <xQueueGenericSend+0x9e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <xQueueGenericSend+0xa2>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <xQueueGenericSend+0xa4>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGenericSend+0xbe>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	61fb      	str	r3, [r7, #28]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acba:	f001 ff4b 	bl	800cb54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d302      	bcc.n	800acd0 <xQueueGenericSend+0xd4>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d129      	bne.n	800ad24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acd6:	f000 fa0b 	bl	800b0f0 <prvCopyDataToQueue>
 800acda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d010      	beq.n	800ad06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	3324      	adds	r3, #36	; 0x24
 800ace8:	4618      	mov	r0, r3
 800acea:	f001 f817 	bl	800bd1c <xTaskRemoveFromEventList>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d013      	beq.n	800ad1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800acf4:	4b3f      	ldr	r3, [pc, #252]	; (800adf4 <xQueueGenericSend+0x1f8>)
 800acf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	e00a      	b.n	800ad1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d007      	beq.n	800ad1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad0c:	4b39      	ldr	r3, [pc, #228]	; (800adf4 <xQueueGenericSend+0x1f8>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad1c:	f001 ff4a 	bl	800cbb4 <vPortExitCritical>
				return pdPASS;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e063      	b.n	800adec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad2a:	f001 ff43 	bl	800cbb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e05c      	b.n	800adec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad38:	f107 0314 	add.w	r3, r7, #20
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f001 f851 	bl	800bde4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad46:	f001 ff35 	bl	800cbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad4a:	f000 fda1 	bl	800b890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad4e:	f001 ff01 	bl	800cb54 <vPortEnterCritical>
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad58:	b25b      	sxtb	r3, r3
 800ad5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5e:	d103      	bne.n	800ad68 <xQueueGenericSend+0x16c>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad6e:	b25b      	sxtb	r3, r3
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad74:	d103      	bne.n	800ad7e <xQueueGenericSend+0x182>
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad7e:	f001 ff19 	bl	800cbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad82:	1d3a      	adds	r2, r7, #4
 800ad84:	f107 0314 	add.w	r3, r7, #20
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 f840 	bl	800be10 <xTaskCheckForTimeOut>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d124      	bne.n	800ade0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad98:	f000 faa2 	bl	800b2e0 <prvIsQueueFull>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d018      	beq.n	800add4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	3310      	adds	r3, #16
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	4611      	mov	r1, r2
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 ff66 	bl	800bc7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800adb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adb2:	f000 fa2d 	bl	800b210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800adb6:	f000 fd79 	bl	800b8ac <xTaskResumeAll>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f47f af7c 	bne.w	800acba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800adc2:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <xQueueGenericSend+0x1f8>)
 800adc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	e772      	b.n	800acba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800add4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800add6:	f000 fa1b 	bl	800b210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adda:	f000 fd67 	bl	800b8ac <xTaskResumeAll>
 800adde:	e76c      	b.n	800acba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ade0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ade2:	f000 fa15 	bl	800b210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ade6:	f000 fd61 	bl	800b8ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800adea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800adec:	4618      	mov	r0, r3
 800adee:	3738      	adds	r7, #56	; 0x38
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b090      	sub	sp, #64	; 0x40
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d103      	bne.n	800ae34 <xQueueGenericSendFromISR+0x3c>
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <xQueueGenericSendFromISR+0x40>
 800ae34:	2301      	movs	r3, #1
 800ae36:	e000      	b.n	800ae3a <xQueueGenericSendFromISR+0x42>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d103      	bne.n	800ae62 <xQueueGenericSendFromISR+0x6a>
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d101      	bne.n	800ae66 <xQueueGenericSendFromISR+0x6e>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <xQueueGenericSendFromISR+0x70>
 800ae66:	2300      	movs	r3, #0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10a      	bne.n	800ae82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	623b      	str	r3, [r7, #32]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae82:	f001 ff49 	bl	800cd18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae86:	f3ef 8211 	mrs	r2, BASEPRI
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	61fa      	str	r2, [r7, #28]
 800ae9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d302      	bcc.n	800aeb4 <xQueueGenericSendFromISR+0xbc>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d12f      	bne.n	800af14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	68b9      	ldr	r1, [r7, #8]
 800aec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aeca:	f000 f911 	bl	800b0f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aece:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed6:	d112      	bne.n	800aefe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d016      	beq.n	800af0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	3324      	adds	r3, #36	; 0x24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 ff19 	bl	800bd1c <xTaskRemoveFromEventList>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00e      	beq.n	800af0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	e007      	b.n	800af0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aefe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af02:	3301      	adds	r3, #1
 800af04:	b2db      	uxtb	r3, r3
 800af06:	b25a      	sxtb	r2, r3
 800af08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af0e:	2301      	movs	r3, #1
 800af10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800af12:	e001      	b.n	800af18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af14:	2300      	movs	r3, #0
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af26:	4618      	mov	r0, r3
 800af28:	3740      	adds	r7, #64	; 0x40
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08c      	sub	sp, #48	; 0x30
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xQueueReceive+0x30>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	623b      	str	r3, [r7, #32]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <xQueueReceive+0x3e>
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <xQueueReceive+0x42>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <xQueueReceive+0x44>
 800af72:	2300      	movs	r3, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <xQueueReceive+0x5e>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	61fb      	str	r3, [r7, #28]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af8e:	f001 f889 	bl	800c0a4 <xTaskGetSchedulerState>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <xQueueReceive+0x6e>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <xQueueReceive+0x72>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <xQueueReceive+0x74>
 800afa2:	2300      	movs	r3, #0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10a      	bne.n	800afbe <xQueueReceive+0x8e>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	61bb      	str	r3, [r7, #24]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afbe:	f001 fdc9 	bl	800cb54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d01f      	beq.n	800b00e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afd2:	f000 f8f7 	bl	800b1c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	1e5a      	subs	r2, r3, #1
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00f      	beq.n	800b006 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe8:	3310      	adds	r3, #16
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fe96 	bl	800bd1c <xTaskRemoveFromEventList>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aff6:	4b3d      	ldr	r3, [pc, #244]	; (800b0ec <xQueueReceive+0x1bc>)
 800aff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b006:	f001 fdd5 	bl	800cbb4 <vPortExitCritical>
				return pdPASS;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e069      	b.n	800b0e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d103      	bne.n	800b01c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b014:	f001 fdce 	bl	800cbb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b018:	2300      	movs	r3, #0
 800b01a:	e062      	b.n	800b0e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b022:	f107 0310 	add.w	r3, r7, #16
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fedc 	bl	800bde4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b030:	f001 fdc0 	bl	800cbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b034:	f000 fc2c 	bl	800b890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b038:	f001 fd8c 	bl	800cb54 <vPortEnterCritical>
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b042:	b25b      	sxtb	r3, r3
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d103      	bne.n	800b052 <xQueueReceive+0x122>
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b058:	b25b      	sxtb	r3, r3
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05e:	d103      	bne.n	800b068 <xQueueReceive+0x138>
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b068:	f001 fda4 	bl	800cbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b06c:	1d3a      	adds	r2, r7, #4
 800b06e:	f107 0310 	add.w	r3, r7, #16
 800b072:	4611      	mov	r1, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fecb 	bl	800be10 <xTaskCheckForTimeOut>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d123      	bne.n	800b0c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b082:	f000 f917 	bl	800b2b4 <prvIsQueueEmpty>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d017      	beq.n	800b0bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	3324      	adds	r3, #36	; 0x24
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fdf1 	bl	800bc7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09c:	f000 f8b8 	bl	800b210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0a0:	f000 fc04 	bl	800b8ac <xTaskResumeAll>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d189      	bne.n	800afbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b0aa:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <xQueueReceive+0x1bc>)
 800b0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b0:	601a      	str	r2, [r3, #0]
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	e780      	b.n	800afbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0be:	f000 f8a7 	bl	800b210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0c2:	f000 fbf3 	bl	800b8ac <xTaskResumeAll>
 800b0c6:	e77a      	b.n	800afbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ca:	f000 f8a1 	bl	800b210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0ce:	f000 fbed 	bl	800b8ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d4:	f000 f8ee 	bl	800b2b4 <prvIsQueueEmpty>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f43f af6f 	beq.w	800afbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3730      	adds	r7, #48	; 0x30
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	e000ed04 	.word	0xe000ed04

0800b0f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10d      	bne.n	800b12a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d14d      	bne.n	800b1b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 ffe0 	bl	800c0e0 <xTaskPriorityDisinherit>
 800b120:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	609a      	str	r2, [r3, #8]
 800b128:	e043      	b.n	800b1b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d119      	bne.n	800b164 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6858      	ldr	r0, [r3, #4]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b138:	461a      	mov	r2, r3
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	f002 fe5a 	bl	800ddf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b148:	441a      	add	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	429a      	cmp	r2, r3
 800b158:	d32b      	bcc.n	800b1b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	605a      	str	r2, [r3, #4]
 800b162:	e026      	b.n	800b1b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68d8      	ldr	r0, [r3, #12]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	461a      	mov	r2, r3
 800b16e:	68b9      	ldr	r1, [r7, #8]
 800b170:	f002 fe40 	bl	800ddf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	425b      	negs	r3, r3
 800b17e:	441a      	add	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68da      	ldr	r2, [r3, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d207      	bcs.n	800b1a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	689a      	ldr	r2, [r3, #8]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b198:	425b      	negs	r3, r3
 800b19a:	441a      	add	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d105      	bne.n	800b1b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b1ba:	697b      	ldr	r3, [r7, #20]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d018      	beq.n	800b208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	441a      	add	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d303      	bcc.n	800b1f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68d9      	ldr	r1, [r3, #12]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	461a      	mov	r2, r3
 800b202:	6838      	ldr	r0, [r7, #0]
 800b204:	f002 fdf6 	bl	800ddf4 <memcpy>
	}
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b218:	f001 fc9c 	bl	800cb54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b222:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b224:	e011      	b.n	800b24a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d012      	beq.n	800b254 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3324      	adds	r3, #36	; 0x24
 800b232:	4618      	mov	r0, r3
 800b234:	f000 fd72 	bl	800bd1c <xTaskRemoveFromEventList>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b23e:	f000 fe49 	bl	800bed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	3b01      	subs	r3, #1
 800b246:	b2db      	uxtb	r3, r3
 800b248:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	dce9      	bgt.n	800b226 <prvUnlockQueue+0x16>
 800b252:	e000      	b.n	800b256 <prvUnlockQueue+0x46>
					break;
 800b254:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	22ff      	movs	r2, #255	; 0xff
 800b25a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b25e:	f001 fca9 	bl	800cbb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b262:	f001 fc77 	bl	800cb54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b26c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b26e:	e011      	b.n	800b294 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d012      	beq.n	800b29e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3310      	adds	r3, #16
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 fd4d 	bl	800bd1c <xTaskRemoveFromEventList>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b288:	f000 fe24 	bl	800bed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b28c:	7bbb      	ldrb	r3, [r7, #14]
 800b28e:	3b01      	subs	r3, #1
 800b290:	b2db      	uxtb	r3, r3
 800b292:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dce9      	bgt.n	800b270 <prvUnlockQueue+0x60>
 800b29c:	e000      	b.n	800b2a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b29e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	22ff      	movs	r2, #255	; 0xff
 800b2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b2a8:	f001 fc84 	bl	800cbb4 <vPortExitCritical>
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2bc:	f001 fc4a 	bl	800cb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e001      	b.n	800b2d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2d2:	f001 fc6f 	bl	800cbb4 <vPortExitCritical>

	return xReturn;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2e8:	f001 fc34 	bl	800cb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d102      	bne.n	800b2fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	e001      	b.n	800b302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b302:	f001 fc57 	bl	800cbb4 <vPortExitCritical>

	return xReturn;
 800b306:	68fb      	ldr	r3, [r7, #12]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	e014      	b.n	800b34a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b320:	4a0f      	ldr	r2, [pc, #60]	; (800b360 <vQueueAddToRegistry+0x50>)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10b      	bne.n	800b344 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b32c:	490c      	ldr	r1, [pc, #48]	; (800b360 <vQueueAddToRegistry+0x50>)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b336:	4a0a      	ldr	r2, [pc, #40]	; (800b360 <vQueueAddToRegistry+0x50>)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	4413      	add	r3, r2
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b342:	e006      	b.n	800b352 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3301      	adds	r3, #1
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2b07      	cmp	r3, #7
 800b34e:	d9e7      	bls.n	800b320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	20000be0 	.word	0x20000be0

0800b364 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b374:	f001 fbee 	bl	800cb54 <vPortEnterCritical>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b37e:	b25b      	sxtb	r3, r3
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b384:	d103      	bne.n	800b38e <vQueueWaitForMessageRestricted+0x2a>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b394:	b25b      	sxtb	r3, r3
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d103      	bne.n	800b3a4 <vQueueWaitForMessageRestricted+0x40>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a4:	f001 fc06 	bl	800cbb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d106      	bne.n	800b3be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	3324      	adds	r3, #36	; 0x24
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 fc83 	bl	800bcc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3be:	6978      	ldr	r0, [r7, #20]
 800b3c0:	f7ff ff26 	bl	800b210 <prvUnlockQueue>
	}
 800b3c4:	bf00      	nop
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08e      	sub	sp, #56	; 0x38
 800b3d0:	af04      	add	r7, sp, #16
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	623b      	str	r3, [r7, #32]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <xTaskCreateStatic+0x46>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	61fb      	str	r3, [r7, #28]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b412:	23c0      	movs	r3, #192	; 0xc0
 800b414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2bc0      	cmp	r3, #192	; 0xc0
 800b41a:	d00a      	beq.n	800b432 <xTaskCreateStatic+0x66>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	61bb      	str	r3, [r7, #24]
}
 800b42e:	bf00      	nop
 800b430:	e7fe      	b.n	800b430 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b432:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	2b00      	cmp	r3, #0
 800b438:	d01e      	beq.n	800b478 <xTaskCreateStatic+0xac>
 800b43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01b      	beq.n	800b478 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b448:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	2202      	movs	r2, #2
 800b44e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b452:	2300      	movs	r3, #0
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	f107 0314 	add.w	r3, r7, #20
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	68b9      	ldr	r1, [r7, #8]
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f000 f850 	bl	800b510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b472:	f000 f8f7 	bl	800b664 <prvAddNewTaskToReadyList>
 800b476:	e001      	b.n	800b47c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b478:	2300      	movs	r3, #0
 800b47a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b47c:	697b      	ldr	r3, [r7, #20]
	}
 800b47e:	4618      	mov	r0, r3
 800b480:	3728      	adds	r7, #40	; 0x28
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b486:	b580      	push	{r7, lr}
 800b488:	b08c      	sub	sp, #48	; 0x30
 800b48a:	af04      	add	r7, sp, #16
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	603b      	str	r3, [r7, #0]
 800b492:	4613      	mov	r3, r2
 800b494:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f001 fc7c 	bl	800cd98 <pvPortMalloc>
 800b4a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00e      	beq.n	800b4c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4a8:	20c0      	movs	r0, #192	; 0xc0
 800b4aa:	f001 fc75 	bl	800cd98 <pvPortMalloc>
 800b4ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	631a      	str	r2, [r3, #48]	; 0x30
 800b4bc:	e005      	b.n	800b4ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4be:	6978      	ldr	r0, [r7, #20]
 800b4c0:	f001 fd36 	bl	800cf30 <vPortFree>
 800b4c4:	e001      	b.n	800b4ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d017      	beq.n	800b500 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4d8:	88fa      	ldrh	r2, [r7, #6]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	9302      	str	r3, [sp, #8]
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	68b9      	ldr	r1, [r7, #8]
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 f80e 	bl	800b510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4f4:	69f8      	ldr	r0, [r7, #28]
 800b4f6:	f000 f8b5 	bl	800b664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	61bb      	str	r3, [r7, #24]
 800b4fe:	e002      	b.n	800b506 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b500:	f04f 33ff 	mov.w	r3, #4294967295
 800b504:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b506:	69bb      	ldr	r3, [r7, #24]
	}
 800b508:	4618      	mov	r0, r3
 800b50a:	3720      	adds	r7, #32
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	461a      	mov	r2, r3
 800b528:	21a5      	movs	r1, #165	; 0xa5
 800b52a:	f002 fc71 	bl	800de10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b538:	3b01      	subs	r3, #1
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	f023 0307 	bic.w	r3, r3, #7
 800b546:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	f003 0307 	and.w	r3, r3, #7
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	617b      	str	r3, [r7, #20]
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d01f      	beq.n	800b5ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b56e:	2300      	movs	r3, #0
 800b570:	61fb      	str	r3, [r7, #28]
 800b572:	e012      	b.n	800b59a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	4413      	add	r3, r2
 800b57a:	7819      	ldrb	r1, [r3, #0]
 800b57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	4413      	add	r3, r2
 800b582:	3334      	adds	r3, #52	; 0x34
 800b584:	460a      	mov	r2, r1
 800b586:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	4413      	add	r3, r2
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d006      	beq.n	800b5a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	3301      	adds	r3, #1
 800b598:	61fb      	str	r3, [r7, #28]
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	2b0f      	cmp	r3, #15
 800b59e:	d9e9      	bls.n	800b574 <prvInitialiseNewTask+0x64>
 800b5a0:	e000      	b.n	800b5a4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b5a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5ac:	e003      	b.n	800b5b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	2b37      	cmp	r3, #55	; 0x37
 800b5ba:	d901      	bls.n	800b5c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5bc:	2337      	movs	r3, #55	; 0x37
 800b5be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff f978 	bl	800a8cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	3318      	adds	r3, #24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff f973 	bl	800a8cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	2200      	movs	r2, #0
 800b600:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2200      	movs	r2, #0
 800b606:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	3358      	adds	r3, #88	; 0x58
 800b616:	2260      	movs	r2, #96	; 0x60
 800b618:	2100      	movs	r1, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f002 fbf8 	bl	800de10 <memset>
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	4a0d      	ldr	r2, [pc, #52]	; (800b658 <prvInitialiseNewTask+0x148>)
 800b624:	65da      	str	r2, [r3, #92]	; 0x5c
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	4a0c      	ldr	r2, [pc, #48]	; (800b65c <prvInitialiseNewTask+0x14c>)
 800b62a:	661a      	str	r2, [r3, #96]	; 0x60
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	4a0c      	ldr	r2, [pc, #48]	; (800b660 <prvInitialiseNewTask+0x150>)
 800b630:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	68f9      	ldr	r1, [r7, #12]
 800b636:	69b8      	ldr	r0, [r7, #24]
 800b638:	f001 f962 	bl	800c900 <pxPortInitialiseStack>
 800b63c:	4602      	mov	r2, r0
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b64c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b64e:	bf00      	nop
 800b650:	3720      	adds	r7, #32
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	08011d68 	.word	0x08011d68
 800b65c:	08011d88 	.word	0x08011d88
 800b660:	08011d48 	.word	0x08011d48

0800b664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b66c:	f001 fa72 	bl	800cb54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b670:	4b2d      	ldr	r3, [pc, #180]	; (800b728 <prvAddNewTaskToReadyList+0xc4>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	4a2c      	ldr	r2, [pc, #176]	; (800b728 <prvAddNewTaskToReadyList+0xc4>)
 800b678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b67a:	4b2c      	ldr	r3, [pc, #176]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b682:	4a2a      	ldr	r2, [pc, #168]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b688:	4b27      	ldr	r3, [pc, #156]	; (800b728 <prvAddNewTaskToReadyList+0xc4>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d110      	bne.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b690:	f000 fc46 	bl	800bf20 <prvInitialiseTaskLists>
 800b694:	e00d      	b.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b696:	4b26      	ldr	r3, [pc, #152]	; (800b730 <prvAddNewTaskToReadyList+0xcc>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d109      	bne.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b69e:	4b23      	ldr	r3, [pc, #140]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d802      	bhi.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6ac:	4a1f      	ldr	r2, [pc, #124]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6b2:	4b20      	ldr	r3, [pc, #128]	; (800b734 <prvAddNewTaskToReadyList+0xd0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	4a1e      	ldr	r2, [pc, #120]	; (800b734 <prvAddNewTaskToReadyList+0xd0>)
 800b6ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b6bc:	4b1d      	ldr	r3, [pc, #116]	; (800b734 <prvAddNewTaskToReadyList+0xd0>)
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c8:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <prvAddNewTaskToReadyList+0xd4>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d903      	bls.n	800b6d8 <prvAddNewTaskToReadyList+0x74>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	4a18      	ldr	r2, [pc, #96]	; (800b738 <prvAddNewTaskToReadyList+0xd4>)
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6dc:	4613      	mov	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4a15      	ldr	r2, [pc, #84]	; (800b73c <prvAddNewTaskToReadyList+0xd8>)
 800b6e6:	441a      	add	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f7ff f8f9 	bl	800a8e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6f4:	f001 fa5e 	bl	800cbb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6f8:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <prvAddNewTaskToReadyList+0xcc>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d207      	bcs.n	800b71e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b70e:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <prvAddNewTaskToReadyList+0xdc>)
 800b710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200010f4 	.word	0x200010f4
 800b72c:	20000c20 	.word	0x20000c20
 800b730:	20001100 	.word	0x20001100
 800b734:	20001110 	.word	0x20001110
 800b738:	200010fc 	.word	0x200010fc
 800b73c:	20000c24 	.word	0x20000c24
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d017      	beq.n	800b786 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b756:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <vTaskDelay+0x60>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <vTaskDelay+0x30>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	60bb      	str	r3, [r7, #8]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b774:	f000 f88c 	bl	800b890 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b778:	2100      	movs	r1, #0
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fd1e 	bl	800c1bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b780:	f000 f894 	bl	800b8ac <xTaskResumeAll>
 800b784:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d107      	bne.n	800b79c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b78c:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <vTaskDelay+0x64>)
 800b78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	2000111c 	.word	0x2000111c
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08a      	sub	sp, #40	; 0x28
 800b7b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ba:	463a      	mov	r2, r7
 800b7bc:	1d39      	adds	r1, r7, #4
 800b7be:	f107 0308 	add.w	r3, r7, #8
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff f82e 	bl	800a824 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	9202      	str	r2, [sp, #8]
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	460a      	mov	r2, r1
 800b7da:	4925      	ldr	r1, [pc, #148]	; (800b870 <vTaskStartScheduler+0xc4>)
 800b7dc:	4825      	ldr	r0, [pc, #148]	; (800b874 <vTaskStartScheduler+0xc8>)
 800b7de:	f7ff fdf5 	bl	800b3cc <xTaskCreateStatic>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	4a24      	ldr	r2, [pc, #144]	; (800b878 <vTaskStartScheduler+0xcc>)
 800b7e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7e8:	4b23      	ldr	r3, [pc, #140]	; (800b878 <vTaskStartScheduler+0xcc>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	e001      	b.n	800b7fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d102      	bne.n	800b806 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b800:	f000 fd30 	bl	800c264 <xTimerCreateTimerTask>
 800b804:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d11d      	bne.n	800b848 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	613b      	str	r3, [r7, #16]
}
 800b81e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b820:	4b16      	ldr	r3, [pc, #88]	; (800b87c <vTaskStartScheduler+0xd0>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3358      	adds	r3, #88	; 0x58
 800b826:	4a16      	ldr	r2, [pc, #88]	; (800b880 <vTaskStartScheduler+0xd4>)
 800b828:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b82a:	4b16      	ldr	r3, [pc, #88]	; (800b884 <vTaskStartScheduler+0xd8>)
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b832:	4b15      	ldr	r3, [pc, #84]	; (800b888 <vTaskStartScheduler+0xdc>)
 800b834:	2201      	movs	r2, #1
 800b836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b838:	4b14      	ldr	r3, [pc, #80]	; (800b88c <vTaskStartScheduler+0xe0>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b83e:	f7f4 ffad 	bl	800079c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b842:	f001 f8e5 	bl	800ca10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b846:	e00e      	b.n	800b866 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84e:	d10a      	bne.n	800b866 <vTaskStartScheduler+0xba>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	60fb      	str	r3, [r7, #12]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <vTaskStartScheduler+0xb8>
}
 800b866:	bf00      	nop
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	0800f3b0 	.word	0x0800f3b0
 800b874:	0800beed 	.word	0x0800beed
 800b878:	20001118 	.word	0x20001118
 800b87c:	20000c20 	.word	0x20000c20
 800b880:	20000250 	.word	0x20000250
 800b884:	20001114 	.word	0x20001114
 800b888:	20001100 	.word	0x20001100
 800b88c:	200010f8 	.word	0x200010f8

0800b890 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b890:	b480      	push	{r7}
 800b892:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b894:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <vTaskSuspendAll+0x18>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3301      	adds	r3, #1
 800b89a:	4a03      	ldr	r2, [pc, #12]	; (800b8a8 <vTaskSuspendAll+0x18>)
 800b89c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b89e:	bf00      	nop
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	2000111c 	.word	0x2000111c

0800b8ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8ba:	4b42      	ldr	r3, [pc, #264]	; (800b9c4 <xTaskResumeAll+0x118>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	603b      	str	r3, [r7, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	e7fe      	b.n	800b8d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8d8:	f001 f93c 	bl	800cb54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8dc:	4b39      	ldr	r3, [pc, #228]	; (800b9c4 <xTaskResumeAll+0x118>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	4a38      	ldr	r2, [pc, #224]	; (800b9c4 <xTaskResumeAll+0x118>)
 800b8e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8e6:	4b37      	ldr	r3, [pc, #220]	; (800b9c4 <xTaskResumeAll+0x118>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d162      	bne.n	800b9b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8ee:	4b36      	ldr	r3, [pc, #216]	; (800b9c8 <xTaskResumeAll+0x11c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d05e      	beq.n	800b9b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8f6:	e02f      	b.n	800b958 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f8:	4b34      	ldr	r3, [pc, #208]	; (800b9cc <xTaskResumeAll+0x120>)
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3318      	adds	r3, #24
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff f84b 	bl	800a9a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff f846 	bl	800a9a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b918:	4b2d      	ldr	r3, [pc, #180]	; (800b9d0 <xTaskResumeAll+0x124>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d903      	bls.n	800b928 <xTaskResumeAll+0x7c>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	4a2a      	ldr	r2, [pc, #168]	; (800b9d0 <xTaskResumeAll+0x124>)
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4a27      	ldr	r2, [pc, #156]	; (800b9d4 <xTaskResumeAll+0x128>)
 800b936:	441a      	add	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3304      	adds	r3, #4
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7fe ffd1 	bl	800a8e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b948:	4b23      	ldr	r3, [pc, #140]	; (800b9d8 <xTaskResumeAll+0x12c>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	429a      	cmp	r2, r3
 800b950:	d302      	bcc.n	800b958 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b952:	4b22      	ldr	r3, [pc, #136]	; (800b9dc <xTaskResumeAll+0x130>)
 800b954:	2201      	movs	r2, #1
 800b956:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b958:	4b1c      	ldr	r3, [pc, #112]	; (800b9cc <xTaskResumeAll+0x120>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1cb      	bne.n	800b8f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b966:	f000 fb7d 	bl	800c064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b96a:	4b1d      	ldr	r3, [pc, #116]	; (800b9e0 <xTaskResumeAll+0x134>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d010      	beq.n	800b998 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b976:	f000 f847 	bl	800ba08 <xTaskIncrementTick>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b980:	4b16      	ldr	r3, [pc, #88]	; (800b9dc <xTaskResumeAll+0x130>)
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3b01      	subs	r3, #1
 800b98a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f1      	bne.n	800b976 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <xTaskResumeAll+0x134>)
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b998:	4b10      	ldr	r3, [pc, #64]	; (800b9dc <xTaskResumeAll+0x130>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d009      	beq.n	800b9b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9a4:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <xTaskResumeAll+0x138>)
 800b9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9b4:	f001 f8fe 	bl	800cbb4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000111c 	.word	0x2000111c
 800b9c8:	200010f4 	.word	0x200010f4
 800b9cc:	200010b4 	.word	0x200010b4
 800b9d0:	200010fc 	.word	0x200010fc
 800b9d4:	20000c24 	.word	0x20000c24
 800b9d8:	20000c20 	.word	0x20000c20
 800b9dc:	20001108 	.word	0x20001108
 800b9e0:	20001104 	.word	0x20001104
 800b9e4:	e000ed04 	.word	0xe000ed04

0800b9e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <xTaskGetTickCount+0x1c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9f4:	687b      	ldr	r3, [r7, #4]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	200010f8 	.word	0x200010f8

0800ba08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba12:	4b4f      	ldr	r3, [pc, #316]	; (800bb50 <xTaskIncrementTick+0x148>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f040 808f 	bne.w	800bb3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba1c:	4b4d      	ldr	r3, [pc, #308]	; (800bb54 <xTaskIncrementTick+0x14c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba24:	4a4b      	ldr	r2, [pc, #300]	; (800bb54 <xTaskIncrementTick+0x14c>)
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d120      	bne.n	800ba72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba30:	4b49      	ldr	r3, [pc, #292]	; (800bb58 <xTaskIncrementTick+0x150>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	603b      	str	r3, [r7, #0]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <xTaskIncrementTick+0x46>
 800ba50:	4b41      	ldr	r3, [pc, #260]	; (800bb58 <xTaskIncrementTick+0x150>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60fb      	str	r3, [r7, #12]
 800ba56:	4b41      	ldr	r3, [pc, #260]	; (800bb5c <xTaskIncrementTick+0x154>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a3f      	ldr	r2, [pc, #252]	; (800bb58 <xTaskIncrementTick+0x150>)
 800ba5c:	6013      	str	r3, [r2, #0]
 800ba5e:	4a3f      	ldr	r2, [pc, #252]	; (800bb5c <xTaskIncrementTick+0x154>)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	4b3e      	ldr	r3, [pc, #248]	; (800bb60 <xTaskIncrementTick+0x158>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	4a3d      	ldr	r2, [pc, #244]	; (800bb60 <xTaskIncrementTick+0x158>)
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	f000 faf9 	bl	800c064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba72:	4b3c      	ldr	r3, [pc, #240]	; (800bb64 <xTaskIncrementTick+0x15c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d349      	bcc.n	800bb10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba7c:	4b36      	ldr	r3, [pc, #216]	; (800bb58 <xTaskIncrementTick+0x150>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d104      	bne.n	800ba90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba86:	4b37      	ldr	r3, [pc, #220]	; (800bb64 <xTaskIncrementTick+0x15c>)
 800ba88:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8c:	601a      	str	r2, [r3, #0]
					break;
 800ba8e:	e03f      	b.n	800bb10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba90:	4b31      	ldr	r3, [pc, #196]	; (800bb58 <xTaskIncrementTick+0x150>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d203      	bcs.n	800bab0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800baa8:	4a2e      	ldr	r2, [pc, #184]	; (800bb64 <xTaskIncrementTick+0x15c>)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800baae:	e02f      	b.n	800bb10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	3304      	adds	r3, #4
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe ff73 	bl	800a9a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	3318      	adds	r3, #24
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fe ff6a 	bl	800a9a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad0:	4b25      	ldr	r3, [pc, #148]	; (800bb68 <xTaskIncrementTick+0x160>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d903      	bls.n	800bae0 <xTaskIncrementTick+0xd8>
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	4a22      	ldr	r2, [pc, #136]	; (800bb68 <xTaskIncrementTick+0x160>)
 800bade:	6013      	str	r3, [r2, #0]
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4a1f      	ldr	r2, [pc, #124]	; (800bb6c <xTaskIncrementTick+0x164>)
 800baee:	441a      	add	r2, r3
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	3304      	adds	r3, #4
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f7fe fef5 	bl	800a8e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb00:	4b1b      	ldr	r3, [pc, #108]	; (800bb70 <xTaskIncrementTick+0x168>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d3b8      	bcc.n	800ba7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb0e:	e7b5      	b.n	800ba7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb10:	4b17      	ldr	r3, [pc, #92]	; (800bb70 <xTaskIncrementTick+0x168>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb16:	4915      	ldr	r1, [pc, #84]	; (800bb6c <xTaskIncrementTick+0x164>)
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	440b      	add	r3, r1
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d901      	bls.n	800bb2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb2c:	4b11      	ldr	r3, [pc, #68]	; (800bb74 <xTaskIncrementTick+0x16c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d007      	beq.n	800bb44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb34:	2301      	movs	r3, #1
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	e004      	b.n	800bb44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb3a:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <xTaskIncrementTick+0x170>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	4a0d      	ldr	r2, [pc, #52]	; (800bb78 <xTaskIncrementTick+0x170>)
 800bb42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb44:	697b      	ldr	r3, [r7, #20]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	2000111c 	.word	0x2000111c
 800bb54:	200010f8 	.word	0x200010f8
 800bb58:	200010ac 	.word	0x200010ac
 800bb5c:	200010b0 	.word	0x200010b0
 800bb60:	2000110c 	.word	0x2000110c
 800bb64:	20001114 	.word	0x20001114
 800bb68:	200010fc 	.word	0x200010fc
 800bb6c:	20000c24 	.word	0x20000c24
 800bb70:	20000c20 	.word	0x20000c20
 800bb74:	20001108 	.word	0x20001108
 800bb78:	20001104 	.word	0x20001104

0800bb7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb82:	4b36      	ldr	r3, [pc, #216]	; (800bc5c <vTaskSwitchContext+0xe0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb8a:	4b35      	ldr	r3, [pc, #212]	; (800bc60 <vTaskSwitchContext+0xe4>)
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb90:	e05f      	b.n	800bc52 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800bb92:	4b33      	ldr	r3, [pc, #204]	; (800bc60 <vTaskSwitchContext+0xe4>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bb98:	f7f4 fe08 	bl	80007ac <getRunTimeCounterValue>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	4a31      	ldr	r2, [pc, #196]	; (800bc64 <vTaskSwitchContext+0xe8>)
 800bba0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bba2:	4b30      	ldr	r3, [pc, #192]	; (800bc64 <vTaskSwitchContext+0xe8>)
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	4b30      	ldr	r3, [pc, #192]	; (800bc68 <vTaskSwitchContext+0xec>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d909      	bls.n	800bbc2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bbae:	4b2f      	ldr	r3, [pc, #188]	; (800bc6c <vTaskSwitchContext+0xf0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbb4:	4a2b      	ldr	r2, [pc, #172]	; (800bc64 <vTaskSwitchContext+0xe8>)
 800bbb6:	6810      	ldr	r0, [r2, #0]
 800bbb8:	4a2b      	ldr	r2, [pc, #172]	; (800bc68 <vTaskSwitchContext+0xec>)
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	1a82      	subs	r2, r0, r2
 800bbbe:	440a      	add	r2, r1
 800bbc0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bbc2:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <vTaskSwitchContext+0xe8>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a28      	ldr	r2, [pc, #160]	; (800bc68 <vTaskSwitchContext+0xec>)
 800bbc8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbca:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <vTaskSwitchContext+0xf4>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	e010      	b.n	800bbf4 <vTaskSwitchContext+0x78>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10a      	bne.n	800bbee <vTaskSwitchContext+0x72>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	607b      	str	r3, [r7, #4]
}
 800bbea:	bf00      	nop
 800bbec:	e7fe      	b.n	800bbec <vTaskSwitchContext+0x70>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	491f      	ldr	r1, [pc, #124]	; (800bc74 <vTaskSwitchContext+0xf8>)
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	440b      	add	r3, r1
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0e4      	beq.n	800bbd2 <vTaskSwitchContext+0x56>
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4413      	add	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4a18      	ldr	r2, [pc, #96]	; (800bc74 <vTaskSwitchContext+0xf8>)
 800bc14:	4413      	add	r3, r2
 800bc16:	60bb      	str	r3, [r7, #8]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	605a      	str	r2, [r3, #4]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	3308      	adds	r3, #8
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d104      	bne.n	800bc38 <vTaskSwitchContext+0xbc>
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	605a      	str	r2, [r3, #4]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	4a0b      	ldr	r2, [pc, #44]	; (800bc6c <vTaskSwitchContext+0xf0>)
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	4a0b      	ldr	r2, [pc, #44]	; (800bc70 <vTaskSwitchContext+0xf4>)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <vTaskSwitchContext+0xf0>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3358      	adds	r3, #88	; 0x58
 800bc4e:	4a0a      	ldr	r2, [pc, #40]	; (800bc78 <vTaskSwitchContext+0xfc>)
 800bc50:	6013      	str	r3, [r2, #0]
}
 800bc52:	bf00      	nop
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	2000111c 	.word	0x2000111c
 800bc60:	20001108 	.word	0x20001108
 800bc64:	20001124 	.word	0x20001124
 800bc68:	20001120 	.word	0x20001120
 800bc6c:	20000c20 	.word	0x20000c20
 800bc70:	200010fc 	.word	0x200010fc
 800bc74:	20000c24 	.word	0x20000c24
 800bc78:	20000250 	.word	0x20000250

0800bc7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	60fb      	str	r3, [r7, #12]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bca2:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <vTaskPlaceOnEventList+0x44>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3318      	adds	r3, #24
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7fe fe3f 	bl	800a92e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	6838      	ldr	r0, [r7, #0]
 800bcb4:	f000 fa82 	bl	800c1bc <prvAddCurrentTaskToDelayedList>
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20000c20 	.word	0x20000c20

0800bcc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	617b      	str	r3, [r7, #20]
}
 800bce8:	bf00      	nop
 800bcea:	e7fe      	b.n	800bcea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3318      	adds	r3, #24
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7fe fdf6 	bl	800a8e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd00:	f04f 33ff 	mov.w	r3, #4294967295
 800bd04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd06:	6879      	ldr	r1, [r7, #4]
 800bd08:	68b8      	ldr	r0, [r7, #8]
 800bd0a:	f000 fa57 	bl	800c1bc <prvAddCurrentTaskToDelayedList>
	}
 800bd0e:	bf00      	nop
 800bd10:	3718      	adds	r7, #24
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20000c20 	.word	0x20000c20

0800bd1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10a      	bne.n	800bd48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	60fb      	str	r3, [r7, #12]
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	3318      	adds	r3, #24
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fe27 	bl	800a9a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd52:	4b1e      	ldr	r3, [pc, #120]	; (800bdcc <xTaskRemoveFromEventList+0xb0>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d11d      	bne.n	800bd96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe fe1e 	bl	800a9a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd68:	4b19      	ldr	r3, [pc, #100]	; (800bdd0 <xTaskRemoveFromEventList+0xb4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d903      	bls.n	800bd78 <xTaskRemoveFromEventList+0x5c>
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	4a16      	ldr	r2, [pc, #88]	; (800bdd0 <xTaskRemoveFromEventList+0xb4>)
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4a13      	ldr	r2, [pc, #76]	; (800bdd4 <xTaskRemoveFromEventList+0xb8>)
 800bd86:	441a      	add	r2, r3
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	4610      	mov	r0, r2
 800bd90:	f7fe fda9 	bl	800a8e6 <vListInsertEnd>
 800bd94:	e005      	b.n	800bda2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	3318      	adds	r3, #24
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	480e      	ldr	r0, [pc, #56]	; (800bdd8 <xTaskRemoveFromEventList+0xbc>)
 800bd9e:	f7fe fda2 	bl	800a8e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda6:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <xTaskRemoveFromEventList+0xc0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d905      	bls.n	800bdbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <xTaskRemoveFromEventList+0xc4>)
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	e001      	b.n	800bdc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdc0:	697b      	ldr	r3, [r7, #20]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	2000111c 	.word	0x2000111c
 800bdd0:	200010fc 	.word	0x200010fc
 800bdd4:	20000c24 	.word	0x20000c24
 800bdd8:	200010b4 	.word	0x200010b4
 800bddc:	20000c20 	.word	0x20000c20
 800bde0:	20001108 	.word	0x20001108

0800bde4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <vTaskInternalSetTimeOutState+0x24>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <vTaskInternalSetTimeOutState+0x28>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	605a      	str	r2, [r3, #4]
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	2000110c 	.word	0x2000110c
 800be0c:	200010f8 	.word	0x200010f8

0800be10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10a      	bne.n	800be36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	613b      	str	r3, [r7, #16]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	60fb      	str	r3, [r7, #12]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be52:	f000 fe7f 	bl	800cb54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be56:	4b1d      	ldr	r3, [pc, #116]	; (800becc <xTaskCheckForTimeOut+0xbc>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	69ba      	ldr	r2, [r7, #24]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d102      	bne.n	800be76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be70:	2300      	movs	r3, #0
 800be72:	61fb      	str	r3, [r7, #28]
 800be74:	e023      	b.n	800bebe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	4b15      	ldr	r3, [pc, #84]	; (800bed0 <xTaskCheckForTimeOut+0xc0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d007      	beq.n	800be92 <xTaskCheckForTimeOut+0x82>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d302      	bcc.n	800be92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be8c:	2301      	movs	r3, #1
 800be8e:	61fb      	str	r3, [r7, #28]
 800be90:	e015      	b.n	800bebe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d20b      	bcs.n	800beb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff ff9b 	bl	800bde4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800beae:	2300      	movs	r3, #0
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	e004      	b.n	800bebe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2200      	movs	r2, #0
 800beb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800beba:	2301      	movs	r3, #1
 800bebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bebe:	f000 fe79 	bl	800cbb4 <vPortExitCritical>

	return xReturn;
 800bec2:	69fb      	ldr	r3, [r7, #28]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	200010f8 	.word	0x200010f8
 800bed0:	2000110c 	.word	0x2000110c

0800bed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bed4:	b480      	push	{r7}
 800bed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bed8:	4b03      	ldr	r3, [pc, #12]	; (800bee8 <vTaskMissedYield+0x14>)
 800beda:	2201      	movs	r2, #1
 800bedc:	601a      	str	r2, [r3, #0]
}
 800bede:	bf00      	nop
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	20001108 	.word	0x20001108

0800beec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bef4:	f000 f854 	bl	800bfa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bef8:	4b07      	ldr	r3, [pc, #28]	; (800bf18 <prvIdleTask+0x2c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d907      	bls.n	800bf10 <prvIdleTask+0x24>
			{
				taskYIELD();
 800bf00:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <prvIdleTask+0x30>)
 800bf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bf10:	f7f4 fc58 	bl	80007c4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bf14:	e7ee      	b.n	800bef4 <prvIdleTask+0x8>
 800bf16:	bf00      	nop
 800bf18:	20000c24 	.word	0x20000c24
 800bf1c:	e000ed04 	.word	0xe000ed04

0800bf20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf26:	2300      	movs	r3, #0
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	e00c      	b.n	800bf46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	4413      	add	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4a12      	ldr	r2, [pc, #72]	; (800bf80 <prvInitialiseTaskLists+0x60>)
 800bf38:	4413      	add	r3, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fca6 	bl	800a88c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3301      	adds	r3, #1
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b37      	cmp	r3, #55	; 0x37
 800bf4a:	d9ef      	bls.n	800bf2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf4c:	480d      	ldr	r0, [pc, #52]	; (800bf84 <prvInitialiseTaskLists+0x64>)
 800bf4e:	f7fe fc9d 	bl	800a88c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf52:	480d      	ldr	r0, [pc, #52]	; (800bf88 <prvInitialiseTaskLists+0x68>)
 800bf54:	f7fe fc9a 	bl	800a88c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf58:	480c      	ldr	r0, [pc, #48]	; (800bf8c <prvInitialiseTaskLists+0x6c>)
 800bf5a:	f7fe fc97 	bl	800a88c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf5e:	480c      	ldr	r0, [pc, #48]	; (800bf90 <prvInitialiseTaskLists+0x70>)
 800bf60:	f7fe fc94 	bl	800a88c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf64:	480b      	ldr	r0, [pc, #44]	; (800bf94 <prvInitialiseTaskLists+0x74>)
 800bf66:	f7fe fc91 	bl	800a88c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf6a:	4b0b      	ldr	r3, [pc, #44]	; (800bf98 <prvInitialiseTaskLists+0x78>)
 800bf6c:	4a05      	ldr	r2, [pc, #20]	; (800bf84 <prvInitialiseTaskLists+0x64>)
 800bf6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf70:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <prvInitialiseTaskLists+0x7c>)
 800bf72:	4a05      	ldr	r2, [pc, #20]	; (800bf88 <prvInitialiseTaskLists+0x68>)
 800bf74:	601a      	str	r2, [r3, #0]
}
 800bf76:	bf00      	nop
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000c24 	.word	0x20000c24
 800bf84:	20001084 	.word	0x20001084
 800bf88:	20001098 	.word	0x20001098
 800bf8c:	200010b4 	.word	0x200010b4
 800bf90:	200010c8 	.word	0x200010c8
 800bf94:	200010e0 	.word	0x200010e0
 800bf98:	200010ac 	.word	0x200010ac
 800bf9c:	200010b0 	.word	0x200010b0

0800bfa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfa6:	e019      	b.n	800bfdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfa8:	f000 fdd4 	bl	800cb54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfac:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <prvCheckTasksWaitingTermination+0x50>)
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe fcf1 	bl	800a9a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	; (800bff4 <prvCheckTasksWaitingTermination+0x54>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	4a0b      	ldr	r2, [pc, #44]	; (800bff4 <prvCheckTasksWaitingTermination+0x54>)
 800bfc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfc8:	4b0b      	ldr	r3, [pc, #44]	; (800bff8 <prvCheckTasksWaitingTermination+0x58>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <prvCheckTasksWaitingTermination+0x58>)
 800bfd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfd2:	f000 fdef 	bl	800cbb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f810 	bl	800bffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfdc:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <prvCheckTasksWaitingTermination+0x58>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e1      	bne.n	800bfa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	200010c8 	.word	0x200010c8
 800bff4:	200010f4 	.word	0x200010f4
 800bff8:	200010dc 	.word	0x200010dc

0800bffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3358      	adds	r3, #88	; 0x58
 800c008:	4618      	mov	r0, r3
 800c00a:	f002 f825 	bl	800e058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c014:	2b00      	cmp	r3, #0
 800c016:	d108      	bne.n	800c02a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 ff87 	bl	800cf30 <vPortFree>
				vPortFree( pxTCB );
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 ff84 	bl	800cf30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c028:	e018      	b.n	800c05c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c030:	2b01      	cmp	r3, #1
 800c032:	d103      	bne.n	800c03c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 ff7b 	bl	800cf30 <vPortFree>
	}
 800c03a:	e00f      	b.n	800c05c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c042:	2b02      	cmp	r3, #2
 800c044:	d00a      	beq.n	800c05c <prvDeleteTCB+0x60>
	__asm volatile
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	60fb      	str	r3, [r7, #12]
}
 800c058:	bf00      	nop
 800c05a:	e7fe      	b.n	800c05a <prvDeleteTCB+0x5e>
	}
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c06a:	4b0c      	ldr	r3, [pc, #48]	; (800c09c <prvResetNextTaskUnblockTime+0x38>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d104      	bne.n	800c07e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c074:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800c076:	f04f 32ff 	mov.w	r2, #4294967295
 800c07a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c07c:	e008      	b.n	800c090 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c07e:	4b07      	ldr	r3, [pc, #28]	; (800c09c <prvResetNextTaskUnblockTime+0x38>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	4a04      	ldr	r2, [pc, #16]	; (800c0a0 <prvResetNextTaskUnblockTime+0x3c>)
 800c08e:	6013      	str	r3, [r2, #0]
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	200010ac 	.word	0x200010ac
 800c0a0:	20001114 	.word	0x20001114

0800c0a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0aa:	4b0b      	ldr	r3, [pc, #44]	; (800c0d8 <xTaskGetSchedulerState+0x34>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d102      	bne.n	800c0b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	607b      	str	r3, [r7, #4]
 800c0b6:	e008      	b.n	800c0ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0b8:	4b08      	ldr	r3, [pc, #32]	; (800c0dc <xTaskGetSchedulerState+0x38>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d102      	bne.n	800c0c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	607b      	str	r3, [r7, #4]
 800c0c4:	e001      	b.n	800c0ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0ca:	687b      	ldr	r3, [r7, #4]
	}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	20001100 	.word	0x20001100
 800c0dc:	2000111c 	.word	0x2000111c

0800c0e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d056      	beq.n	800c1a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0f6:	4b2e      	ldr	r3, [pc, #184]	; (800c1b0 <xTaskPriorityDisinherit+0xd0>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d00a      	beq.n	800c116 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10a      	bne.n	800c134 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	60bb      	str	r3, [r7, #8]
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c138:	1e5a      	subs	r2, r3, #1
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c146:	429a      	cmp	r2, r3
 800c148:	d02c      	beq.n	800c1a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d128      	bne.n	800c1a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	3304      	adds	r3, #4
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe fc22 	bl	800a9a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c168:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c174:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <xTaskPriorityDisinherit+0xd4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d903      	bls.n	800c184 <xTaskPriorityDisinherit+0xa4>
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c180:	4a0c      	ldr	r2, [pc, #48]	; (800c1b4 <xTaskPriorityDisinherit+0xd4>)
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c188:	4613      	mov	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4a09      	ldr	r2, [pc, #36]	; (800c1b8 <xTaskPriorityDisinherit+0xd8>)
 800c192:	441a      	add	r2, r3
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	3304      	adds	r3, #4
 800c198:	4619      	mov	r1, r3
 800c19a:	4610      	mov	r0, r2
 800c19c:	f7fe fba3 	bl	800a8e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1a4:	697b      	ldr	r3, [r7, #20]
	}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20000c20 	.word	0x20000c20
 800c1b4:	200010fc 	.word	0x200010fc
 800c1b8:	20000c24 	.word	0x20000c24

0800c1bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1c6:	4b21      	ldr	r3, [pc, #132]	; (800c24c <prvAddCurrentTaskToDelayedList+0x90>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1cc:	4b20      	ldr	r3, [pc, #128]	; (800c250 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe fbe4 	bl	800a9a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1de:	d10a      	bne.n	800c1f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4819      	ldr	r0, [pc, #100]	; (800c254 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1f0:	f7fe fb79 	bl	800a8e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1f4:	e026      	b.n	800c244 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1fe:	4b14      	ldr	r3, [pc, #80]	; (800c250 <prvAddCurrentTaskToDelayedList+0x94>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d209      	bcs.n	800c222 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <prvAddCurrentTaskToDelayedList+0x94>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3304      	adds	r3, #4
 800c218:	4619      	mov	r1, r3
 800c21a:	4610      	mov	r0, r2
 800c21c:	f7fe fb87 	bl	800a92e <vListInsert>
}
 800c220:	e010      	b.n	800c244 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c222:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <prvAddCurrentTaskToDelayedList+0x94>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4619      	mov	r1, r3
 800c22e:	4610      	mov	r0, r2
 800c230:	f7fe fb7d 	bl	800a92e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c234:	4b0a      	ldr	r3, [pc, #40]	; (800c260 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d202      	bcs.n	800c244 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c23e:	4a08      	ldr	r2, [pc, #32]	; (800c260 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	6013      	str	r3, [r2, #0]
}
 800c244:	bf00      	nop
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	200010f8 	.word	0x200010f8
 800c250:	20000c20 	.word	0x20000c20
 800c254:	200010e0 	.word	0x200010e0
 800c258:	200010b0 	.word	0x200010b0
 800c25c:	200010ac 	.word	0x200010ac
 800c260:	20001114 	.word	0x20001114

0800c264 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08a      	sub	sp, #40	; 0x28
 800c268:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c26e:	f000 fb07 	bl	800c880 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c272:	4b1c      	ldr	r3, [pc, #112]	; (800c2e4 <xTimerCreateTimerTask+0x80>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d021      	beq.n	800c2be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c282:	1d3a      	adds	r2, r7, #4
 800c284:	f107 0108 	add.w	r1, r7, #8
 800c288:	f107 030c 	add.w	r3, r7, #12
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe fae3 	bl	800a858 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	9202      	str	r2, [sp, #8]
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	2302      	movs	r3, #2
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	460a      	mov	r2, r1
 800c2a4:	4910      	ldr	r1, [pc, #64]	; (800c2e8 <xTimerCreateTimerTask+0x84>)
 800c2a6:	4811      	ldr	r0, [pc, #68]	; (800c2ec <xTimerCreateTimerTask+0x88>)
 800c2a8:	f7ff f890 	bl	800b3cc <xTaskCreateStatic>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	4a10      	ldr	r2, [pc, #64]	; (800c2f0 <xTimerCreateTimerTask+0x8c>)
 800c2b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2b2:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <xTimerCreateTimerTask+0x8c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10a      	bne.n	800c2da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	613b      	str	r3, [r7, #16]
}
 800c2d6:	bf00      	nop
 800c2d8:	e7fe      	b.n	800c2d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2da:	697b      	ldr	r3, [r7, #20]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20001158 	.word	0x20001158
 800c2e8:	0800f3e0 	.word	0x0800f3e0
 800c2ec:	0800c429 	.word	0x0800c429
 800c2f0:	2000115c 	.word	0x2000115c

0800c2f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08a      	sub	sp, #40	; 0x28
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c302:	2300      	movs	r3, #0
 800c304:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	623b      	str	r3, [r7, #32]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c322:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <xTimerGenericCommand+0x98>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d02a      	beq.n	800c380 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b05      	cmp	r3, #5
 800c33a:	dc18      	bgt.n	800c36e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c33c:	f7ff feb2 	bl	800c0a4 <xTaskGetSchedulerState>
 800c340:	4603      	mov	r3, r0
 800c342:	2b02      	cmp	r3, #2
 800c344:	d109      	bne.n	800c35a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c346:	4b11      	ldr	r3, [pc, #68]	; (800c38c <xTimerGenericCommand+0x98>)
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	f107 0110 	add.w	r1, r7, #16
 800c34e:	2300      	movs	r3, #0
 800c350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c352:	f7fe fc53 	bl	800abfc <xQueueGenericSend>
 800c356:	6278      	str	r0, [r7, #36]	; 0x24
 800c358:	e012      	b.n	800c380 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c35a:	4b0c      	ldr	r3, [pc, #48]	; (800c38c <xTimerGenericCommand+0x98>)
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	f107 0110 	add.w	r1, r7, #16
 800c362:	2300      	movs	r3, #0
 800c364:	2200      	movs	r2, #0
 800c366:	f7fe fc49 	bl	800abfc <xQueueGenericSend>
 800c36a:	6278      	str	r0, [r7, #36]	; 0x24
 800c36c:	e008      	b.n	800c380 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <xTimerGenericCommand+0x98>)
 800c370:	6818      	ldr	r0, [r3, #0]
 800c372:	f107 0110 	add.w	r1, r7, #16
 800c376:	2300      	movs	r3, #0
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	f7fe fd3d 	bl	800adf8 <xQueueGenericSendFromISR>
 800c37e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c382:	4618      	mov	r0, r3
 800c384:	3728      	adds	r7, #40	; 0x28
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20001158 	.word	0x20001158

0800c390 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af02      	add	r7, sp, #8
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c39a:	4b22      	ldr	r3, [pc, #136]	; (800c424 <prvProcessExpiredTimer+0x94>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe faf9 	bl	800a9a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d022      	beq.n	800c402 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	699a      	ldr	r2, [r3, #24]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	18d1      	adds	r1, r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	6978      	ldr	r0, [r7, #20]
 800c3ca:	f000 f8d1 	bl	800c570 <prvInsertTimerInActiveList>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01f      	beq.n	800c414 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	2300      	movs	r3, #0
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6978      	ldr	r0, [r7, #20]
 800c3e0:	f7ff ff88 	bl	800c2f4 <xTimerGenericCommand>
 800c3e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d113      	bne.n	800c414 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	60fb      	str	r3, [r7, #12]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c408:	f023 0301 	bic.w	r3, r3, #1
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	6978      	ldr	r0, [r7, #20]
 800c41a:	4798      	blx	r3
}
 800c41c:	bf00      	nop
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20001150 	.word	0x20001150

0800c428 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c430:	f107 0308 	add.w	r3, r7, #8
 800c434:	4618      	mov	r0, r3
 800c436:	f000 f857 	bl	800c4e8 <prvGetNextExpireTime>
 800c43a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	4619      	mov	r1, r3
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f803 	bl	800c44c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c446:	f000 f8d5 	bl	800c5f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c44a:	e7f1      	b.n	800c430 <prvTimerTask+0x8>

0800c44c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c456:	f7ff fa1b 	bl	800b890 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 f866 	bl	800c530 <prvSampleTimeNow>
 800c464:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d130      	bne.n	800c4ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <prvProcessTimerOrBlockTask+0x3c>
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	429a      	cmp	r2, r3
 800c478:	d806      	bhi.n	800c488 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c47a:	f7ff fa17 	bl	800b8ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c47e:	68f9      	ldr	r1, [r7, #12]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ff85 	bl	800c390 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c486:	e024      	b.n	800c4d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d008      	beq.n	800c4a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c48e:	4b13      	ldr	r3, [pc, #76]	; (800c4dc <prvProcessTimerOrBlockTask+0x90>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <prvProcessTimerOrBlockTask+0x50>
 800c498:	2301      	movs	r3, #1
 800c49a:	e000      	b.n	800c49e <prvProcessTimerOrBlockTask+0x52>
 800c49c:	2300      	movs	r3, #0
 800c49e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4a0:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <prvProcessTimerOrBlockTask+0x94>)
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	f7fe ff59 	bl	800b364 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4b2:	f7ff f9fb 	bl	800b8ac <xTaskResumeAll>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10a      	bne.n	800c4d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4bc:	4b09      	ldr	r3, [pc, #36]	; (800c4e4 <prvProcessTimerOrBlockTask+0x98>)
 800c4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	f3bf 8f6f 	isb	sy
}
 800c4cc:	e001      	b.n	800c4d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4ce:	f7ff f9ed 	bl	800b8ac <xTaskResumeAll>
}
 800c4d2:	bf00      	nop
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	20001154 	.word	0x20001154
 800c4e0:	20001158 	.word	0x20001158
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4f0:	4b0e      	ldr	r3, [pc, #56]	; (800c52c <prvGetNextExpireTime+0x44>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <prvGetNextExpireTime+0x16>
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	e000      	b.n	800c500 <prvGetNextExpireTime+0x18>
 800c4fe:	2200      	movs	r2, #0
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d105      	bne.n	800c518 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c50c:	4b07      	ldr	r3, [pc, #28]	; (800c52c <prvGetNextExpireTime+0x44>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	e001      	b.n	800c51c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c51c:	68fb      	ldr	r3, [r7, #12]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20001150 	.word	0x20001150

0800c530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c538:	f7ff fa56 	bl	800b9e8 <xTaskGetTickCount>
 800c53c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c53e:	4b0b      	ldr	r3, [pc, #44]	; (800c56c <prvSampleTimeNow+0x3c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	429a      	cmp	r2, r3
 800c546:	d205      	bcs.n	800c554 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c548:	f000 f936 	bl	800c7b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	e002      	b.n	800c55a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c55a:	4a04      	ldr	r2, [pc, #16]	; (800c56c <prvSampleTimeNow+0x3c>)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c560:	68fb      	ldr	r3, [r7, #12]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20001160 	.word	0x20001160

0800c570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
 800c57c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	429a      	cmp	r2, r3
 800c594:	d812      	bhi.n	800c5bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d302      	bcc.n	800c5aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	e01b      	b.n	800c5e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5aa:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <prvInsertTimerInActiveList+0x7c>)
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f7fe f9ba 	bl	800a92e <vListInsert>
 800c5ba:	e012      	b.n	800c5e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d206      	bcs.n	800c5d2 <prvInsertTimerInActiveList+0x62>
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d302      	bcc.n	800c5d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	e007      	b.n	800c5e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5d2:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <prvInsertTimerInActiveList+0x80>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7fe f9a6 	bl	800a92e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5e2:	697b      	ldr	r3, [r7, #20]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20001154 	.word	0x20001154
 800c5f0:	20001150 	.word	0x20001150

0800c5f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08e      	sub	sp, #56	; 0x38
 800c5f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5fa:	e0ca      	b.n	800c792 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da18      	bge.n	800c634 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c602:	1d3b      	adds	r3, r7, #4
 800c604:	3304      	adds	r3, #4
 800c606:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	61fb      	str	r3, [r7, #28]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62a:	6850      	ldr	r0, [r2, #4]
 800c62c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62e:	6892      	ldr	r2, [r2, #8]
 800c630:	4611      	mov	r1, r2
 800c632:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f2c0 80aa 	blt.w	800c790 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d004      	beq.n	800c652 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	3304      	adds	r3, #4
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe f9a7 	bl	800a9a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c652:	463b      	mov	r3, r7
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff ff6b 	bl	800c530 <prvSampleTimeNow>
 800c65a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b09      	cmp	r3, #9
 800c660:	f200 8097 	bhi.w	800c792 <prvProcessReceivedCommands+0x19e>
 800c664:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <prvProcessReceivedCommands+0x78>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c695 	.word	0x0800c695
 800c670:	0800c695 	.word	0x0800c695
 800c674:	0800c695 	.word	0x0800c695
 800c678:	0800c709 	.word	0x0800c709
 800c67c:	0800c71d 	.word	0x0800c71d
 800c680:	0800c767 	.word	0x0800c767
 800c684:	0800c695 	.word	0x0800c695
 800c688:	0800c695 	.word	0x0800c695
 800c68c:	0800c709 	.word	0x0800c709
 800c690:	0800c71d 	.word	0x0800c71d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c69a:	f043 0301 	orr.w	r3, r3, #1
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	18d1      	adds	r1, r2, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6b4:	f7ff ff5c 	bl	800c570 <prvInsertTimerInActiveList>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d069      	beq.n	800c792 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d05e      	beq.n	800c792 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	441a      	add	r2, r3
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e6:	f7ff fe05 	bl	800c2f4 <xTimerGenericCommand>
 800c6ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d14f      	bne.n	800c792 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	61bb      	str	r3, [r7, #24]
}
 800c704:	bf00      	nop
 800c706:	e7fe      	b.n	800c706 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c70e:	f023 0301 	bic.w	r3, r3, #1
 800c712:	b2da      	uxtb	r2, r3
 800c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c71a:	e03a      	b.n	800c792 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c722:	f043 0301 	orr.w	r3, r3, #1
 800c726:	b2da      	uxtb	r2, r3
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10a      	bne.n	800c752 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	617b      	str	r3, [r7, #20]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	699a      	ldr	r2, [r3, #24]
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	18d1      	adds	r1, r2, r3
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c760:	f7ff ff06 	bl	800c570 <prvInsertTimerInActiveList>
					break;
 800c764:	e015      	b.n	800c792 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76c:	f003 0302 	and.w	r3, r3, #2
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c776:	f000 fbdb 	bl	800cf30 <vPortFree>
 800c77a:	e00a      	b.n	800c792 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c782:	f023 0301 	bic.w	r3, r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c78e:	e000      	b.n	800c792 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c790:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c792:	4b08      	ldr	r3, [pc, #32]	; (800c7b4 <prvProcessReceivedCommands+0x1c0>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	1d39      	adds	r1, r7, #4
 800c798:	2200      	movs	r2, #0
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fbc8 	bl	800af30 <xQueueReceive>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f47f af2a 	bne.w	800c5fc <prvProcessReceivedCommands+0x8>
	}
}
 800c7a8:	bf00      	nop
 800c7aa:	bf00      	nop
 800c7ac:	3730      	adds	r7, #48	; 0x30
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20001158 	.word	0x20001158

0800c7b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b088      	sub	sp, #32
 800c7bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7be:	e048      	b.n	800c852 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7c0:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <prvSwitchTimerLists+0xc0>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ca:	4b2b      	ldr	r3, [pc, #172]	; (800c878 <prvSwitchTimerLists+0xc0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fe f8e1 	bl	800a9a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6a1b      	ldr	r3, [r3, #32]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d02e      	beq.n	800c852 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	429a      	cmp	r2, r3
 800c804:	d90e      	bls.n	800c824 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c812:	4b19      	ldr	r3, [pc, #100]	; (800c878 <prvSwitchTimerLists+0xc0>)
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3304      	adds	r3, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7fe f886 	bl	800a92e <vListInsert>
 800c822:	e016      	b.n	800c852 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c824:	2300      	movs	r3, #0
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	2300      	movs	r3, #0
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	2100      	movs	r1, #0
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7ff fd60 	bl	800c2f4 <xTimerGenericCommand>
 800c834:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	603b      	str	r3, [r7, #0]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c852:	4b09      	ldr	r3, [pc, #36]	; (800c878 <prvSwitchTimerLists+0xc0>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1b1      	bne.n	800c7c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <prvSwitchTimerLists+0xc0>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c862:	4b06      	ldr	r3, [pc, #24]	; (800c87c <prvSwitchTimerLists+0xc4>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a04      	ldr	r2, [pc, #16]	; (800c878 <prvSwitchTimerLists+0xc0>)
 800c868:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c86a:	4a04      	ldr	r2, [pc, #16]	; (800c87c <prvSwitchTimerLists+0xc4>)
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	6013      	str	r3, [r2, #0]
}
 800c870:	bf00      	nop
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20001150 	.word	0x20001150
 800c87c:	20001154 	.word	0x20001154

0800c880 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c886:	f000 f965 	bl	800cb54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c88a:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <prvCheckForValidListAndQueue+0x60>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d120      	bne.n	800c8d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c892:	4814      	ldr	r0, [pc, #80]	; (800c8e4 <prvCheckForValidListAndQueue+0x64>)
 800c894:	f7fd fffa 	bl	800a88c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c898:	4813      	ldr	r0, [pc, #76]	; (800c8e8 <prvCheckForValidListAndQueue+0x68>)
 800c89a:	f7fd fff7 	bl	800a88c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <prvCheckForValidListAndQueue+0x6c>)
 800c8a0:	4a10      	ldr	r2, [pc, #64]	; (800c8e4 <prvCheckForValidListAndQueue+0x64>)
 800c8a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8a4:	4b12      	ldr	r3, [pc, #72]	; (800c8f0 <prvCheckForValidListAndQueue+0x70>)
 800c8a6:	4a10      	ldr	r2, [pc, #64]	; (800c8e8 <prvCheckForValidListAndQueue+0x68>)
 800c8a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4b11      	ldr	r3, [pc, #68]	; (800c8f4 <prvCheckForValidListAndQueue+0x74>)
 800c8b0:	4a11      	ldr	r2, [pc, #68]	; (800c8f8 <prvCheckForValidListAndQueue+0x78>)
 800c8b2:	2110      	movs	r1, #16
 800c8b4:	200a      	movs	r0, #10
 800c8b6:	f7fe f905 	bl	800aac4 <xQueueGenericCreateStatic>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	4a08      	ldr	r2, [pc, #32]	; (800c8e0 <prvCheckForValidListAndQueue+0x60>)
 800c8be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <prvCheckForValidListAndQueue+0x60>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8c8:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <prvCheckForValidListAndQueue+0x60>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	490b      	ldr	r1, [pc, #44]	; (800c8fc <prvCheckForValidListAndQueue+0x7c>)
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe fd1e 	bl	800b310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8d4:	f000 f96e 	bl	800cbb4 <vPortExitCritical>
}
 800c8d8:	bf00      	nop
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20001158 	.word	0x20001158
 800c8e4:	20001128 	.word	0x20001128
 800c8e8:	2000113c 	.word	0x2000113c
 800c8ec:	20001150 	.word	0x20001150
 800c8f0:	20001154 	.word	0x20001154
 800c8f4:	20001204 	.word	0x20001204
 800c8f8:	20001164 	.word	0x20001164
 800c8fc:	0800f3e8 	.word	0x0800f3e8

0800c900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	3b04      	subs	r3, #4
 800c910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3b04      	subs	r3, #4
 800c91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	f023 0201 	bic.w	r2, r3, #1
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3b04      	subs	r3, #4
 800c92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c930:	4a0c      	ldr	r2, [pc, #48]	; (800c964 <pxPortInitialiseStack+0x64>)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3b14      	subs	r3, #20
 800c93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3b04      	subs	r3, #4
 800c946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f06f 0202 	mvn.w	r2, #2
 800c94e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	3b20      	subs	r3, #32
 800c954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c956:	68fb      	ldr	r3, [r7, #12]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	0800c969 	.word	0x0800c969

0800c968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c972:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <prvTaskExitError+0x54>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97a:	d00a      	beq.n	800c992 <prvTaskExitError+0x2a>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	60fb      	str	r3, [r7, #12]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <prvTaskExitError+0x28>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	60bb      	str	r3, [r7, #8]
}
 800c9a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9a6:	bf00      	nop
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0fc      	beq.n	800c9a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9ae:	bf00      	nop
 800c9b0:	bf00      	nop
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	200001e8 	.word	0x200001e8

0800c9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <pxCurrentTCBConst2>)
 800c9c2:	6819      	ldr	r1, [r3, #0]
 800c9c4:	6808      	ldr	r0, [r1, #0]
 800c9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ca:	f380 8809 	msr	PSP, r0
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f04f 0000 	mov.w	r0, #0
 800c9d6:	f380 8811 	msr	BASEPRI, r0
 800c9da:	4770      	bx	lr
 800c9dc:	f3af 8000 	nop.w

0800c9e0 <pxCurrentTCBConst2>:
 800c9e0:	20000c20 	.word	0x20000c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop

0800c9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9e8:	4808      	ldr	r0, [pc, #32]	; (800ca0c <prvPortStartFirstTask+0x24>)
 800c9ea:	6800      	ldr	r0, [r0, #0]
 800c9ec:	6800      	ldr	r0, [r0, #0]
 800c9ee:	f380 8808 	msr	MSP, r0
 800c9f2:	f04f 0000 	mov.w	r0, #0
 800c9f6:	f380 8814 	msr	CONTROL, r0
 800c9fa:	b662      	cpsie	i
 800c9fc:	b661      	cpsie	f
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	df00      	svc	0
 800ca08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca0a:	bf00      	nop
 800ca0c:	e000ed08 	.word	0xe000ed08

0800ca10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca16:	4b46      	ldr	r3, [pc, #280]	; (800cb30 <xPortStartScheduler+0x120>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a46      	ldr	r2, [pc, #280]	; (800cb34 <xPortStartScheduler+0x124>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d10a      	bne.n	800ca36 <xPortStartScheduler+0x26>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	613b      	str	r3, [r7, #16]
}
 800ca32:	bf00      	nop
 800ca34:	e7fe      	b.n	800ca34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca36:	4b3e      	ldr	r3, [pc, #248]	; (800cb30 <xPortStartScheduler+0x120>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a3f      	ldr	r2, [pc, #252]	; (800cb38 <xPortStartScheduler+0x128>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d10a      	bne.n	800ca56 <xPortStartScheduler+0x46>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60fb      	str	r3, [r7, #12]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca56:	4b39      	ldr	r3, [pc, #228]	; (800cb3c <xPortStartScheduler+0x12c>)
 800ca58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	22ff      	movs	r2, #255	; 0xff
 800ca66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	4b31      	ldr	r3, [pc, #196]	; (800cb40 <xPortStartScheduler+0x130>)
 800ca7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca7e:	4b31      	ldr	r3, [pc, #196]	; (800cb44 <xPortStartScheduler+0x134>)
 800ca80:	2207      	movs	r2, #7
 800ca82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca84:	e009      	b.n	800ca9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ca86:	4b2f      	ldr	r3, [pc, #188]	; (800cb44 <xPortStartScheduler+0x134>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	4a2d      	ldr	r2, [pc, #180]	; (800cb44 <xPortStartScheduler+0x134>)
 800ca8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca90:	78fb      	ldrb	r3, [r7, #3]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca9a:	78fb      	ldrb	r3, [r7, #3]
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caa2:	2b80      	cmp	r3, #128	; 0x80
 800caa4:	d0ef      	beq.n	800ca86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800caa6:	4b27      	ldr	r3, [pc, #156]	; (800cb44 <xPortStartScheduler+0x134>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f1c3 0307 	rsb	r3, r3, #7
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d00a      	beq.n	800cac8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	60bb      	str	r3, [r7, #8]
}
 800cac4:	bf00      	nop
 800cac6:	e7fe      	b.n	800cac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cac8:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <xPortStartScheduler+0x134>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	021b      	lsls	r3, r3, #8
 800cace:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <xPortStartScheduler+0x134>)
 800cad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <xPortStartScheduler+0x134>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cada:	4a1a      	ldr	r2, [pc, #104]	; (800cb44 <xPortStartScheduler+0x134>)
 800cadc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cae6:	4b18      	ldr	r3, [pc, #96]	; (800cb48 <xPortStartScheduler+0x138>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a17      	ldr	r2, [pc, #92]	; (800cb48 <xPortStartScheduler+0x138>)
 800caec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800caf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800caf2:	4b15      	ldr	r3, [pc, #84]	; (800cb48 <xPortStartScheduler+0x138>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a14      	ldr	r2, [pc, #80]	; (800cb48 <xPortStartScheduler+0x138>)
 800caf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cafc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cafe:	f000 f8dd 	bl	800ccbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb02:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <xPortStartScheduler+0x13c>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb08:	f000 f8fc 	bl	800cd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb0c:	4b10      	ldr	r3, [pc, #64]	; (800cb50 <xPortStartScheduler+0x140>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a0f      	ldr	r2, [pc, #60]	; (800cb50 <xPortStartScheduler+0x140>)
 800cb12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb18:	f7ff ff66 	bl	800c9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb1c:	f7ff f82e 	bl	800bb7c <vTaskSwitchContext>
	prvTaskExitError();
 800cb20:	f7ff ff22 	bl	800c968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	e000ed00 	.word	0xe000ed00
 800cb34:	410fc271 	.word	0x410fc271
 800cb38:	410fc270 	.word	0x410fc270
 800cb3c:	e000e400 	.word	0xe000e400
 800cb40:	20001254 	.word	0x20001254
 800cb44:	20001258 	.word	0x20001258
 800cb48:	e000ed20 	.word	0xe000ed20
 800cb4c:	200001e8 	.word	0x200001e8
 800cb50:	e000ef34 	.word	0xe000ef34

0800cb54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	607b      	str	r3, [r7, #4]
}
 800cb6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb6e:	4b0f      	ldr	r3, [pc, #60]	; (800cbac <vPortEnterCritical+0x58>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3301      	adds	r3, #1
 800cb74:	4a0d      	ldr	r2, [pc, #52]	; (800cbac <vPortEnterCritical+0x58>)
 800cb76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb78:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <vPortEnterCritical+0x58>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d10f      	bne.n	800cba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb80:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <vPortEnterCritical+0x5c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	603b      	str	r3, [r7, #0]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <vPortEnterCritical+0x4a>
	}
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	200001e8 	.word	0x200001e8
 800cbb0:	e000ed04 	.word	0xe000ed04

0800cbb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbba:	4b12      	ldr	r3, [pc, #72]	; (800cc04 <vPortExitCritical+0x50>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <vPortExitCritical+0x24>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	607b      	str	r3, [r7, #4]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cbd8:	4b0a      	ldr	r3, [pc, #40]	; (800cc04 <vPortExitCritical+0x50>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	4a09      	ldr	r2, [pc, #36]	; (800cc04 <vPortExitCritical+0x50>)
 800cbe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbe2:	4b08      	ldr	r3, [pc, #32]	; (800cc04 <vPortExitCritical+0x50>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <vPortExitCritical+0x42>
 800cbea:	2300      	movs	r3, #0
 800cbec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	f383 8811 	msr	BASEPRI, r3
}
 800cbf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbf6:	bf00      	nop
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	200001e8 	.word	0x200001e8
	...

0800cc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc10:	f3ef 8009 	mrs	r0, PSP
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	4b15      	ldr	r3, [pc, #84]	; (800cc70 <pxCurrentTCBConst>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	f01e 0f10 	tst.w	lr, #16
 800cc20:	bf08      	it	eq
 800cc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2a:	6010      	str	r0, [r2, #0]
 800cc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc34:	f380 8811 	msr	BASEPRI, r0
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f7fe ff9c 	bl	800bb7c <vTaskSwitchContext>
 800cc44:	f04f 0000 	mov.w	r0, #0
 800cc48:	f380 8811 	msr	BASEPRI, r0
 800cc4c:	bc09      	pop	{r0, r3}
 800cc4e:	6819      	ldr	r1, [r3, #0]
 800cc50:	6808      	ldr	r0, [r1, #0]
 800cc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc56:	f01e 0f10 	tst.w	lr, #16
 800cc5a:	bf08      	it	eq
 800cc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc60:	f380 8809 	msr	PSP, r0
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	f3af 8000 	nop.w

0800cc70 <pxCurrentTCBConst>:
 800cc70:	20000c20 	.word	0x20000c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop

0800cc78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	607b      	str	r3, [r7, #4]
}
 800cc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc92:	f7fe feb9 	bl	800ba08 <xTaskIncrementTick>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d003      	beq.n	800cca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <xPortSysTickHandler+0x40>)
 800cc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	2300      	movs	r3, #0
 800cca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	f383 8811 	msr	BASEPRI, r3
}
 800ccae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccb0:	bf00      	nop
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	e000ed04 	.word	0xe000ed04

0800ccbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ccc0:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <vPortSetupTimerInterrupt+0x34>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <vPortSetupTimerInterrupt+0x38>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cccc:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <vPortSetupTimerInterrupt+0x3c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a0a      	ldr	r2, [pc, #40]	; (800ccfc <vPortSetupTimerInterrupt+0x40>)
 800ccd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd6:	099b      	lsrs	r3, r3, #6
 800ccd8:	4a09      	ldr	r2, [pc, #36]	; (800cd00 <vPortSetupTimerInterrupt+0x44>)
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccde:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <vPortSetupTimerInterrupt+0x34>)
 800cce0:	2207      	movs	r2, #7
 800cce2:	601a      	str	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	e000e010 	.word	0xe000e010
 800ccf4:	e000e018 	.word	0xe000e018
 800ccf8:	20000150 	.word	0x20000150
 800ccfc:	10624dd3 	.word	0x10624dd3
 800cd00:	e000e014 	.word	0xe000e014

0800cd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd14 <vPortEnableVFP+0x10>
 800cd08:	6801      	ldr	r1, [r0, #0]
 800cd0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd0e:	6001      	str	r1, [r0, #0]
 800cd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd12:	bf00      	nop
 800cd14:	e000ed88 	.word	0xe000ed88

0800cd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd1e:	f3ef 8305 	mrs	r3, IPSR
 800cd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b0f      	cmp	r3, #15
 800cd28:	d914      	bls.n	800cd54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd2a:	4a17      	ldr	r2, [pc, #92]	; (800cd88 <vPortValidateInterruptPriority+0x70>)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd34:	4b15      	ldr	r3, [pc, #84]	; (800cd8c <vPortValidateInterruptPriority+0x74>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	7afa      	ldrb	r2, [r7, #11]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d20a      	bcs.n	800cd54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	607b      	str	r3, [r7, #4]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd54:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <vPortValidateInterruptPriority+0x78>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd5c:	4b0d      	ldr	r3, [pc, #52]	; (800cd94 <vPortValidateInterruptPriority+0x7c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d90a      	bls.n	800cd7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	603b      	str	r3, [r7, #0]
}
 800cd76:	bf00      	nop
 800cd78:	e7fe      	b.n	800cd78 <vPortValidateInterruptPriority+0x60>
	}
 800cd7a:	bf00      	nop
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	e000e3f0 	.word	0xe000e3f0
 800cd8c:	20001254 	.word	0x20001254
 800cd90:	e000ed0c 	.word	0xe000ed0c
 800cd94:	20001258 	.word	0x20001258

0800cd98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cda4:	f7fe fd74 	bl	800b890 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cda8:	4b5b      	ldr	r3, [pc, #364]	; (800cf18 <pvPortMalloc+0x180>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cdb0:	f000 f920 	bl	800cff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cdb4:	4b59      	ldr	r3, [pc, #356]	; (800cf1c <pvPortMalloc+0x184>)
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4013      	ands	r3, r2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f040 8093 	bne.w	800cee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d01d      	beq.n	800ce04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cdc8:	2208      	movs	r2, #8
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4413      	add	r3, r2
 800cdce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f003 0307 	and.w	r3, r3, #7
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d014      	beq.n	800ce04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f023 0307 	bic.w	r3, r3, #7
 800cde0:	3308      	adds	r3, #8
 800cde2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f003 0307 	and.w	r3, r3, #7
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00a      	beq.n	800ce04 <pvPortMalloc+0x6c>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	617b      	str	r3, [r7, #20]
}
 800ce00:	bf00      	nop
 800ce02:	e7fe      	b.n	800ce02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d06e      	beq.n	800cee8 <pvPortMalloc+0x150>
 800ce0a:	4b45      	ldr	r3, [pc, #276]	; (800cf20 <pvPortMalloc+0x188>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d869      	bhi.n	800cee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce14:	4b43      	ldr	r3, [pc, #268]	; (800cf24 <pvPortMalloc+0x18c>)
 800ce16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce18:	4b42      	ldr	r3, [pc, #264]	; (800cf24 <pvPortMalloc+0x18c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce1e:	e004      	b.n	800ce2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d903      	bls.n	800ce3c <pvPortMalloc+0xa4>
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1f1      	bne.n	800ce20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce3c:	4b36      	ldr	r3, [pc, #216]	; (800cf18 <pvPortMalloc+0x180>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d050      	beq.n	800cee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	4413      	add	r3, r2
 800ce4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	1ad2      	subs	r2, r2, r3
 800ce60:	2308      	movs	r3, #8
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d91f      	bls.n	800cea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00a      	beq.n	800ce90 <pvPortMalloc+0xf8>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	613b      	str	r3, [r7, #16]
}
 800ce8c:	bf00      	nop
 800ce8e:	e7fe      	b.n	800ce8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	685a      	ldr	r2, [r3, #4]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	1ad2      	subs	r2, r2, r3
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cea2:	69b8      	ldr	r0, [r7, #24]
 800cea4:	f000 f908 	bl	800d0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cea8:	4b1d      	ldr	r3, [pc, #116]	; (800cf20 <pvPortMalloc+0x188>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	4a1b      	ldr	r2, [pc, #108]	; (800cf20 <pvPortMalloc+0x188>)
 800ceb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ceb6:	4b1a      	ldr	r3, [pc, #104]	; (800cf20 <pvPortMalloc+0x188>)
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <pvPortMalloc+0x190>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d203      	bcs.n	800ceca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cec2:	4b17      	ldr	r3, [pc, #92]	; (800cf20 <pvPortMalloc+0x188>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a18      	ldr	r2, [pc, #96]	; (800cf28 <pvPortMalloc+0x190>)
 800cec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	4b13      	ldr	r3, [pc, #76]	; (800cf1c <pvPortMalloc+0x184>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	431a      	orrs	r2, r3
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cede:	4b13      	ldr	r3, [pc, #76]	; (800cf2c <pvPortMalloc+0x194>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	4a11      	ldr	r2, [pc, #68]	; (800cf2c <pvPortMalloc+0x194>)
 800cee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cee8:	f7fe fce0 	bl	800b8ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	f003 0307 	and.w	r3, r3, #7
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <pvPortMalloc+0x174>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	60fb      	str	r3, [r7, #12]
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <pvPortMalloc+0x172>
	return pvReturn;
 800cf0c:	69fb      	ldr	r3, [r7, #28]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3728      	adds	r7, #40	; 0x28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	2001a264 	.word	0x2001a264
 800cf1c:	2001a278 	.word	0x2001a278
 800cf20:	2001a268 	.word	0x2001a268
 800cf24:	2001a25c 	.word	0x2001a25c
 800cf28:	2001a26c 	.word	0x2001a26c
 800cf2c:	2001a270 	.word	0x2001a270

0800cf30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d04d      	beq.n	800cfde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf42:	2308      	movs	r3, #8
 800cf44:	425b      	negs	r3, r3
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	4413      	add	r3, r2
 800cf4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	4b24      	ldr	r3, [pc, #144]	; (800cfe8 <vPortFree+0xb8>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4013      	ands	r3, r2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10a      	bne.n	800cf74 <vPortFree+0x44>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	60fb      	str	r3, [r7, #12]
}
 800cf70:	bf00      	nop
 800cf72:	e7fe      	b.n	800cf72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00a      	beq.n	800cf92 <vPortFree+0x62>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	60bb      	str	r3, [r7, #8]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	4b14      	ldr	r3, [pc, #80]	; (800cfe8 <vPortFree+0xb8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01e      	beq.n	800cfde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d11a      	bne.n	800cfde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	4b0e      	ldr	r3, [pc, #56]	; (800cfe8 <vPortFree+0xb8>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	43db      	mvns	r3, r3
 800cfb2:	401a      	ands	r2, r3
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfb8:	f7fe fc6a 	bl	800b890 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	685a      	ldr	r2, [r3, #4]
 800cfc0:	4b0a      	ldr	r3, [pc, #40]	; (800cfec <vPortFree+0xbc>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	4a09      	ldr	r2, [pc, #36]	; (800cfec <vPortFree+0xbc>)
 800cfc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cfca:	6938      	ldr	r0, [r7, #16]
 800cfcc:	f000 f874 	bl	800d0b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cfd0:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <vPortFree+0xc0>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	4a06      	ldr	r2, [pc, #24]	; (800cff0 <vPortFree+0xc0>)
 800cfd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cfda:	f7fe fc67 	bl	800b8ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cfde:	bf00      	nop
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	2001a278 	.word	0x2001a278
 800cfec:	2001a268 	.word	0x2001a268
 800cff0:	2001a274 	.word	0x2001a274

0800cff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cffa:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800cffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d000:	4b27      	ldr	r3, [pc, #156]	; (800d0a0 <prvHeapInit+0xac>)
 800d002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f003 0307 	and.w	r3, r3, #7
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00c      	beq.n	800d028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3307      	adds	r3, #7
 800d012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f023 0307 	bic.w	r3, r3, #7
 800d01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	4a1f      	ldr	r2, [pc, #124]	; (800d0a0 <prvHeapInit+0xac>)
 800d024:	4413      	add	r3, r2
 800d026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d02c:	4a1d      	ldr	r2, [pc, #116]	; (800d0a4 <prvHeapInit+0xb0>)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d032:	4b1c      	ldr	r3, [pc, #112]	; (800d0a4 <prvHeapInit+0xb0>)
 800d034:	2200      	movs	r2, #0
 800d036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	4413      	add	r3, r2
 800d03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d040:	2208      	movs	r2, #8
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f023 0307 	bic.w	r3, r3, #7
 800d04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4a15      	ldr	r2, [pc, #84]	; (800d0a8 <prvHeapInit+0xb4>)
 800d054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d056:	4b14      	ldr	r3, [pc, #80]	; (800d0a8 <prvHeapInit+0xb4>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2200      	movs	r2, #0
 800d05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d05e:	4b12      	ldr	r3, [pc, #72]	; (800d0a8 <prvHeapInit+0xb4>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	1ad2      	subs	r2, r2, r3
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <prvHeapInit+0xb4>)
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	4a0a      	ldr	r2, [pc, #40]	; (800d0ac <prvHeapInit+0xb8>)
 800d082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	4a09      	ldr	r2, [pc, #36]	; (800d0b0 <prvHeapInit+0xbc>)
 800d08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d08c:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <prvHeapInit+0xc0>)
 800d08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d092:	601a      	str	r2, [r3, #0]
}
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	2000125c 	.word	0x2000125c
 800d0a4:	2001a25c 	.word	0x2001a25c
 800d0a8:	2001a264 	.word	0x2001a264
 800d0ac:	2001a26c 	.word	0x2001a26c
 800d0b0:	2001a268 	.word	0x2001a268
 800d0b4:	2001a278 	.word	0x2001a278

0800d0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0c0:	4b28      	ldr	r3, [pc, #160]	; (800d164 <prvInsertBlockIntoFreeList+0xac>)
 800d0c2:	60fb      	str	r3, [r7, #12]
 800d0c4:	e002      	b.n	800d0cc <prvInsertBlockIntoFreeList+0x14>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d8f7      	bhi.n	800d0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d108      	bne.n	800d0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	441a      	add	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	441a      	add	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d118      	bne.n	800d140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	4b15      	ldr	r3, [pc, #84]	; (800d168 <prvInsertBlockIntoFreeList+0xb0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	429a      	cmp	r2, r3
 800d118:	d00d      	beq.n	800d136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	685a      	ldr	r2, [r3, #4]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	441a      	add	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e008      	b.n	800d148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d136:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <prvInsertBlockIntoFreeList+0xb0>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	e003      	b.n	800d148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d002      	beq.n	800d156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d156:	bf00      	nop
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	2001a25c 	.word	0x2001a25c
 800d168:	2001a264 	.word	0x2001a264

0800d16c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d170:	2200      	movs	r2, #0
 800d172:	4912      	ldr	r1, [pc, #72]	; (800d1bc <MX_USB_DEVICE_Init+0x50>)
 800d174:	4812      	ldr	r0, [pc, #72]	; (800d1c0 <MX_USB_DEVICE_Init+0x54>)
 800d176:	f7fb ff0b 	bl	8008f90 <USBD_Init>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d180:	f7f3 ffdc 	bl	800113c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d184:	490f      	ldr	r1, [pc, #60]	; (800d1c4 <MX_USB_DEVICE_Init+0x58>)
 800d186:	480e      	ldr	r0, [pc, #56]	; (800d1c0 <MX_USB_DEVICE_Init+0x54>)
 800d188:	f7fb ff40 	bl	800900c <USBD_RegisterClass>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d192:	f7f3 ffd3 	bl	800113c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d196:	490c      	ldr	r1, [pc, #48]	; (800d1c8 <MX_USB_DEVICE_Init+0x5c>)
 800d198:	4809      	ldr	r0, [pc, #36]	; (800d1c0 <MX_USB_DEVICE_Init+0x54>)
 800d19a:	f7fb fe23 	bl	8008de4 <USBD_CDC_RegisterInterface>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1a4:	f7f3 ffca 	bl	800113c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1a8:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <MX_USB_DEVICE_Init+0x54>)
 800d1aa:	f7fb ff73 	bl	8009094 <USBD_Start>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1b4:	f7f3 ffc2 	bl	800113c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1b8:	bf00      	nop
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	20000200 	.word	0x20000200
 800d1c0:	2001a27c 	.word	0x2001a27c
 800d1c4:	20000168 	.word	0x20000168
 800d1c8:	200001ec 	.word	0x200001ec

0800d1cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4905      	ldr	r1, [pc, #20]	; (800d1e8 <CDC_Init_FS+0x1c>)
 800d1d4:	4805      	ldr	r0, [pc, #20]	; (800d1ec <CDC_Init_FS+0x20>)
 800d1d6:	f7fb fe1f 	bl	8008e18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d1da:	4905      	ldr	r1, [pc, #20]	; (800d1f0 <CDC_Init_FS+0x24>)
 800d1dc:	4803      	ldr	r0, [pc, #12]	; (800d1ec <CDC_Init_FS+0x20>)
 800d1de:	f7fb fe3d 	bl	8008e5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d1e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	2001a758 	.word	0x2001a758
 800d1ec:	2001a27c 	.word	0x2001a27c
 800d1f0:	2001a558 	.word	0x2001a558

0800d1f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d1f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	6039      	str	r1, [r7, #0]
 800d20e:	71fb      	strb	r3, [r7, #7]
 800d210:	4613      	mov	r3, r2
 800d212:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	2b23      	cmp	r3, #35	; 0x23
 800d218:	d84a      	bhi.n	800d2b0 <CDC_Control_FS+0xac>
 800d21a:	a201      	add	r2, pc, #4	; (adr r2, 800d220 <CDC_Control_FS+0x1c>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d2b1 	.word	0x0800d2b1
 800d224:	0800d2b1 	.word	0x0800d2b1
 800d228:	0800d2b1 	.word	0x0800d2b1
 800d22c:	0800d2b1 	.word	0x0800d2b1
 800d230:	0800d2b1 	.word	0x0800d2b1
 800d234:	0800d2b1 	.word	0x0800d2b1
 800d238:	0800d2b1 	.word	0x0800d2b1
 800d23c:	0800d2b1 	.word	0x0800d2b1
 800d240:	0800d2b1 	.word	0x0800d2b1
 800d244:	0800d2b1 	.word	0x0800d2b1
 800d248:	0800d2b1 	.word	0x0800d2b1
 800d24c:	0800d2b1 	.word	0x0800d2b1
 800d250:	0800d2b1 	.word	0x0800d2b1
 800d254:	0800d2b1 	.word	0x0800d2b1
 800d258:	0800d2b1 	.word	0x0800d2b1
 800d25c:	0800d2b1 	.word	0x0800d2b1
 800d260:	0800d2b1 	.word	0x0800d2b1
 800d264:	0800d2b1 	.word	0x0800d2b1
 800d268:	0800d2b1 	.word	0x0800d2b1
 800d26c:	0800d2b1 	.word	0x0800d2b1
 800d270:	0800d2b1 	.word	0x0800d2b1
 800d274:	0800d2b1 	.word	0x0800d2b1
 800d278:	0800d2b1 	.word	0x0800d2b1
 800d27c:	0800d2b1 	.word	0x0800d2b1
 800d280:	0800d2b1 	.word	0x0800d2b1
 800d284:	0800d2b1 	.word	0x0800d2b1
 800d288:	0800d2b1 	.word	0x0800d2b1
 800d28c:	0800d2b1 	.word	0x0800d2b1
 800d290:	0800d2b1 	.word	0x0800d2b1
 800d294:	0800d2b1 	.word	0x0800d2b1
 800d298:	0800d2b1 	.word	0x0800d2b1
 800d29c:	0800d2b1 	.word	0x0800d2b1
 800d2a0:	0800d2b1 	.word	0x0800d2b1
 800d2a4:	0800d2b1 	.word	0x0800d2b1
 800d2a8:	0800d2b1 	.word	0x0800d2b1
 800d2ac:	0800d2b1 	.word	0x0800d2b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2b0:	bf00      	nop
  }

  return (USBD_OK);
 800d2b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	4805      	ldr	r0, [pc, #20]	; (800d2e4 <CDC_Receive_FS+0x24>)
 800d2ce:	f7fb fdc5 	bl	8008e5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d2d2:	4804      	ldr	r0, [pc, #16]	; (800d2e4 <CDC_Receive_FS+0x24>)
 800d2d4:	f7fb fe26 	bl	8008f24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d2d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	2001a27c 	.word	0x2001a27c

0800d2e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d2f8:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <CDC_Transmit_FS+0x48>)
 800d2fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e00b      	b.n	800d326 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d30e:	887b      	ldrh	r3, [r7, #2]
 800d310:	461a      	mov	r2, r3
 800d312:	6879      	ldr	r1, [r7, #4]
 800d314:	4806      	ldr	r0, [pc, #24]	; (800d330 <CDC_Transmit_FS+0x48>)
 800d316:	f7fb fd7f 	bl	8008e18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d31a:	4805      	ldr	r0, [pc, #20]	; (800d330 <CDC_Transmit_FS+0x48>)
 800d31c:	f7fb fdbc 	bl	8008e98 <USBD_CDC_TransmitPacket>
 800d320:	4603      	mov	r3, r0
 800d322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d324:	7bfb      	ldrb	r3, [r7, #15]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	2001a27c 	.word	0x2001a27c

0800d334 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d334:	b480      	push	{r7}
 800d336:	b087      	sub	sp, #28
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	371c      	adds	r7, #28
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
	...

0800d358 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	6039      	str	r1, [r7, #0]
 800d362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2212      	movs	r2, #18
 800d368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d36a:	4b03      	ldr	r3, [pc, #12]	; (800d378 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	2000021c 	.word	0x2000021c

0800d37c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	4603      	mov	r3, r0
 800d384:	6039      	str	r1, [r7, #0]
 800d386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	2204      	movs	r2, #4
 800d38c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d38e:	4b03      	ldr	r3, [pc, #12]	; (800d39c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d390:	4618      	mov	r0, r3
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	20000230 	.word	0x20000230

0800d3a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	6039      	str	r1, [r7, #0]
 800d3aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d105      	bne.n	800d3be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	4907      	ldr	r1, [pc, #28]	; (800d3d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3b6:	4808      	ldr	r0, [pc, #32]	; (800d3d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d3b8:	f7fd f818 	bl	800a3ec <USBD_GetString>
 800d3bc:	e004      	b.n	800d3c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	4904      	ldr	r1, [pc, #16]	; (800d3d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3c2:	4805      	ldr	r0, [pc, #20]	; (800d3d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d3c4:	f7fd f812 	bl	800a3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	2001a958 	.word	0x2001a958
 800d3d8:	0800f3f0 	.word	0x0800f3f0

0800d3dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6039      	str	r1, [r7, #0]
 800d3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	4904      	ldr	r1, [pc, #16]	; (800d3fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d3ec:	4804      	ldr	r0, [pc, #16]	; (800d400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d3ee:	f7fc fffd 	bl	800a3ec <USBD_GetString>
  return USBD_StrDesc;
 800d3f2:	4b02      	ldr	r3, [pc, #8]	; (800d3fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	2001a958 	.word	0x2001a958
 800d400:	0800f408 	.word	0x0800f408

0800d404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	6039      	str	r1, [r7, #0]
 800d40e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	221a      	movs	r2, #26
 800d414:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d416:	f000 f843 	bl	800d4a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d41a:	4b02      	ldr	r3, [pc, #8]	; (800d424 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	20000234 	.word	0x20000234

0800d428 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	4603      	mov	r3, r0
 800d430:	6039      	str	r1, [r7, #0]
 800d432:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d434:	79fb      	ldrb	r3, [r7, #7]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d105      	bne.n	800d446 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	4907      	ldr	r1, [pc, #28]	; (800d45c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d43e:	4808      	ldr	r0, [pc, #32]	; (800d460 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d440:	f7fc ffd4 	bl	800a3ec <USBD_GetString>
 800d444:	e004      	b.n	800d450 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	4904      	ldr	r1, [pc, #16]	; (800d45c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d44a:	4805      	ldr	r0, [pc, #20]	; (800d460 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d44c:	f7fc ffce 	bl	800a3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d450:	4b02      	ldr	r3, [pc, #8]	; (800d45c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	2001a958 	.word	0x2001a958
 800d460:	0800f41c 	.word	0x0800f41c

0800d464 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	6039      	str	r1, [r7, #0]
 800d46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d105      	bne.n	800d482 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4907      	ldr	r1, [pc, #28]	; (800d498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d47a:	4808      	ldr	r0, [pc, #32]	; (800d49c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d47c:	f7fc ffb6 	bl	800a3ec <USBD_GetString>
 800d480:	e004      	b.n	800d48c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	4904      	ldr	r1, [pc, #16]	; (800d498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d486:	4805      	ldr	r0, [pc, #20]	; (800d49c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d488:	f7fc ffb0 	bl	800a3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	2001a958 	.word	0x2001a958
 800d49c:	0800f428 	.word	0x0800f428

0800d4a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <Get_SerialNum+0x44>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d4ac:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <Get_SerialNum+0x48>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d4b2:	4b0e      	ldr	r3, [pc, #56]	; (800d4ec <Get_SerialNum+0x4c>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4413      	add	r3, r2
 800d4be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d009      	beq.n	800d4da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d4c6:	2208      	movs	r2, #8
 800d4c8:	4909      	ldr	r1, [pc, #36]	; (800d4f0 <Get_SerialNum+0x50>)
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f000 f814 	bl	800d4f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d4d0:	2204      	movs	r2, #4
 800d4d2:	4908      	ldr	r1, [pc, #32]	; (800d4f4 <Get_SerialNum+0x54>)
 800d4d4:	68b8      	ldr	r0, [r7, #8]
 800d4d6:	f000 f80f 	bl	800d4f8 <IntToUnicode>
  }
}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	1fff7a10 	.word	0x1fff7a10
 800d4e8:	1fff7a14 	.word	0x1fff7a14
 800d4ec:	1fff7a18 	.word	0x1fff7a18
 800d4f0:	20000236 	.word	0x20000236
 800d4f4:	20000246 	.word	0x20000246

0800d4f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	4613      	mov	r3, r2
 800d504:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d50a:	2300      	movs	r3, #0
 800d50c:	75fb      	strb	r3, [r7, #23]
 800d50e:	e027      	b.n	800d560 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	0f1b      	lsrs	r3, r3, #28
 800d514:	2b09      	cmp	r3, #9
 800d516:	d80b      	bhi.n	800d530 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	0f1b      	lsrs	r3, r3, #28
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	4619      	mov	r1, r3
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	440b      	add	r3, r1
 800d528:	3230      	adds	r2, #48	; 0x30
 800d52a:	b2d2      	uxtb	r2, r2
 800d52c:	701a      	strb	r2, [r3, #0]
 800d52e:	e00a      	b.n	800d546 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	0f1b      	lsrs	r3, r3, #28
 800d534:	b2da      	uxtb	r2, r3
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	4619      	mov	r1, r3
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	440b      	add	r3, r1
 800d540:	3237      	adds	r2, #55	; 0x37
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	011b      	lsls	r3, r3, #4
 800d54a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	3301      	adds	r3, #1
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	4413      	add	r3, r2
 800d556:	2200      	movs	r2, #0
 800d558:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
 800d55c:	3301      	adds	r3, #1
 800d55e:	75fb      	strb	r3, [r7, #23]
 800d560:	7dfa      	ldrb	r2, [r7, #23]
 800d562:	79fb      	ldrb	r3, [r7, #7]
 800d564:	429a      	cmp	r2, r3
 800d566:	d3d3      	bcc.n	800d510 <IntToUnicode+0x18>
  }
}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	371c      	adds	r7, #28
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
	...

0800d578 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	; 0x28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d580:	f107 0314 	add.w	r3, r7, #20
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	605a      	str	r2, [r3, #4]
 800d58a:	609a      	str	r2, [r3, #8]
 800d58c:	60da      	str	r2, [r3, #12]
 800d58e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d598:	d13a      	bne.n	800d610 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d59a:	2300      	movs	r3, #0
 800d59c:	613b      	str	r3, [r7, #16]
 800d59e:	4b1e      	ldr	r3, [pc, #120]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a2:	4a1d      	ldr	r2, [pc, #116]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5a4:	f043 0301 	orr.w	r3, r3, #1
 800d5a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d5aa:	4b1b      	ldr	r3, [pc, #108]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	613b      	str	r3, [r7, #16]
 800d5b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d5b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d5ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5bc:	2302      	movs	r3, #2
 800d5be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d5c8:	230a      	movs	r3, #10
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5cc:	f107 0314 	add.w	r3, r7, #20
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4812      	ldr	r0, [pc, #72]	; (800d61c <HAL_PCD_MspInit+0xa4>)
 800d5d4:	f7f4 fd28 	bl	8002028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5dc:	4a0e      	ldr	r2, [pc, #56]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e2:	6353      	str	r3, [r2, #52]	; 0x34
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5f2:	6453      	str	r3, [r2, #68]	; 0x44
 800d5f4:	4b08      	ldr	r3, [pc, #32]	; (800d618 <HAL_PCD_MspInit+0xa0>)
 800d5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d600:	2200      	movs	r2, #0
 800d602:	2105      	movs	r1, #5
 800d604:	2043      	movs	r0, #67	; 0x43
 800d606:	f7f4 fccb 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d60a:	2043      	movs	r0, #67	; 0x43
 800d60c:	f7f4 fcf4 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d610:	bf00      	nop
 800d612:	3728      	adds	r7, #40	; 0x28
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	40023800 	.word	0x40023800
 800d61c:	40020000 	.word	0x40020000

0800d620 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f7fb fd79 	bl	800912e <USBD_LL_SetupStage>
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d656:	78fa      	ldrb	r2, [r7, #3]
 800d658:	6879      	ldr	r1, [r7, #4]
 800d65a:	4613      	mov	r3, r2
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	4413      	add	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	440b      	add	r3, r1
 800d664:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	78fb      	ldrb	r3, [r7, #3]
 800d66c:	4619      	mov	r1, r3
 800d66e:	f7fb fdb3 	bl	80091d8 <USBD_LL_DataOutStage>
}
 800d672:	bf00      	nop
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d68c:	78fa      	ldrb	r2, [r7, #3]
 800d68e:	6879      	ldr	r1, [r7, #4]
 800d690:	4613      	mov	r3, r2
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4413      	add	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	440b      	add	r3, r1
 800d69a:	334c      	adds	r3, #76	; 0x4c
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	78fb      	ldrb	r3, [r7, #3]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7fb fe4c 	bl	800933e <USBD_LL_DataInStage>
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fb ff80 	bl	80095c2 <USBD_LL_SOF>
}
 800d6c2:	bf00      	nop
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b084      	sub	sp, #16
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d001      	beq.n	800d6e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d6de:	f7f3 fd2d 	bl	800113c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6e8:	7bfa      	ldrb	r2, [r7, #15]
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fb ff2a 	bl	8009546 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fb fed2 	bl	80094a2 <USBD_LL_Reset>
}
 800d6fe:	bf00      	nop
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d716:	4618      	mov	r0, r3
 800d718:	f7fb ff25 	bl	8009566 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	6812      	ldr	r2, [r2, #0]
 800d72a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a1b      	ldr	r3, [r3, #32]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d73c:	4b04      	ldr	r3, [pc, #16]	; (800d750 <HAL_PCD_SuspendCallback+0x48>)
 800d73e:	691b      	ldr	r3, [r3, #16]
 800d740:	4a03      	ldr	r2, [pc, #12]	; (800d750 <HAL_PCD_SuspendCallback+0x48>)
 800d742:	f043 0306 	orr.w	r3, r3, #6
 800d746:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	e000ed00 	.word	0xe000ed00

0800d754 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d762:	4618      	mov	r0, r3
 800d764:	f7fb ff15 	bl	8009592 <USBD_LL_Resume>
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d782:	78fa      	ldrb	r2, [r7, #3]
 800d784:	4611      	mov	r1, r2
 800d786:	4618      	mov	r0, r3
 800d788:	f7fb ff6d 	bl	8009666 <USBD_LL_IsoOUTIncomplete>
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fb ff29 	bl	8009602 <USBD_LL_IsoINIncomplete>
}
 800d7b0:	bf00      	nop
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fb ff7f 	bl	80096ca <USBD_LL_DevConnected>
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7fb ff7c 	bl	80096e0 <USBD_LL_DevDisconnected>
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d13c      	bne.n	800d87a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d800:	4a20      	ldr	r2, [pc, #128]	; (800d884 <USBD_LL_Init+0x94>)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a1e      	ldr	r2, [pc, #120]	; (800d884 <USBD_LL_Init+0x94>)
 800d80c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d810:	4b1c      	ldr	r3, [pc, #112]	; (800d884 <USBD_LL_Init+0x94>)
 800d812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d816:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d818:	4b1a      	ldr	r3, [pc, #104]	; (800d884 <USBD_LL_Init+0x94>)
 800d81a:	2204      	movs	r2, #4
 800d81c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d81e:	4b19      	ldr	r3, [pc, #100]	; (800d884 <USBD_LL_Init+0x94>)
 800d820:	2202      	movs	r2, #2
 800d822:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d824:	4b17      	ldr	r3, [pc, #92]	; (800d884 <USBD_LL_Init+0x94>)
 800d826:	2200      	movs	r2, #0
 800d828:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d82a:	4b16      	ldr	r3, [pc, #88]	; (800d884 <USBD_LL_Init+0x94>)
 800d82c:	2202      	movs	r2, #2
 800d82e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d830:	4b14      	ldr	r3, [pc, #80]	; (800d884 <USBD_LL_Init+0x94>)
 800d832:	2200      	movs	r2, #0
 800d834:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d836:	4b13      	ldr	r3, [pc, #76]	; (800d884 <USBD_LL_Init+0x94>)
 800d838:	2200      	movs	r2, #0
 800d83a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d83c:	4b11      	ldr	r3, [pc, #68]	; (800d884 <USBD_LL_Init+0x94>)
 800d83e:	2200      	movs	r2, #0
 800d840:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d842:	4b10      	ldr	r3, [pc, #64]	; (800d884 <USBD_LL_Init+0x94>)
 800d844:	2200      	movs	r2, #0
 800d846:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d848:	4b0e      	ldr	r3, [pc, #56]	; (800d884 <USBD_LL_Init+0x94>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d84e:	480d      	ldr	r0, [pc, #52]	; (800d884 <USBD_LL_Init+0x94>)
 800d850:	f7f5 fd14 	bl	800327c <HAL_PCD_Init>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d85a:	f7f3 fc6f 	bl	800113c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d85e:	2180      	movs	r1, #128	; 0x80
 800d860:	4808      	ldr	r0, [pc, #32]	; (800d884 <USBD_LL_Init+0x94>)
 800d862:	f7f6 ff76 	bl	8004752 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d866:	2240      	movs	r2, #64	; 0x40
 800d868:	2100      	movs	r1, #0
 800d86a:	4806      	ldr	r0, [pc, #24]	; (800d884 <USBD_LL_Init+0x94>)
 800d86c:	f7f6 ff2a 	bl	80046c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d870:	2280      	movs	r2, #128	; 0x80
 800d872:	2101      	movs	r1, #1
 800d874:	4803      	ldr	r0, [pc, #12]	; (800d884 <USBD_LL_Init+0x94>)
 800d876:	f7f6 ff25 	bl	80046c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	2001ab58 	.word	0x2001ab58

0800d888 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7f5 fe14 	bl	80034cc <HAL_PCD_Start>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 f942 	bl	800db34 <USBD_Get_USB_Status>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	4608      	mov	r0, r1
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	70fb      	strb	r3, [r7, #3]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	70bb      	strb	r3, [r7, #2]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d8e6:	78bb      	ldrb	r3, [r7, #2]
 800d8e8:	883a      	ldrh	r2, [r7, #0]
 800d8ea:	78f9      	ldrb	r1, [r7, #3]
 800d8ec:	f7f6 fae5 	bl	8003eba <HAL_PCD_EP_Open>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 f91c 	bl	800db34 <USBD_Get_USB_Status>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d900:	7bbb      	ldrb	r3, [r7, #14]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d91a:	2300      	movs	r3, #0
 800d91c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d924:	78fa      	ldrb	r2, [r7, #3]
 800d926:	4611      	mov	r1, r2
 800d928:	4618      	mov	r0, r3
 800d92a:	f7f6 fb2e 	bl	8003f8a <HAL_PCD_EP_Close>
 800d92e:	4603      	mov	r3, r0
 800d930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	4618      	mov	r0, r3
 800d936:	f000 f8fd 	bl	800db34 <USBD_Get_USB_Status>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d962:	78fa      	ldrb	r2, [r7, #3]
 800d964:	4611      	mov	r1, r2
 800d966:	4618      	mov	r0, r3
 800d968:	f7f6 fc06 	bl	8004178 <HAL_PCD_EP_SetStall>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d970:	7bfb      	ldrb	r3, [r7, #15]
 800d972:	4618      	mov	r0, r3
 800d974:	f000 f8de 	bl	800db34 <USBD_Get_USB_Status>
 800d978:	4603      	mov	r3, r0
 800d97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b084      	sub	sp, #16
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	460b      	mov	r3, r1
 800d990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d996:	2300      	movs	r3, #0
 800d998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9a0:	78fa      	ldrb	r2, [r7, #3]
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7f6 fc4b 	bl	8004240 <HAL_PCD_EP_ClrStall>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 f8bf 	bl	800db34 <USBD_Get_USB_Status>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	da0b      	bge.n	800d9f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9e0:	78fb      	ldrb	r3, [r7, #3]
 800d9e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9e6:	68f9      	ldr	r1, [r7, #12]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	4413      	add	r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	440b      	add	r3, r1
 800d9f2:	333e      	adds	r3, #62	; 0x3e
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	e00b      	b.n	800da10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9f8:	78fb      	ldrb	r3, [r7, #3]
 800d9fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9fe:	68f9      	ldr	r1, [r7, #12]
 800da00:	4613      	mov	r3, r2
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	4413      	add	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	440b      	add	r3, r1
 800da0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800da0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da36:	78fa      	ldrb	r2, [r7, #3]
 800da38:	4611      	mov	r1, r2
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f6 fa18 	bl	8003e70 <HAL_PCD_SetAddress>
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	4618      	mov	r0, r3
 800da48:	f000 f874 	bl	800db34 <USBD_Get_USB_Status>
 800da4c:	4603      	mov	r3, r0
 800da4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da50:	7bbb      	ldrb	r3, [r7, #14]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b086      	sub	sp, #24
 800da5e:	af00      	add	r7, sp, #0
 800da60:	60f8      	str	r0, [r7, #12]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]
 800da66:	460b      	mov	r3, r1
 800da68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da6e:	2300      	movs	r3, #0
 800da70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da78:	7af9      	ldrb	r1, [r7, #11]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	f7f6 fb31 	bl	80040e4 <HAL_PCD_EP_Transmit>
 800da82:	4603      	mov	r3, r0
 800da84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da86:	7dfb      	ldrb	r3, [r7, #23]
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f853 	bl	800db34 <USBD_Get_USB_Status>
 800da8e:	4603      	mov	r3, r0
 800da90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da92:	7dbb      	ldrb	r3, [r7, #22]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	607a      	str	r2, [r7, #4]
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	460b      	mov	r3, r1
 800daaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800daba:	7af9      	ldrb	r1, [r7, #11]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	f7f6 faad 	bl	800401e <HAL_PCD_EP_Receive>
 800dac4:	4603      	mov	r3, r0
 800dac6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
 800daca:	4618      	mov	r0, r3
 800dacc:	f000 f832 	bl	800db34 <USBD_Get_USB_Status>
 800dad0:	4603      	mov	r3, r0
 800dad2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dad4:	7dbb      	ldrb	r3, [r7, #22]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	4611      	mov	r1, r2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7f6 fadd 	bl	80040b4 <HAL_PCD_EP_GetRxCount>
 800dafa:	4603      	mov	r3, r0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db0c:	4b03      	ldr	r3, [pc, #12]	; (800db1c <USBD_static_malloc+0x18>)
}
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	2001b064 	.word	0x2001b064

0800db20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]

}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db42:	79fb      	ldrb	r3, [r7, #7]
 800db44:	2b03      	cmp	r3, #3
 800db46:	d817      	bhi.n	800db78 <USBD_Get_USB_Status+0x44>
 800db48:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <USBD_Get_USB_Status+0x1c>)
 800db4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4e:	bf00      	nop
 800db50:	0800db61 	.word	0x0800db61
 800db54:	0800db67 	.word	0x0800db67
 800db58:	0800db6d 	.word	0x0800db6d
 800db5c:	0800db73 	.word	0x0800db73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
    break;
 800db64:	e00b      	b.n	800db7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db66:	2303      	movs	r3, #3
 800db68:	73fb      	strb	r3, [r7, #15]
    break;
 800db6a:	e008      	b.n	800db7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db6c:	2301      	movs	r3, #1
 800db6e:	73fb      	strb	r3, [r7, #15]
    break;
 800db70:	e005      	b.n	800db7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db72:	2303      	movs	r3, #3
 800db74:	73fb      	strb	r3, [r7, #15]
    break;
 800db76:	e002      	b.n	800db7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db78:	2303      	movs	r3, #3
 800db7a:	73fb      	strb	r3, [r7, #15]
    break;
 800db7c:	bf00      	nop
  }
  return usb_status;
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <__errno>:
 800db8c:	4b01      	ldr	r3, [pc, #4]	; (800db94 <__errno+0x8>)
 800db8e:	6818      	ldr	r0, [r3, #0]
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	20000250 	.word	0x20000250

0800db98 <std>:
 800db98:	2300      	movs	r3, #0
 800db9a:	b510      	push	{r4, lr}
 800db9c:	4604      	mov	r4, r0
 800db9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dba6:	6083      	str	r3, [r0, #8]
 800dba8:	8181      	strh	r1, [r0, #12]
 800dbaa:	6643      	str	r3, [r0, #100]	; 0x64
 800dbac:	81c2      	strh	r2, [r0, #14]
 800dbae:	6183      	str	r3, [r0, #24]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	2208      	movs	r2, #8
 800dbb4:	305c      	adds	r0, #92	; 0x5c
 800dbb6:	f000 f92b 	bl	800de10 <memset>
 800dbba:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <std+0x38>)
 800dbbc:	6263      	str	r3, [r4, #36]	; 0x24
 800dbbe:	4b05      	ldr	r3, [pc, #20]	; (800dbd4 <std+0x3c>)
 800dbc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbc2:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <std+0x40>)
 800dbc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbc6:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <std+0x44>)
 800dbc8:	6224      	str	r4, [r4, #32]
 800dbca:	6323      	str	r3, [r4, #48]	; 0x30
 800dbcc:	bd10      	pop	{r4, pc}
 800dbce:	bf00      	nop
 800dbd0:	0800e171 	.word	0x0800e171
 800dbd4:	0800e193 	.word	0x0800e193
 800dbd8:	0800e1cb 	.word	0x0800e1cb
 800dbdc:	0800e1ef 	.word	0x0800e1ef

0800dbe0 <_cleanup_r>:
 800dbe0:	4901      	ldr	r1, [pc, #4]	; (800dbe8 <_cleanup_r+0x8>)
 800dbe2:	f000 b8af 	b.w	800dd44 <_fwalk_reent>
 800dbe6:	bf00      	nop
 800dbe8:	0800e349 	.word	0x0800e349

0800dbec <__sfmoreglue>:
 800dbec:	b570      	push	{r4, r5, r6, lr}
 800dbee:	2268      	movs	r2, #104	; 0x68
 800dbf0:	1e4d      	subs	r5, r1, #1
 800dbf2:	4355      	muls	r5, r2
 800dbf4:	460e      	mov	r6, r1
 800dbf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbfa:	f000 f97d 	bl	800def8 <_malloc_r>
 800dbfe:	4604      	mov	r4, r0
 800dc00:	b140      	cbz	r0, 800dc14 <__sfmoreglue+0x28>
 800dc02:	2100      	movs	r1, #0
 800dc04:	e9c0 1600 	strd	r1, r6, [r0]
 800dc08:	300c      	adds	r0, #12
 800dc0a:	60a0      	str	r0, [r4, #8]
 800dc0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc10:	f000 f8fe 	bl	800de10 <memset>
 800dc14:	4620      	mov	r0, r4
 800dc16:	bd70      	pop	{r4, r5, r6, pc}

0800dc18 <__sfp_lock_acquire>:
 800dc18:	4801      	ldr	r0, [pc, #4]	; (800dc20 <__sfp_lock_acquire+0x8>)
 800dc1a:	f000 b8d8 	b.w	800ddce <__retarget_lock_acquire_recursive>
 800dc1e:	bf00      	nop
 800dc20:	2001b285 	.word	0x2001b285

0800dc24 <__sfp_lock_release>:
 800dc24:	4801      	ldr	r0, [pc, #4]	; (800dc2c <__sfp_lock_release+0x8>)
 800dc26:	f000 b8d3 	b.w	800ddd0 <__retarget_lock_release_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	2001b285 	.word	0x2001b285

0800dc30 <__sinit_lock_acquire>:
 800dc30:	4801      	ldr	r0, [pc, #4]	; (800dc38 <__sinit_lock_acquire+0x8>)
 800dc32:	f000 b8cc 	b.w	800ddce <__retarget_lock_acquire_recursive>
 800dc36:	bf00      	nop
 800dc38:	2001b286 	.word	0x2001b286

0800dc3c <__sinit_lock_release>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	; (800dc44 <__sinit_lock_release+0x8>)
 800dc3e:	f000 b8c7 	b.w	800ddd0 <__retarget_lock_release_recursive>
 800dc42:	bf00      	nop
 800dc44:	2001b286 	.word	0x2001b286

0800dc48 <__sinit>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	f7ff fff0 	bl	800dc30 <__sinit_lock_acquire>
 800dc50:	69a3      	ldr	r3, [r4, #24]
 800dc52:	b11b      	cbz	r3, 800dc5c <__sinit+0x14>
 800dc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc58:	f7ff bff0 	b.w	800dc3c <__sinit_lock_release>
 800dc5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc60:	6523      	str	r3, [r4, #80]	; 0x50
 800dc62:	4b13      	ldr	r3, [pc, #76]	; (800dcb0 <__sinit+0x68>)
 800dc64:	4a13      	ldr	r2, [pc, #76]	; (800dcb4 <__sinit+0x6c>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	bf04      	itt	eq
 800dc6e:	2301      	moveq	r3, #1
 800dc70:	61a3      	streq	r3, [r4, #24]
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 f820 	bl	800dcb8 <__sfp>
 800dc78:	6060      	str	r0, [r4, #4]
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f000 f81c 	bl	800dcb8 <__sfp>
 800dc80:	60a0      	str	r0, [r4, #8]
 800dc82:	4620      	mov	r0, r4
 800dc84:	f000 f818 	bl	800dcb8 <__sfp>
 800dc88:	2200      	movs	r2, #0
 800dc8a:	60e0      	str	r0, [r4, #12]
 800dc8c:	2104      	movs	r1, #4
 800dc8e:	6860      	ldr	r0, [r4, #4]
 800dc90:	f7ff ff82 	bl	800db98 <std>
 800dc94:	68a0      	ldr	r0, [r4, #8]
 800dc96:	2201      	movs	r2, #1
 800dc98:	2109      	movs	r1, #9
 800dc9a:	f7ff ff7d 	bl	800db98 <std>
 800dc9e:	68e0      	ldr	r0, [r4, #12]
 800dca0:	2202      	movs	r2, #2
 800dca2:	2112      	movs	r1, #18
 800dca4:	f7ff ff78 	bl	800db98 <std>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	61a3      	str	r3, [r4, #24]
 800dcac:	e7d2      	b.n	800dc54 <__sinit+0xc>
 800dcae:	bf00      	nop
 800dcb0:	08011da8 	.word	0x08011da8
 800dcb4:	0800dbe1 	.word	0x0800dbe1

0800dcb8 <__sfp>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	4607      	mov	r7, r0
 800dcbc:	f7ff ffac 	bl	800dc18 <__sfp_lock_acquire>
 800dcc0:	4b1e      	ldr	r3, [pc, #120]	; (800dd3c <__sfp+0x84>)
 800dcc2:	681e      	ldr	r6, [r3, #0]
 800dcc4:	69b3      	ldr	r3, [r6, #24]
 800dcc6:	b913      	cbnz	r3, 800dcce <__sfp+0x16>
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f7ff ffbd 	bl	800dc48 <__sinit>
 800dcce:	3648      	adds	r6, #72	; 0x48
 800dcd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	d503      	bpl.n	800dce0 <__sfp+0x28>
 800dcd8:	6833      	ldr	r3, [r6, #0]
 800dcda:	b30b      	cbz	r3, 800dd20 <__sfp+0x68>
 800dcdc:	6836      	ldr	r6, [r6, #0]
 800dcde:	e7f7      	b.n	800dcd0 <__sfp+0x18>
 800dce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dce4:	b9d5      	cbnz	r5, 800dd1c <__sfp+0x64>
 800dce6:	4b16      	ldr	r3, [pc, #88]	; (800dd40 <__sfp+0x88>)
 800dce8:	60e3      	str	r3, [r4, #12]
 800dcea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dcee:	6665      	str	r5, [r4, #100]	; 0x64
 800dcf0:	f000 f86c 	bl	800ddcc <__retarget_lock_init_recursive>
 800dcf4:	f7ff ff96 	bl	800dc24 <__sfp_lock_release>
 800dcf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dcfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd00:	6025      	str	r5, [r4, #0]
 800dd02:	61a5      	str	r5, [r4, #24]
 800dd04:	2208      	movs	r2, #8
 800dd06:	4629      	mov	r1, r5
 800dd08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd0c:	f000 f880 	bl	800de10 <memset>
 800dd10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd18:	4620      	mov	r0, r4
 800dd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd1c:	3468      	adds	r4, #104	; 0x68
 800dd1e:	e7d9      	b.n	800dcd4 <__sfp+0x1c>
 800dd20:	2104      	movs	r1, #4
 800dd22:	4638      	mov	r0, r7
 800dd24:	f7ff ff62 	bl	800dbec <__sfmoreglue>
 800dd28:	4604      	mov	r4, r0
 800dd2a:	6030      	str	r0, [r6, #0]
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d1d5      	bne.n	800dcdc <__sfp+0x24>
 800dd30:	f7ff ff78 	bl	800dc24 <__sfp_lock_release>
 800dd34:	230c      	movs	r3, #12
 800dd36:	603b      	str	r3, [r7, #0]
 800dd38:	e7ee      	b.n	800dd18 <__sfp+0x60>
 800dd3a:	bf00      	nop
 800dd3c:	08011da8 	.word	0x08011da8
 800dd40:	ffff0001 	.word	0xffff0001

0800dd44 <_fwalk_reent>:
 800dd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4606      	mov	r6, r0
 800dd4a:	4688      	mov	r8, r1
 800dd4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd50:	2700      	movs	r7, #0
 800dd52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd56:	f1b9 0901 	subs.w	r9, r9, #1
 800dd5a:	d505      	bpl.n	800dd68 <_fwalk_reent+0x24>
 800dd5c:	6824      	ldr	r4, [r4, #0]
 800dd5e:	2c00      	cmp	r4, #0
 800dd60:	d1f7      	bne.n	800dd52 <_fwalk_reent+0xe>
 800dd62:	4638      	mov	r0, r7
 800dd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd68:	89ab      	ldrh	r3, [r5, #12]
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d907      	bls.n	800dd7e <_fwalk_reent+0x3a>
 800dd6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd72:	3301      	adds	r3, #1
 800dd74:	d003      	beq.n	800dd7e <_fwalk_reent+0x3a>
 800dd76:	4629      	mov	r1, r5
 800dd78:	4630      	mov	r0, r6
 800dd7a:	47c0      	blx	r8
 800dd7c:	4307      	orrs	r7, r0
 800dd7e:	3568      	adds	r5, #104	; 0x68
 800dd80:	e7e9      	b.n	800dd56 <_fwalk_reent+0x12>
	...

0800dd84 <__libc_init_array>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	4d0d      	ldr	r5, [pc, #52]	; (800ddbc <__libc_init_array+0x38>)
 800dd88:	4c0d      	ldr	r4, [pc, #52]	; (800ddc0 <__libc_init_array+0x3c>)
 800dd8a:	1b64      	subs	r4, r4, r5
 800dd8c:	10a4      	asrs	r4, r4, #2
 800dd8e:	2600      	movs	r6, #0
 800dd90:	42a6      	cmp	r6, r4
 800dd92:	d109      	bne.n	800dda8 <__libc_init_array+0x24>
 800dd94:	4d0b      	ldr	r5, [pc, #44]	; (800ddc4 <__libc_init_array+0x40>)
 800dd96:	4c0c      	ldr	r4, [pc, #48]	; (800ddc8 <__libc_init_array+0x44>)
 800dd98:	f001 f96e 	bl	800f078 <_init>
 800dd9c:	1b64      	subs	r4, r4, r5
 800dd9e:	10a4      	asrs	r4, r4, #2
 800dda0:	2600      	movs	r6, #0
 800dda2:	42a6      	cmp	r6, r4
 800dda4:	d105      	bne.n	800ddb2 <__libc_init_array+0x2e>
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddac:	4798      	blx	r3
 800ddae:	3601      	adds	r6, #1
 800ddb0:	e7ee      	b.n	800dd90 <__libc_init_array+0xc>
 800ddb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddb6:	4798      	blx	r3
 800ddb8:	3601      	adds	r6, #1
 800ddba:	e7f2      	b.n	800dda2 <__libc_init_array+0x1e>
 800ddbc:	08011de8 	.word	0x08011de8
 800ddc0:	08011de8 	.word	0x08011de8
 800ddc4:	08011de8 	.word	0x08011de8
 800ddc8:	08011dec 	.word	0x08011dec

0800ddcc <__retarget_lock_init_recursive>:
 800ddcc:	4770      	bx	lr

0800ddce <__retarget_lock_acquire_recursive>:
 800ddce:	4770      	bx	lr

0800ddd0 <__retarget_lock_release_recursive>:
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <malloc>:
 800ddd4:	4b02      	ldr	r3, [pc, #8]	; (800dde0 <malloc+0xc>)
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	f000 b88d 	b.w	800def8 <_malloc_r>
 800ddde:	bf00      	nop
 800dde0:	20000250 	.word	0x20000250

0800dde4 <free>:
 800dde4:	4b02      	ldr	r3, [pc, #8]	; (800ddf0 <free+0xc>)
 800dde6:	4601      	mov	r1, r0
 800dde8:	6818      	ldr	r0, [r3, #0]
 800ddea:	f000 b819 	b.w	800de20 <_free_r>
 800ddee:	bf00      	nop
 800ddf0:	20000250 	.word	0x20000250

0800ddf4 <memcpy>:
 800ddf4:	440a      	add	r2, r1
 800ddf6:	4291      	cmp	r1, r2
 800ddf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddfc:	d100      	bne.n	800de00 <memcpy+0xc>
 800ddfe:	4770      	bx	lr
 800de00:	b510      	push	{r4, lr}
 800de02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de0a:	4291      	cmp	r1, r2
 800de0c:	d1f9      	bne.n	800de02 <memcpy+0xe>
 800de0e:	bd10      	pop	{r4, pc}

0800de10 <memset>:
 800de10:	4402      	add	r2, r0
 800de12:	4603      	mov	r3, r0
 800de14:	4293      	cmp	r3, r2
 800de16:	d100      	bne.n	800de1a <memset+0xa>
 800de18:	4770      	bx	lr
 800de1a:	f803 1b01 	strb.w	r1, [r3], #1
 800de1e:	e7f9      	b.n	800de14 <memset+0x4>

0800de20 <_free_r>:
 800de20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de22:	2900      	cmp	r1, #0
 800de24:	d044      	beq.n	800deb0 <_free_r+0x90>
 800de26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2a:	9001      	str	r0, [sp, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f1a1 0404 	sub.w	r4, r1, #4
 800de32:	bfb8      	it	lt
 800de34:	18e4      	addlt	r4, r4, r3
 800de36:	f000 fad5 	bl	800e3e4 <__malloc_lock>
 800de3a:	4a1e      	ldr	r2, [pc, #120]	; (800deb4 <_free_r+0x94>)
 800de3c:	9801      	ldr	r0, [sp, #4]
 800de3e:	6813      	ldr	r3, [r2, #0]
 800de40:	b933      	cbnz	r3, 800de50 <_free_r+0x30>
 800de42:	6063      	str	r3, [r4, #4]
 800de44:	6014      	str	r4, [r2, #0]
 800de46:	b003      	add	sp, #12
 800de48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de4c:	f000 bad0 	b.w	800e3f0 <__malloc_unlock>
 800de50:	42a3      	cmp	r3, r4
 800de52:	d908      	bls.n	800de66 <_free_r+0x46>
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	1961      	adds	r1, r4, r5
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf01      	itttt	eq
 800de5c:	6819      	ldreq	r1, [r3, #0]
 800de5e:	685b      	ldreq	r3, [r3, #4]
 800de60:	1949      	addeq	r1, r1, r5
 800de62:	6021      	streq	r1, [r4, #0]
 800de64:	e7ed      	b.n	800de42 <_free_r+0x22>
 800de66:	461a      	mov	r2, r3
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	b10b      	cbz	r3, 800de70 <_free_r+0x50>
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	d9fa      	bls.n	800de66 <_free_r+0x46>
 800de70:	6811      	ldr	r1, [r2, #0]
 800de72:	1855      	adds	r5, r2, r1
 800de74:	42a5      	cmp	r5, r4
 800de76:	d10b      	bne.n	800de90 <_free_r+0x70>
 800de78:	6824      	ldr	r4, [r4, #0]
 800de7a:	4421      	add	r1, r4
 800de7c:	1854      	adds	r4, r2, r1
 800de7e:	42a3      	cmp	r3, r4
 800de80:	6011      	str	r1, [r2, #0]
 800de82:	d1e0      	bne.n	800de46 <_free_r+0x26>
 800de84:	681c      	ldr	r4, [r3, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	6053      	str	r3, [r2, #4]
 800de8a:	4421      	add	r1, r4
 800de8c:	6011      	str	r1, [r2, #0]
 800de8e:	e7da      	b.n	800de46 <_free_r+0x26>
 800de90:	d902      	bls.n	800de98 <_free_r+0x78>
 800de92:	230c      	movs	r3, #12
 800de94:	6003      	str	r3, [r0, #0]
 800de96:	e7d6      	b.n	800de46 <_free_r+0x26>
 800de98:	6825      	ldr	r5, [r4, #0]
 800de9a:	1961      	adds	r1, r4, r5
 800de9c:	428b      	cmp	r3, r1
 800de9e:	bf04      	itt	eq
 800dea0:	6819      	ldreq	r1, [r3, #0]
 800dea2:	685b      	ldreq	r3, [r3, #4]
 800dea4:	6063      	str	r3, [r4, #4]
 800dea6:	bf04      	itt	eq
 800dea8:	1949      	addeq	r1, r1, r5
 800deaa:	6021      	streq	r1, [r4, #0]
 800deac:	6054      	str	r4, [r2, #4]
 800deae:	e7ca      	b.n	800de46 <_free_r+0x26>
 800deb0:	b003      	add	sp, #12
 800deb2:	bd30      	pop	{r4, r5, pc}
 800deb4:	2001b288 	.word	0x2001b288

0800deb8 <sbrk_aligned>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	4e0e      	ldr	r6, [pc, #56]	; (800def4 <sbrk_aligned+0x3c>)
 800debc:	460c      	mov	r4, r1
 800debe:	6831      	ldr	r1, [r6, #0]
 800dec0:	4605      	mov	r5, r0
 800dec2:	b911      	cbnz	r1, 800deca <sbrk_aligned+0x12>
 800dec4:	f000 f924 	bl	800e110 <_sbrk_r>
 800dec8:	6030      	str	r0, [r6, #0]
 800deca:	4621      	mov	r1, r4
 800decc:	4628      	mov	r0, r5
 800dece:	f000 f91f 	bl	800e110 <_sbrk_r>
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	d00a      	beq.n	800deec <sbrk_aligned+0x34>
 800ded6:	1cc4      	adds	r4, r0, #3
 800ded8:	f024 0403 	bic.w	r4, r4, #3
 800dedc:	42a0      	cmp	r0, r4
 800dede:	d007      	beq.n	800def0 <sbrk_aligned+0x38>
 800dee0:	1a21      	subs	r1, r4, r0
 800dee2:	4628      	mov	r0, r5
 800dee4:	f000 f914 	bl	800e110 <_sbrk_r>
 800dee8:	3001      	adds	r0, #1
 800deea:	d101      	bne.n	800def0 <sbrk_aligned+0x38>
 800deec:	f04f 34ff 	mov.w	r4, #4294967295
 800def0:	4620      	mov	r0, r4
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	2001b28c 	.word	0x2001b28c

0800def8 <_malloc_r>:
 800def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defc:	1ccd      	adds	r5, r1, #3
 800defe:	f025 0503 	bic.w	r5, r5, #3
 800df02:	3508      	adds	r5, #8
 800df04:	2d0c      	cmp	r5, #12
 800df06:	bf38      	it	cc
 800df08:	250c      	movcc	r5, #12
 800df0a:	2d00      	cmp	r5, #0
 800df0c:	4607      	mov	r7, r0
 800df0e:	db01      	blt.n	800df14 <_malloc_r+0x1c>
 800df10:	42a9      	cmp	r1, r5
 800df12:	d905      	bls.n	800df20 <_malloc_r+0x28>
 800df14:	230c      	movs	r3, #12
 800df16:	603b      	str	r3, [r7, #0]
 800df18:	2600      	movs	r6, #0
 800df1a:	4630      	mov	r0, r6
 800df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df20:	4e2e      	ldr	r6, [pc, #184]	; (800dfdc <_malloc_r+0xe4>)
 800df22:	f000 fa5f 	bl	800e3e4 <__malloc_lock>
 800df26:	6833      	ldr	r3, [r6, #0]
 800df28:	461c      	mov	r4, r3
 800df2a:	bb34      	cbnz	r4, 800df7a <_malloc_r+0x82>
 800df2c:	4629      	mov	r1, r5
 800df2e:	4638      	mov	r0, r7
 800df30:	f7ff ffc2 	bl	800deb8 <sbrk_aligned>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	4604      	mov	r4, r0
 800df38:	d14d      	bne.n	800dfd6 <_malloc_r+0xde>
 800df3a:	6834      	ldr	r4, [r6, #0]
 800df3c:	4626      	mov	r6, r4
 800df3e:	2e00      	cmp	r6, #0
 800df40:	d140      	bne.n	800dfc4 <_malloc_r+0xcc>
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	4631      	mov	r1, r6
 800df46:	4638      	mov	r0, r7
 800df48:	eb04 0803 	add.w	r8, r4, r3
 800df4c:	f000 f8e0 	bl	800e110 <_sbrk_r>
 800df50:	4580      	cmp	r8, r0
 800df52:	d13a      	bne.n	800dfca <_malloc_r+0xd2>
 800df54:	6821      	ldr	r1, [r4, #0]
 800df56:	3503      	adds	r5, #3
 800df58:	1a6d      	subs	r5, r5, r1
 800df5a:	f025 0503 	bic.w	r5, r5, #3
 800df5e:	3508      	adds	r5, #8
 800df60:	2d0c      	cmp	r5, #12
 800df62:	bf38      	it	cc
 800df64:	250c      	movcc	r5, #12
 800df66:	4629      	mov	r1, r5
 800df68:	4638      	mov	r0, r7
 800df6a:	f7ff ffa5 	bl	800deb8 <sbrk_aligned>
 800df6e:	3001      	adds	r0, #1
 800df70:	d02b      	beq.n	800dfca <_malloc_r+0xd2>
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	442b      	add	r3, r5
 800df76:	6023      	str	r3, [r4, #0]
 800df78:	e00e      	b.n	800df98 <_malloc_r+0xa0>
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	1b52      	subs	r2, r2, r5
 800df7e:	d41e      	bmi.n	800dfbe <_malloc_r+0xc6>
 800df80:	2a0b      	cmp	r2, #11
 800df82:	d916      	bls.n	800dfb2 <_malloc_r+0xba>
 800df84:	1961      	adds	r1, r4, r5
 800df86:	42a3      	cmp	r3, r4
 800df88:	6025      	str	r5, [r4, #0]
 800df8a:	bf18      	it	ne
 800df8c:	6059      	strne	r1, [r3, #4]
 800df8e:	6863      	ldr	r3, [r4, #4]
 800df90:	bf08      	it	eq
 800df92:	6031      	streq	r1, [r6, #0]
 800df94:	5162      	str	r2, [r4, r5]
 800df96:	604b      	str	r3, [r1, #4]
 800df98:	4638      	mov	r0, r7
 800df9a:	f104 060b 	add.w	r6, r4, #11
 800df9e:	f000 fa27 	bl	800e3f0 <__malloc_unlock>
 800dfa2:	f026 0607 	bic.w	r6, r6, #7
 800dfa6:	1d23      	adds	r3, r4, #4
 800dfa8:	1af2      	subs	r2, r6, r3
 800dfaa:	d0b6      	beq.n	800df1a <_malloc_r+0x22>
 800dfac:	1b9b      	subs	r3, r3, r6
 800dfae:	50a3      	str	r3, [r4, r2]
 800dfb0:	e7b3      	b.n	800df1a <_malloc_r+0x22>
 800dfb2:	6862      	ldr	r2, [r4, #4]
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	bf0c      	ite	eq
 800dfb8:	6032      	streq	r2, [r6, #0]
 800dfba:	605a      	strne	r2, [r3, #4]
 800dfbc:	e7ec      	b.n	800df98 <_malloc_r+0xa0>
 800dfbe:	4623      	mov	r3, r4
 800dfc0:	6864      	ldr	r4, [r4, #4]
 800dfc2:	e7b2      	b.n	800df2a <_malloc_r+0x32>
 800dfc4:	4634      	mov	r4, r6
 800dfc6:	6876      	ldr	r6, [r6, #4]
 800dfc8:	e7b9      	b.n	800df3e <_malloc_r+0x46>
 800dfca:	230c      	movs	r3, #12
 800dfcc:	603b      	str	r3, [r7, #0]
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f000 fa0e 	bl	800e3f0 <__malloc_unlock>
 800dfd4:	e7a1      	b.n	800df1a <_malloc_r+0x22>
 800dfd6:	6025      	str	r5, [r4, #0]
 800dfd8:	e7de      	b.n	800df98 <_malloc_r+0xa0>
 800dfda:	bf00      	nop
 800dfdc:	2001b288 	.word	0x2001b288

0800dfe0 <iprintf>:
 800dfe0:	b40f      	push	{r0, r1, r2, r3}
 800dfe2:	4b0a      	ldr	r3, [pc, #40]	; (800e00c <iprintf+0x2c>)
 800dfe4:	b513      	push	{r0, r1, r4, lr}
 800dfe6:	681c      	ldr	r4, [r3, #0]
 800dfe8:	b124      	cbz	r4, 800dff4 <iprintf+0x14>
 800dfea:	69a3      	ldr	r3, [r4, #24]
 800dfec:	b913      	cbnz	r3, 800dff4 <iprintf+0x14>
 800dfee:	4620      	mov	r0, r4
 800dff0:	f7ff fe2a 	bl	800dc48 <__sinit>
 800dff4:	ab05      	add	r3, sp, #20
 800dff6:	9a04      	ldr	r2, [sp, #16]
 800dff8:	68a1      	ldr	r1, [r4, #8]
 800dffa:	9301      	str	r3, [sp, #4]
 800dffc:	4620      	mov	r0, r4
 800dffe:	f000 fb83 	bl	800e708 <_vfiprintf_r>
 800e002:	b002      	add	sp, #8
 800e004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e008:	b004      	add	sp, #16
 800e00a:	4770      	bx	lr
 800e00c:	20000250 	.word	0x20000250

0800e010 <putchar>:
 800e010:	4b09      	ldr	r3, [pc, #36]	; (800e038 <putchar+0x28>)
 800e012:	b513      	push	{r0, r1, r4, lr}
 800e014:	681c      	ldr	r4, [r3, #0]
 800e016:	4601      	mov	r1, r0
 800e018:	b134      	cbz	r4, 800e028 <putchar+0x18>
 800e01a:	69a3      	ldr	r3, [r4, #24]
 800e01c:	b923      	cbnz	r3, 800e028 <putchar+0x18>
 800e01e:	9001      	str	r0, [sp, #4]
 800e020:	4620      	mov	r0, r4
 800e022:	f7ff fe11 	bl	800dc48 <__sinit>
 800e026:	9901      	ldr	r1, [sp, #4]
 800e028:	68a2      	ldr	r2, [r4, #8]
 800e02a:	4620      	mov	r0, r4
 800e02c:	b002      	add	sp, #8
 800e02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e032:	f000 be2d 	b.w	800ec90 <_putc_r>
 800e036:	bf00      	nop
 800e038:	20000250 	.word	0x20000250

0800e03c <cleanup_glue>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	460c      	mov	r4, r1
 800e040:	6809      	ldr	r1, [r1, #0]
 800e042:	4605      	mov	r5, r0
 800e044:	b109      	cbz	r1, 800e04a <cleanup_glue+0xe>
 800e046:	f7ff fff9 	bl	800e03c <cleanup_glue>
 800e04a:	4621      	mov	r1, r4
 800e04c:	4628      	mov	r0, r5
 800e04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e052:	f7ff bee5 	b.w	800de20 <_free_r>
	...

0800e058 <_reclaim_reent>:
 800e058:	4b2c      	ldr	r3, [pc, #176]	; (800e10c <_reclaim_reent+0xb4>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4283      	cmp	r3, r0
 800e05e:	b570      	push	{r4, r5, r6, lr}
 800e060:	4604      	mov	r4, r0
 800e062:	d051      	beq.n	800e108 <_reclaim_reent+0xb0>
 800e064:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e066:	b143      	cbz	r3, 800e07a <_reclaim_reent+0x22>
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d14a      	bne.n	800e104 <_reclaim_reent+0xac>
 800e06e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e070:	6819      	ldr	r1, [r3, #0]
 800e072:	b111      	cbz	r1, 800e07a <_reclaim_reent+0x22>
 800e074:	4620      	mov	r0, r4
 800e076:	f7ff fed3 	bl	800de20 <_free_r>
 800e07a:	6961      	ldr	r1, [r4, #20]
 800e07c:	b111      	cbz	r1, 800e084 <_reclaim_reent+0x2c>
 800e07e:	4620      	mov	r0, r4
 800e080:	f7ff fece 	bl	800de20 <_free_r>
 800e084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e086:	b111      	cbz	r1, 800e08e <_reclaim_reent+0x36>
 800e088:	4620      	mov	r0, r4
 800e08a:	f7ff fec9 	bl	800de20 <_free_r>
 800e08e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e090:	b111      	cbz	r1, 800e098 <_reclaim_reent+0x40>
 800e092:	4620      	mov	r0, r4
 800e094:	f7ff fec4 	bl	800de20 <_free_r>
 800e098:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e09a:	b111      	cbz	r1, 800e0a2 <_reclaim_reent+0x4a>
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7ff febf 	bl	800de20 <_free_r>
 800e0a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e0a4:	b111      	cbz	r1, 800e0ac <_reclaim_reent+0x54>
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f7ff feba 	bl	800de20 <_free_r>
 800e0ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e0ae:	b111      	cbz	r1, 800e0b6 <_reclaim_reent+0x5e>
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7ff feb5 	bl	800de20 <_free_r>
 800e0b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e0b8:	b111      	cbz	r1, 800e0c0 <_reclaim_reent+0x68>
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f7ff feb0 	bl	800de20 <_free_r>
 800e0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0c2:	b111      	cbz	r1, 800e0ca <_reclaim_reent+0x72>
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f7ff feab 	bl	800de20 <_free_r>
 800e0ca:	69a3      	ldr	r3, [r4, #24]
 800e0cc:	b1e3      	cbz	r3, 800e108 <_reclaim_reent+0xb0>
 800e0ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	4798      	blx	r3
 800e0d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e0d6:	b1b9      	cbz	r1, 800e108 <_reclaim_reent+0xb0>
 800e0d8:	4620      	mov	r0, r4
 800e0da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0de:	f7ff bfad 	b.w	800e03c <cleanup_glue>
 800e0e2:	5949      	ldr	r1, [r1, r5]
 800e0e4:	b941      	cbnz	r1, 800e0f8 <_reclaim_reent+0xa0>
 800e0e6:	3504      	adds	r5, #4
 800e0e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0ea:	2d80      	cmp	r5, #128	; 0x80
 800e0ec:	68d9      	ldr	r1, [r3, #12]
 800e0ee:	d1f8      	bne.n	800e0e2 <_reclaim_reent+0x8a>
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7ff fe95 	bl	800de20 <_free_r>
 800e0f6:	e7ba      	b.n	800e06e <_reclaim_reent+0x16>
 800e0f8:	680e      	ldr	r6, [r1, #0]
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7ff fe90 	bl	800de20 <_free_r>
 800e100:	4631      	mov	r1, r6
 800e102:	e7ef      	b.n	800e0e4 <_reclaim_reent+0x8c>
 800e104:	2500      	movs	r5, #0
 800e106:	e7ef      	b.n	800e0e8 <_reclaim_reent+0x90>
 800e108:	bd70      	pop	{r4, r5, r6, pc}
 800e10a:	bf00      	nop
 800e10c:	20000250 	.word	0x20000250

0800e110 <_sbrk_r>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	4d06      	ldr	r5, [pc, #24]	; (800e12c <_sbrk_r+0x1c>)
 800e114:	2300      	movs	r3, #0
 800e116:	4604      	mov	r4, r0
 800e118:	4608      	mov	r0, r1
 800e11a:	602b      	str	r3, [r5, #0]
 800e11c:	f7f3 fcd6 	bl	8001acc <_sbrk>
 800e120:	1c43      	adds	r3, r0, #1
 800e122:	d102      	bne.n	800e12a <_sbrk_r+0x1a>
 800e124:	682b      	ldr	r3, [r5, #0]
 800e126:	b103      	cbz	r3, 800e12a <_sbrk_r+0x1a>
 800e128:	6023      	str	r3, [r4, #0]
 800e12a:	bd38      	pop	{r3, r4, r5, pc}
 800e12c:	2001b290 	.word	0x2001b290

0800e130 <siprintf>:
 800e130:	b40e      	push	{r1, r2, r3}
 800e132:	b500      	push	{lr}
 800e134:	b09c      	sub	sp, #112	; 0x70
 800e136:	ab1d      	add	r3, sp, #116	; 0x74
 800e138:	9002      	str	r0, [sp, #8]
 800e13a:	9006      	str	r0, [sp, #24]
 800e13c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e140:	4809      	ldr	r0, [pc, #36]	; (800e168 <siprintf+0x38>)
 800e142:	9107      	str	r1, [sp, #28]
 800e144:	9104      	str	r1, [sp, #16]
 800e146:	4909      	ldr	r1, [pc, #36]	; (800e16c <siprintf+0x3c>)
 800e148:	f853 2b04 	ldr.w	r2, [r3], #4
 800e14c:	9105      	str	r1, [sp, #20]
 800e14e:	6800      	ldr	r0, [r0, #0]
 800e150:	9301      	str	r3, [sp, #4]
 800e152:	a902      	add	r1, sp, #8
 800e154:	f000 f9ae 	bl	800e4b4 <_svfiprintf_r>
 800e158:	9b02      	ldr	r3, [sp, #8]
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
 800e15e:	b01c      	add	sp, #112	; 0x70
 800e160:	f85d eb04 	ldr.w	lr, [sp], #4
 800e164:	b003      	add	sp, #12
 800e166:	4770      	bx	lr
 800e168:	20000250 	.word	0x20000250
 800e16c:	ffff0208 	.word	0xffff0208

0800e170 <__sread>:
 800e170:	b510      	push	{r4, lr}
 800e172:	460c      	mov	r4, r1
 800e174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e178:	f000 fdd2 	bl	800ed20 <_read_r>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	bfab      	itete	ge
 800e180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e182:	89a3      	ldrhlt	r3, [r4, #12]
 800e184:	181b      	addge	r3, r3, r0
 800e186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e18a:	bfac      	ite	ge
 800e18c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e18e:	81a3      	strhlt	r3, [r4, #12]
 800e190:	bd10      	pop	{r4, pc}

0800e192 <__swrite>:
 800e192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e196:	461f      	mov	r7, r3
 800e198:	898b      	ldrh	r3, [r1, #12]
 800e19a:	05db      	lsls	r3, r3, #23
 800e19c:	4605      	mov	r5, r0
 800e19e:	460c      	mov	r4, r1
 800e1a0:	4616      	mov	r6, r2
 800e1a2:	d505      	bpl.n	800e1b0 <__swrite+0x1e>
 800e1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f000 f908 	bl	800e3c0 <_lseek_r>
 800e1b0:	89a3      	ldrh	r3, [r4, #12]
 800e1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1ba:	81a3      	strh	r3, [r4, #12]
 800e1bc:	4632      	mov	r2, r6
 800e1be:	463b      	mov	r3, r7
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c6:	f000 b817 	b.w	800e1f8 <_write_r>

0800e1ca <__sseek>:
 800e1ca:	b510      	push	{r4, lr}
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d2:	f000 f8f5 	bl	800e3c0 <_lseek_r>
 800e1d6:	1c43      	adds	r3, r0, #1
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	bf15      	itete	ne
 800e1dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1e6:	81a3      	strheq	r3, [r4, #12]
 800e1e8:	bf18      	it	ne
 800e1ea:	81a3      	strhne	r3, [r4, #12]
 800e1ec:	bd10      	pop	{r4, pc}

0800e1ee <__sclose>:
 800e1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1f2:	f000 b813 	b.w	800e21c <_close_r>
	...

0800e1f8 <_write_r>:
 800e1f8:	b538      	push	{r3, r4, r5, lr}
 800e1fa:	4d07      	ldr	r5, [pc, #28]	; (800e218 <_write_r+0x20>)
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	4608      	mov	r0, r1
 800e200:	4611      	mov	r1, r2
 800e202:	2200      	movs	r2, #0
 800e204:	602a      	str	r2, [r5, #0]
 800e206:	461a      	mov	r2, r3
 800e208:	f7f2 ff66 	bl	80010d8 <_write>
 800e20c:	1c43      	adds	r3, r0, #1
 800e20e:	d102      	bne.n	800e216 <_write_r+0x1e>
 800e210:	682b      	ldr	r3, [r5, #0]
 800e212:	b103      	cbz	r3, 800e216 <_write_r+0x1e>
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	2001b290 	.word	0x2001b290

0800e21c <_close_r>:
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	4d06      	ldr	r5, [pc, #24]	; (800e238 <_close_r+0x1c>)
 800e220:	2300      	movs	r3, #0
 800e222:	4604      	mov	r4, r0
 800e224:	4608      	mov	r0, r1
 800e226:	602b      	str	r3, [r5, #0]
 800e228:	f7f3 fc1b 	bl	8001a62 <_close>
 800e22c:	1c43      	adds	r3, r0, #1
 800e22e:	d102      	bne.n	800e236 <_close_r+0x1a>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	b103      	cbz	r3, 800e236 <_close_r+0x1a>
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	bd38      	pop	{r3, r4, r5, pc}
 800e238:	2001b290 	.word	0x2001b290

0800e23c <__sflush_r>:
 800e23c:	898a      	ldrh	r2, [r1, #12]
 800e23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e242:	4605      	mov	r5, r0
 800e244:	0710      	lsls	r0, r2, #28
 800e246:	460c      	mov	r4, r1
 800e248:	d458      	bmi.n	800e2fc <__sflush_r+0xc0>
 800e24a:	684b      	ldr	r3, [r1, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	dc05      	bgt.n	800e25c <__sflush_r+0x20>
 800e250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e252:	2b00      	cmp	r3, #0
 800e254:	dc02      	bgt.n	800e25c <__sflush_r+0x20>
 800e256:	2000      	movs	r0, #0
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e25e:	2e00      	cmp	r6, #0
 800e260:	d0f9      	beq.n	800e256 <__sflush_r+0x1a>
 800e262:	2300      	movs	r3, #0
 800e264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e268:	682f      	ldr	r7, [r5, #0]
 800e26a:	602b      	str	r3, [r5, #0]
 800e26c:	d032      	beq.n	800e2d4 <__sflush_r+0x98>
 800e26e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	075a      	lsls	r2, r3, #29
 800e274:	d505      	bpl.n	800e282 <__sflush_r+0x46>
 800e276:	6863      	ldr	r3, [r4, #4]
 800e278:	1ac0      	subs	r0, r0, r3
 800e27a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e27c:	b10b      	cbz	r3, 800e282 <__sflush_r+0x46>
 800e27e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e280:	1ac0      	subs	r0, r0, r3
 800e282:	2300      	movs	r3, #0
 800e284:	4602      	mov	r2, r0
 800e286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e288:	6a21      	ldr	r1, [r4, #32]
 800e28a:	4628      	mov	r0, r5
 800e28c:	47b0      	blx	r6
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	d106      	bne.n	800e2a2 <__sflush_r+0x66>
 800e294:	6829      	ldr	r1, [r5, #0]
 800e296:	291d      	cmp	r1, #29
 800e298:	d82c      	bhi.n	800e2f4 <__sflush_r+0xb8>
 800e29a:	4a2a      	ldr	r2, [pc, #168]	; (800e344 <__sflush_r+0x108>)
 800e29c:	40ca      	lsrs	r2, r1
 800e29e:	07d6      	lsls	r6, r2, #31
 800e2a0:	d528      	bpl.n	800e2f4 <__sflush_r+0xb8>
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	6062      	str	r2, [r4, #4]
 800e2a6:	04d9      	lsls	r1, r3, #19
 800e2a8:	6922      	ldr	r2, [r4, #16]
 800e2aa:	6022      	str	r2, [r4, #0]
 800e2ac:	d504      	bpl.n	800e2b8 <__sflush_r+0x7c>
 800e2ae:	1c42      	adds	r2, r0, #1
 800e2b0:	d101      	bne.n	800e2b6 <__sflush_r+0x7a>
 800e2b2:	682b      	ldr	r3, [r5, #0]
 800e2b4:	b903      	cbnz	r3, 800e2b8 <__sflush_r+0x7c>
 800e2b6:	6560      	str	r0, [r4, #84]	; 0x54
 800e2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2ba:	602f      	str	r7, [r5, #0]
 800e2bc:	2900      	cmp	r1, #0
 800e2be:	d0ca      	beq.n	800e256 <__sflush_r+0x1a>
 800e2c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2c4:	4299      	cmp	r1, r3
 800e2c6:	d002      	beq.n	800e2ce <__sflush_r+0x92>
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f7ff fda9 	bl	800de20 <_free_r>
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	6360      	str	r0, [r4, #52]	; 0x34
 800e2d2:	e7c1      	b.n	800e258 <__sflush_r+0x1c>
 800e2d4:	6a21      	ldr	r1, [r4, #32]
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	4628      	mov	r0, r5
 800e2da:	47b0      	blx	r6
 800e2dc:	1c41      	adds	r1, r0, #1
 800e2de:	d1c7      	bne.n	800e270 <__sflush_r+0x34>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d0c4      	beq.n	800e270 <__sflush_r+0x34>
 800e2e6:	2b1d      	cmp	r3, #29
 800e2e8:	d001      	beq.n	800e2ee <__sflush_r+0xb2>
 800e2ea:	2b16      	cmp	r3, #22
 800e2ec:	d101      	bne.n	800e2f2 <__sflush_r+0xb6>
 800e2ee:	602f      	str	r7, [r5, #0]
 800e2f0:	e7b1      	b.n	800e256 <__sflush_r+0x1a>
 800e2f2:	89a3      	ldrh	r3, [r4, #12]
 800e2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f8:	81a3      	strh	r3, [r4, #12]
 800e2fa:	e7ad      	b.n	800e258 <__sflush_r+0x1c>
 800e2fc:	690f      	ldr	r7, [r1, #16]
 800e2fe:	2f00      	cmp	r7, #0
 800e300:	d0a9      	beq.n	800e256 <__sflush_r+0x1a>
 800e302:	0793      	lsls	r3, r2, #30
 800e304:	680e      	ldr	r6, [r1, #0]
 800e306:	bf08      	it	eq
 800e308:	694b      	ldreq	r3, [r1, #20]
 800e30a:	600f      	str	r7, [r1, #0]
 800e30c:	bf18      	it	ne
 800e30e:	2300      	movne	r3, #0
 800e310:	eba6 0807 	sub.w	r8, r6, r7
 800e314:	608b      	str	r3, [r1, #8]
 800e316:	f1b8 0f00 	cmp.w	r8, #0
 800e31a:	dd9c      	ble.n	800e256 <__sflush_r+0x1a>
 800e31c:	6a21      	ldr	r1, [r4, #32]
 800e31e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e320:	4643      	mov	r3, r8
 800e322:	463a      	mov	r2, r7
 800e324:	4628      	mov	r0, r5
 800e326:	47b0      	blx	r6
 800e328:	2800      	cmp	r0, #0
 800e32a:	dc06      	bgt.n	800e33a <__sflush_r+0xfe>
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e332:	81a3      	strh	r3, [r4, #12]
 800e334:	f04f 30ff 	mov.w	r0, #4294967295
 800e338:	e78e      	b.n	800e258 <__sflush_r+0x1c>
 800e33a:	4407      	add	r7, r0
 800e33c:	eba8 0800 	sub.w	r8, r8, r0
 800e340:	e7e9      	b.n	800e316 <__sflush_r+0xda>
 800e342:	bf00      	nop
 800e344:	20400001 	.word	0x20400001

0800e348 <_fflush_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	690b      	ldr	r3, [r1, #16]
 800e34c:	4605      	mov	r5, r0
 800e34e:	460c      	mov	r4, r1
 800e350:	b913      	cbnz	r3, 800e358 <_fflush_r+0x10>
 800e352:	2500      	movs	r5, #0
 800e354:	4628      	mov	r0, r5
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	b118      	cbz	r0, 800e362 <_fflush_r+0x1a>
 800e35a:	6983      	ldr	r3, [r0, #24]
 800e35c:	b90b      	cbnz	r3, 800e362 <_fflush_r+0x1a>
 800e35e:	f7ff fc73 	bl	800dc48 <__sinit>
 800e362:	4b14      	ldr	r3, [pc, #80]	; (800e3b4 <_fflush_r+0x6c>)
 800e364:	429c      	cmp	r4, r3
 800e366:	d11b      	bne.n	800e3a0 <_fflush_r+0x58>
 800e368:	686c      	ldr	r4, [r5, #4]
 800e36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0ef      	beq.n	800e352 <_fflush_r+0xa>
 800e372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e374:	07d0      	lsls	r0, r2, #31
 800e376:	d404      	bmi.n	800e382 <_fflush_r+0x3a>
 800e378:	0599      	lsls	r1, r3, #22
 800e37a:	d402      	bmi.n	800e382 <_fflush_r+0x3a>
 800e37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e37e:	f7ff fd26 	bl	800ddce <__retarget_lock_acquire_recursive>
 800e382:	4628      	mov	r0, r5
 800e384:	4621      	mov	r1, r4
 800e386:	f7ff ff59 	bl	800e23c <__sflush_r>
 800e38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e38c:	07da      	lsls	r2, r3, #31
 800e38e:	4605      	mov	r5, r0
 800e390:	d4e0      	bmi.n	800e354 <_fflush_r+0xc>
 800e392:	89a3      	ldrh	r3, [r4, #12]
 800e394:	059b      	lsls	r3, r3, #22
 800e396:	d4dd      	bmi.n	800e354 <_fflush_r+0xc>
 800e398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e39a:	f7ff fd19 	bl	800ddd0 <__retarget_lock_release_recursive>
 800e39e:	e7d9      	b.n	800e354 <_fflush_r+0xc>
 800e3a0:	4b05      	ldr	r3, [pc, #20]	; (800e3b8 <_fflush_r+0x70>)
 800e3a2:	429c      	cmp	r4, r3
 800e3a4:	d101      	bne.n	800e3aa <_fflush_r+0x62>
 800e3a6:	68ac      	ldr	r4, [r5, #8]
 800e3a8:	e7df      	b.n	800e36a <_fflush_r+0x22>
 800e3aa:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <_fflush_r+0x74>)
 800e3ac:	429c      	cmp	r4, r3
 800e3ae:	bf08      	it	eq
 800e3b0:	68ec      	ldreq	r4, [r5, #12]
 800e3b2:	e7da      	b.n	800e36a <_fflush_r+0x22>
 800e3b4:	08011d68 	.word	0x08011d68
 800e3b8:	08011d88 	.word	0x08011d88
 800e3bc:	08011d48 	.word	0x08011d48

0800e3c0 <_lseek_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4d07      	ldr	r5, [pc, #28]	; (800e3e0 <_lseek_r+0x20>)
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	602a      	str	r2, [r5, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	f7f3 fb6e 	bl	8001ab0 <_lseek>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d102      	bne.n	800e3de <_lseek_r+0x1e>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	b103      	cbz	r3, 800e3de <_lseek_r+0x1e>
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	bd38      	pop	{r3, r4, r5, pc}
 800e3e0:	2001b290 	.word	0x2001b290

0800e3e4 <__malloc_lock>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	; (800e3ec <__malloc_lock+0x8>)
 800e3e6:	f7ff bcf2 	b.w	800ddce <__retarget_lock_acquire_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	2001b284 	.word	0x2001b284

0800e3f0 <__malloc_unlock>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	; (800e3f8 <__malloc_unlock+0x8>)
 800e3f2:	f7ff bced 	b.w	800ddd0 <__retarget_lock_release_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	2001b284 	.word	0x2001b284

0800e3fc <__ssputs_r>:
 800e3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e400:	688e      	ldr	r6, [r1, #8]
 800e402:	429e      	cmp	r6, r3
 800e404:	4682      	mov	sl, r0
 800e406:	460c      	mov	r4, r1
 800e408:	4690      	mov	r8, r2
 800e40a:	461f      	mov	r7, r3
 800e40c:	d838      	bhi.n	800e480 <__ssputs_r+0x84>
 800e40e:	898a      	ldrh	r2, [r1, #12]
 800e410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e414:	d032      	beq.n	800e47c <__ssputs_r+0x80>
 800e416:	6825      	ldr	r5, [r4, #0]
 800e418:	6909      	ldr	r1, [r1, #16]
 800e41a:	eba5 0901 	sub.w	r9, r5, r1
 800e41e:	6965      	ldr	r5, [r4, #20]
 800e420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e428:	3301      	adds	r3, #1
 800e42a:	444b      	add	r3, r9
 800e42c:	106d      	asrs	r5, r5, #1
 800e42e:	429d      	cmp	r5, r3
 800e430:	bf38      	it	cc
 800e432:	461d      	movcc	r5, r3
 800e434:	0553      	lsls	r3, r2, #21
 800e436:	d531      	bpl.n	800e49c <__ssputs_r+0xa0>
 800e438:	4629      	mov	r1, r5
 800e43a:	f7ff fd5d 	bl	800def8 <_malloc_r>
 800e43e:	4606      	mov	r6, r0
 800e440:	b950      	cbnz	r0, 800e458 <__ssputs_r+0x5c>
 800e442:	230c      	movs	r3, #12
 800e444:	f8ca 3000 	str.w	r3, [sl]
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e44e:	81a3      	strh	r3, [r4, #12]
 800e450:	f04f 30ff 	mov.w	r0, #4294967295
 800e454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e458:	6921      	ldr	r1, [r4, #16]
 800e45a:	464a      	mov	r2, r9
 800e45c:	f7ff fcca 	bl	800ddf4 <memcpy>
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e46a:	81a3      	strh	r3, [r4, #12]
 800e46c:	6126      	str	r6, [r4, #16]
 800e46e:	6165      	str	r5, [r4, #20]
 800e470:	444e      	add	r6, r9
 800e472:	eba5 0509 	sub.w	r5, r5, r9
 800e476:	6026      	str	r6, [r4, #0]
 800e478:	60a5      	str	r5, [r4, #8]
 800e47a:	463e      	mov	r6, r7
 800e47c:	42be      	cmp	r6, r7
 800e47e:	d900      	bls.n	800e482 <__ssputs_r+0x86>
 800e480:	463e      	mov	r6, r7
 800e482:	6820      	ldr	r0, [r4, #0]
 800e484:	4632      	mov	r2, r6
 800e486:	4641      	mov	r1, r8
 800e488:	f000 fd82 	bl	800ef90 <memmove>
 800e48c:	68a3      	ldr	r3, [r4, #8]
 800e48e:	1b9b      	subs	r3, r3, r6
 800e490:	60a3      	str	r3, [r4, #8]
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	4433      	add	r3, r6
 800e496:	6023      	str	r3, [r4, #0]
 800e498:	2000      	movs	r0, #0
 800e49a:	e7db      	b.n	800e454 <__ssputs_r+0x58>
 800e49c:	462a      	mov	r2, r5
 800e49e:	f000 fd91 	bl	800efc4 <_realloc_r>
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	d1e1      	bne.n	800e46c <__ssputs_r+0x70>
 800e4a8:	6921      	ldr	r1, [r4, #16]
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	f7ff fcb8 	bl	800de20 <_free_r>
 800e4b0:	e7c7      	b.n	800e442 <__ssputs_r+0x46>
	...

0800e4b4 <_svfiprintf_r>:
 800e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b8:	4698      	mov	r8, r3
 800e4ba:	898b      	ldrh	r3, [r1, #12]
 800e4bc:	061b      	lsls	r3, r3, #24
 800e4be:	b09d      	sub	sp, #116	; 0x74
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	d50e      	bpl.n	800e4e6 <_svfiprintf_r+0x32>
 800e4c8:	690b      	ldr	r3, [r1, #16]
 800e4ca:	b963      	cbnz	r3, 800e4e6 <_svfiprintf_r+0x32>
 800e4cc:	2140      	movs	r1, #64	; 0x40
 800e4ce:	f7ff fd13 	bl	800def8 <_malloc_r>
 800e4d2:	6028      	str	r0, [r5, #0]
 800e4d4:	6128      	str	r0, [r5, #16]
 800e4d6:	b920      	cbnz	r0, 800e4e2 <_svfiprintf_r+0x2e>
 800e4d8:	230c      	movs	r3, #12
 800e4da:	603b      	str	r3, [r7, #0]
 800e4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e0:	e0d1      	b.n	800e686 <_svfiprintf_r+0x1d2>
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	616b      	str	r3, [r5, #20]
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ea:	2320      	movs	r3, #32
 800e4ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4f4:	2330      	movs	r3, #48	; 0x30
 800e4f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e6a0 <_svfiprintf_r+0x1ec>
 800e4fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4fe:	f04f 0901 	mov.w	r9, #1
 800e502:	4623      	mov	r3, r4
 800e504:	469a      	mov	sl, r3
 800e506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e50a:	b10a      	cbz	r2, 800e510 <_svfiprintf_r+0x5c>
 800e50c:	2a25      	cmp	r2, #37	; 0x25
 800e50e:	d1f9      	bne.n	800e504 <_svfiprintf_r+0x50>
 800e510:	ebba 0b04 	subs.w	fp, sl, r4
 800e514:	d00b      	beq.n	800e52e <_svfiprintf_r+0x7a>
 800e516:	465b      	mov	r3, fp
 800e518:	4622      	mov	r2, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	4638      	mov	r0, r7
 800e51e:	f7ff ff6d 	bl	800e3fc <__ssputs_r>
 800e522:	3001      	adds	r0, #1
 800e524:	f000 80aa 	beq.w	800e67c <_svfiprintf_r+0x1c8>
 800e528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e52a:	445a      	add	r2, fp
 800e52c:	9209      	str	r2, [sp, #36]	; 0x24
 800e52e:	f89a 3000 	ldrb.w	r3, [sl]
 800e532:	2b00      	cmp	r3, #0
 800e534:	f000 80a2 	beq.w	800e67c <_svfiprintf_r+0x1c8>
 800e538:	2300      	movs	r3, #0
 800e53a:	f04f 32ff 	mov.w	r2, #4294967295
 800e53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e542:	f10a 0a01 	add.w	sl, sl, #1
 800e546:	9304      	str	r3, [sp, #16]
 800e548:	9307      	str	r3, [sp, #28]
 800e54a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e54e:	931a      	str	r3, [sp, #104]	; 0x68
 800e550:	4654      	mov	r4, sl
 800e552:	2205      	movs	r2, #5
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	4851      	ldr	r0, [pc, #324]	; (800e6a0 <_svfiprintf_r+0x1ec>)
 800e55a:	f7f1 fe41 	bl	80001e0 <memchr>
 800e55e:	9a04      	ldr	r2, [sp, #16]
 800e560:	b9d8      	cbnz	r0, 800e59a <_svfiprintf_r+0xe6>
 800e562:	06d0      	lsls	r0, r2, #27
 800e564:	bf44      	itt	mi
 800e566:	2320      	movmi	r3, #32
 800e568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e56c:	0711      	lsls	r1, r2, #28
 800e56e:	bf44      	itt	mi
 800e570:	232b      	movmi	r3, #43	; 0x2b
 800e572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e576:	f89a 3000 	ldrb.w	r3, [sl]
 800e57a:	2b2a      	cmp	r3, #42	; 0x2a
 800e57c:	d015      	beq.n	800e5aa <_svfiprintf_r+0xf6>
 800e57e:	9a07      	ldr	r2, [sp, #28]
 800e580:	4654      	mov	r4, sl
 800e582:	2000      	movs	r0, #0
 800e584:	f04f 0c0a 	mov.w	ip, #10
 800e588:	4621      	mov	r1, r4
 800e58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e58e:	3b30      	subs	r3, #48	; 0x30
 800e590:	2b09      	cmp	r3, #9
 800e592:	d94e      	bls.n	800e632 <_svfiprintf_r+0x17e>
 800e594:	b1b0      	cbz	r0, 800e5c4 <_svfiprintf_r+0x110>
 800e596:	9207      	str	r2, [sp, #28]
 800e598:	e014      	b.n	800e5c4 <_svfiprintf_r+0x110>
 800e59a:	eba0 0308 	sub.w	r3, r0, r8
 800e59e:	fa09 f303 	lsl.w	r3, r9, r3
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	9304      	str	r3, [sp, #16]
 800e5a6:	46a2      	mov	sl, r4
 800e5a8:	e7d2      	b.n	800e550 <_svfiprintf_r+0x9c>
 800e5aa:	9b03      	ldr	r3, [sp, #12]
 800e5ac:	1d19      	adds	r1, r3, #4
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	9103      	str	r1, [sp, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	bfbb      	ittet	lt
 800e5b6:	425b      	neglt	r3, r3
 800e5b8:	f042 0202 	orrlt.w	r2, r2, #2
 800e5bc:	9307      	strge	r3, [sp, #28]
 800e5be:	9307      	strlt	r3, [sp, #28]
 800e5c0:	bfb8      	it	lt
 800e5c2:	9204      	strlt	r2, [sp, #16]
 800e5c4:	7823      	ldrb	r3, [r4, #0]
 800e5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5c8:	d10c      	bne.n	800e5e4 <_svfiprintf_r+0x130>
 800e5ca:	7863      	ldrb	r3, [r4, #1]
 800e5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ce:	d135      	bne.n	800e63c <_svfiprintf_r+0x188>
 800e5d0:	9b03      	ldr	r3, [sp, #12]
 800e5d2:	1d1a      	adds	r2, r3, #4
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	9203      	str	r2, [sp, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	bfb8      	it	lt
 800e5dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5e0:	3402      	adds	r4, #2
 800e5e2:	9305      	str	r3, [sp, #20]
 800e5e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6b0 <_svfiprintf_r+0x1fc>
 800e5e8:	7821      	ldrb	r1, [r4, #0]
 800e5ea:	2203      	movs	r2, #3
 800e5ec:	4650      	mov	r0, sl
 800e5ee:	f7f1 fdf7 	bl	80001e0 <memchr>
 800e5f2:	b140      	cbz	r0, 800e606 <_svfiprintf_r+0x152>
 800e5f4:	2340      	movs	r3, #64	; 0x40
 800e5f6:	eba0 000a 	sub.w	r0, r0, sl
 800e5fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e5fe:	9b04      	ldr	r3, [sp, #16]
 800e600:	4303      	orrs	r3, r0
 800e602:	3401      	adds	r4, #1
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60a:	4826      	ldr	r0, [pc, #152]	; (800e6a4 <_svfiprintf_r+0x1f0>)
 800e60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e610:	2206      	movs	r2, #6
 800e612:	f7f1 fde5 	bl	80001e0 <memchr>
 800e616:	2800      	cmp	r0, #0
 800e618:	d038      	beq.n	800e68c <_svfiprintf_r+0x1d8>
 800e61a:	4b23      	ldr	r3, [pc, #140]	; (800e6a8 <_svfiprintf_r+0x1f4>)
 800e61c:	bb1b      	cbnz	r3, 800e666 <_svfiprintf_r+0x1b2>
 800e61e:	9b03      	ldr	r3, [sp, #12]
 800e620:	3307      	adds	r3, #7
 800e622:	f023 0307 	bic.w	r3, r3, #7
 800e626:	3308      	adds	r3, #8
 800e628:	9303      	str	r3, [sp, #12]
 800e62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62c:	4433      	add	r3, r6
 800e62e:	9309      	str	r3, [sp, #36]	; 0x24
 800e630:	e767      	b.n	800e502 <_svfiprintf_r+0x4e>
 800e632:	fb0c 3202 	mla	r2, ip, r2, r3
 800e636:	460c      	mov	r4, r1
 800e638:	2001      	movs	r0, #1
 800e63a:	e7a5      	b.n	800e588 <_svfiprintf_r+0xd4>
 800e63c:	2300      	movs	r3, #0
 800e63e:	3401      	adds	r4, #1
 800e640:	9305      	str	r3, [sp, #20]
 800e642:	4619      	mov	r1, r3
 800e644:	f04f 0c0a 	mov.w	ip, #10
 800e648:	4620      	mov	r0, r4
 800e64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e64e:	3a30      	subs	r2, #48	; 0x30
 800e650:	2a09      	cmp	r2, #9
 800e652:	d903      	bls.n	800e65c <_svfiprintf_r+0x1a8>
 800e654:	2b00      	cmp	r3, #0
 800e656:	d0c5      	beq.n	800e5e4 <_svfiprintf_r+0x130>
 800e658:	9105      	str	r1, [sp, #20]
 800e65a:	e7c3      	b.n	800e5e4 <_svfiprintf_r+0x130>
 800e65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e660:	4604      	mov	r4, r0
 800e662:	2301      	movs	r3, #1
 800e664:	e7f0      	b.n	800e648 <_svfiprintf_r+0x194>
 800e666:	ab03      	add	r3, sp, #12
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4b0f      	ldr	r3, [pc, #60]	; (800e6ac <_svfiprintf_r+0x1f8>)
 800e66e:	a904      	add	r1, sp, #16
 800e670:	4638      	mov	r0, r7
 800e672:	f3af 8000 	nop.w
 800e676:	1c42      	adds	r2, r0, #1
 800e678:	4606      	mov	r6, r0
 800e67a:	d1d6      	bne.n	800e62a <_svfiprintf_r+0x176>
 800e67c:	89ab      	ldrh	r3, [r5, #12]
 800e67e:	065b      	lsls	r3, r3, #25
 800e680:	f53f af2c 	bmi.w	800e4dc <_svfiprintf_r+0x28>
 800e684:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e686:	b01d      	add	sp, #116	; 0x74
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	ab03      	add	r3, sp, #12
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	462a      	mov	r2, r5
 800e692:	4b06      	ldr	r3, [pc, #24]	; (800e6ac <_svfiprintf_r+0x1f8>)
 800e694:	a904      	add	r1, sp, #16
 800e696:	4638      	mov	r0, r7
 800e698:	f000 f9d4 	bl	800ea44 <_printf_i>
 800e69c:	e7eb      	b.n	800e676 <_svfiprintf_r+0x1c2>
 800e69e:	bf00      	nop
 800e6a0:	08011dac 	.word	0x08011dac
 800e6a4:	08011db6 	.word	0x08011db6
 800e6a8:	00000000 	.word	0x00000000
 800e6ac:	0800e3fd 	.word	0x0800e3fd
 800e6b0:	08011db2 	.word	0x08011db2

0800e6b4 <__sfputc_r>:
 800e6b4:	6893      	ldr	r3, [r2, #8]
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	b410      	push	{r4}
 800e6bc:	6093      	str	r3, [r2, #8]
 800e6be:	da08      	bge.n	800e6d2 <__sfputc_r+0x1e>
 800e6c0:	6994      	ldr	r4, [r2, #24]
 800e6c2:	42a3      	cmp	r3, r4
 800e6c4:	db01      	blt.n	800e6ca <__sfputc_r+0x16>
 800e6c6:	290a      	cmp	r1, #10
 800e6c8:	d103      	bne.n	800e6d2 <__sfputc_r+0x1e>
 800e6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ce:	f000 bb39 	b.w	800ed44 <__swbuf_r>
 800e6d2:	6813      	ldr	r3, [r2, #0]
 800e6d4:	1c58      	adds	r0, r3, #1
 800e6d6:	6010      	str	r0, [r2, #0]
 800e6d8:	7019      	strb	r1, [r3, #0]
 800e6da:	4608      	mov	r0, r1
 800e6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <__sfputs_r>:
 800e6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	460f      	mov	r7, r1
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	18d5      	adds	r5, r2, r3
 800e6ec:	42ac      	cmp	r4, r5
 800e6ee:	d101      	bne.n	800e6f4 <__sfputs_r+0x12>
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	e007      	b.n	800e704 <__sfputs_r+0x22>
 800e6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f8:	463a      	mov	r2, r7
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	f7ff ffda 	bl	800e6b4 <__sfputc_r>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d1f3      	bne.n	800e6ec <__sfputs_r+0xa>
 800e704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e708 <_vfiprintf_r>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	460d      	mov	r5, r1
 800e70e:	b09d      	sub	sp, #116	; 0x74
 800e710:	4614      	mov	r4, r2
 800e712:	4698      	mov	r8, r3
 800e714:	4606      	mov	r6, r0
 800e716:	b118      	cbz	r0, 800e720 <_vfiprintf_r+0x18>
 800e718:	6983      	ldr	r3, [r0, #24]
 800e71a:	b90b      	cbnz	r3, 800e720 <_vfiprintf_r+0x18>
 800e71c:	f7ff fa94 	bl	800dc48 <__sinit>
 800e720:	4b89      	ldr	r3, [pc, #548]	; (800e948 <_vfiprintf_r+0x240>)
 800e722:	429d      	cmp	r5, r3
 800e724:	d11b      	bne.n	800e75e <_vfiprintf_r+0x56>
 800e726:	6875      	ldr	r5, [r6, #4]
 800e728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e72a:	07d9      	lsls	r1, r3, #31
 800e72c:	d405      	bmi.n	800e73a <_vfiprintf_r+0x32>
 800e72e:	89ab      	ldrh	r3, [r5, #12]
 800e730:	059a      	lsls	r2, r3, #22
 800e732:	d402      	bmi.n	800e73a <_vfiprintf_r+0x32>
 800e734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e736:	f7ff fb4a 	bl	800ddce <__retarget_lock_acquire_recursive>
 800e73a:	89ab      	ldrh	r3, [r5, #12]
 800e73c:	071b      	lsls	r3, r3, #28
 800e73e:	d501      	bpl.n	800e744 <_vfiprintf_r+0x3c>
 800e740:	692b      	ldr	r3, [r5, #16]
 800e742:	b9eb      	cbnz	r3, 800e780 <_vfiprintf_r+0x78>
 800e744:	4629      	mov	r1, r5
 800e746:	4630      	mov	r0, r6
 800e748:	f000 fb4e 	bl	800ede8 <__swsetup_r>
 800e74c:	b1c0      	cbz	r0, 800e780 <_vfiprintf_r+0x78>
 800e74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e750:	07dc      	lsls	r4, r3, #31
 800e752:	d50e      	bpl.n	800e772 <_vfiprintf_r+0x6a>
 800e754:	f04f 30ff 	mov.w	r0, #4294967295
 800e758:	b01d      	add	sp, #116	; 0x74
 800e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75e:	4b7b      	ldr	r3, [pc, #492]	; (800e94c <_vfiprintf_r+0x244>)
 800e760:	429d      	cmp	r5, r3
 800e762:	d101      	bne.n	800e768 <_vfiprintf_r+0x60>
 800e764:	68b5      	ldr	r5, [r6, #8]
 800e766:	e7df      	b.n	800e728 <_vfiprintf_r+0x20>
 800e768:	4b79      	ldr	r3, [pc, #484]	; (800e950 <_vfiprintf_r+0x248>)
 800e76a:	429d      	cmp	r5, r3
 800e76c:	bf08      	it	eq
 800e76e:	68f5      	ldreq	r5, [r6, #12]
 800e770:	e7da      	b.n	800e728 <_vfiprintf_r+0x20>
 800e772:	89ab      	ldrh	r3, [r5, #12]
 800e774:	0598      	lsls	r0, r3, #22
 800e776:	d4ed      	bmi.n	800e754 <_vfiprintf_r+0x4c>
 800e778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e77a:	f7ff fb29 	bl	800ddd0 <__retarget_lock_release_recursive>
 800e77e:	e7e9      	b.n	800e754 <_vfiprintf_r+0x4c>
 800e780:	2300      	movs	r3, #0
 800e782:	9309      	str	r3, [sp, #36]	; 0x24
 800e784:	2320      	movs	r3, #32
 800e786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e78a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e78e:	2330      	movs	r3, #48	; 0x30
 800e790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e954 <_vfiprintf_r+0x24c>
 800e794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e798:	f04f 0901 	mov.w	r9, #1
 800e79c:	4623      	mov	r3, r4
 800e79e:	469a      	mov	sl, r3
 800e7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7a4:	b10a      	cbz	r2, 800e7aa <_vfiprintf_r+0xa2>
 800e7a6:	2a25      	cmp	r2, #37	; 0x25
 800e7a8:	d1f9      	bne.n	800e79e <_vfiprintf_r+0x96>
 800e7aa:	ebba 0b04 	subs.w	fp, sl, r4
 800e7ae:	d00b      	beq.n	800e7c8 <_vfiprintf_r+0xc0>
 800e7b0:	465b      	mov	r3, fp
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7ff ff93 	bl	800e6e2 <__sfputs_r>
 800e7bc:	3001      	adds	r0, #1
 800e7be:	f000 80aa 	beq.w	800e916 <_vfiprintf_r+0x20e>
 800e7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7c4:	445a      	add	r2, fp
 800e7c6:	9209      	str	r2, [sp, #36]	; 0x24
 800e7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f000 80a2 	beq.w	800e916 <_vfiprintf_r+0x20e>
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7dc:	f10a 0a01 	add.w	sl, sl, #1
 800e7e0:	9304      	str	r3, [sp, #16]
 800e7e2:	9307      	str	r3, [sp, #28]
 800e7e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7e8:	931a      	str	r3, [sp, #104]	; 0x68
 800e7ea:	4654      	mov	r4, sl
 800e7ec:	2205      	movs	r2, #5
 800e7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f2:	4858      	ldr	r0, [pc, #352]	; (800e954 <_vfiprintf_r+0x24c>)
 800e7f4:	f7f1 fcf4 	bl	80001e0 <memchr>
 800e7f8:	9a04      	ldr	r2, [sp, #16]
 800e7fa:	b9d8      	cbnz	r0, 800e834 <_vfiprintf_r+0x12c>
 800e7fc:	06d1      	lsls	r1, r2, #27
 800e7fe:	bf44      	itt	mi
 800e800:	2320      	movmi	r3, #32
 800e802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e806:	0713      	lsls	r3, r2, #28
 800e808:	bf44      	itt	mi
 800e80a:	232b      	movmi	r3, #43	; 0x2b
 800e80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e810:	f89a 3000 	ldrb.w	r3, [sl]
 800e814:	2b2a      	cmp	r3, #42	; 0x2a
 800e816:	d015      	beq.n	800e844 <_vfiprintf_r+0x13c>
 800e818:	9a07      	ldr	r2, [sp, #28]
 800e81a:	4654      	mov	r4, sl
 800e81c:	2000      	movs	r0, #0
 800e81e:	f04f 0c0a 	mov.w	ip, #10
 800e822:	4621      	mov	r1, r4
 800e824:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e828:	3b30      	subs	r3, #48	; 0x30
 800e82a:	2b09      	cmp	r3, #9
 800e82c:	d94e      	bls.n	800e8cc <_vfiprintf_r+0x1c4>
 800e82e:	b1b0      	cbz	r0, 800e85e <_vfiprintf_r+0x156>
 800e830:	9207      	str	r2, [sp, #28]
 800e832:	e014      	b.n	800e85e <_vfiprintf_r+0x156>
 800e834:	eba0 0308 	sub.w	r3, r0, r8
 800e838:	fa09 f303 	lsl.w	r3, r9, r3
 800e83c:	4313      	orrs	r3, r2
 800e83e:	9304      	str	r3, [sp, #16]
 800e840:	46a2      	mov	sl, r4
 800e842:	e7d2      	b.n	800e7ea <_vfiprintf_r+0xe2>
 800e844:	9b03      	ldr	r3, [sp, #12]
 800e846:	1d19      	adds	r1, r3, #4
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	9103      	str	r1, [sp, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	bfbb      	ittet	lt
 800e850:	425b      	neglt	r3, r3
 800e852:	f042 0202 	orrlt.w	r2, r2, #2
 800e856:	9307      	strge	r3, [sp, #28]
 800e858:	9307      	strlt	r3, [sp, #28]
 800e85a:	bfb8      	it	lt
 800e85c:	9204      	strlt	r2, [sp, #16]
 800e85e:	7823      	ldrb	r3, [r4, #0]
 800e860:	2b2e      	cmp	r3, #46	; 0x2e
 800e862:	d10c      	bne.n	800e87e <_vfiprintf_r+0x176>
 800e864:	7863      	ldrb	r3, [r4, #1]
 800e866:	2b2a      	cmp	r3, #42	; 0x2a
 800e868:	d135      	bne.n	800e8d6 <_vfiprintf_r+0x1ce>
 800e86a:	9b03      	ldr	r3, [sp, #12]
 800e86c:	1d1a      	adds	r2, r3, #4
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	9203      	str	r2, [sp, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	bfb8      	it	lt
 800e876:	f04f 33ff 	movlt.w	r3, #4294967295
 800e87a:	3402      	adds	r4, #2
 800e87c:	9305      	str	r3, [sp, #20]
 800e87e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e964 <_vfiprintf_r+0x25c>
 800e882:	7821      	ldrb	r1, [r4, #0]
 800e884:	2203      	movs	r2, #3
 800e886:	4650      	mov	r0, sl
 800e888:	f7f1 fcaa 	bl	80001e0 <memchr>
 800e88c:	b140      	cbz	r0, 800e8a0 <_vfiprintf_r+0x198>
 800e88e:	2340      	movs	r3, #64	; 0x40
 800e890:	eba0 000a 	sub.w	r0, r0, sl
 800e894:	fa03 f000 	lsl.w	r0, r3, r0
 800e898:	9b04      	ldr	r3, [sp, #16]
 800e89a:	4303      	orrs	r3, r0
 800e89c:	3401      	adds	r4, #1
 800e89e:	9304      	str	r3, [sp, #16]
 800e8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a4:	482c      	ldr	r0, [pc, #176]	; (800e958 <_vfiprintf_r+0x250>)
 800e8a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8aa:	2206      	movs	r2, #6
 800e8ac:	f7f1 fc98 	bl	80001e0 <memchr>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d03f      	beq.n	800e934 <_vfiprintf_r+0x22c>
 800e8b4:	4b29      	ldr	r3, [pc, #164]	; (800e95c <_vfiprintf_r+0x254>)
 800e8b6:	bb1b      	cbnz	r3, 800e900 <_vfiprintf_r+0x1f8>
 800e8b8:	9b03      	ldr	r3, [sp, #12]
 800e8ba:	3307      	adds	r3, #7
 800e8bc:	f023 0307 	bic.w	r3, r3, #7
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	9303      	str	r3, [sp, #12]
 800e8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c6:	443b      	add	r3, r7
 800e8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ca:	e767      	b.n	800e79c <_vfiprintf_r+0x94>
 800e8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8d0:	460c      	mov	r4, r1
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	e7a5      	b.n	800e822 <_vfiprintf_r+0x11a>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	3401      	adds	r4, #1
 800e8da:	9305      	str	r3, [sp, #20]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f04f 0c0a 	mov.w	ip, #10
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e8:	3a30      	subs	r2, #48	; 0x30
 800e8ea:	2a09      	cmp	r2, #9
 800e8ec:	d903      	bls.n	800e8f6 <_vfiprintf_r+0x1ee>
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0c5      	beq.n	800e87e <_vfiprintf_r+0x176>
 800e8f2:	9105      	str	r1, [sp, #20]
 800e8f4:	e7c3      	b.n	800e87e <_vfiprintf_r+0x176>
 800e8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e7f0      	b.n	800e8e2 <_vfiprintf_r+0x1da>
 800e900:	ab03      	add	r3, sp, #12
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	462a      	mov	r2, r5
 800e906:	4b16      	ldr	r3, [pc, #88]	; (800e960 <_vfiprintf_r+0x258>)
 800e908:	a904      	add	r1, sp, #16
 800e90a:	4630      	mov	r0, r6
 800e90c:	f3af 8000 	nop.w
 800e910:	4607      	mov	r7, r0
 800e912:	1c78      	adds	r0, r7, #1
 800e914:	d1d6      	bne.n	800e8c4 <_vfiprintf_r+0x1bc>
 800e916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e918:	07d9      	lsls	r1, r3, #31
 800e91a:	d405      	bmi.n	800e928 <_vfiprintf_r+0x220>
 800e91c:	89ab      	ldrh	r3, [r5, #12]
 800e91e:	059a      	lsls	r2, r3, #22
 800e920:	d402      	bmi.n	800e928 <_vfiprintf_r+0x220>
 800e922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e924:	f7ff fa54 	bl	800ddd0 <__retarget_lock_release_recursive>
 800e928:	89ab      	ldrh	r3, [r5, #12]
 800e92a:	065b      	lsls	r3, r3, #25
 800e92c:	f53f af12 	bmi.w	800e754 <_vfiprintf_r+0x4c>
 800e930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e932:	e711      	b.n	800e758 <_vfiprintf_r+0x50>
 800e934:	ab03      	add	r3, sp, #12
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	462a      	mov	r2, r5
 800e93a:	4b09      	ldr	r3, [pc, #36]	; (800e960 <_vfiprintf_r+0x258>)
 800e93c:	a904      	add	r1, sp, #16
 800e93e:	4630      	mov	r0, r6
 800e940:	f000 f880 	bl	800ea44 <_printf_i>
 800e944:	e7e4      	b.n	800e910 <_vfiprintf_r+0x208>
 800e946:	bf00      	nop
 800e948:	08011d68 	.word	0x08011d68
 800e94c:	08011d88 	.word	0x08011d88
 800e950:	08011d48 	.word	0x08011d48
 800e954:	08011dac 	.word	0x08011dac
 800e958:	08011db6 	.word	0x08011db6
 800e95c:	00000000 	.word	0x00000000
 800e960:	0800e6e3 	.word	0x0800e6e3
 800e964:	08011db2 	.word	0x08011db2

0800e968 <_printf_common>:
 800e968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e96c:	4616      	mov	r6, r2
 800e96e:	4699      	mov	r9, r3
 800e970:	688a      	ldr	r2, [r1, #8]
 800e972:	690b      	ldr	r3, [r1, #16]
 800e974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e978:	4293      	cmp	r3, r2
 800e97a:	bfb8      	it	lt
 800e97c:	4613      	movlt	r3, r2
 800e97e:	6033      	str	r3, [r6, #0]
 800e980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e984:	4607      	mov	r7, r0
 800e986:	460c      	mov	r4, r1
 800e988:	b10a      	cbz	r2, 800e98e <_printf_common+0x26>
 800e98a:	3301      	adds	r3, #1
 800e98c:	6033      	str	r3, [r6, #0]
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	0699      	lsls	r1, r3, #26
 800e992:	bf42      	ittt	mi
 800e994:	6833      	ldrmi	r3, [r6, #0]
 800e996:	3302      	addmi	r3, #2
 800e998:	6033      	strmi	r3, [r6, #0]
 800e99a:	6825      	ldr	r5, [r4, #0]
 800e99c:	f015 0506 	ands.w	r5, r5, #6
 800e9a0:	d106      	bne.n	800e9b0 <_printf_common+0x48>
 800e9a2:	f104 0a19 	add.w	sl, r4, #25
 800e9a6:	68e3      	ldr	r3, [r4, #12]
 800e9a8:	6832      	ldr	r2, [r6, #0]
 800e9aa:	1a9b      	subs	r3, r3, r2
 800e9ac:	42ab      	cmp	r3, r5
 800e9ae:	dc26      	bgt.n	800e9fe <_printf_common+0x96>
 800e9b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9b4:	1e13      	subs	r3, r2, #0
 800e9b6:	6822      	ldr	r2, [r4, #0]
 800e9b8:	bf18      	it	ne
 800e9ba:	2301      	movne	r3, #1
 800e9bc:	0692      	lsls	r2, r2, #26
 800e9be:	d42b      	bmi.n	800ea18 <_printf_common+0xb0>
 800e9c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9c4:	4649      	mov	r1, r9
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	47c0      	blx	r8
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	d01e      	beq.n	800ea0c <_printf_common+0xa4>
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	68e5      	ldr	r5, [r4, #12]
 800e9d2:	6832      	ldr	r2, [r6, #0]
 800e9d4:	f003 0306 	and.w	r3, r3, #6
 800e9d8:	2b04      	cmp	r3, #4
 800e9da:	bf08      	it	eq
 800e9dc:	1aad      	subeq	r5, r5, r2
 800e9de:	68a3      	ldr	r3, [r4, #8]
 800e9e0:	6922      	ldr	r2, [r4, #16]
 800e9e2:	bf0c      	ite	eq
 800e9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9e8:	2500      	movne	r5, #0
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	bfc4      	itt	gt
 800e9ee:	1a9b      	subgt	r3, r3, r2
 800e9f0:	18ed      	addgt	r5, r5, r3
 800e9f2:	2600      	movs	r6, #0
 800e9f4:	341a      	adds	r4, #26
 800e9f6:	42b5      	cmp	r5, r6
 800e9f8:	d11a      	bne.n	800ea30 <_printf_common+0xc8>
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	e008      	b.n	800ea10 <_printf_common+0xa8>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	4652      	mov	r2, sl
 800ea02:	4649      	mov	r1, r9
 800ea04:	4638      	mov	r0, r7
 800ea06:	47c0      	blx	r8
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d103      	bne.n	800ea14 <_printf_common+0xac>
 800ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea14:	3501      	adds	r5, #1
 800ea16:	e7c6      	b.n	800e9a6 <_printf_common+0x3e>
 800ea18:	18e1      	adds	r1, r4, r3
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	2030      	movs	r0, #48	; 0x30
 800ea1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea22:	4422      	add	r2, r4
 800ea24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea2c:	3302      	adds	r3, #2
 800ea2e:	e7c7      	b.n	800e9c0 <_printf_common+0x58>
 800ea30:	2301      	movs	r3, #1
 800ea32:	4622      	mov	r2, r4
 800ea34:	4649      	mov	r1, r9
 800ea36:	4638      	mov	r0, r7
 800ea38:	47c0      	blx	r8
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	d0e6      	beq.n	800ea0c <_printf_common+0xa4>
 800ea3e:	3601      	adds	r6, #1
 800ea40:	e7d9      	b.n	800e9f6 <_printf_common+0x8e>
	...

0800ea44 <_printf_i>:
 800ea44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea48:	7e0f      	ldrb	r7, [r1, #24]
 800ea4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea4c:	2f78      	cmp	r7, #120	; 0x78
 800ea4e:	4691      	mov	r9, r2
 800ea50:	4680      	mov	r8, r0
 800ea52:	460c      	mov	r4, r1
 800ea54:	469a      	mov	sl, r3
 800ea56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea5a:	d807      	bhi.n	800ea6c <_printf_i+0x28>
 800ea5c:	2f62      	cmp	r7, #98	; 0x62
 800ea5e:	d80a      	bhi.n	800ea76 <_printf_i+0x32>
 800ea60:	2f00      	cmp	r7, #0
 800ea62:	f000 80d8 	beq.w	800ec16 <_printf_i+0x1d2>
 800ea66:	2f58      	cmp	r7, #88	; 0x58
 800ea68:	f000 80a3 	beq.w	800ebb2 <_printf_i+0x16e>
 800ea6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea74:	e03a      	b.n	800eaec <_printf_i+0xa8>
 800ea76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea7a:	2b15      	cmp	r3, #21
 800ea7c:	d8f6      	bhi.n	800ea6c <_printf_i+0x28>
 800ea7e:	a101      	add	r1, pc, #4	; (adr r1, 800ea84 <_printf_i+0x40>)
 800ea80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea84:	0800eadd 	.word	0x0800eadd
 800ea88:	0800eaf1 	.word	0x0800eaf1
 800ea8c:	0800ea6d 	.word	0x0800ea6d
 800ea90:	0800ea6d 	.word	0x0800ea6d
 800ea94:	0800ea6d 	.word	0x0800ea6d
 800ea98:	0800ea6d 	.word	0x0800ea6d
 800ea9c:	0800eaf1 	.word	0x0800eaf1
 800eaa0:	0800ea6d 	.word	0x0800ea6d
 800eaa4:	0800ea6d 	.word	0x0800ea6d
 800eaa8:	0800ea6d 	.word	0x0800ea6d
 800eaac:	0800ea6d 	.word	0x0800ea6d
 800eab0:	0800ebfd 	.word	0x0800ebfd
 800eab4:	0800eb21 	.word	0x0800eb21
 800eab8:	0800ebdf 	.word	0x0800ebdf
 800eabc:	0800ea6d 	.word	0x0800ea6d
 800eac0:	0800ea6d 	.word	0x0800ea6d
 800eac4:	0800ec1f 	.word	0x0800ec1f
 800eac8:	0800ea6d 	.word	0x0800ea6d
 800eacc:	0800eb21 	.word	0x0800eb21
 800ead0:	0800ea6d 	.word	0x0800ea6d
 800ead4:	0800ea6d 	.word	0x0800ea6d
 800ead8:	0800ebe7 	.word	0x0800ebe7
 800eadc:	682b      	ldr	r3, [r5, #0]
 800eade:	1d1a      	adds	r2, r3, #4
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	602a      	str	r2, [r5, #0]
 800eae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eaec:	2301      	movs	r3, #1
 800eaee:	e0a3      	b.n	800ec38 <_printf_i+0x1f4>
 800eaf0:	6820      	ldr	r0, [r4, #0]
 800eaf2:	6829      	ldr	r1, [r5, #0]
 800eaf4:	0606      	lsls	r6, r0, #24
 800eaf6:	f101 0304 	add.w	r3, r1, #4
 800eafa:	d50a      	bpl.n	800eb12 <_printf_i+0xce>
 800eafc:	680e      	ldr	r6, [r1, #0]
 800eafe:	602b      	str	r3, [r5, #0]
 800eb00:	2e00      	cmp	r6, #0
 800eb02:	da03      	bge.n	800eb0c <_printf_i+0xc8>
 800eb04:	232d      	movs	r3, #45	; 0x2d
 800eb06:	4276      	negs	r6, r6
 800eb08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb0c:	485e      	ldr	r0, [pc, #376]	; (800ec88 <_printf_i+0x244>)
 800eb0e:	230a      	movs	r3, #10
 800eb10:	e019      	b.n	800eb46 <_printf_i+0x102>
 800eb12:	680e      	ldr	r6, [r1, #0]
 800eb14:	602b      	str	r3, [r5, #0]
 800eb16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb1a:	bf18      	it	ne
 800eb1c:	b236      	sxthne	r6, r6
 800eb1e:	e7ef      	b.n	800eb00 <_printf_i+0xbc>
 800eb20:	682b      	ldr	r3, [r5, #0]
 800eb22:	6820      	ldr	r0, [r4, #0]
 800eb24:	1d19      	adds	r1, r3, #4
 800eb26:	6029      	str	r1, [r5, #0]
 800eb28:	0601      	lsls	r1, r0, #24
 800eb2a:	d501      	bpl.n	800eb30 <_printf_i+0xec>
 800eb2c:	681e      	ldr	r6, [r3, #0]
 800eb2e:	e002      	b.n	800eb36 <_printf_i+0xf2>
 800eb30:	0646      	lsls	r6, r0, #25
 800eb32:	d5fb      	bpl.n	800eb2c <_printf_i+0xe8>
 800eb34:	881e      	ldrh	r6, [r3, #0]
 800eb36:	4854      	ldr	r0, [pc, #336]	; (800ec88 <_printf_i+0x244>)
 800eb38:	2f6f      	cmp	r7, #111	; 0x6f
 800eb3a:	bf0c      	ite	eq
 800eb3c:	2308      	moveq	r3, #8
 800eb3e:	230a      	movne	r3, #10
 800eb40:	2100      	movs	r1, #0
 800eb42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb46:	6865      	ldr	r5, [r4, #4]
 800eb48:	60a5      	str	r5, [r4, #8]
 800eb4a:	2d00      	cmp	r5, #0
 800eb4c:	bfa2      	ittt	ge
 800eb4e:	6821      	ldrge	r1, [r4, #0]
 800eb50:	f021 0104 	bicge.w	r1, r1, #4
 800eb54:	6021      	strge	r1, [r4, #0]
 800eb56:	b90e      	cbnz	r6, 800eb5c <_printf_i+0x118>
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	d04d      	beq.n	800ebf8 <_printf_i+0x1b4>
 800eb5c:	4615      	mov	r5, r2
 800eb5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb62:	fb03 6711 	mls	r7, r3, r1, r6
 800eb66:	5dc7      	ldrb	r7, [r0, r7]
 800eb68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb6c:	4637      	mov	r7, r6
 800eb6e:	42bb      	cmp	r3, r7
 800eb70:	460e      	mov	r6, r1
 800eb72:	d9f4      	bls.n	800eb5e <_printf_i+0x11a>
 800eb74:	2b08      	cmp	r3, #8
 800eb76:	d10b      	bne.n	800eb90 <_printf_i+0x14c>
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	07de      	lsls	r6, r3, #31
 800eb7c:	d508      	bpl.n	800eb90 <_printf_i+0x14c>
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	4299      	cmp	r1, r3
 800eb84:	bfde      	ittt	le
 800eb86:	2330      	movle	r3, #48	; 0x30
 800eb88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb90:	1b52      	subs	r2, r2, r5
 800eb92:	6122      	str	r2, [r4, #16]
 800eb94:	f8cd a000 	str.w	sl, [sp]
 800eb98:	464b      	mov	r3, r9
 800eb9a:	aa03      	add	r2, sp, #12
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4640      	mov	r0, r8
 800eba0:	f7ff fee2 	bl	800e968 <_printf_common>
 800eba4:	3001      	adds	r0, #1
 800eba6:	d14c      	bne.n	800ec42 <_printf_i+0x1fe>
 800eba8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebac:	b004      	add	sp, #16
 800ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb2:	4835      	ldr	r0, [pc, #212]	; (800ec88 <_printf_i+0x244>)
 800ebb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ebb8:	6829      	ldr	r1, [r5, #0]
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebc0:	6029      	str	r1, [r5, #0]
 800ebc2:	061d      	lsls	r5, r3, #24
 800ebc4:	d514      	bpl.n	800ebf0 <_printf_i+0x1ac>
 800ebc6:	07df      	lsls	r7, r3, #31
 800ebc8:	bf44      	itt	mi
 800ebca:	f043 0320 	orrmi.w	r3, r3, #32
 800ebce:	6023      	strmi	r3, [r4, #0]
 800ebd0:	b91e      	cbnz	r6, 800ebda <_printf_i+0x196>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	f023 0320 	bic.w	r3, r3, #32
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	2310      	movs	r3, #16
 800ebdc:	e7b0      	b.n	800eb40 <_printf_i+0xfc>
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	f043 0320 	orr.w	r3, r3, #32
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	2378      	movs	r3, #120	; 0x78
 800ebe8:	4828      	ldr	r0, [pc, #160]	; (800ec8c <_printf_i+0x248>)
 800ebea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebee:	e7e3      	b.n	800ebb8 <_printf_i+0x174>
 800ebf0:	0659      	lsls	r1, r3, #25
 800ebf2:	bf48      	it	mi
 800ebf4:	b2b6      	uxthmi	r6, r6
 800ebf6:	e7e6      	b.n	800ebc6 <_printf_i+0x182>
 800ebf8:	4615      	mov	r5, r2
 800ebfa:	e7bb      	b.n	800eb74 <_printf_i+0x130>
 800ebfc:	682b      	ldr	r3, [r5, #0]
 800ebfe:	6826      	ldr	r6, [r4, #0]
 800ec00:	6961      	ldr	r1, [r4, #20]
 800ec02:	1d18      	adds	r0, r3, #4
 800ec04:	6028      	str	r0, [r5, #0]
 800ec06:	0635      	lsls	r5, r6, #24
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	d501      	bpl.n	800ec10 <_printf_i+0x1cc>
 800ec0c:	6019      	str	r1, [r3, #0]
 800ec0e:	e002      	b.n	800ec16 <_printf_i+0x1d2>
 800ec10:	0670      	lsls	r0, r6, #25
 800ec12:	d5fb      	bpl.n	800ec0c <_printf_i+0x1c8>
 800ec14:	8019      	strh	r1, [r3, #0]
 800ec16:	2300      	movs	r3, #0
 800ec18:	6123      	str	r3, [r4, #16]
 800ec1a:	4615      	mov	r5, r2
 800ec1c:	e7ba      	b.n	800eb94 <_printf_i+0x150>
 800ec1e:	682b      	ldr	r3, [r5, #0]
 800ec20:	1d1a      	adds	r2, r3, #4
 800ec22:	602a      	str	r2, [r5, #0]
 800ec24:	681d      	ldr	r5, [r3, #0]
 800ec26:	6862      	ldr	r2, [r4, #4]
 800ec28:	2100      	movs	r1, #0
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f7f1 fad8 	bl	80001e0 <memchr>
 800ec30:	b108      	cbz	r0, 800ec36 <_printf_i+0x1f2>
 800ec32:	1b40      	subs	r0, r0, r5
 800ec34:	6060      	str	r0, [r4, #4]
 800ec36:	6863      	ldr	r3, [r4, #4]
 800ec38:	6123      	str	r3, [r4, #16]
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec40:	e7a8      	b.n	800eb94 <_printf_i+0x150>
 800ec42:	6923      	ldr	r3, [r4, #16]
 800ec44:	462a      	mov	r2, r5
 800ec46:	4649      	mov	r1, r9
 800ec48:	4640      	mov	r0, r8
 800ec4a:	47d0      	blx	sl
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d0ab      	beq.n	800eba8 <_printf_i+0x164>
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	079b      	lsls	r3, r3, #30
 800ec54:	d413      	bmi.n	800ec7e <_printf_i+0x23a>
 800ec56:	68e0      	ldr	r0, [r4, #12]
 800ec58:	9b03      	ldr	r3, [sp, #12]
 800ec5a:	4298      	cmp	r0, r3
 800ec5c:	bfb8      	it	lt
 800ec5e:	4618      	movlt	r0, r3
 800ec60:	e7a4      	b.n	800ebac <_printf_i+0x168>
 800ec62:	2301      	movs	r3, #1
 800ec64:	4632      	mov	r2, r6
 800ec66:	4649      	mov	r1, r9
 800ec68:	4640      	mov	r0, r8
 800ec6a:	47d0      	blx	sl
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d09b      	beq.n	800eba8 <_printf_i+0x164>
 800ec70:	3501      	adds	r5, #1
 800ec72:	68e3      	ldr	r3, [r4, #12]
 800ec74:	9903      	ldr	r1, [sp, #12]
 800ec76:	1a5b      	subs	r3, r3, r1
 800ec78:	42ab      	cmp	r3, r5
 800ec7a:	dcf2      	bgt.n	800ec62 <_printf_i+0x21e>
 800ec7c:	e7eb      	b.n	800ec56 <_printf_i+0x212>
 800ec7e:	2500      	movs	r5, #0
 800ec80:	f104 0619 	add.w	r6, r4, #25
 800ec84:	e7f5      	b.n	800ec72 <_printf_i+0x22e>
 800ec86:	bf00      	nop
 800ec88:	08011dbd 	.word	0x08011dbd
 800ec8c:	08011dce 	.word	0x08011dce

0800ec90 <_putc_r>:
 800ec90:	b570      	push	{r4, r5, r6, lr}
 800ec92:	460d      	mov	r5, r1
 800ec94:	4614      	mov	r4, r2
 800ec96:	4606      	mov	r6, r0
 800ec98:	b118      	cbz	r0, 800eca2 <_putc_r+0x12>
 800ec9a:	6983      	ldr	r3, [r0, #24]
 800ec9c:	b90b      	cbnz	r3, 800eca2 <_putc_r+0x12>
 800ec9e:	f7fe ffd3 	bl	800dc48 <__sinit>
 800eca2:	4b1c      	ldr	r3, [pc, #112]	; (800ed14 <_putc_r+0x84>)
 800eca4:	429c      	cmp	r4, r3
 800eca6:	d124      	bne.n	800ecf2 <_putc_r+0x62>
 800eca8:	6874      	ldr	r4, [r6, #4]
 800ecaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecac:	07d8      	lsls	r0, r3, #31
 800ecae:	d405      	bmi.n	800ecbc <_putc_r+0x2c>
 800ecb0:	89a3      	ldrh	r3, [r4, #12]
 800ecb2:	0599      	lsls	r1, r3, #22
 800ecb4:	d402      	bmi.n	800ecbc <_putc_r+0x2c>
 800ecb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecb8:	f7ff f889 	bl	800ddce <__retarget_lock_acquire_recursive>
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	60a3      	str	r3, [r4, #8]
 800ecc4:	da05      	bge.n	800ecd2 <_putc_r+0x42>
 800ecc6:	69a2      	ldr	r2, [r4, #24]
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	db1c      	blt.n	800ed06 <_putc_r+0x76>
 800eccc:	b2eb      	uxtb	r3, r5
 800ecce:	2b0a      	cmp	r3, #10
 800ecd0:	d019      	beq.n	800ed06 <_putc_r+0x76>
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	1c5a      	adds	r2, r3, #1
 800ecd6:	6022      	str	r2, [r4, #0]
 800ecd8:	701d      	strb	r5, [r3, #0]
 800ecda:	b2ed      	uxtb	r5, r5
 800ecdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecde:	07da      	lsls	r2, r3, #31
 800ece0:	d405      	bmi.n	800ecee <_putc_r+0x5e>
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	059b      	lsls	r3, r3, #22
 800ece6:	d402      	bmi.n	800ecee <_putc_r+0x5e>
 800ece8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecea:	f7ff f871 	bl	800ddd0 <__retarget_lock_release_recursive>
 800ecee:	4628      	mov	r0, r5
 800ecf0:	bd70      	pop	{r4, r5, r6, pc}
 800ecf2:	4b09      	ldr	r3, [pc, #36]	; (800ed18 <_putc_r+0x88>)
 800ecf4:	429c      	cmp	r4, r3
 800ecf6:	d101      	bne.n	800ecfc <_putc_r+0x6c>
 800ecf8:	68b4      	ldr	r4, [r6, #8]
 800ecfa:	e7d6      	b.n	800ecaa <_putc_r+0x1a>
 800ecfc:	4b07      	ldr	r3, [pc, #28]	; (800ed1c <_putc_r+0x8c>)
 800ecfe:	429c      	cmp	r4, r3
 800ed00:	bf08      	it	eq
 800ed02:	68f4      	ldreq	r4, [r6, #12]
 800ed04:	e7d1      	b.n	800ecaa <_putc_r+0x1a>
 800ed06:	4629      	mov	r1, r5
 800ed08:	4622      	mov	r2, r4
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	f000 f81a 	bl	800ed44 <__swbuf_r>
 800ed10:	4605      	mov	r5, r0
 800ed12:	e7e3      	b.n	800ecdc <_putc_r+0x4c>
 800ed14:	08011d68 	.word	0x08011d68
 800ed18:	08011d88 	.word	0x08011d88
 800ed1c:	08011d48 	.word	0x08011d48

0800ed20 <_read_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d07      	ldr	r5, [pc, #28]	; (800ed40 <_read_r+0x20>)
 800ed24:	4604      	mov	r4, r0
 800ed26:	4608      	mov	r0, r1
 800ed28:	4611      	mov	r1, r2
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	602a      	str	r2, [r5, #0]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	f7f2 fe7a 	bl	8001a28 <_read>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	d102      	bne.n	800ed3e <_read_r+0x1e>
 800ed38:	682b      	ldr	r3, [r5, #0]
 800ed3a:	b103      	cbz	r3, 800ed3e <_read_r+0x1e>
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	bd38      	pop	{r3, r4, r5, pc}
 800ed40:	2001b290 	.word	0x2001b290

0800ed44 <__swbuf_r>:
 800ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed46:	460e      	mov	r6, r1
 800ed48:	4614      	mov	r4, r2
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	b118      	cbz	r0, 800ed56 <__swbuf_r+0x12>
 800ed4e:	6983      	ldr	r3, [r0, #24]
 800ed50:	b90b      	cbnz	r3, 800ed56 <__swbuf_r+0x12>
 800ed52:	f7fe ff79 	bl	800dc48 <__sinit>
 800ed56:	4b21      	ldr	r3, [pc, #132]	; (800eddc <__swbuf_r+0x98>)
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	d12b      	bne.n	800edb4 <__swbuf_r+0x70>
 800ed5c:	686c      	ldr	r4, [r5, #4]
 800ed5e:	69a3      	ldr	r3, [r4, #24]
 800ed60:	60a3      	str	r3, [r4, #8]
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	071a      	lsls	r2, r3, #28
 800ed66:	d52f      	bpl.n	800edc8 <__swbuf_r+0x84>
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	b36b      	cbz	r3, 800edc8 <__swbuf_r+0x84>
 800ed6c:	6923      	ldr	r3, [r4, #16]
 800ed6e:	6820      	ldr	r0, [r4, #0]
 800ed70:	1ac0      	subs	r0, r0, r3
 800ed72:	6963      	ldr	r3, [r4, #20]
 800ed74:	b2f6      	uxtb	r6, r6
 800ed76:	4283      	cmp	r3, r0
 800ed78:	4637      	mov	r7, r6
 800ed7a:	dc04      	bgt.n	800ed86 <__swbuf_r+0x42>
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f7ff fae2 	bl	800e348 <_fflush_r>
 800ed84:	bb30      	cbnz	r0, 800edd4 <__swbuf_r+0x90>
 800ed86:	68a3      	ldr	r3, [r4, #8]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	60a3      	str	r3, [r4, #8]
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	6022      	str	r2, [r4, #0]
 800ed92:	701e      	strb	r6, [r3, #0]
 800ed94:	6963      	ldr	r3, [r4, #20]
 800ed96:	3001      	adds	r0, #1
 800ed98:	4283      	cmp	r3, r0
 800ed9a:	d004      	beq.n	800eda6 <__swbuf_r+0x62>
 800ed9c:	89a3      	ldrh	r3, [r4, #12]
 800ed9e:	07db      	lsls	r3, r3, #31
 800eda0:	d506      	bpl.n	800edb0 <__swbuf_r+0x6c>
 800eda2:	2e0a      	cmp	r6, #10
 800eda4:	d104      	bne.n	800edb0 <__swbuf_r+0x6c>
 800eda6:	4621      	mov	r1, r4
 800eda8:	4628      	mov	r0, r5
 800edaa:	f7ff facd 	bl	800e348 <_fflush_r>
 800edae:	b988      	cbnz	r0, 800edd4 <__swbuf_r+0x90>
 800edb0:	4638      	mov	r0, r7
 800edb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb4:	4b0a      	ldr	r3, [pc, #40]	; (800ede0 <__swbuf_r+0x9c>)
 800edb6:	429c      	cmp	r4, r3
 800edb8:	d101      	bne.n	800edbe <__swbuf_r+0x7a>
 800edba:	68ac      	ldr	r4, [r5, #8]
 800edbc:	e7cf      	b.n	800ed5e <__swbuf_r+0x1a>
 800edbe:	4b09      	ldr	r3, [pc, #36]	; (800ede4 <__swbuf_r+0xa0>)
 800edc0:	429c      	cmp	r4, r3
 800edc2:	bf08      	it	eq
 800edc4:	68ec      	ldreq	r4, [r5, #12]
 800edc6:	e7ca      	b.n	800ed5e <__swbuf_r+0x1a>
 800edc8:	4621      	mov	r1, r4
 800edca:	4628      	mov	r0, r5
 800edcc:	f000 f80c 	bl	800ede8 <__swsetup_r>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d0cb      	beq.n	800ed6c <__swbuf_r+0x28>
 800edd4:	f04f 37ff 	mov.w	r7, #4294967295
 800edd8:	e7ea      	b.n	800edb0 <__swbuf_r+0x6c>
 800edda:	bf00      	nop
 800eddc:	08011d68 	.word	0x08011d68
 800ede0:	08011d88 	.word	0x08011d88
 800ede4:	08011d48 	.word	0x08011d48

0800ede8 <__swsetup_r>:
 800ede8:	4b32      	ldr	r3, [pc, #200]	; (800eeb4 <__swsetup_r+0xcc>)
 800edea:	b570      	push	{r4, r5, r6, lr}
 800edec:	681d      	ldr	r5, [r3, #0]
 800edee:	4606      	mov	r6, r0
 800edf0:	460c      	mov	r4, r1
 800edf2:	b125      	cbz	r5, 800edfe <__swsetup_r+0x16>
 800edf4:	69ab      	ldr	r3, [r5, #24]
 800edf6:	b913      	cbnz	r3, 800edfe <__swsetup_r+0x16>
 800edf8:	4628      	mov	r0, r5
 800edfa:	f7fe ff25 	bl	800dc48 <__sinit>
 800edfe:	4b2e      	ldr	r3, [pc, #184]	; (800eeb8 <__swsetup_r+0xd0>)
 800ee00:	429c      	cmp	r4, r3
 800ee02:	d10f      	bne.n	800ee24 <__swsetup_r+0x3c>
 800ee04:	686c      	ldr	r4, [r5, #4]
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee0c:	0719      	lsls	r1, r3, #28
 800ee0e:	d42c      	bmi.n	800ee6a <__swsetup_r+0x82>
 800ee10:	06dd      	lsls	r5, r3, #27
 800ee12:	d411      	bmi.n	800ee38 <__swsetup_r+0x50>
 800ee14:	2309      	movs	r3, #9
 800ee16:	6033      	str	r3, [r6, #0]
 800ee18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee1c:	81a3      	strh	r3, [r4, #12]
 800ee1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee22:	e03e      	b.n	800eea2 <__swsetup_r+0xba>
 800ee24:	4b25      	ldr	r3, [pc, #148]	; (800eebc <__swsetup_r+0xd4>)
 800ee26:	429c      	cmp	r4, r3
 800ee28:	d101      	bne.n	800ee2e <__swsetup_r+0x46>
 800ee2a:	68ac      	ldr	r4, [r5, #8]
 800ee2c:	e7eb      	b.n	800ee06 <__swsetup_r+0x1e>
 800ee2e:	4b24      	ldr	r3, [pc, #144]	; (800eec0 <__swsetup_r+0xd8>)
 800ee30:	429c      	cmp	r4, r3
 800ee32:	bf08      	it	eq
 800ee34:	68ec      	ldreq	r4, [r5, #12]
 800ee36:	e7e6      	b.n	800ee06 <__swsetup_r+0x1e>
 800ee38:	0758      	lsls	r0, r3, #29
 800ee3a:	d512      	bpl.n	800ee62 <__swsetup_r+0x7a>
 800ee3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee3e:	b141      	cbz	r1, 800ee52 <__swsetup_r+0x6a>
 800ee40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee44:	4299      	cmp	r1, r3
 800ee46:	d002      	beq.n	800ee4e <__swsetup_r+0x66>
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f7fe ffe9 	bl	800de20 <_free_r>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	6363      	str	r3, [r4, #52]	; 0x34
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee58:	81a3      	strh	r3, [r4, #12]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	6063      	str	r3, [r4, #4]
 800ee5e:	6923      	ldr	r3, [r4, #16]
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	89a3      	ldrh	r3, [r4, #12]
 800ee64:	f043 0308 	orr.w	r3, r3, #8
 800ee68:	81a3      	strh	r3, [r4, #12]
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	b94b      	cbnz	r3, 800ee82 <__swsetup_r+0x9a>
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee78:	d003      	beq.n	800ee82 <__swsetup_r+0x9a>
 800ee7a:	4621      	mov	r1, r4
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f000 f847 	bl	800ef10 <__smakebuf_r>
 800ee82:	89a0      	ldrh	r0, [r4, #12]
 800ee84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee88:	f010 0301 	ands.w	r3, r0, #1
 800ee8c:	d00a      	beq.n	800eea4 <__swsetup_r+0xbc>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	60a3      	str	r3, [r4, #8]
 800ee92:	6963      	ldr	r3, [r4, #20]
 800ee94:	425b      	negs	r3, r3
 800ee96:	61a3      	str	r3, [r4, #24]
 800ee98:	6923      	ldr	r3, [r4, #16]
 800ee9a:	b943      	cbnz	r3, 800eeae <__swsetup_r+0xc6>
 800ee9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eea0:	d1ba      	bne.n	800ee18 <__swsetup_r+0x30>
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	0781      	lsls	r1, r0, #30
 800eea6:	bf58      	it	pl
 800eea8:	6963      	ldrpl	r3, [r4, #20]
 800eeaa:	60a3      	str	r3, [r4, #8]
 800eeac:	e7f4      	b.n	800ee98 <__swsetup_r+0xb0>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	e7f7      	b.n	800eea2 <__swsetup_r+0xba>
 800eeb2:	bf00      	nop
 800eeb4:	20000250 	.word	0x20000250
 800eeb8:	08011d68 	.word	0x08011d68
 800eebc:	08011d88 	.word	0x08011d88
 800eec0:	08011d48 	.word	0x08011d48

0800eec4 <__swhatbuf_r>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	460e      	mov	r6, r1
 800eec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eecc:	2900      	cmp	r1, #0
 800eece:	b096      	sub	sp, #88	; 0x58
 800eed0:	4614      	mov	r4, r2
 800eed2:	461d      	mov	r5, r3
 800eed4:	da08      	bge.n	800eee8 <__swhatbuf_r+0x24>
 800eed6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	602a      	str	r2, [r5, #0]
 800eede:	061a      	lsls	r2, r3, #24
 800eee0:	d410      	bmi.n	800ef04 <__swhatbuf_r+0x40>
 800eee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eee6:	e00e      	b.n	800ef06 <__swhatbuf_r+0x42>
 800eee8:	466a      	mov	r2, sp
 800eeea:	f000 f89b 	bl	800f024 <_fstat_r>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	dbf1      	blt.n	800eed6 <__swhatbuf_r+0x12>
 800eef2:	9a01      	ldr	r2, [sp, #4]
 800eef4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eefc:	425a      	negs	r2, r3
 800eefe:	415a      	adcs	r2, r3
 800ef00:	602a      	str	r2, [r5, #0]
 800ef02:	e7ee      	b.n	800eee2 <__swhatbuf_r+0x1e>
 800ef04:	2340      	movs	r3, #64	; 0x40
 800ef06:	2000      	movs	r0, #0
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	b016      	add	sp, #88	; 0x58
 800ef0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef10 <__smakebuf_r>:
 800ef10:	898b      	ldrh	r3, [r1, #12]
 800ef12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef14:	079d      	lsls	r5, r3, #30
 800ef16:	4606      	mov	r6, r0
 800ef18:	460c      	mov	r4, r1
 800ef1a:	d507      	bpl.n	800ef2c <__smakebuf_r+0x1c>
 800ef1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef20:	6023      	str	r3, [r4, #0]
 800ef22:	6123      	str	r3, [r4, #16]
 800ef24:	2301      	movs	r3, #1
 800ef26:	6163      	str	r3, [r4, #20]
 800ef28:	b002      	add	sp, #8
 800ef2a:	bd70      	pop	{r4, r5, r6, pc}
 800ef2c:	ab01      	add	r3, sp, #4
 800ef2e:	466a      	mov	r2, sp
 800ef30:	f7ff ffc8 	bl	800eec4 <__swhatbuf_r>
 800ef34:	9900      	ldr	r1, [sp, #0]
 800ef36:	4605      	mov	r5, r0
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f7fe ffdd 	bl	800def8 <_malloc_r>
 800ef3e:	b948      	cbnz	r0, 800ef54 <__smakebuf_r+0x44>
 800ef40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef44:	059a      	lsls	r2, r3, #22
 800ef46:	d4ef      	bmi.n	800ef28 <__smakebuf_r+0x18>
 800ef48:	f023 0303 	bic.w	r3, r3, #3
 800ef4c:	f043 0302 	orr.w	r3, r3, #2
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	e7e3      	b.n	800ef1c <__smakebuf_r+0xc>
 800ef54:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <__smakebuf_r+0x7c>)
 800ef56:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef58:	89a3      	ldrh	r3, [r4, #12]
 800ef5a:	6020      	str	r0, [r4, #0]
 800ef5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef60:	81a3      	strh	r3, [r4, #12]
 800ef62:	9b00      	ldr	r3, [sp, #0]
 800ef64:	6163      	str	r3, [r4, #20]
 800ef66:	9b01      	ldr	r3, [sp, #4]
 800ef68:	6120      	str	r0, [r4, #16]
 800ef6a:	b15b      	cbz	r3, 800ef84 <__smakebuf_r+0x74>
 800ef6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef70:	4630      	mov	r0, r6
 800ef72:	f000 f869 	bl	800f048 <_isatty_r>
 800ef76:	b128      	cbz	r0, 800ef84 <__smakebuf_r+0x74>
 800ef78:	89a3      	ldrh	r3, [r4, #12]
 800ef7a:	f023 0303 	bic.w	r3, r3, #3
 800ef7e:	f043 0301 	orr.w	r3, r3, #1
 800ef82:	81a3      	strh	r3, [r4, #12]
 800ef84:	89a0      	ldrh	r0, [r4, #12]
 800ef86:	4305      	orrs	r5, r0
 800ef88:	81a5      	strh	r5, [r4, #12]
 800ef8a:	e7cd      	b.n	800ef28 <__smakebuf_r+0x18>
 800ef8c:	0800dbe1 	.word	0x0800dbe1

0800ef90 <memmove>:
 800ef90:	4288      	cmp	r0, r1
 800ef92:	b510      	push	{r4, lr}
 800ef94:	eb01 0402 	add.w	r4, r1, r2
 800ef98:	d902      	bls.n	800efa0 <memmove+0x10>
 800ef9a:	4284      	cmp	r4, r0
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	d807      	bhi.n	800efb0 <memmove+0x20>
 800efa0:	1e43      	subs	r3, r0, #1
 800efa2:	42a1      	cmp	r1, r4
 800efa4:	d008      	beq.n	800efb8 <memmove+0x28>
 800efa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efae:	e7f8      	b.n	800efa2 <memmove+0x12>
 800efb0:	4402      	add	r2, r0
 800efb2:	4601      	mov	r1, r0
 800efb4:	428a      	cmp	r2, r1
 800efb6:	d100      	bne.n	800efba <memmove+0x2a>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efc2:	e7f7      	b.n	800efb4 <memmove+0x24>

0800efc4 <_realloc_r>:
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	4680      	mov	r8, r0
 800efca:	4614      	mov	r4, r2
 800efcc:	460e      	mov	r6, r1
 800efce:	b921      	cbnz	r1, 800efda <_realloc_r+0x16>
 800efd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	4611      	mov	r1, r2
 800efd6:	f7fe bf8f 	b.w	800def8 <_malloc_r>
 800efda:	b92a      	cbnz	r2, 800efe8 <_realloc_r+0x24>
 800efdc:	f7fe ff20 	bl	800de20 <_free_r>
 800efe0:	4625      	mov	r5, r4
 800efe2:	4628      	mov	r0, r5
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	f000 f83e 	bl	800f068 <_malloc_usable_size_r>
 800efec:	4284      	cmp	r4, r0
 800efee:	4607      	mov	r7, r0
 800eff0:	d802      	bhi.n	800eff8 <_realloc_r+0x34>
 800eff2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eff6:	d812      	bhi.n	800f01e <_realloc_r+0x5a>
 800eff8:	4621      	mov	r1, r4
 800effa:	4640      	mov	r0, r8
 800effc:	f7fe ff7c 	bl	800def8 <_malloc_r>
 800f000:	4605      	mov	r5, r0
 800f002:	2800      	cmp	r0, #0
 800f004:	d0ed      	beq.n	800efe2 <_realloc_r+0x1e>
 800f006:	42bc      	cmp	r4, r7
 800f008:	4622      	mov	r2, r4
 800f00a:	4631      	mov	r1, r6
 800f00c:	bf28      	it	cs
 800f00e:	463a      	movcs	r2, r7
 800f010:	f7fe fef0 	bl	800ddf4 <memcpy>
 800f014:	4631      	mov	r1, r6
 800f016:	4640      	mov	r0, r8
 800f018:	f7fe ff02 	bl	800de20 <_free_r>
 800f01c:	e7e1      	b.n	800efe2 <_realloc_r+0x1e>
 800f01e:	4635      	mov	r5, r6
 800f020:	e7df      	b.n	800efe2 <_realloc_r+0x1e>
	...

0800f024 <_fstat_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4d07      	ldr	r5, [pc, #28]	; (800f044 <_fstat_r+0x20>)
 800f028:	2300      	movs	r3, #0
 800f02a:	4604      	mov	r4, r0
 800f02c:	4608      	mov	r0, r1
 800f02e:	4611      	mov	r1, r2
 800f030:	602b      	str	r3, [r5, #0]
 800f032:	f7f2 fd22 	bl	8001a7a <_fstat>
 800f036:	1c43      	adds	r3, r0, #1
 800f038:	d102      	bne.n	800f040 <_fstat_r+0x1c>
 800f03a:	682b      	ldr	r3, [r5, #0]
 800f03c:	b103      	cbz	r3, 800f040 <_fstat_r+0x1c>
 800f03e:	6023      	str	r3, [r4, #0]
 800f040:	bd38      	pop	{r3, r4, r5, pc}
 800f042:	bf00      	nop
 800f044:	2001b290 	.word	0x2001b290

0800f048 <_isatty_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	4d06      	ldr	r5, [pc, #24]	; (800f064 <_isatty_r+0x1c>)
 800f04c:	2300      	movs	r3, #0
 800f04e:	4604      	mov	r4, r0
 800f050:	4608      	mov	r0, r1
 800f052:	602b      	str	r3, [r5, #0]
 800f054:	f7f2 fd21 	bl	8001a9a <_isatty>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	d102      	bne.n	800f062 <_isatty_r+0x1a>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	b103      	cbz	r3, 800f062 <_isatty_r+0x1a>
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	bd38      	pop	{r3, r4, r5, pc}
 800f064:	2001b290 	.word	0x2001b290

0800f068 <_malloc_usable_size_r>:
 800f068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06c:	1f18      	subs	r0, r3, #4
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bfbc      	itt	lt
 800f072:	580b      	ldrlt	r3, [r1, r0]
 800f074:	18c0      	addlt	r0, r0, r3
 800f076:	4770      	bx	lr

0800f078 <_init>:
 800f078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07a:	bf00      	nop
 800f07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f07e:	bc08      	pop	{r3}
 800f080:	469e      	mov	lr, r3
 800f082:	4770      	bx	lr

0800f084 <_fini>:
 800f084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f086:	bf00      	nop
 800f088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08a:	bc08      	pop	{r3}
 800f08c:	469e      	mov	lr, r3
 800f08e:	4770      	bx	lr

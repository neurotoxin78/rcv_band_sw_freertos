
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc0  080111a0  080111a0  000211a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f60  08013f60  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08013f60  08013f60  00023f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f68  08013f68  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f68  08013f68  00023f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08013f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b048  200002b4  08014224  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  2001b2fc  08014224  0003b2fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac25  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065d6  00000000  00000000  0005af09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  000614e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f98  00000000  00000000  00063740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fca1  00000000  00000000  000656d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e0c9  00000000  00000000  00085379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7a75  00000000  00000000  000b3442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015aeb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009850  00000000  00000000  0015af08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011188 	.word	0x08011188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	08011188 	.word	0x08011188

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f8ca 	bl	8001730 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f8c1 	bl	8001730 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 f8b8 	bl	8001730 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 ffec 	bl	80015b6 <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 ffdd 	bl	80015b6 <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 ffce 	bl	80015b6 <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 ffbf 	bl	80015b6 <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	080111a0 	.word	0x080111a0
 8000650:	080111a8 	.word	0x080111a8
 8000654:	080111b0 	.word	0x080111b0
 8000658:	080111b4 	.word	0x080111b4

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f000 ff9a 	bl	80015b6 <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f000 ff7c 	bl	80015b6 <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00f fd8c 	bl	8010240 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 ff38 	bl	80015b6 <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00f fd77 	bl	8010240 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 ff23 	bl	80015b6 <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	080111b8 	.word	0x080111b8
 8000784:	200002d0 	.word	0x200002d0
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	080111c4 	.word	0x080111c4
 8000798:	2000000c 	.word	0x2000000c

0800079c <blk_pwm_setvalue>:

void blk_pwm_setvalue(uint16_t value)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  USR_TIM_PWM_OpenTim5Ch2();
 80007a6:	f001 fba9 	bl	8001efc <USR_TIM_PWM_OpenTim5Ch2>
	  USR_TIM_PWM_SetCompare(value * 10);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fbaa 	bl	8001f10 <USR_TIM_PWM_SetCompare>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setBacklight>:

void setBacklight(uint8_t percent) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	uint16_t d = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e013      	b.n	8000804 <setBacklight+0x40>
		blk_pwm_setvalue(i);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffdc 	bl	800079c <blk_pwm_setvalue>
		for (d = 0; d <=60000; d++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <setBacklight+0x2c>
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d9f7      	bls.n	80007ea <setBacklight+0x26>
		{

		}
		d = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29b      	uxth	r3, r3
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9e6      	bls.n	80007dc <setBacklight+0x18>
	}
	i=0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getRunTimeCounterValue+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000350 	.word	0x20000350

08000840 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MX_FREERTOS_Init+0x38>)
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_FREERTOS_Init+0x3c>)
 800085a:	f00b ffbb 	bl	800c7d4 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <MX_FREERTOS_Init+0x40>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_FREERTOS_Init+0x44>)
 8000866:	2100      	movs	r1, #0
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_FREERTOS_Init+0x48>)
 800086a:	f00b ffb3 	bl	800c7d4 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <MX_FREERTOS_Init+0x4c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of buttonsTask */
  buttonsTaskHandle = osThreadNew(StartButtonsTask, NULL, &buttonsTask_attributes);
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <MX_FREERTOS_Init+0x50>)
 8000876:	2100      	movs	r1, #0
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <MX_FREERTOS_Init+0x54>)
 800087a:	f00b ffab 	bl	800c7d4 <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <MX_FREERTOS_Init+0x58>)
 8000882:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08013dcc 	.word	0x08013dcc
 800088c:	080008ad 	.word	0x080008ad
 8000890:	200002f0 	.word	0x200002f0
 8000894:	08013df0 	.word	0x08013df0
 8000898:	080008fd 	.word	0x080008fd
 800089c:	200002f4 	.word	0x200002f4
 80008a0:	08013e14 	.word	0x08013e14
 80008a4:	08000a75 	.word	0x08000a75
 80008a8:	200002f8 	.word	0x200002f8

080008ac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008b4:	f00e fce2 	bl	800f27c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <StartDefaultTask+0x44>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <StartDefaultTask+0x48>)
 80008c0:	460b      	mov	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	440b      	add	r3, r1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d2:	601a      	str	r2, [r3, #0]
	si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_8MA);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <StartDefaultTask+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	2103      	movs	r1, #3
 80008dc:	4618      	mov	r0, r3
 80008de:	f009 fe37 	bl	800a550 <si5351_SetupCLK0>
	si5351_EnableOutputs(1 << 0);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f009 fe55 	bl	800a592 <si5351_EnableOutputs>
	/* Timer*/
	for (;;) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		osDelay(250);
 80008e8:	20fa      	movs	r0, #250	; 0xfa
 80008ea:	f00c f805 	bl	800c8f8 <osDelay>
 80008ee:	e7fb      	b.n	80008e8 <StartDefaultTask+0x3c>
 80008f0:	2000014e 	.word	0x2000014e
 80008f4:	2000005c 	.word	0x2000005c
 80008f8:	20000354 	.word	0x20000354

080008fc <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */

	int32_t prevCounter = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	/*  */
	max_freq = band[current_band].maxFreq;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <StartEncoderTask+0x158>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4a52      	ldr	r2, [pc, #328]	; (8000a58 <StartEncoderTask+0x15c>)
 8000910:	460b      	mov	r3, r1
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	440b      	add	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	3308      	adds	r3, #8
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <StartEncoderTask+0x160>)
 8000922:	601a      	str	r2, [r3, #0]
	min_freq = band[current_band].minFreq;
 8000924:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <StartEncoderTask+0x158>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <StartEncoderTask+0x15c>)
 800092c:	460b      	mov	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <StartEncoderTask+0x164>)
 800093e:	601a      	str	r2, [r3, #0]
	current_freq = min_freq;
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <StartEncoderTask+0x164>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <StartEncoderTask+0x168>)
 8000946:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 8000948:	f7ff fe1c 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <StartEncoderTask+0x158>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4a41      	ldr	r2, [pc, #260]	; (8000a58 <StartEncoderTask+0x15c>)
 8000954:	460b      	mov	r3, r1
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	440b      	add	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe7b 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <StartEncoderTask+0x16c>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <StartEncoderTask+0x170>)
 800096e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe90 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <StartEncoderTask+0x168>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fea9 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <StartEncoderTask+0x174>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	613b      	str	r3, [r7, #16]
		uint16_t step_value = step[current_step].step;
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <StartEncoderTask+0x16c>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <StartEncoderTask+0x170>)
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	81fb      	strh	r3, [r7, #14]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3b01      	subs	r3, #1
 800099c:	b29b      	uxth	r3, r3
 800099e:	0fda      	lsrs	r2, r3, #31
 80009a0:	4413      	add	r3, r2
 80009a2:	105b      	asrs	r3, r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80009aa:	337f      	adds	r3, #127	; 0x7f
 80009ac:	613b      	str	r3, [r7, #16]

		if (currCounter != prevCounter) {
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d04a      	beq.n	8000a4c <StartEncoderTask+0x150>
			if (currCounter > prevCounter) {
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dd20      	ble.n	8000a00 <StartEncoderTask+0x104>
				if (current_freq != min_freq) {
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <StartEncoderTask+0x168>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <StartEncoderTask+0x164>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d006      	beq.n	80009d8 <StartEncoderTask+0xdc>
					current_freq -= step_value;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <StartEncoderTask+0x168>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <StartEncoderTask+0x168>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e003      	b.n	80009e0 <StartEncoderTask+0xe4>
				} else {
					current_freq = max_freq;
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <StartEncoderTask+0x160>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <StartEncoderTask+0x168>)
 80009de:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <StartEncoderTask+0x168>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f009 fdb1 	bl	800a550 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <StartEncoderTask+0x168>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe6e 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009f8:	2005      	movs	r0, #5
 80009fa:	f00b ff7d 	bl	800c8f8 <osDelay>
 80009fe:	e023      	b.n	8000a48 <StartEncoderTask+0x14c>
			} else if (currCounter < prevCounter) {
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	da1f      	bge.n	8000a48 <StartEncoderTask+0x14c>
				if (current_freq != max_freq) {
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <StartEncoderTask+0x168>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <StartEncoderTask+0x160>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d006      	beq.n	8000a22 <StartEncoderTask+0x126>
					current_freq += step_value;
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <StartEncoderTask+0x168>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <StartEncoderTask+0x168>)
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e003      	b.n	8000a2a <StartEncoderTask+0x12e>
				} else {
					current_freq = min_freq;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <StartEncoderTask+0x164>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <StartEncoderTask+0x168>)
 8000a28:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <StartEncoderTask+0x168>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f009 fd8c 	bl	800a550 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <StartEncoderTask+0x168>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe49 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000a42:	2005      	movs	r0, #5
 8000a44:	f00b ff58 	bl	800c8f8 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	617b      	str	r3, [r7, #20]
		}

		osDelay(5);
 8000a4c:	2005      	movs	r0, #5
 8000a4e:	f00b ff53 	bl	800c8f8 <osDelay>
	for (;;) {
 8000a52:	e796      	b.n	8000982 <StartEncoderTask+0x86>
 8000a54:	2000014e 	.word	0x2000014e
 8000a58:	2000005c 	.word	0x2000005c
 8000a5c:	200002e8 	.word	0x200002e8
 8000a60:	200002ec 	.word	0x200002ec
 8000a64:	20000354 	.word	0x20000354
 8000a68:	2000014c 	.word	0x2000014c
 8000a6c:	2000001c 	.word	0x2000001c
 8000a70:	20000428 	.word	0x20000428

08000a74 <StartButtonsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonsTask */
void StartButtonsTask(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonsTask */
	/* Infinite loop */
	for (;;) {
		/* BUTTON */
		//printf("Step %d\n\r", current_step);
		if (buttonPressed[buttonNumber]) {
 8000a7c:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <StartButtonsTask+0x194>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b62      	ldr	r3, [pc, #392]	; (8000c0c <StartButtonsTask+0x198>)
 8000a84:	5c9b      	ldrb	r3, [r3, r2]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 80b8 	beq.w	8000bfe <StartButtonsTask+0x18a>
			buttonPressed[buttonNumber] = 0;
 8000a8e:	4b5e      	ldr	r3, [pc, #376]	; (8000c08 <StartButtonsTask+0x194>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b5d      	ldr	r3, [pc, #372]	; (8000c0c <StartButtonsTask+0x198>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	5499      	strb	r1, [r3, r2]
			if (buttonNumber == 0) {
 8000a9a:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <StartButtonsTask+0x194>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d121      	bne.n	8000ae6 <StartButtonsTask+0x72>
				if (current_step != lastStep) {
 8000aa2:	4b5b      	ldr	r3, [pc, #364]	; (8000c10 <StartButtonsTask+0x19c>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d00f      	beq.n	8000ace <StartButtonsTask+0x5a>
					current_step++;
 8000aae:	4b58      	ldr	r3, [pc, #352]	; (8000c10 <StartButtonsTask+0x19c>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <StartButtonsTask+0x19c>)
 8000ab8:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000aba:	4b55      	ldr	r3, [pc, #340]	; (8000c10 <StartButtonsTask+0x19c>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b54      	ldr	r3, [pc, #336]	; (8000c14 <StartButtonsTask+0x1a0>)
 8000ac2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fde6 	bl	8000698 <displayStep>
 8000acc:	e00b      	b.n	8000ae6 <StartButtonsTask+0x72>
				} else {
					current_step = 0;
 8000ace:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <StartButtonsTask+0x19c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
					displayStep(step[current_step].name);
 8000ad4:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <StartButtonsTask+0x19c>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <StartButtonsTask+0x1a0>)
 8000adc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fdd9 	bl	8000698 <displayStep>
				}
			}
			if (buttonNumber == 1) {
 8000ae6:	4b48      	ldr	r3, [pc, #288]	; (8000c08 <StartButtonsTask+0x194>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	f040 8087 	bne.w	8000bfe <StartButtonsTask+0x18a>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	4848      	ldr	r0, [pc, #288]	; (8000c18 <StartButtonsTask+0x1a4>)
 8000af6:	f001 fe91 	bl	800281c <HAL_GPIO_TogglePin>
				if (current_band != lastBand) {
 8000afa:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	2313      	movs	r3, #19
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d03f      	beq.n	8000b86 <StartButtonsTask+0x112>
					current_band++;
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b10:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b12:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	4a41      	ldr	r2, [pc, #260]	; (8000c20 <StartButtonsTask+0x1ac>)
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	440b      	add	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd98 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000b2c:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4a3b      	ldr	r2, [pc, #236]	; (8000c20 <StartButtonsTask+0x1ac>)
 8000b34:	460b      	mov	r3, r1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	440b      	add	r3, r1
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3308      	adds	r3, #8
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <StartButtonsTask+0x1b0>)
 8000b46:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000b48:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4a34      	ldr	r2, [pc, #208]	; (8000c20 <StartButtonsTask+0x1ac>)
 8000b50:	460b      	mov	r3, r1
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	440b      	add	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <StartButtonsTask+0x1b4>)
 8000b62:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000b64:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <StartButtonsTask+0x1b4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <StartButtonsTask+0x1b8>)
 8000b6a:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <StartButtonsTask+0x1b8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fdaf 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <StartButtonsTask+0x1b8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f009 fce6 	bl	800a550 <si5351_SetupCLK0>
 8000b84:	e03b      	b.n	8000bfe <StartButtonsTask+0x18a>
				} else {
					current_band = 0;
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
					displayBand(band[current_band].name);
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <StartButtonsTask+0x1ac>)
 8000b94:	460b      	mov	r3, r1
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	440b      	add	r3, r1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fd5b 	bl	800065c <displayBand>
					max_freq = band[current_band].maxFreq;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <StartButtonsTask+0x1ac>)
 8000bae:	460b      	mov	r3, r1
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	440b      	add	r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3308      	adds	r3, #8
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <StartButtonsTask+0x1b0>)
 8000bc0:	601a      	str	r2, [r3, #0]
					min_freq = band[current_band].minFreq;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <StartButtonsTask+0x1a8>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <StartButtonsTask+0x1ac>)
 8000bca:	460b      	mov	r3, r1
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	440b      	add	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <StartButtonsTask+0x1b4>)
 8000bdc:	601a      	str	r2, [r3, #0]
					current_freq = min_freq;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <StartButtonsTask+0x1b4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <StartButtonsTask+0x1b8>)
 8000be4:	6013      	str	r3, [r2, #0]
					displayFrequency(current_freq);
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <StartButtonsTask+0x1b8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd72 	bl	80006d4 <displayFrequency>
					si5351_SetupCLK0(current_freq * f_multiplier, SI5351_DRIVE_STRENGTH_4MA);
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <StartButtonsTask+0x1b8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f009 fca9 	bl	800a550 <si5351_SetupCLK0>
				}
			}
		}
		osDelay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f00b fe7a 	bl	800c8f8 <osDelay>
		if (buttonPressed[buttonNumber]) {
 8000c04:	e73a      	b.n	8000a7c <StartButtonsTask+0x8>
 8000c06:	bf00      	nop
 8000c08:	200002e4 	.word	0x200002e4
 8000c0c:	2000041c 	.word	0x2000041c
 8000c10:	2000014c 	.word	0x2000014c
 8000c14:	2000001c 	.word	0x2000001c
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	2000014e 	.word	0x2000014e
 8000c20:	2000005c 	.word	0x2000005c
 8000c24:	200002e8 	.word	0x200002e8
 8000c28:	200002ec 	.word	0x200002ec
 8000c2c:	20000354 	.word	0x20000354

08000c30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a42      	ldr	r2, [pc, #264]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a3b      	ldr	r2, [pc, #236]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b39      	ldr	r3, [pc, #228]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a34      	ldr	r2, [pc, #208]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x144>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbc:	482e      	ldr	r0, [pc, #184]	; (8000d78 <MX_GPIO_Init+0x148>)
 8000cbe:	f001 fd7b 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	211c      	movs	r1, #28
 8000cc6:	482d      	ldr	r0, [pc, #180]	; (8000d7c <MX_GPIO_Init+0x14c>)
 8000cc8:	f001 fd76 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4824      	ldr	r0, [pc, #144]	; (8000d78 <MX_GPIO_Init+0x148>)
 8000ce6:	f001 facd 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BAND_BTN_Pin|MENU_BTN_Pin;
 8000cea:	f240 1301 	movw	r3, #257	; 0x101
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481e      	ldr	r0, [pc, #120]	; (8000d7c <MX_GPIO_Init+0x14c>)
 8000d02:	f001 fabf 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000d06:	231c      	movs	r3, #28
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <MX_GPIO_Init+0x14c>)
 8000d1e:	f001 fab1 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000d22:	2304      	movs	r3, #4
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <MX_GPIO_Init+0x150>)
 8000d38:	f001 faa4 	bl	8002284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2006      	movs	r0, #6
 8000d42:	f001 fa5b 	bl	80021fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d46:	2006      	movs	r0, #6
 8000d48:	f001 fa84 	bl	8002254 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	2008      	movs	r0, #8
 8000d52:	f001 fa53 	bl	80021fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d56:	2008      	movs	r0, #8
 8000d58:	f001 fa7c 	bl	8002254 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2017      	movs	r0, #23
 8000d62:	f001 fa4b 	bl	80021fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d66:	2017      	movs	r0, #23
 8000d68:	f001 fa74 	bl	8002254 <HAL_NVIC_EnableIRQ>

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020400 	.word	0x40020400

08000d84 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <MX_I2C2_Init+0x54>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_I2C2_Init+0x58>)
 8000d92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_I2C2_Init+0x50>)
 8000dc2:	f001 fd6b 	bl	800289c <HAL_I2C_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dcc:	f000 f962 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200002fc 	.word	0x200002fc
 8000dd8:	40005800 	.word	0x40005800
 8000ddc:	000186a0 	.word	0x000186a0

08000de0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_I2C_MspInit+0xa4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d13c      	bne.n	8000e7c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_I2C_MspInit+0xa8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_I2C_MspInit+0xa8>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_I2C_MspInit+0xa8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e24:	2312      	movs	r3, #18
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e30:	2304      	movs	r3, #4
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <HAL_I2C_MspInit+0xac>)
 8000e3c:	f001 fa22 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e40:	2308      	movs	r3, #8
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e50:	2309      	movs	r3, #9
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <HAL_I2C_MspInit+0xac>)
 8000e5c:	f001 fa12 	bl	8002284 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_I2C_MspInit+0xa8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_I2C_MspInit+0xa8>)
 8000e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_I2C_MspInit+0xa8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40005800 	.word	0x40005800
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000e96:	f000 fafd 	bl	8001494 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000e9a:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000e9e:	f000 fccb 	bl	8001838 <ST7735_FillScreen>
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <Display_Init+0x5c>)
 8000ea4:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000ea8:	9202      	str	r2, [sp, #8]
 8000eaa:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000eae:	9201      	str	r2, [sp, #4]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <Display_Init+0x60>)
 8000eb8:	210a      	movs	r1, #10
 8000eba:	2008      	movs	r0, #8
 8000ebc:	f000 fb7b 	bl	80015b6 <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <Display_Init+0x64>)
 8000ec2:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000ec6:	9202      	str	r2, [sp, #8]
 8000ec8:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000ecc:	9201      	str	r2, [sp, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	9200      	str	r2, [sp, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <Display_Init+0x68>)
 8000ed6:	2123      	movs	r1, #35	; 0x23
 8000ed8:	2022      	movs	r0, #34	; 0x22
 8000eda:	f000 fb6c 	bl	80015b6 <ST7735_WriteString>
    HAL_Delay(3000);
 8000ede:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ee2:	f001 f899 	bl	8002018 <HAL_Delay>
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000014 	.word	0x20000014
 8000ef0:	08011290 	.word	0x08011290
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	0801129c 	.word	0x0801129c

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f001 f848 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f82a 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f7ff fe92 	bl	8000c30 <MX_GPIO_Init>
  MX_RTC_Init();
 8000f0c:	f000 f8d8 	bl	80010c0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000f10:	f000 fe58 	bl	8001bc4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f14:	f000 feaa 	bl	8001c6c <MX_TIM5_Init>
  MX_SPI1_Init();
 8000f18:	f000 f958 	bl	80011cc <MX_SPI1_Init>
  MX_I2C2_Init();
 8000f1c:	f7ff ff32 	bl	8000d84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000f20:	f00e f9ac 	bl	800f27c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f24:	213c      	movs	r1, #60	; 0x3c
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <main+0x58>)
 8000f28:	f006 f9cc 	bl	80072c4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	480a      	ldr	r0, [pc, #40]	; (8000f58 <main+0x5c>)
 8000f30:	f005 ff02 	bl	8006d38 <HAL_TIM_PWM_Start>

  /* Display */
  setBacklight(100);
 8000f34:	2064      	movs	r0, #100	; 0x64
 8000f36:	f7ff fc45 	bl	80007c4 <setBacklight>
  Display_Init();
 8000f3a:	f7ff ffa9 	bl	8000e90 <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f009 f920 	bl	800a184 <si5351_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f44:	f00b fbfc 	bl	800c740 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f48:	f7ff fc82 	bl	8000850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f4c:	f00b fc1c 	bl	800c788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <main+0x54>
 8000f52:	bf00      	nop
 8000f54:	20000428 	.word	0x20000428
 8000f58:	20000470 	.word	0x20000470

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00e ffd8 	bl	800ff20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <SystemClock_Config+0xcc>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <SystemClock_Config+0xd0>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd0:	2319      	movs	r3, #25
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 fcff 	bl	80049e8 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff0:	f000 f850 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2103      	movs	r1, #3
 8001010:	4618      	mov	r0, r3
 8001012:	f004 f811 	bl	8005038 <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800101c:	f000 f83a 	bl	8001094 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	; 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, uint8_t *ptr, int len) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b29b      	uxth	r3, r3
 8001040:	4619      	mov	r1, r3
 8001042:	68b8      	ldr	r0, [r7, #8]
 8001044:	f00e f9d8 	bl	800f3f8 <CDC_Transmit_FS>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_write+0x40>)
 800104e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_write+0x40>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d0f1      	beq.n	800103c <_write+0xc>

    if (USBD_FAIL == rc) {
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <_write+0x40>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d101      	bne.n	8001064 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <_write+0x36>
    }
    return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000358 	.word	0x20000358

08001074 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001084:	d101      	bne.n	800108a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001086:	f000 ffa7 	bl	8001fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error_Handler");
 800109c:	4801      	ldr	r0, [pc, #4]	; (80010a4 <Error_Handler+0x10>)
 800109e:	f00f f827 	bl	80100f0 <iprintf>
 80010a2:	e7fb      	b.n	800109c <Error_Handler+0x8>
 80010a4:	080112a8 	.word	0x080112a8

080010a8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_RTC_Init+0xac>)
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <MX_RTC_Init+0xb0>)
 80010dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_RTC_Init+0xac>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_RTC_Init+0xac>)
 80010e6:	227f      	movs	r2, #127	; 0x7f
 80010e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <MX_RTC_Init+0xac>)
 80010ec:	22ff      	movs	r2, #255	; 0xff
 80010ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_RTC_Init+0xac>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_RTC_Init+0xac>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_RTC_Init+0xac>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001102:	481a      	ldr	r0, [pc, #104]	; (800116c <MX_RTC_Init+0xac>)
 8001104:	f004 fc54 	bl	80059b0 <HAL_RTC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800110e:	f7ff ffc1 	bl	8001094 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <MX_RTC_Init+0xac>)
 800112e:	f004 fd17 	bl	8005b60 <HAL_RTC_SetTime>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001138:	f7ff ffac 	bl	8001094 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800113c:	2305      	movs	r3, #5
 800113e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001140:	2305      	movs	r3, #5
 8001142:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001144:	2307      	movs	r3, #7
 8001146:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001148:	2316      	movs	r3, #22
 800114a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_RTC_Init+0xac>)
 8001154:	f004 fe4c 	bl	8005df0 <HAL_RTC_SetDate>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800115e:	f7ff ff99 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000035c 	.word	0x2000035c
 8001170:	40002800 	.word	0x40002800

08001174 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_RTC_MspInit+0x50>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d111      	bne.n	80011bc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 f9ec 	bl	8005584 <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011b2:	f7ff ff6f 	bl	8001094 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_RTC_MspInit+0x54>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40002800 	.word	0x40002800
 80011c8:	42470e3c 	.word	0x42470e3c

080011cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_SPI1_Init+0x64>)
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <MX_SPI1_Init+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI1_Init+0x64>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_SPI1_Init+0x64>)
 800121e:	f004 ffb1 	bl	8006184 <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001228:	f7ff ff34 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000037c 	.word	0x2000037c
 8001234:	40013000 	.word	0x40013000

08001238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_SPI_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12b      	bne.n	80012b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001292:	23a0      	movs	r3, #160	; 0xa0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a2:	2305      	movs	r3, #5
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 80012ae:	f000 ffe9 	bl	8002284 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40013000 	.word	0x40013000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <ST7735_Select+0x14>)
 80012d2:	f001 fa71 	bl	80027b8 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40020000 	.word	0x40020000

080012e0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2110      	movs	r1, #16
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <ST7735_Unselect+0x14>)
 80012ea:	f001 fa65 	bl	80027b8 <HAL_GPIO_WritePin>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40020000 	.word	0x40020000

080012f8 <ST7735_Reset>:

static void ST7735_Reset() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2108      	movs	r1, #8
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <ST7735_Reset+0x24>)
 8001302:	f001 fa59 	bl	80027b8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001306:	2005      	movs	r0, #5
 8001308:	f000 fe86 	bl	8002018 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2108      	movs	r1, #8
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <ST7735_Reset+0x24>)
 8001312:	f001 fa51 	bl	80027b8 <HAL_GPIO_WritePin>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40020000 	.word	0x40020000

08001320 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2104      	movs	r1, #4
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <ST7735_WriteCommand+0x2c>)
 8001330:	f001 fa42 	bl	80027b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001334:	1df9      	adds	r1, r7, #7
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	2201      	movs	r2, #1
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <ST7735_WriteCommand+0x30>)
 800133e:	f005 f8bd 	bl	80064bc <HAL_SPI_Transmit>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020000 	.word	0x40020000
 8001350:	2000037c 	.word	0x2000037c

08001354 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2104      	movs	r1, #4
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <ST7735_WriteData+0x2c>)
 8001364:	f001 fa28 	bl	80027b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b29a      	uxth	r2, r3
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <ST7735_WriteData+0x30>)
 8001374:	f005 f8a2 	bl	80064bc <HAL_SPI_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40020000 	.word	0x40020000
 8001384:	2000037c 	.word	0x2000037c

08001388 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800139a:	e034      	b.n	8001406 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80013a6:	7afb      	ldrb	r3, [r7, #11]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffb9 	bl	8001320 <ST7735_WriteCommand>

        numArgs = *addr++;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80013b8:	7abb      	ldrb	r3, [r7, #10]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013c8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80013ca:	7abb      	ldrb	r3, [r7, #10]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80013d0:	7abb      	ldrb	r3, [r7, #10]
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffbd 	bl	8001354 <ST7735_WriteData>
            addr += numArgs;
 80013da:	7abb      	ldrb	r3, [r7, #10]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80013e2:	89bb      	ldrh	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00e      	beq.n	8001406 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80013f2:	89bb      	ldrh	r3, [r7, #12]
 80013f4:	2bff      	cmp	r3, #255	; 0xff
 80013f6:	d102      	bne.n	80013fe <ST7735_ExecuteCommandList+0x76>
 80013f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80013fe:	89bb      	ldrh	r3, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fe09 	bl	8002018 <HAL_Delay>
    while(numCommands--) {
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	1e5a      	subs	r2, r3, #1
 800140a:	73fa      	strb	r2, [r7, #15]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1c5      	bne.n	800139c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	4604      	mov	r4, r0
 8001422:	4608      	mov	r0, r1
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	4623      	mov	r3, r4
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4603      	mov	r3, r0
 800142e:	71bb      	strb	r3, [r7, #6]
 8001430:	460b      	mov	r3, r1
 8001432:	717b      	strb	r3, [r7, #5]
 8001434:	4613      	mov	r3, r2
 8001436:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001438:	202a      	movs	r0, #42	; 0x2a
 800143a:	f7ff ff71 	bl	8001320 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800143e:	2300      	movs	r3, #0
 8001440:	733b      	strb	r3, [r7, #12]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	737b      	strb	r3, [r7, #13]
 800144a:	2300      	movs	r3, #0
 800144c:	73bb      	strb	r3, [r7, #14]
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	3301      	adds	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2104      	movs	r1, #4
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff79 	bl	8001354 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001462:	202b      	movs	r0, #43	; 0x2b
 8001464:	f7ff ff5c 	bl	8001320 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	331a      	adds	r3, #26
 800146c:	b2db      	uxtb	r3, r3
 800146e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001470:	793b      	ldrb	r3, [r7, #4]
 8001472:	331a      	adds	r3, #26
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff68 	bl	8001354 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001484:	202c      	movs	r0, #44	; 0x2c
 8001486:	f7ff ff4b 	bl	8001320 <ST7735_WriteCommand>
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
	...

08001494 <ST7735_Init>:

void ST7735_Init() {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001498:	f7ff ff16 	bl	80012c8 <ST7735_Select>
    ST7735_Reset();
 800149c:	f7ff ff2c 	bl	80012f8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80014a0:	4806      	ldr	r0, [pc, #24]	; (80014bc <ST7735_Init+0x28>)
 80014a2:	f7ff ff71 	bl	8001388 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <ST7735_Init+0x2c>)
 80014a8:	f7ff ff6e 	bl	8001388 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <ST7735_Init+0x30>)
 80014ae:	f7ff ff6b 	bl	8001388 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80014b2:	f7ff ff15 	bl	80012e0 <ST7735_Unselect>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	08013e38 	.word	0x08013e38
 80014c0:	08013e74 	.word	0x08013e74
 80014c4:	08013e84 	.word	0x08013e84

080014c8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80014c8:	b082      	sub	sp, #8
 80014ca:	b590      	push	{r4, r7, lr}
 80014cc:	b089      	sub	sp, #36	; 0x24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	460b      	mov	r3, r1
 80014d8:	80bb      	strh	r3, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2d8      	uxtb	r0, r3
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80014ee:	4413      	add	r3, r2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b2dc      	uxtb	r4, r3
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4622      	mov	r2, r4
 8001508:	f7ff ff87 	bl	800141a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	e043      	b.n	800159a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	3b20      	subs	r3, #32
 8001518:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4619      	mov	r1, r3
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	440b      	add	r3, r1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e029      	b.n	8001588 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001544:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	743b      	strb	r3, [r7, #16]
 800154e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001550:	b2db      	uxtb	r3, r3
 8001552:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2102      	movs	r1, #2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fefa 	bl	8001354 <ST7735_WriteData>
 8001560:	e00f      	b.n	8001582 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001562:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	733b      	strb	r3, [r7, #12]
 800156e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001572:	b2db      	uxtb	r3, r3
 8001574:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fee9 	bl	8001354 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	3301      	adds	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800158c:	461a      	mov	r2, r3
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4293      	cmp	r3, r2
 8001592:	d3cf      	bcc.n	8001534 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	3301      	adds	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800159e:	461a      	mov	r2, r3
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d3b5      	bcc.n	8001512 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3724      	adds	r7, #36	; 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015b2:	b002      	add	sp, #8
 80015b4:	4770      	bx	lr

080015b6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80015b6:	b082      	sub	sp, #8
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af04      	add	r7, sp, #16
 80015be:	603a      	str	r2, [r7, #0]
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	460b      	mov	r3, r1
 80015c8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80015ca:	f7ff fe7d 	bl	80012c8 <ST7735_Select>

    while(*str) {
 80015ce:	e02d      	b.n	800162c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	7d3a      	ldrb	r2, [r7, #20]
 80015d4:	4413      	add	r3, r2
 80015d6:	2b9f      	cmp	r3, #159	; 0x9f
 80015d8:	dd13      	ble.n	8001602 <ST7735_WriteString+0x4c>
            x = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	7d7a      	ldrb	r2, [r7, #21]
 80015ec:	4413      	add	r3, r2
 80015ee:	2b4f      	cmp	r3, #79	; 0x4f
 80015f0:	dc21      	bgt.n	8001636 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d103      	bne.n	8001602 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	603b      	str	r3, [r7, #0]
                continue;
 8001600:	e014      	b.n	800162c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	88b9      	ldrh	r1, [r7, #4]
 8001608:	88f8      	ldrh	r0, [r7, #6]
 800160a:	8c3b      	ldrh	r3, [r7, #32]
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	8bbb      	ldrh	r3, [r7, #28]
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f7ff ff56 	bl	80014c8 <ST7735_WriteChar>
        x += font.width;
 800161c:	7d3b      	ldrb	r3, [r7, #20]
 800161e:	b29a      	uxth	r2, r3
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4413      	add	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
        str++;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1cd      	bne.n	80015d0 <ST7735_WriteString+0x1a>
 8001634:	e000      	b.n	8001638 <ST7735_WriteString+0x82>
                break;
 8001636:	bf00      	nop
    }

    ST7735_Unselect();
 8001638:	f7ff fe52 	bl	80012e0 <ST7735_Unselect>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001646:	b002      	add	sp, #8
 8001648:	4770      	bx	lr
	...

0800164c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	4604      	mov	r4, r0
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	4623      	mov	r3, r4
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	4603      	mov	r3, r0
 8001660:	80bb      	strh	r3, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	2b9f      	cmp	r3, #159	; 0x9f
 800166e:	d857      	bhi.n	8001720 <ST7735_FillRectangle+0xd4>
 8001670:	88bb      	ldrh	r3, [r7, #4]
 8001672:	2b4f      	cmp	r3, #79	; 0x4f
 8001674:	d854      	bhi.n	8001720 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	4413      	add	r3, r2
 800167c:	2ba0      	cmp	r3, #160	; 0xa0
 800167e:	dd03      	ble.n	8001688 <ST7735_FillRectangle+0x3c>
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001686:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001688:	88ba      	ldrh	r2, [r7, #4]
 800168a:	883b      	ldrh	r3, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	2b50      	cmp	r3, #80	; 0x50
 8001690:	dd03      	ble.n	800169a <ST7735_FillRectangle+0x4e>
 8001692:	88bb      	ldrh	r3, [r7, #4]
 8001694:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001698:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800169a:	f7ff fe15 	bl	80012c8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	b2d8      	uxtb	r0, r3
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	b2d9      	uxtb	r1, r3
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b2dc      	uxtb	r4, r3
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	883b      	ldrh	r3, [r7, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4622      	mov	r2, r4
 80016c8:	f7ff fea7 	bl	800141a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80016cc:	8c3b      	ldrh	r3, [r7, #32]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	733b      	strb	r3, [r7, #12]
 80016d6:	8c3b      	ldrh	r3, [r7, #32]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2104      	movs	r1, #4
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <ST7735_FillRectangle+0xdc>)
 80016e2:	f001 f869 	bl	80027b8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80016e6:	883b      	ldrh	r3, [r7, #0]
 80016e8:	80bb      	strh	r3, [r7, #4]
 80016ea:	e013      	b.n	8001714 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	e00a      	b.n	8001708 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80016f2:	f107 010c 	add.w	r1, r7, #12
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	2202      	movs	r2, #2
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <ST7735_FillRectangle+0xe0>)
 80016fe:	f004 fedd 	bl	80064bc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	3b01      	subs	r3, #1
 8001706:	80fb      	strh	r3, [r7, #6]
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f1      	bne.n	80016f2 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	3b01      	subs	r3, #1
 8001712:	80bb      	strh	r3, [r7, #4]
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e8      	bne.n	80016ec <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800171a:	f7ff fde1 	bl	80012e0 <ST7735_Unselect>
 800171e:	e000      	b.n	8001722 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001720:	bf00      	nop
}
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	40020000 	.word	0x40020000
 800172c:	2000037c 	.word	0x2000037c

08001730 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	4604      	mov	r4, r0
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	80fb      	strh	r3, [r7, #6]
 8001742:	4603      	mov	r3, r0
 8001744:	80bb      	strh	r3, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	807b      	strh	r3, [r7, #2]
 800174a:	4613      	mov	r3, r2
 800174c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	2b9f      	cmp	r3, #159	; 0x9f
 8001752:	d869      	bhi.n	8001828 <ST7735_FillRectangleFast+0xf8>
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	2b4f      	cmp	r3, #79	; 0x4f
 8001758:	d866      	bhi.n	8001828 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	2ba0      	cmp	r3, #160	; 0xa0
 8001762:	dd03      	ble.n	800176c <ST7735_FillRectangleFast+0x3c>
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800176a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800176c:	88ba      	ldrh	r2, [r7, #4]
 800176e:	883b      	ldrh	r3, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	2b50      	cmp	r3, #80	; 0x50
 8001774:	dd03      	ble.n	800177e <ST7735_FillRectangleFast+0x4e>
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800177c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800177e:	f7ff fda3 	bl	80012c8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	b2d8      	uxtb	r0, r3
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	b2d9      	uxtb	r1, r3
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b2dc      	uxtb	r4, r3
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	883b      	ldrh	r3, [r7, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4622      	mov	r2, r4
 80017ac:	f7ff fe35 	bl	800141a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80017b0:	8c3b      	ldrh	r3, [r7, #32]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	723b      	strb	r3, [r7, #8]
 80017ba:	8c3b      	ldrh	r3, [r7, #32]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00e fb8d 	bl	800fee4 <malloc>
 80017ca:	4603      	mov	r3, r0
 80017cc:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80017ce:	2300      	movs	r3, #0
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	e008      	b.n	80017e6 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	893a      	ldrh	r2, [r7, #8]
 80017de:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	3301      	adds	r3, #1
 80017e4:	80fb      	strh	r3, [r7, #6]
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d3f2      	bcc.n	80017d4 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2104      	movs	r1, #4
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <ST7735_FillRectangleFast+0x100>)
 80017f4:	f000 ffe0 	bl	80027b8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80017f8:	883b      	ldrh	r3, [r7, #0]
 80017fa:	80bb      	strh	r3, [r7, #4]
 80017fc:	e00b      	b.n	8001816 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	480a      	ldr	r0, [pc, #40]	; (8001834 <ST7735_FillRectangleFast+0x104>)
 800180c:	f004 fe56 	bl	80064bc <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001810:	88bb      	ldrh	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <ST7735_FillRectangleFast+0xce>

    free(line);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f00e fb69 	bl	800fef4 <free>
    ST7735_Unselect();
 8001822:	f7ff fd5d 	bl	80012e0 <ST7735_Unselect>
 8001826:	e000      	b.n	800182a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001828:	bf00      	nop
}
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	40020000 	.word	0x40020000
 8001834:	2000037c 	.word	0x2000037c

08001838 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af02      	add	r7, sp, #8
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2350      	movs	r3, #80	; 0x50
 8001848:	22a0      	movs	r2, #160	; 0xa0
 800184a:	2100      	movs	r1, #0
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fefd 	bl	800164c <ST7735_FillRectangle>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x54>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_MspInit+0x54>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x54>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_MspInit+0x54>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_MspInit+0x54>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_MspInit+0x54>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	f06f 0001 	mvn.w	r0, #1
 80018a2:	f000 fcab 	bl	80021fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	201c      	movs	r0, #28
 80018ca:	f000 fc97 	bl	80021fc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ce:	201c      	movs	r0, #28
 80018d0:	f000 fcc0 	bl	8002254 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_InitTick+0xa8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_InitTick+0xa8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_InitTick+0xa8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f0:	f107 0210 	add.w	r2, r7, #16
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fe10 	bl	8005520 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001900:	f003 fdfa 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8001904:	4603      	mov	r3, r0
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_InitTick+0xac>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	3b01      	subs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0xb0>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_InitTick+0xb0>)
 8001922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001928:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_InitTick+0xb0>)
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_InitTick+0xb0>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_InitTick+0xb0>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800193a:	480a      	ldr	r0, [pc, #40]	; (8001964 <HAL_InitTick+0xb0>)
 800193c:	f004 ffd4 	bl	80068e8 <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d104      	bne.n	8001950 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <HAL_InitTick+0xb0>)
 8001948:	f005 f894 	bl	8006a74 <HAL_TIM_Base_Start_IT>
 800194c:	4603      	mov	r3, r0
 800194e:	e000      	b.n	8001952 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	3730      	adds	r7, #48	; 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	431bde83 	.word	0x431bde83
 8001964:	200003d4 	.word	0x200003d4

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BAND_BTN_Pin);
 8001998:	2001      	movs	r0, #1
 800199a:	f000 ff67 	bl	800286c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 80019a6:	2004      	movs	r0, #4
 80019a8:	f000 ff60 	bl	800286c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 80019b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019b8:	f000 ff58 	bl	800286c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM2_IRQHandler+0x10>)
 80019c6:	f005 fd3b 	bl	8007440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200003d4 	.word	0x200003d4

080019d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d8:	4808      	ldr	r0, [pc, #32]	; (80019fc <TIM3_IRQHandler+0x28>)
 80019da:	f005 fd31 	bl	8007440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <TIM3_IRQHandler+0x2c>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <TIM3_IRQHandler+0x2c>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <TIM3_IRQHandler+0x2c>)
 80019f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019f4:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000428 	.word	0x20000428
 8001a00:	40000400 	.word	0x40000400

08001a04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM5_IRQHandler+0x10>)
 8001a0a:	f005 fd19 	bl	8007440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000470 	.word	0x20000470

08001a18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <OTG_FS_IRQHandler+0x10>)
 8001a1e:	f001 feb6 	bl	800378e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2001abc0 	.word	0x2001abc0

08001a2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
	buttonNumber = -1;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a38:	22ff      	movs	r2, #255	; 0xff
 8001a3a:	701a      	strb	r2, [r3, #0]
    if(GPIO_Pin == ENC_BTN_Pin)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d103      	bne.n	8001a4a <HAL_GPIO_EXTI_Callback+0x1e>
    {
		buttonNumber = 0;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e005      	b.n	8001a56 <HAL_GPIO_EXTI_Callback+0x2a>
    } else if(GPIO_Pin == BAND_BTN_Pin)
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_GPIO_EXTI_Callback+0x2a>
    {
		buttonNumber = 1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
	if(buttonNumber < 0) {
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001a56:	f000 fad3 	bl	8002000 <HAL_GetTick>
 8001a5a:	60f8      	str	r0, [r7, #12]
    if(tstamp - lastPressed < 250)
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2bf9      	cmp	r3, #249	; 0xf9
 8001a66:	d909      	bls.n	8001a7c <HAL_GPIO_EXTI_Callback+0x50>
        return;
    lastPressed = tstamp;
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x60>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	e000      	b.n	8001a7e <HAL_GPIO_EXTI_Callback+0x52>
        return;
 8001a7c:	bf00      	nop
}
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200002e4 	.word	0x200002e4
 8001a88:	20000420 	.word	0x20000420
 8001a8c:	2000041c 	.word	0x2000041c

08001a90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
	}

return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f00e f89a 	bl	800fc9c <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20020000 	.word	0x20020000
 8001b94:	00000800 	.word	0x00000800
 8001b98:	20000424 	.word	0x20000424
 8001b9c:	2001b300 	.word	0x2001b300

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f00e f9a4 	bl	800ff20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001be2:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <MX_TIM3_Init+0xa4>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001c32:	f005 f9ad 	bl	8006f90 <HAL_TIM_Encoder_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c3c:	f7ff fa2a 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_TIM3_Init+0xa0>)
 8001c4e:	f006 fd79 	bl	8008744 <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c58:	f7ff fa1c 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000428 	.word	0x20000428
 8001c68:	40000400 	.word	0x40000400

08001c6c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <MX_TIM5_Init+0xe8>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001ca4:	222f      	movs	r2, #47	; 0x2f
 8001ca6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001cae:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001cb0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001cb4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cc2:	4823      	ldr	r0, [pc, #140]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001cc4:	f004 fe10 	bl	80068e8 <HAL_TIM_Base_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001cce:	f7ff f9e1 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481c      	ldr	r0, [pc, #112]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001ce0:	f005 fe5c 	bl	800799c <HAL_TIM_ConfigClockSource>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001cea:	f7ff f9d3 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cee:	4818      	ldr	r0, [pc, #96]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001cf0:	f004 ff52 	bl	8006b98 <HAL_TIM_PWM_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001cfa:	f7ff f9cb 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001d0e:	f006 fd19 	bl	8008744 <HAL_TIMEx_MasterConfigSynchronization>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001d18:	f7ff f9bc 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1c:	2360      	movs	r3, #96	; 0x60
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2204      	movs	r2, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001d34:	f005 fc8c 	bl	8007650 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001d3e:	f7ff f9a9 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MX_TIM5_Init+0xe4>)
 8001d44:	f000 f8a0 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001d48:	bf00      	nop
 8001d4a:	3738      	adds	r7, #56	; 0x38
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000470 	.word	0x20000470
 8001d54:	40000c00 	.word	0x40000c00

08001d58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d151      	bne.n	8001e1e <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001dce:	2340      	movs	r3, #64	; 0x40
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dde:	2302      	movs	r3, #2
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4811      	ldr	r0, [pc, #68]	; (8001e30 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001dea:	f000 fa4b 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001dee:	2320      	movs	r3, #32
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e0a:	f000 fa3b 	bl	8002284 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2105      	movs	r1, #5
 8001e12:	201d      	movs	r0, #29
 8001e14:	f000 f9f2 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e18:	201d      	movs	r0, #29
 8001e1a:	f000 fa1b 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d115      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_TIM_Base_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_TIM_Base_MspInit+0x4c>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_TIM_Base_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	2032      	movs	r0, #50	; 0x32
 8001e6c:	f000 f9c6 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e70:	2032      	movs	r0, #50	; 0x32
 8001e72:	f000 f9ef 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_TIM_MspPostInit+0x68>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d11d      	bne.n	8001ee6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <HAL_TIM_MspPostInit+0x70>)
 8001ee2:	f000 f9cf 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000

08001efc <USR_TIM_PWM_OpenTim5Ch2>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USR_TIM_PWM_OpenTim5Ch2() {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001f00:	2104      	movs	r1, #4
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <USR_TIM_PWM_OpenTim5Ch2+0x10>)
 8001f04:	f004 ff18 	bl	8006d38 <HAL_TIM_PWM_Start>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000470 	.word	0x20000470

08001f10 <USR_TIM_PWM_SetCompare>:
void USR_TIM_PWM_CloseTim5Ch2() {
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
}

//duty == 0~1000
void USR_TIM_PWM_SetCompare(uint16_t duty) {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
	if (duty > 1000) // здесь 1000, потому что порог подсчета установлен в 1 тысячу
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f20:	d902      	bls.n	8001f28 <USR_TIM_PWM_SetCompare+0x18>
			{
		duty = 1000;
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	80fb      	strh	r3, [r7, #6]
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, duty);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <USR_TIM_PWM_SetCompare+0x2c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20000470 	.word	0x20000470

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff fe19 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f00d ff91 	bl	800fe94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7fe ffc3 	bl	8000efc <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8001f84:	08013f70 	.word	0x08013f70
  ldr r2, =_sbss
 8001f88:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001f8c:	2001b2fc 	.word	0x2001b2fc

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f8fd 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f7ff fc76 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fc48 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000158 	.word	0x20000158
 8001ffc:	200004b8 	.word	0x200004b8

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200004b8 	.word	0x200004b8

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000158 	.word	0x20000158

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b07      	cmp	r3, #7
 80021c8:	d00f      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d00c      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d009      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d006      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d003      	beq.n	80021ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021e2:	2190      	movs	r1, #144	; 0x90
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80021e6:	f7fe ff5f 	bl	80010a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff38 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	080112b8 	.word	0x080112b8

080021fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d903      	bls.n	800221c <HAL_NVIC_SetPriority+0x20>
 8002214:	21a8      	movs	r1, #168	; 0xa8
 8002216:	480e      	ldr	r0, [pc, #56]	; (8002250 <HAL_NVIC_SetPriority+0x54>)
 8002218:	f7fe ff46 	bl	80010a8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	d903      	bls.n	800222a <HAL_NVIC_SetPriority+0x2e>
 8002222:	21a9      	movs	r1, #169	; 0xa9
 8002224:	480a      	ldr	r0, [pc, #40]	; (8002250 <HAL_NVIC_SetPriority+0x54>)
 8002226:	f7fe ff3f 	bl	80010a8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222a:	f7ff ff3d 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 800222e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	6978      	ldr	r0, [r7, #20]
 8002236:	f7ff ff8d 	bl	8002154 <NVIC_EncodePriority>
 800223a:	4602      	mov	r2, r0
 800223c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff5c 	bl	8002100 <__NVIC_SetPriority>
}
 8002248:	bf00      	nop
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	080112b8 	.word	0x080112b8

08002254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	da03      	bge.n	800226e <HAL_NVIC_EnableIRQ+0x1a>
 8002266:	21bc      	movs	r1, #188	; 0xbc
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_NVIC_EnableIRQ+0x2c>)
 800226a:	f7fe ff1d 	bl	80010a8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff26 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	080112b8 	.word	0x080112b8

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a33      	ldr	r2, [pc, #204]	; (800236c <HAL_GPIO_Init+0xe8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d017      	beq.n	80022d2 <HAL_GPIO_Init+0x4e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_GPIO_Init+0xec>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x4e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a31      	ldr	r2, [pc, #196]	; (8002374 <HAL_GPIO_Init+0xf0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00f      	beq.n	80022d2 <HAL_GPIO_Init+0x4e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a30      	ldr	r2, [pc, #192]	; (8002378 <HAL_GPIO_Init+0xf4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <HAL_GPIO_Init+0x4e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2f      	ldr	r2, [pc, #188]	; (800237c <HAL_GPIO_Init+0xf8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x4e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_GPIO_Init+0xfc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x4e>
 80022ca:	21ac      	movs	r1, #172	; 0xac
 80022cc:	482d      	ldr	r0, [pc, #180]	; (8002384 <HAL_GPIO_Init+0x100>)
 80022ce:	f7fe feeb 	bl	80010a8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_GPIO_Init+0x64>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x6c>
 80022e8:	21ad      	movs	r1, #173	; 0xad
 80022ea:	4826      	ldr	r0, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x100>)
 80022ec:	f7fe fedc 	bl	80010a8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d035      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d031      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b11      	cmp	r3, #17
 8002306:	d02d      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d029      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b12      	cmp	r3, #18
 8002316:	d025      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002320:	d020      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800232a:	d01b      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002334:	d016      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800233e:	d011      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002348:	d00c      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0xe0>
 800235c:	21ae      	movs	r1, #174	; 0xae
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <HAL_GPIO_Init+0x100>)
 8002360:	f7fe fea2 	bl	80010a8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	e20c      	b.n	8002784 <HAL_GPIO_Init+0x500>
 800236a:	bf00      	nop
 800236c:	40020000 	.word	0x40020000
 8002370:	40020400 	.word	0x40020400
 8002374:	40020800 	.word	0x40020800
 8002378:	40020c00 	.word	0x40020c00
 800237c:	40021000 	.word	0x40021000
 8002380:	40021c00 	.word	0x40021c00
 8002384:	080112f4 	.word	0x080112f4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 81ec 	bne.w	800277e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d005      	beq.n	80023be <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d144      	bne.n	8002448 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00f      	beq.n	80023e6 <HAL_GPIO_Init+0x162>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d00b      	beq.n	80023e6 <HAL_GPIO_Init+0x162>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x162>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x162>
 80023de:	21c0      	movs	r1, #192	; 0xc0
 80023e0:	4884      	ldr	r0, [pc, #528]	; (80025f4 <HAL_GPIO_Init+0x370>)
 80023e2:	f7fe fe61 	bl	80010a8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d027      	beq.n	80024a4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_GPIO_Init+0x1f0>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x1f0>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x1f0>
 800246c:	21d1      	movs	r1, #209	; 0xd1
 800246e:	4861      	ldr	r0, [pc, #388]	; (80025f4 <HAL_GPIO_Init+0x370>)
 8002470:	f7fe fe1a 	bl	80010a8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	f040 80a3 	bne.w	80025f8 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d077      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d073      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d06f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d067      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d063      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d05f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d05b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d057      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d053      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d04f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d04b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b04      	cmp	r3, #4
 8002518:	d047      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b04      	cmp	r3, #4
 8002520:	d043      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d03f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b05      	cmp	r3, #5
 8002530:	d03b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b05      	cmp	r3, #5
 8002538:	d037      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b06      	cmp	r3, #6
 8002540:	d033      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b06      	cmp	r3, #6
 8002548:	d02f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d02b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d027      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b07      	cmp	r3, #7
 8002560:	d023      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b07      	cmp	r3, #7
 8002568:	d01f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b07      	cmp	r3, #7
 8002570:	d01b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d017      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d00f      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b09      	cmp	r3, #9
 8002590:	d00b      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d007      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x326>
 80025a2:	21de      	movs	r1, #222	; 0xde
 80025a4:	4813      	ldr	r0, [pc, #76]	; (80025f4 <HAL_GPIO_Init+0x370>)
 80025a6:	f7fe fd7f 	bl	80010a8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	69b9      	ldr	r1, [r7, #24]
 80025ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025f2:	e001      	b.n	80025f8 <HAL_GPIO_Init+0x374>
 80025f4:	080112f4 	.word	0x080112f4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a2 	beq.w	800277e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_GPIO_Init+0x514>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a55      	ldr	r2, [pc, #340]	; (8002798 <HAL_GPIO_Init+0x514>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_GPIO_Init+0x514>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_GPIO_Init+0x518>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_GPIO_Init+0x51c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x432>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <HAL_GPIO_Init+0x520>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x42e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <HAL_GPIO_Init+0x524>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x42a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <HAL_GPIO_Init+0x528>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x426>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <HAL_GPIO_Init+0x52c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x422>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x434>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x434>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x434>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x434>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x434>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4934      	ldr	r1, [pc, #208]	; (800279c <HAL_GPIO_Init+0x518>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_GPIO_Init+0x530>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a2e      	ldr	r2, [pc, #184]	; (80027b4 <HAL_GPIO_Init+0x530>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_GPIO_Init+0x530>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <HAL_GPIO_Init+0x530>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_GPIO_Init+0x530>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_GPIO_Init+0x530>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_GPIO_Init+0x530>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_GPIO_Init+0x530>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f adfe 	bls.w	8002388 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_GPIO_WritePin+0x20>
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_GPIO_WritePin+0x2a>
 80027d8:	f240 119d 	movw	r1, #413	; 0x19d
 80027dc:	480e      	ldr	r0, [pc, #56]	; (8002818 <HAL_GPIO_WritePin+0x60>)
 80027de:	f7fe fc63 	bl	80010a8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80027e2:	787b      	ldrb	r3, [r7, #1]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_WritePin+0x40>
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d004      	beq.n	80027f8 <HAL_GPIO_WritePin+0x40>
 80027ee:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80027f2:	4809      	ldr	r0, [pc, #36]	; (8002818 <HAL_GPIO_WritePin+0x60>)
 80027f4:	f7fe fc58 	bl	80010a8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	080112f4 	.word	0x080112f4

0800281c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <HAL_GPIO_TogglePin+0x1c>
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_GPIO_TogglePin+0x26>
 8002838:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800283c:	480a      	ldr	r0, [pc, #40]	; (8002868 <HAL_GPIO_TogglePin+0x4c>)
 800283e:	f7fe fc33 	bl	80010a8 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002848:	887a      	ldrh	r2, [r7, #2]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	041a      	lsls	r2, r3, #16
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43d9      	mvns	r1, r3
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	400b      	ands	r3, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	080112f4 	.word	0x080112f4

0800286c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f8ce 	bl	8001a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1bd      	b.n	8002c2a <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a93      	ldr	r2, [pc, #588]	; (8002b00 <HAL_I2C_Init+0x264>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_I2C_Init+0x3a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a91      	ldr	r2, [pc, #580]	; (8002b04 <HAL_I2C_Init+0x268>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_I2C_Init+0x3a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a90      	ldr	r2, [pc, #576]	; (8002b08 <HAL_I2C_Init+0x26c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_I2C_Init+0x3a>
 80028cc:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80028d0:	488e      	ldr	r0, [pc, #568]	; (8002b0c <HAL_I2C_Init+0x270>)
 80028d2:	f7fe fbe9 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_I2C_Init+0x4c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a8b      	ldr	r2, [pc, #556]	; (8002b10 <HAL_I2C_Init+0x274>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d904      	bls.n	80028f2 <HAL_I2C_Init+0x56>
 80028e8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80028ec:	4887      	ldr	r0, [pc, #540]	; (8002b0c <HAL_I2C_Init+0x270>)
 80028ee:	f7fe fbdb 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_I2C_Init+0x72>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002902:	d004      	beq.n	800290e <HAL_I2C_Init+0x72>
 8002904:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002908:	4880      	ldr	r0, [pc, #512]	; (8002b0c <HAL_I2C_Init+0x270>)
 800290a:	f7fe fbcd 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_I2C_Init+0x8c>
 800291e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002922:	487a      	ldr	r0, [pc, #488]	; (8002b0c <HAL_I2C_Init+0x270>)
 8002924:	f7fe fbc0 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002930:	d009      	beq.n	8002946 <HAL_I2C_Init+0xaa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800293a:	d004      	beq.n	8002946 <HAL_I2C_Init+0xaa>
 800293c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002940:	4872      	ldr	r0, [pc, #456]	; (8002b0c <HAL_I2C_Init+0x270>)
 8002942:	f7fe fbb1 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_I2C_Init+0xc4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d004      	beq.n	8002960 <HAL_I2C_Init+0xc4>
 8002956:	f240 11c3 	movw	r1, #451	; 0x1c3
 800295a:	486c      	ldr	r0, [pc, #432]	; (8002b0c <HAL_I2C_Init+0x270>)
 800295c:	f7fe fba4 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_I2C_Init+0xda>
 800296c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002970:	4866      	ldr	r0, [pc, #408]	; (8002b0c <HAL_I2C_Init+0x270>)
 8002972:	f7fe fb99 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_I2C_Init+0xf4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d004      	beq.n	8002990 <HAL_I2C_Init+0xf4>
 8002986:	f240 11c5 	movw	r1, #453	; 0x1c5
 800298a:	4860      	ldr	r0, [pc, #384]	; (8002b0c <HAL_I2C_Init+0x270>)
 800298c:	f7fe fb8c 	bl	80010a8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_I2C_Init+0x10e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d004      	beq.n	80029aa <HAL_I2C_Init+0x10e>
 80029a0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80029a4:	4859      	ldr	r0, [pc, #356]	; (8002b0c <HAL_I2C_Init+0x270>)
 80029a6:	f7fe fb7f 	bl	80010a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fa0e 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029fc:	f002 fd7c 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8002a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <HAL_I2C_Init+0x278>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d807      	bhi.n	8002a1c <HAL_I2C_Init+0x180>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_I2C_Init+0x27c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e006      	b.n	8002a2a <HAL_I2C_Init+0x18e>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <HAL_I2C_Init+0x280>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0fb      	b.n	8002c2a <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_I2C_Init+0x284>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9b      	lsrs	r3, r3, #18
 8002a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <HAL_I2C_Init+0x278>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d802      	bhi.n	8002a6c <HAL_I2C_Init+0x1d0>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	e009      	b.n	8002a80 <HAL_I2C_Init+0x1e4>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	4a2b      	ldr	r2, [pc, #172]	; (8002b24 <HAL_I2C_Init+0x288>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	3301      	adds	r3, #1
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	491e      	ldr	r1, [pc, #120]	; (8002b14 <HAL_I2C_Init+0x278>)
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d819      	bhi.n	8002ad4 <HAL_I2C_Init+0x238>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e59      	subs	r1, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_I2C_Init+0x234>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e59      	subs	r1, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ace:	e065      	b.n	8002b9c <HAL_I2C_Init+0x300>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e063      	b.n	8002b9c <HAL_I2C_Init+0x300>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d125      	bne.n	8002b28 <HAL_I2C_Init+0x28c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	440b      	add	r3, r1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e026      	b.n	8002b4e <HAL_I2C_Init+0x2b2>
 8002b00:	40005400 	.word	0x40005400
 8002b04:	40005800 	.word	0x40005800
 8002b08:	40005c00 	.word	0x40005c00
 8002b0c:	08011330 	.word	0x08011330
 8002b10:	00061a80 	.word	0x00061a80
 8002b14:	000186a0 	.word	0x000186a0
 8002b18:	001e847f 	.word	0x001e847f
 8002b1c:	003d08ff 	.word	0x003d08ff
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	10624dd3 	.word	0x10624dd3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	0099      	lsls	r1, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Init+0x2ba>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e022      	b.n	8002b9c <HAL_I2C_Init+0x300>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <HAL_I2C_Init+0x2e0>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1e58      	subs	r0, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	440b      	add	r3, r1
 8002b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7a:	e00f      	b.n	8002b9c <HAL_I2C_Init+0x300>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e58      	subs	r0, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	0099      	lsls	r1, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	6809      	ldr	r1, [r1, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6911      	ldr	r1, [r2, #16]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop

08002c34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4e:	f7ff f9d7 	bl	8002000 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d007      	beq.n	8002c6a <HAL_I2C_Mem_Write+0x36>
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d004      	beq.n	8002c6a <HAL_I2C_Mem_Write+0x36>
 8002c60:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002c64:	4873      	ldr	r0, [pc, #460]	; (8002e34 <HAL_I2C_Mem_Write+0x200>)
 8002c66:	f7fe fa1f 	bl	80010a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f040 80d9 	bne.w	8002e2a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2319      	movs	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	496d      	ldr	r1, [pc, #436]	; (8002e38 <HAL_I2C_Mem_Write+0x204>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 faa0 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0cc      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_I2C_Mem_Write+0x6c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0c5      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1f8>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d007      	beq.n	8002cc6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2240      	movs	r2, #64	; 0x40
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a4d      	ldr	r2, [pc, #308]	; (8002e3c <HAL_I2C_Mem_Write+0x208>)
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d08:	88f8      	ldrh	r0, [r7, #6]
 8002d0a:	893a      	ldrh	r2, [r7, #8]
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4603      	mov	r3, r0
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f9bf 	bl	800309c <I2C_RequestMemoryWrite>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d052      	beq.n	8002dca <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e081      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fb21 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d107      	bne.n	8002d50 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e06b      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d11b      	bne.n	8002dca <HAL_I2C_Mem_Write+0x196>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d017      	beq.n	8002dca <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1aa      	bne.n	8002d28 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb0d 	bl	80033f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d107      	bne.n	8002dfa <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e016      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	08011330 	.word	0x08011330
 8002e38:	00100002 	.word	0x00100002
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff f8d6 	bl	8002000 <HAL_GetTick>
 8002e54:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 8111 	bne.w	800308a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4988      	ldr	r1, [pc, #544]	; (8003094 <HAL_I2C_IsDeviceReady+0x254>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f9a8 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e104      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_IsDeviceReady+0x50>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0fd      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2224      	movs	r2, #36	; 0x24
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a70      	ldr	r2, [pc, #448]	; (8003098 <HAL_I2C_IsDeviceReady+0x258>)
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f966 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d103      	bne.n	8002f1a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0b6      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff f867 	bl	8002000 <HAL_GetTick>
 8002f32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f62:	e025      	b.n	8002fb0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7ff f84c 	bl	8002000 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <HAL_I2C_IsDeviceReady+0x13a>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	22a0      	movs	r2, #160	; 0xa0
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2ba0      	cmp	r3, #160	; 0xa0
 8002fba:	d005      	beq.n	8002fc8 <HAL_I2C_IsDeviceReady+0x188>
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_I2C_IsDeviceReady+0x188>
 8002fc2:	7dbb      	ldrb	r3, [r7, #22]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0cd      	beq.n	8002f64 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d129      	bne.n	8003032 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2319      	movs	r3, #25
 800300a:	2201      	movs	r2, #1
 800300c:	4921      	ldr	r1, [pc, #132]	; (8003094 <HAL_I2C_IsDeviceReady+0x254>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8da 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e036      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e02c      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003040:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800304a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2319      	movs	r3, #25
 8003052:	2201      	movs	r2, #1
 8003054:	490f      	ldr	r1, [pc, #60]	; (8003094 <HAL_I2C_IsDeviceReady+0x254>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8b6 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e012      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3301      	adds	r3, #1
 800306a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	f4ff af32 	bcc.w	8002eda <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	00100002 	.word	0x00100002
 8003098:	ffff0000 	.word	0xffff0000

0800309c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	817b      	strh	r3, [r7, #10]
 80030ae:	460b      	mov	r3, r1
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f878 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ec:	d103      	bne.n	80030f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e05f      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	492d      	ldr	r1, [pc, #180]	; (80031c4 <I2C_RequestMemoryWrite+0x128>)
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f8b0 	bl	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e04c      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f91a 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02b      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	611a      	str	r2, [r3, #16]
 8003172:	e021      	b.n	80031b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003174:	893b      	ldrh	r3, [r7, #8]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	b29b      	uxth	r3, r3
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8f4 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b04      	cmp	r3, #4
 8003198:	d107      	bne.n	80031aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e005      	b.n	80031ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	00010002 	.word	0x00010002

080031c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d8:	e025      	b.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d021      	beq.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe ff0d 	bl	8002000 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e023      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10d      	bne.n	800324c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	e00c      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	429a      	cmp	r2, r3
 800326a:	d0b6      	beq.n	80031da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003284:	e051      	b.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003294:	d123      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e046      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d021      	beq.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe fe8b 	bl	8002000 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e020      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e00b      	b.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d18d      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e02d      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f878 	bl	8003478 <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e02d      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d021      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fe31 	bl	8002000 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e007      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d1ca      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003402:	e02d      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f837 	bl	8003478 <I2C_IsAcknowledgeFailed>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e02d      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d021      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fdf0 	bl	8002000 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d1ca      	bne.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d11b      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b08f      	sub	sp, #60	; 0x3c
 80034dc:	af0a      	add	r7, sp, #40	; 0x28
 80034de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e118      	b.n	800371c <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f2:	d003      	beq.n	80034fc <HAL_PCD_Init+0x24>
 80034f4:	2187      	movs	r1, #135	; 0x87
 80034f6:	488b      	ldr	r0, [pc, #556]	; (8003724 <HAL_PCD_Init+0x24c>)
 80034f8:	f7fd fdd6 	bl	80010a8 <assert_failed>

  USBx = hpcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f00c f8b6 	bl	800f688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f005 fae9 	bl	8008b12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	687e      	ldr	r6, [r7, #4]
 8003548:	466d      	mov	r5, sp
 800354a:	f106 0410 	add.w	r4, r6, #16
 800354e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800355a:	e885 0003 	stmia.w	r5, {r0, r1}
 800355e:	1d33      	adds	r3, r6, #4
 8003560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f005 f9c0 	bl	80088e8 <USB_CoreInit>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0d0      	b.n	800371c <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f005 fad7 	bl	8008b34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e04a      	b.n	8003622 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	333d      	adds	r3, #61	; 0x3d
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	333c      	adds	r3, #60	; 0x3c
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	b298      	uxth	r0, r3
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3344      	adds	r3, #68	; 0x44
 80035c8:	4602      	mov	r2, r0
 80035ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3340      	adds	r3, #64	; 0x40
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3348      	adds	r3, #72	; 0x48
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334c      	adds	r3, #76	; 0x4c
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3354      	adds	r3, #84	; 0x54
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3af      	bcc.n	800358c <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e044      	b.n	80036bc <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	3301      	adds	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d3b5      	bcc.n	8003632 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	687e      	ldr	r6, [r7, #4]
 80036ce:	466d      	mov	r5, sp
 80036d0:	f106 0410 	add.w	r4, r6, #16
 80036d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036e4:	1d33      	adds	r3, r6, #4
 80036e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f005 fa6f 	bl	8008bcc <USB_DevInit>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e00d      	b.n	800371c <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f006 fbbe 	bl	8009e96 <USB_DevDisconnect>

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003724:	08011368 	.word	0x08011368

08003728 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_PCD_Start+0x1c>
 8003740:	2302      	movs	r3, #2
 8003742:	e020      	b.n	8003786 <HAL_PCD_Start+0x5e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	2b01      	cmp	r3, #1
 8003752:	d109      	bne.n	8003768 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f005 f9bf 	bl	8008af0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f006 fb6c 	bl	8009e54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800378e:	b590      	push	{r4, r7, lr}
 8003790:	b08d      	sub	sp, #52	; 0x34
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f006 fc2a 	bl	8009ffe <USB_GetMode>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 848a 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f006 fb8e 	bl	8009ed8 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8480 	beq.w	80040c4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f006 fb7b 	bl	8009ed8 <USB_ReadInterrupts>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d107      	bne.n	80037fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f002 0202 	and.w	r2, r2, #2
 80037fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f006 fb69 	bl	8009ed8 <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d161      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0210 	bic.w	r2, r2, #16
 800381e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	0c5b      	lsrs	r3, r3, #17
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	2b02      	cmp	r3, #2
 800384a:	d124      	bne.n	8003896 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d035      	beq.n	80038c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003866:	b29b      	uxth	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6a38      	ldr	r0, [r7, #32]
 800386c:	f006 f9a0 	bl	8009bb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387c:	441a      	add	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388e:	441a      	add	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	621a      	str	r2, [r3, #32]
 8003894:	e016      	b.n	80038c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	0c5b      	lsrs	r3, r3, #17
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d110      	bne.n	80038c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038a8:	2208      	movs	r2, #8
 80038aa:	4619      	mov	r1, r3
 80038ac:	6a38      	ldr	r0, [r7, #32]
 80038ae:	f006 f97f 	bl	8009bb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038be:	441a      	add	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0210 	orr.w	r2, r2, #16
 80038d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f006 fafd 	bl	8009ed8 <USB_ReadInterrupts>
 80038de:	4603      	mov	r3, r0
 80038e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038e8:	f040 80a7 	bne.w	8003a3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 fb02 	bl	8009efe <USB_ReadDevAllOutEpInterrupt>
 80038fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038fc:	e099      	b.n	8003a32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 808e 	beq.w	8003a26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f006 fb26 	bl	8009f66 <USB_ReadDevOutEPInterrupt>
 800391a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	461a      	mov	r2, r3
 8003934:	2301      	movs	r3, #1
 8003936:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fec2 	bl	80046c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	461a      	mov	r2, r3
 8003958:	2308      	movs	r3, #8
 800395a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800395c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 ff98 	bl	8004894 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	461a      	mov	r2, r3
 800397c:	2310      	movs	r3, #16
 800397e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d030      	beq.n	80039ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b80      	cmp	r3, #128	; 0x80
 8003994:	d109      	bne.n	80039aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4413      	add	r3, r2
 80039bc:	3304      	adds	r3, #4
 80039be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	78db      	ldrb	r3, [r3, #3]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d108      	bne.n	80039da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f00b ff53 	bl	800f880 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	2302      	movs	r3, #2
 80039ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	461a      	mov	r2, r3
 8003a04:	2320      	movs	r3, #32
 8003a06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	3301      	adds	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f af62 	bne.w	80038fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f006 fa4a 	bl	8009ed8 <USB_ReadInterrupts>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a4e:	f040 80db 	bne.w	8003c08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f006 fa6b 	bl	8009f32 <USB_ReadDevAllInEpInterrupt>
 8003a5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a62:	e0cd      	b.n	8003c00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80c2 	beq.w	8003bf4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f006 fa91 	bl	8009fa2 <USB_ReadDevInEPInterrupt>
 8003a80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d057      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	2201      	movs	r2, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69f9      	ldr	r1, [r7, #28]
 8003aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aac:	4013      	ands	r3, r2
 8003aae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	461a      	mov	r2, r3
 8003abe:	2301      	movs	r3, #1
 8003ac0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d132      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334c      	adds	r3, #76	; 0x4c
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4403      	add	r3, r0
 8003aea:	3348      	adds	r3, #72	; 0x48
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4419      	add	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4403      	add	r3, r0
 8003afe:	334c      	adds	r3, #76	; 0x4c
 8003b00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d113      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x3a2>
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3354      	adds	r3, #84	; 0x54
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d108      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f006 fa98 	bl	800a060 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f00b fe27 	bl	800f78a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	2308      	movs	r3, #8
 8003b56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2310      	movs	r3, #16
 8003b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d023      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b9c:	6a38      	ldr	r0, [r7, #32]
 8003b9e:	f005 f979 	bl	8008e94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	3338      	adds	r3, #56	; 0x38
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f00b fe6a 	bl	800f8a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2302      	movs	r3, #2
 8003be0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fcdb 	bl	80045aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f47f af2e 	bne.w	8003a64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f006 f963 	bl	8009ed8 <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c1c:	d122      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d108      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c44:	2100      	movs	r1, #0
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fec2 	bl	80049d0 <HAL_PCDEx_LPM_Callback>
 8003c4c:	e002      	b.n	8003c54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f00b fe08 	bl	800f864 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f006 f935 	bl	8009ed8 <USB_ReadInterrupts>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c78:	d112      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f00b fdc4 	bl	800f818 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c9e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f006 f917 	bl	8009ed8 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	f040 80b7 	bne.w	8003e26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f005 f8de 	bl	8008e94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cdc:	e046      	b.n	8003d6c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	461a      	mov	r2, r3
 8003cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d02:	0151      	lsls	r1, r2, #5
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	440a      	add	r2, r1
 8003d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	3301      	adds	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d3b3      	bcc.n	8003cde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da2:	f043 030b 	orr.w	r3, r3, #11
 8003da6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db8:	f043 030b 	orr.w	r3, r3, #11
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	e015      	b.n	8003dec <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dd2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003dd6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de6:	f043 030b 	orr.w	r3, r3, #11
 8003dea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e10:	461a      	mov	r2, r3
 8003e12:	f006 f925 	bl	800a060 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f006 f854 	bl	8009ed8 <USB_ReadInterrupts>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3a:	d124      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f006 f8ea 	bl	800a01a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f005 f89f 	bl	8008f8e <USB_GetDevSpeed>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681c      	ldr	r4, [r3, #0]
 8003e5c:	f001 fb40 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8003e60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f004 fd9e 	bl	80089ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f00b fcb2 	bl	800f7da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f006 f824 	bl	8009ed8 <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d10a      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f00b fc8f 	bl	800f7be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f002 0208 	and.w	r2, r2, #8
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f006 f80f 	bl	8009ed8 <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d122      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e014      	b.n	8003f00 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fb27 	bl	8004548 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3301      	adds	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3e5      	bcc.n	8003ed6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f005 ffe2 	bl	8009ed8 <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1e:	d13b      	bne.n	8003f98 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f20:	2301      	movs	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
 8003f24:	e02b      	b.n	8003f7e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3340      	adds	r3, #64	; 0x40
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d115      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da12      	bge.n	8003f78 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	333f      	adds	r3, #63	; 0x3f
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fae8 	bl	8004548 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d3ce      	bcc.n	8003f26 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f005 ff9b 	bl	8009ed8 <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fac:	d155      	bne.n	800405a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fae:	2301      	movs	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	e045      	b.n	8004040 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d12e      	bne.n	800403a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da2b      	bge.n	800403a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003fee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d121      	bne.n	800403a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004036:	6053      	str	r3, [r2, #4]
            break;
 8004038:	e007      	b.n	800404a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	3301      	adds	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	429a      	cmp	r2, r3
 8004048:	d3b4      	bcc.n	8003fb4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f005 ff3a 	bl	8009ed8 <USB_ReadInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d10a      	bne.n	8004086 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f00b fc29 	bl	800f8c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f005 ff24 	bl	8009ed8 <USB_ReadInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d115      	bne.n	80040c6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f00b fc19 	bl	800f8e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	e000      	b.n	80040c6 <HAL_PCD_IRQHandler+0x938>
      return;
 80040c4:	bf00      	nop
    }
  }
}
 80040c6:	3734      	adds	r7, #52	; 0x34
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}

080040cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_PCD_SetAddress+0x1a>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e013      	b.n	800410e <HAL_PCD_SetAddress+0x42>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f005 fe82 	bl	8009e08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	461a      	mov	r2, r3
 8004124:	4603      	mov	r3, r0
 8004126:	70fb      	strb	r3, [r7, #3]
 8004128:	460b      	mov	r3, r1
 800412a:	803b      	strh	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0f      	bge.n	800415c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3338      	adds	r3, #56	; 0x38
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	705a      	strb	r2, [r3, #1]
 800415a:	e00f      	b.n	800417c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004188:	883a      	ldrh	r2, [r7, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	78ba      	ldrb	r2, [r7, #2]
 8004192:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041a6:	78bb      	ldrb	r3, [r7, #2]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d102      	bne.n	80041b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_PCD_EP_Open+0xaa>
 80041bc:	2302      	movs	r3, #2
 80041be:	e00e      	b.n	80041de <HAL_PCD_EP_Open+0xc8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68f9      	ldr	r1, [r7, #12]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f004 ff02 	bl	8008fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80041dc:	7afb      	ldrb	r3, [r7, #11]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da0f      	bge.n	800421a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3338      	adds	r3, #56	; 0x38
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	705a      	strb	r2, [r3, #1]
 8004218:	e00f      	b.n	800423a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_PCD_EP_Close+0x6e>
 8004250:	2302      	movs	r3, #2
 8004252:	e00e      	b.n	8004272 <HAL_PCD_EP_Close+0x8c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	4618      	mov	r0, r3
 8004264:	f004 ff40 	bl	80090e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	460b      	mov	r3, r1
 8004288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	3304      	adds	r3, #4
 80042a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2200      	movs	r2, #0
 80042b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042bc:	7afb      	ldrb	r3, [r7, #11]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d102      	bne.n	80042d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	6979      	ldr	r1, [r7, #20]
 80042ee:	f005 fa1f 	bl	8009730 <USB_EP0StartXfer>
 80042f2:	e008      	b.n	8004306 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	f004 ffcd 	bl	80092a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	460b      	mov	r3, r1
 800434e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004350:	7afb      	ldrb	r3, [r7, #11]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	3338      	adds	r3, #56	; 0x38
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2201      	movs	r2, #1
 800437e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004380:	7afb      	ldrb	r3, [r7, #11]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	b2da      	uxtb	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800439a:	7afb      	ldrb	r3, [r7, #11]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	f005 f9bd 	bl	8009730 <USB_EP0StartXfer>
 80043b6:	e008      	b.n	80043ca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	6979      	ldr	r1, [r7, #20]
 80043c6:	f004 ff6b 	bl	80092a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e050      	b.n	8004494 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da0f      	bge.n	800441a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	3338      	adds	r3, #56	; 0x38
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	705a      	strb	r2, [r3, #1]
 8004418:	e00d      	b.n	8004436 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_PCD_EP_SetStall+0x82>
 8004452:	2302      	movs	r3, #2
 8004454:	e01e      	b.n	8004494 <HAL_PCD_EP_SetStall+0xc0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	4618      	mov	r0, r3
 8004466:	f005 fbfb 	bl	8009c60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	b2d9      	uxtb	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004484:	461a      	mov	r2, r3
 8004486:	f005 fdeb 	bl	800a060 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d901      	bls.n	80044ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e042      	b.n	8004540 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da0f      	bge.n	80044e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	3338      	adds	r3, #56	; 0x38
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	3304      	adds	r3, #4
 80044d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	705a      	strb	r2, [r3, #1]
 80044e0:	e00f      	b.n	8004502 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	3304      	adds	r3, #4
 80044fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_PCD_EP_ClrStall+0x86>
 800451e:	2302      	movs	r3, #2
 8004520:	e00e      	b.n	8004540 <HAL_PCD_EP_ClrStall+0xa4>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	4618      	mov	r0, r3
 8004532:	f005 fc03 	bl	8009d3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004558:	2b00      	cmp	r3, #0
 800455a:	da0c      	bge.n	8004576 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 020f 	and.w	r2, r3, #15
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	3338      	adds	r3, #56	; 0x38
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	3304      	adds	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e00c      	b.n	8004590 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	4618      	mov	r0, r3
 8004598:	f005 fa22 	bl	80099e0 <USB_EPStopXfer>
 800459c:	4603      	mov	r3, r0
 800459e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045a0:	7afb      	ldrb	r3, [r7, #11]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b08a      	sub	sp, #40	; 0x28
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3338      	adds	r3, #56	; 0x38
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	3304      	adds	r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1a      	ldr	r2, [r3, #32]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d901      	bls.n	80045e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e06c      	b.n	80046bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d902      	bls.n	80045fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3303      	adds	r3, #3
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004606:	e02b      	b.n	8004660 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	429a      	cmp	r2, r3
 800461c:	d902      	bls.n	8004624 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	3303      	adds	r3, #3
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6919      	ldr	r1, [r3, #16]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800463c:	b2db      	uxtb	r3, r3
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f005 fa76 	bl	8009b34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	441a      	add	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	b29b      	uxth	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	429a      	cmp	r2, r3
 8004674:	d809      	bhi.n	800468a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800467e:	429a      	cmp	r2, r3
 8004680:	d203      	bcs.n	800468a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1be      	bne.n	8004608 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	429a      	cmp	r2, r3
 8004694:	d811      	bhi.n	80046ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	2201      	movs	r2, #1
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b6:	4013      	ands	r3, r2
 80046b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	333c      	adds	r3, #60	; 0x3c
 80046dc:	3304      	adds	r3, #4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d17b      	bne.n	80047f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d015      	beq.n	8004730 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4a61      	ldr	r2, [pc, #388]	; (800488c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	f240 80b9 	bls.w	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80b3 	beq.w	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	461a      	mov	r2, r3
 8004728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472c:	6093      	str	r3, [r2, #8]
 800472e:	e0a7      	b.n	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	2320      	movs	r3, #32
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	e098      	b.n	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 8093 	bne.w	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4a4b      	ldr	r2, [pc, #300]	; (800488c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d90f      	bls.n	8004782 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	461a      	mov	r2, r3
 800477a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477e:	6093      	str	r3, [r2, #8]
 8004780:	e07e      	b.n	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	3304      	adds	r3, #4
 8004796:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	0159      	lsls	r1, r3, #5
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	440b      	add	r3, r1
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d114      	bne.n	80047e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047cc:	461a      	mov	r2, r3
 80047ce:	2101      	movs	r1, #1
 80047d0:	f005 fc46 	bl	800a060 <USB_EP0_OutStart>
 80047d4:	e006      	b.n	80047e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f00a ffb2 	bl	800f754 <HAL_PCD_DataOutStageCallback>
 80047f0:	e046      	b.n	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4a26      	ldr	r2, [pc, #152]	; (8004890 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d124      	bne.n	8004844 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	461a      	mov	r2, r3
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	6093      	str	r3, [r2, #8]
 8004818:	e032      	b.n	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	461a      	mov	r2, r3
 8004832:	2320      	movs	r3, #32
 8004834:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	4619      	mov	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f00a ff89 	bl	800f754 <HAL_PCD_DataOutStageCallback>
 8004842:	e01d      	b.n	8004880 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d114      	bne.n	8004874 <PCD_EP_OutXfrComplete_int+0x1b0>
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800486c:	461a      	mov	r2, r3
 800486e:	2100      	movs	r1, #0
 8004870:	f005 fbf6 	bl	800a060 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f00a ff6a 	bl	800f754 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	4f54300a 	.word	0x4f54300a
 8004890:	4f54310a 	.word	0x4f54310a

08004894 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	333c      	adds	r3, #60	; 0x3c
 80048ac:	3304      	adds	r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <PCD_EP_OutSetupPacket_int+0x88>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d90e      	bls.n	80048e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	461a      	mov	r2, r3
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f00a ff21 	bl	800f730 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <PCD_EP_OutSetupPacket_int+0x88>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d90c      	bls.n	8004910 <PCD_EP_OutSetupPacket_int+0x7c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d108      	bne.n	8004910 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004908:	461a      	mov	r2, r3
 800490a:	2101      	movs	r1, #1
 800490c:	f005 fba8 	bl	800a060 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	4f54300a 	.word	0x4f54300a

08004920 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
 800492c:	4613      	mov	r3, r2
 800492e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800493e:	883b      	ldrh	r3, [r7, #0]
 8004940:	0419      	lsls	r1, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	430a      	orrs	r2, r1
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
 800494c:	e028      	b.n	80049a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4413      	add	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e00d      	b.n	800497e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3340      	adds	r3, #64	; 0x40
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	3301      	adds	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	3b01      	subs	r3, #1
 8004984:	429a      	cmp	r2, r3
 8004986:	d3ec      	bcc.n	8004962 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004988:	883b      	ldrh	r3, [r7, #0]
 800498a:	0418      	lsls	r0, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	3b01      	subs	r3, #1
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4302      	orrs	r2, r0
 8004998:	3340      	adds	r3, #64	; 0x40
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e314      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d903      	bls.n	8004a0a <HAL_RCC_OscConfig+0x22>
 8004a02:	21e6      	movs	r1, #230	; 0xe6
 8004a04:	4897      	ldr	r0, [pc, #604]	; (8004c64 <HAL_RCC_OscConfig+0x27c>)
 8004a06:	f7fc fb4f 	bl	80010a8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8088 	beq.w	8004b28 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_RCC_OscConfig+0x54>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d008      	beq.n	8004a3c <HAL_RCC_OscConfig+0x54>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a32:	d003      	beq.n	8004a3c <HAL_RCC_OscConfig+0x54>
 8004a34:	21eb      	movs	r1, #235	; 0xeb
 8004a36:	488b      	ldr	r0, [pc, #556]	; (8004c64 <HAL_RCC_OscConfig+0x27c>)
 8004a38:	f7fc fb36 	bl	80010a8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a3c:	4b8a      	ldr	r3, [pc, #552]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d00c      	beq.n	8004a62 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a48:	4b87      	ldr	r3, [pc, #540]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d112      	bne.n	8004a7a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a54:	4b84      	ldr	r3, [pc, #528]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a62:	4b81      	ldr	r3, [pc, #516]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d05b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x13e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d157      	bne.n	8004b26 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e2d4      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0xaa>
 8004a84:	4b78      	ldr	r3, [pc, #480]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a77      	ldr	r2, [pc, #476]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e01d      	b.n	8004ace <HAL_RCC_OscConfig+0xe6>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCC_OscConfig+0xce>
 8004a9c:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a71      	ldr	r2, [pc, #452]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a6e      	ldr	r2, [pc, #440]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e00b      	b.n	8004ace <HAL_RCC_OscConfig+0xe6>
 8004ab6:	4b6c      	ldr	r3, [pc, #432]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a6b      	ldr	r2, [pc, #428]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b69      	ldr	r3, [pc, #420]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a68      	ldr	r2, [pc, #416]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004acc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d013      	beq.n	8004afe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fd fa93 	bl	8002000 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ade:	f7fd fa8f 	bl	8002000 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b64      	cmp	r3, #100	; 0x64
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e299      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af0:	4b5d      	ldr	r3, [pc, #372]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0xf6>
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afe:	f7fd fa7f 	bl	8002000 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b06:	f7fd fa7b 	bl	8002000 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b64      	cmp	r3, #100	; 0x64
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e285      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x11e>
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d079      	beq.n	8004c28 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_OscConfig+0x166>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d004      	beq.n	8004b4e <HAL_RCC_OscConfig+0x166>
 8004b44:	f240 111d 	movw	r1, #285	; 0x11d
 8004b48:	4846      	ldr	r0, [pc, #280]	; (8004c64 <HAL_RCC_OscConfig+0x27c>)
 8004b4a:	f7fc faad 	bl	80010a8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b1f      	cmp	r3, #31
 8004b54:	d904      	bls.n	8004b60 <HAL_RCC_OscConfig+0x178>
 8004b56:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004b5a:	4842      	ldr	r0, [pc, #264]	; (8004c64 <HAL_RCC_OscConfig+0x27c>)
 8004b5c:	f7fc faa4 	bl	80010a8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b60:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d11c      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b78:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b84:	4b38      	ldr	r3, [pc, #224]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_OscConfig+0x1b4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e243      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	492f      	ldr	r1, [pc, #188]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb0:	e03a      	b.n	8004c28 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d020      	beq.n	8004bfc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bba:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <HAL_RCC_OscConfig+0x284>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fa1e 	bl	8002000 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc8:	f7fd fa1a 	bl	8002000 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e224      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	491c      	ldr	r1, [pc, #112]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]
 8004bfa:	e015      	b.n	8004c28 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_OscConfig+0x284>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fd f9fd 	bl	8002000 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7fd f9f9 	bl	8002000 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e203      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d045      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_OscConfig+0x266>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d004      	beq.n	8004c4e <HAL_RCC_OscConfig+0x266>
 8004c44:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004c48:	4806      	ldr	r0, [pc, #24]	; (8004c64 <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	f7fc fa2d 	bl	80010a8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01e      	beq.n	8004c94 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c56:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_RCC_OscConfig+0x288>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fd f9d0 	bl	8002000 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	e010      	b.n	8004c86 <HAL_RCC_OscConfig+0x29e>
 8004c64:	080113a0 	.word	0x080113a0
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	42470000 	.word	0x42470000
 8004c70:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c74:	f7fd f9c4 	bl	8002000 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e1ce      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	4b5e      	ldr	r3, [pc, #376]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x28c>
 8004c92:	e015      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c94:	4b5b      	ldr	r3, [pc, #364]	; (8004e04 <HAL_RCC_OscConfig+0x41c>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd f9b1 	bl	8002000 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fd f9ad 	bl	8002000 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1b7      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb4:	4b52      	ldr	r3, [pc, #328]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80b0 	beq.w	8004e2e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x30c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d008      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x30c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b05      	cmp	r3, #5
 8004ce8:	d004      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x30c>
 8004cea:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004cee:	4846      	ldr	r0, [pc, #280]	; (8004e08 <HAL_RCC_OscConfig+0x420>)
 8004cf0:	f7fc f9da 	bl	80010a8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b42      	ldr	r3, [pc, #264]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10f      	bne.n	8004d20 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d10:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCC_OscConfig+0x424>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d118      	bne.n	8004d5e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2c:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_OscConfig+0x424>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a36      	ldr	r2, [pc, #216]	; (8004e0c <HAL_RCC_OscConfig+0x424>)
 8004d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d38:	f7fd f962 	bl	8002000 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fd f95e 	bl	8002000 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e168      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d52:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <HAL_RCC_OscConfig+0x424>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x38c>
 8004d66:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
 8004d72:	e01c      	b.n	8004dae <HAL_RCC_OscConfig+0x3c6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d10c      	bne.n	8004d96 <HAL_RCC_OscConfig+0x3ae>
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	6713      	str	r3, [r2, #112]	; 0x70
 8004d94:	e00b      	b.n	8004dae <HAL_RCC_OscConfig+0x3c6>
 8004d96:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d015      	beq.n	8004de2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db6:	f7fd f923 	bl	8002000 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fd f91f 	bl	8002000 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e127      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_RCC_OscConfig+0x418>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ee      	beq.n	8004dbe <HAL_RCC_OscConfig+0x3d6>
 8004de0:	e01c      	b.n	8004e1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fd f90d 	bl	8002000 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	e012      	b.n	8004e10 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fd f909 	bl	8002000 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d909      	bls.n	8004e10 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e111      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470e80 	.word	0x42470e80
 8004e08:	080113a0 	.word	0x080113a0
 8004e0c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e10:	4b86      	ldr	r3, [pc, #536]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e22:	4b82      	ldr	r3, [pc, #520]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4a81      	ldr	r2, [pc, #516]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x468>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d008      	beq.n	8004e50 <HAL_RCC_OscConfig+0x468>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d004      	beq.n	8004e50 <HAL_RCC_OscConfig+0x468>
 8004e46:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004e4a:	4879      	ldr	r0, [pc, #484]	; (8005030 <HAL_RCC_OscConfig+0x648>)
 8004e4c:	f7fc f92c 	bl	80010a8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80e4 	beq.w	8005022 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e5a:	4b74      	ldr	r3, [pc, #464]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	f000 80a5 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f040 8089 	bne.w	8004f84 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_RCC_OscConfig+0x4a6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e82:	d004      	beq.n	8004e8e <HAL_RCC_OscConfig+0x4a6>
 8004e84:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004e88:	4869      	ldr	r0, [pc, #420]	; (8005030 <HAL_RCC_OscConfig+0x648>)
 8004e8a:	f7fc f90d 	bl	80010a8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	2b3f      	cmp	r3, #63	; 0x3f
 8004e94:	d904      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x4b8>
 8004e96:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004e9a:	4865      	ldr	r0, [pc, #404]	; (8005030 <HAL_RCC_OscConfig+0x648>)
 8004e9c:	f7fc f904 	bl	80010a8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b31      	cmp	r3, #49	; 0x31
 8004ea6:	d904      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x4ca>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004eb0:	d904      	bls.n	8004ebc <HAL_RCC_OscConfig+0x4d4>
 8004eb2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004eb6:	485e      	ldr	r0, [pc, #376]	; (8005030 <HAL_RCC_OscConfig+0x648>)
 8004eb8:	f7fc f8f6 	bl	80010a8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4fe>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d00c      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4fe>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	2b06      	cmp	r3, #6
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4fe>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d004      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4fe>
 8004edc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ee0:	4853      	ldr	r0, [pc, #332]	; (8005030 <HAL_RCC_OscConfig+0x648>)
 8004ee2:	f7fc f8e1 	bl	80010a8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d903      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x50e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d904      	bls.n	8004f00 <HAL_RCC_OscConfig+0x518>
 8004ef6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004efa:	484d      	ldr	r0, [pc, #308]	; (8005030 <HAL_RCC_OscConfig+0x648>)
 8004efc:	f7fc f8d4 	bl	80010a8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b4c      	ldr	r3, [pc, #304]	; (8005034 <HAL_RCC_OscConfig+0x64c>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd f87b 	bl	8002000 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd f877 	bl	8002000 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e081      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	019b      	lsls	r3, r3, #6
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	3b01      	subs	r3, #1
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	4936      	ldr	r1, [pc, #216]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <HAL_RCC_OscConfig+0x64c>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fd f850 	bl	8002000 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fd f84c 	bl	8002000 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e056      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f76:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x57c>
 8004f82:	e04e      	b.n	8005022 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f84:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <HAL_RCC_OscConfig+0x64c>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fd f839 	bl	8002000 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fd f835 	bl	8002000 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e03f      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa4:	4b21      	ldr	r3, [pc, #132]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x5aa>
 8004fb0:	e037      	b.n	8005022 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e032      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	; (800502c <HAL_RCC_OscConfig+0x644>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d028      	beq.n	800501e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d121      	bne.n	800501e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d11a      	bne.n	800501e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fee:	4013      	ands	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ff4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d111      	bne.n	800501e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	3b01      	subs	r3, #1
 8005008:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d107      	bne.n	800501e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d001      	beq.n	8005022 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	080113a0 	.word	0x080113a0
 8005034:	42470060 	.word	0x42470060

08005038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e174      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCC_ClockConfig+0x24>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b0f      	cmp	r3, #15
 800505a:	d904      	bls.n	8005066 <HAL_RCC_ClockConfig+0x2e>
 800505c:	f240 215a 	movw	r1, #602	; 0x25a
 8005060:	487b      	ldr	r0, [pc, #492]	; (8005250 <HAL_RCC_ClockConfig+0x218>)
 8005062:	f7fc f821 	bl	80010a8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d019      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d016      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d013      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d010      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d00d      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d00a      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b06      	cmp	r3, #6
 800508e:	d007      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b07      	cmp	r3, #7
 8005094:	d004      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
 8005096:	f240 215b 	movw	r1, #603	; 0x25b
 800509a:	486d      	ldr	r0, [pc, #436]	; (8005250 <HAL_RCC_ClockConfig+0x218>)
 800509c:	f7fc f804 	bl	80010a8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4b6c      	ldr	r3, [pc, #432]	; (8005254 <HAL_RCC_ClockConfig+0x21c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90c      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b69      	ldr	r3, [pc, #420]	; (8005254 <HAL_RCC_ClockConfig+0x21c>)
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b67      	ldr	r3, [pc, #412]	; (8005254 <HAL_RCC_ClockConfig+0x21c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e136      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d049      	beq.n	8005168 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e0:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80050e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f8:	4b57      	ldr	r3, [pc, #348]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a56      	ldr	r2, [pc, #344]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80050fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d024      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d020      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b90      	cmp	r3, #144	; 0x90
 800511a:	d01c      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2ba0      	cmp	r3, #160	; 0xa0
 8005122:	d018      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2bb0      	cmp	r3, #176	; 0xb0
 800512a:	d014      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2bc0      	cmp	r3, #192	; 0xc0
 8005132:	d010      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2bd0      	cmp	r3, #208	; 0xd0
 800513a:	d00c      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2be0      	cmp	r3, #224	; 0xe0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2bf0      	cmp	r3, #240	; 0xf0
 800514a:	d004      	beq.n	8005156 <HAL_RCC_ClockConfig+0x11e>
 800514c:	f240 217e 	movw	r1, #638	; 0x27e
 8005150:	483f      	ldr	r0, [pc, #252]	; (8005250 <HAL_RCC_ClockConfig+0x218>)
 8005152:	f7fb ffa9 	bl	80010a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005156:	4b40      	ldr	r3, [pc, #256]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	493d      	ldr	r1, [pc, #244]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d059      	beq.n	8005228 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_RCC_ClockConfig+0x166>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d00c      	beq.n	800519e <HAL_RCC_ClockConfig+0x166>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d008      	beq.n	800519e <HAL_RCC_ClockConfig+0x166>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d004      	beq.n	800519e <HAL_RCC_ClockConfig+0x166>
 8005194:	f240 2185 	movw	r1, #645	; 0x285
 8005198:	482d      	ldr	r0, [pc, #180]	; (8005250 <HAL_RCC_ClockConfig+0x218>)
 800519a:	f7fb ff85 	bl	80010a8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a6:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d119      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0bf      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d003      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d107      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0af      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0a7      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f023 0203 	bic.w	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4919      	ldr	r1, [pc, #100]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051f8:	f7fc ff02 	bl	8002000 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fe:	e00a      	b.n	8005216 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005200:	f7fc fefe 	bl	8002000 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e08f      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <HAL_RCC_ClockConfig+0x220>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 020c 	and.w	r2, r3, #12
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	429a      	cmp	r2, r3
 8005226:	d1eb      	bne.n	8005200 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_RCC_ClockConfig+0x21c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d212      	bcs.n	800525c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_RCC_ClockConfig+0x21c>)
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_ClockConfig+0x21c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d007      	beq.n	800525c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e072      	b.n	8005336 <HAL_RCC_ClockConfig+0x2fe>
 8005250:	080113a0 	.word	0x080113a0
 8005254:	40023c00 	.word	0x40023c00
 8005258:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d025      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d018      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x26a>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d013      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x26a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005282:	d00e      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x26a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x26a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005296:	d004      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x26a>
 8005298:	f240 21c3 	movw	r1, #707	; 0x2c3
 800529c:	4828      	ldr	r0, [pc, #160]	; (8005340 <HAL_RCC_ClockConfig+0x308>)
 800529e:	f7fb ff03 	bl	80010a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a2:	4b28      	ldr	r3, [pc, #160]	; (8005344 <HAL_RCC_ClockConfig+0x30c>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4925      	ldr	r1, [pc, #148]	; (8005344 <HAL_RCC_ClockConfig+0x30c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d026      	beq.n	800530e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d018      	beq.n	80052fa <HAL_RCC_ClockConfig+0x2c2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d013      	beq.n	80052fa <HAL_RCC_ClockConfig+0x2c2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052da:	d00e      	beq.n	80052fa <HAL_RCC_ClockConfig+0x2c2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80052e4:	d009      	beq.n	80052fa <HAL_RCC_ClockConfig+0x2c2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80052ee:	d004      	beq.n	80052fa <HAL_RCC_ClockConfig+0x2c2>
 80052f0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80052f4:	4812      	ldr	r0, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x308>)
 80052f6:	f7fb fed7 	bl	80010a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <HAL_RCC_ClockConfig+0x30c>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	490e      	ldr	r1, [pc, #56]	; (8005344 <HAL_RCC_ClockConfig+0x30c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800530e:	f000 f821 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 8005312:	4602      	mov	r2, r0
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_RCC_ClockConfig+0x30c>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	490a      	ldr	r1, [pc, #40]	; (8005348 <HAL_RCC_ClockConfig+0x310>)
 8005320:	5ccb      	ldrb	r3, [r1, r3]
 8005322:	fa22 f303 	lsr.w	r3, r2, r3
 8005326:	4a09      	ldr	r2, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x314>)
 8005328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_RCC_ClockConfig+0x318>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7fc fac0 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	080113a0 	.word	0x080113a0
 8005344:	40023800 	.word	0x40023800
 8005348:	08013eb0 	.word	0x08013eb0
 800534c:	20000150 	.word	0x20000150
 8005350:	20000154 	.word	0x20000154

08005354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005358:	b090      	sub	sp, #64	; 0x40
 800535a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
 8005360:	2300      	movs	r3, #0
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005364:	2300      	movs	r3, #0
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b08      	cmp	r3, #8
 8005376:	d00d      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x40>
 8005378:	2b08      	cmp	r3, #8
 800537a:	f200 80a1 	bhi.w	80054c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x34>
 8005382:	2b04      	cmp	r3, #4
 8005384:	d003      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0x3a>
 8005386:	e09b      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800538a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800538c:	e09b      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800538e:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_RCC_GetSysClockFreq+0x188>)
 8005390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005392:	e098      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005394:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800539e:	4b4d      	ldr	r3, [pc, #308]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d028      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053aa:	4b4a      	ldr	r3, [pc, #296]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	099b      	lsrs	r3, r3, #6
 80053b0:	2200      	movs	r2, #0
 80053b2:	623b      	str	r3, [r7, #32]
 80053b4:	627a      	str	r2, [r7, #36]	; 0x24
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053bc:	2100      	movs	r1, #0
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_GetSysClockFreq+0x188>)
 80053c0:	fb03 f201 	mul.w	r2, r3, r1
 80053c4:	2300      	movs	r3, #0
 80053c6:	fb00 f303 	mul.w	r3, r0, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	4a43      	ldr	r2, [pc, #268]	; (80054dc <HAL_RCC_GetSysClockFreq+0x188>)
 80053ce:	fba0 1202 	umull	r1, r2, r0, r2
 80053d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d4:	460a      	mov	r2, r1
 80053d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80053d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053da:	4413      	add	r3, r2
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	2200      	movs	r2, #0
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	61fa      	str	r2, [r7, #28]
 80053e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053ee:	f7fa ff47 	bl	8000280 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4613      	mov	r3, r2
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fa:	e053      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053fc:	4b35      	ldr	r3, [pc, #212]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	099b      	lsrs	r3, r3, #6
 8005402:	2200      	movs	r2, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	617a      	str	r2, [r7, #20]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800540e:	f04f 0b00 	mov.w	fp, #0
 8005412:	4652      	mov	r2, sl
 8005414:	465b      	mov	r3, fp
 8005416:	f04f 0000 	mov.w	r0, #0
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	0159      	lsls	r1, r3, #5
 8005420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005424:	0150      	lsls	r0, r2, #5
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	ebb2 080a 	subs.w	r8, r2, sl
 800542e:	eb63 090b 	sbc.w	r9, r3, fp
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800543e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005442:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005446:	ebb2 0408 	subs.w	r4, r2, r8
 800544a:	eb63 0509 	sbc.w	r5, r3, r9
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	00eb      	lsls	r3, r5, #3
 8005458:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800545c:	00e2      	lsls	r2, r4, #3
 800545e:	4614      	mov	r4, r2
 8005460:	461d      	mov	r5, r3
 8005462:	eb14 030a 	adds.w	r3, r4, sl
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	eb45 030b 	adc.w	r3, r5, fp
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800547a:	4629      	mov	r1, r5
 800547c:	028b      	lsls	r3, r1, #10
 800547e:	4621      	mov	r1, r4
 8005480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005484:	4621      	mov	r1, r4
 8005486:	028a      	lsls	r2, r1, #10
 8005488:	4610      	mov	r0, r2
 800548a:	4619      	mov	r1, r3
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	2200      	movs	r2, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	60fa      	str	r2, [r7, #12]
 8005494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005498:	f7fa fef2 	bl	8000280 <__aeabi_uldivmod>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4613      	mov	r3, r2
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	3301      	adds	r3, #1
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80054b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054be:	e002      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80054c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3740      	adds	r7, #64	; 0x40
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800
 80054d8:	00f42400 	.word	0x00f42400
 80054dc:	017d7840 	.word	0x017d7840

080054e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000150 	.word	0x20000150

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a9b      	lsrs	r3, r3, #10
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	; (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	08013ec0 	.word	0x08013ec0

08005520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	220f      	movs	r2, #15
 800552e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005530:	4b12      	ldr	r3, [pc, #72]	; (800557c <HAL_RCC_GetClockConfig+0x5c>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0203 	and.w	r2, r3, #3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RCC_GetClockConfig+0x5c>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCC_GetClockConfig+0x5c>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <HAL_RCC_GetClockConfig+0x5c>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <HAL_RCC_GetClockConfig+0x60>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0207 	and.w	r2, r3, #7
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	601a      	str	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800
 8005580:	40023c00 	.word	0x40023c00

08005584 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b0f      	cmp	r3, #15
 80055a2:	d904      	bls.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80055a4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80055a8:	4834      	ldr	r0, [pc, #208]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80055aa:	f7fb fd7d 	bl	80010a8 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d066      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d903      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b07      	cmp	r3, #7
 80055d4:	d904      	bls.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80055d6:	f640 11de 	movw	r1, #2526	; 0x9de
 80055da:	4828      	ldr	r0, [pc, #160]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80055dc:	f7fb fd64 	bl	80010a8 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b31      	cmp	r3, #49	; 0x31
 80055e6:	d904      	bls.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80055f0:	d904      	bls.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055f2:	f640 11df 	movw	r1, #2527	; 0x9df
 80055f6:	4821      	ldr	r0, [pc, #132]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80055f8:	f7fb fd56 	bl	80010a8 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d903      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b3f      	cmp	r3, #63	; 0x3f
 800560a:	d904      	bls.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800560c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8005610:	481a      	ldr	r0, [pc, #104]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005612:	f7fb fd49 	bl	80010a8 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800561c:	f7fc fcf0 	bl	8002000 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005624:	f7fc fcec 	bl	8002000 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e1b3      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	019b      	lsls	r3, r3, #6
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	071b      	lsls	r3, r3, #28
 8005654:	490b      	ldr	r1, [pc, #44]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005662:	f7fc fccd 	bl	8002000 <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005668:	e00e      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800566a:	f7fc fcc9 	bl	8002000 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d907      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e190      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800567c:	080113d8 	.word	0x080113d8
 8005680:	42470068 	.word	0x42470068
 8005684:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005688:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ea      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8173 	beq.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056aa:	f000 80a6 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b6:	f000 80a0 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4a7c      	ldr	r2, [pc, #496]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	f000 809a 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	4a7a      	ldr	r2, [pc, #488]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	f000 8094 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	4a78      	ldr	r2, [pc, #480]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	f000 808e 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	4a76      	ldr	r2, [pc, #472]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	f000 8088 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	4a74      	ldr	r2, [pc, #464]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	f000 8082 	beq.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	4a72      	ldr	r2, [pc, #456]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d07c      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	4a70      	ldr	r2, [pc, #448]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d077      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	4a6f      	ldr	r2, [pc, #444]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d072      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4a6d      	ldr	r2, [pc, #436]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d06d      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4a6c      	ldr	r2, [pc, #432]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d068      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	4a6a      	ldr	r2, [pc, #424]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d063      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	4a69      	ldr	r2, [pc, #420]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d05e      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	4a67      	ldr	r2, [pc, #412]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d059      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	4a66      	ldr	r2, [pc, #408]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d054      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	4a64      	ldr	r2, [pc, #400]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d04f      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d04a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	4a61      	ldr	r2, [pc, #388]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d045      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	4a60      	ldr	r2, [pc, #384]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d040      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	4a5e      	ldr	r2, [pc, #376]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d03b      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	4a5d      	ldr	r2, [pc, #372]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d036      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	4a5b      	ldr	r2, [pc, #364]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d031      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	4a5a      	ldr	r2, [pc, #360]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d02c      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4a58      	ldr	r2, [pc, #352]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d027      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	4a57      	ldr	r2, [pc, #348]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d022      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	4a55      	ldr	r2, [pc, #340]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01d      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4a54      	ldr	r2, [pc, #336]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d018      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	4a52      	ldr	r2, [pc, #328]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	4a51      	ldr	r2, [pc, #324]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	4a4f      	ldr	r2, [pc, #316]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	4a4e      	ldr	r2, [pc, #312]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80057f0:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80057f4:	484c      	ldr	r0, [pc, #304]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80057f6:	f7fb fc57 	bl	80010a8 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	; 0x40
 800580a:	4b28      	ldr	r3, [pc, #160]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005816:	4b45      	ldr	r3, [pc, #276]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a44      	ldr	r2, [pc, #272]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005822:	f7fc fbed 	bl	8002000 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800582a:	f7fc fbe9 	bl	8002000 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e0b0      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800583c:	4b3b      	ldr	r3, [pc, #236]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005848:	4b18      	ldr	r3, [pc, #96]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005850:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d073      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d06c      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005870:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005876:	4b2e      	ldr	r3, [pc, #184]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800587c:	4a0b      	ldr	r2, [pc, #44]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d158      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800588e:	f7fc fbb7 	bl	8002000 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005894:	e04e      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fc fbb3 	bl	8002000 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d945      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e078      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058ac:	40023800 	.word	0x40023800
 80058b0:	00020300 	.word	0x00020300
 80058b4:	00030300 	.word	0x00030300
 80058b8:	00040300 	.word	0x00040300
 80058bc:	00050300 	.word	0x00050300
 80058c0:	00060300 	.word	0x00060300
 80058c4:	00070300 	.word	0x00070300
 80058c8:	00080300 	.word	0x00080300
 80058cc:	00090300 	.word	0x00090300
 80058d0:	000a0300 	.word	0x000a0300
 80058d4:	000b0300 	.word	0x000b0300
 80058d8:	000c0300 	.word	0x000c0300
 80058dc:	000d0300 	.word	0x000d0300
 80058e0:	000e0300 	.word	0x000e0300
 80058e4:	000f0300 	.word	0x000f0300
 80058e8:	00100300 	.word	0x00100300
 80058ec:	00110300 	.word	0x00110300
 80058f0:	00120300 	.word	0x00120300
 80058f4:	00130300 	.word	0x00130300
 80058f8:	00140300 	.word	0x00140300
 80058fc:	00150300 	.word	0x00150300
 8005900:	00160300 	.word	0x00160300
 8005904:	00170300 	.word	0x00170300
 8005908:	00180300 	.word	0x00180300
 800590c:	00190300 	.word	0x00190300
 8005910:	001a0300 	.word	0x001a0300
 8005914:	001b0300 	.word	0x001b0300
 8005918:	001c0300 	.word	0x001c0300
 800591c:	001d0300 	.word	0x001d0300
 8005920:	001e0300 	.word	0x001e0300
 8005924:	001f0300 	.word	0x001f0300
 8005928:	080113d8 	.word	0x080113d8
 800592c:	40007000 	.word	0x40007000
 8005930:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0aa      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594c:	d10d      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	4911      	ldr	r1, [pc, #68]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005964:	4313      	orrs	r3, r2
 8005966:	608b      	str	r3, [r1, #8]
 8005968:	e005      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800596a:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	4a0e      	ldr	r2, [pc, #56]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005970:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005974:	6093      	str	r3, [r2, #8]
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005982:	4909      	ldr	r1, [pc, #36]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005984:	4313      	orrs	r3, r2
 8005986:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	7d1a      	ldrb	r2, [r3, #20]
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800599a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800
 80059ac:	424711e0 	.word	0x424711e0

080059b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e0c4      	b.n	8005b50 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a63      	ldr	r2, [pc, #396]	; (8005b58 <HAL_RTC_Init+0x1a8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_RTC_Init+0x2a>
 80059d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80059d4:	4861      	ldr	r0, [pc, #388]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 80059d6:	f7fb fb67 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d008      	beq.n	80059f4 <HAL_RTC_Init+0x44>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <HAL_RTC_Init+0x44>
 80059ea:	f240 1105 	movw	r1, #261	; 0x105
 80059ee:	485b      	ldr	r0, [pc, #364]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 80059f0:	f7fb fb5a 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b7f      	cmp	r3, #127	; 0x7f
 80059fa:	d904      	bls.n	8005a06 <HAL_RTC_Init+0x56>
 80059fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005a00:	4856      	ldr	r0, [pc, #344]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 8005a02:	f7fb fb51 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0e:	d304      	bcc.n	8005a1a <HAL_RTC_Init+0x6a>
 8005a10:	f240 1107 	movw	r1, #263	; 0x107
 8005a14:	4851      	ldr	r0, [pc, #324]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 8005a16:	f7fb fb47 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <HAL_RTC_Init+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a2a:	d00e      	beq.n	8005a4a <HAL_RTC_Init+0x9a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a34:	d009      	beq.n	8005a4a <HAL_RTC_Init+0x9a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a3e:	d004      	beq.n	8005a4a <HAL_RTC_Init+0x9a>
 8005a40:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005a44:	4845      	ldr	r0, [pc, #276]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 8005a46:	f7fb fb2f 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RTC_Init+0xb6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5a:	d004      	beq.n	8005a66 <HAL_RTC_Init+0xb6>
 8005a5c:	f240 1109 	movw	r1, #265	; 0x109
 8005a60:	483e      	ldr	r0, [pc, #248]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 8005a62:	f7fb fb21 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <HAL_RTC_Init+0xd2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a76:	d004      	beq.n	8005a82 <HAL_RTC_Init+0xd2>
 8005a78:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005a7c:	4837      	ldr	r0, [pc, #220]	; (8005b5c <HAL_RTC_Init+0x1ac>)
 8005a7e:	f7fb fb13 	bl	80010a8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	7f5b      	ldrb	r3, [r3, #29]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fb6e 	bl	8001174 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	22ca      	movs	r2, #202	; 0xca
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2253      	movs	r2, #83	; 0x53
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fad2 	bl	8006058 <RTC_EnterInitMode>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d12c      	bne.n	8005b18 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68d2      	ldr	r2, [r2, #12]
 8005af8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6919      	ldr	r1, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	041a      	lsls	r2, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fad9 	bl	80060c6 <RTC_ExitInitMode>
 8005b14:	4603      	mov	r3, r0
 8005b16:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d113      	bne.n	8005b46 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	22ff      	movs	r2, #255	; 0xff
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40002800 	.word	0x40002800
 8005b5c:	08011414 	.word	0x08011414

08005b60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_RTC_SetTime+0x26>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d004      	beq.n	8005b86 <HAL_RTC_SetTime+0x26>
 8005b7c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005b80:	489a      	ldr	r0, [pc, #616]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005b82:	f7fb fa91 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8e:	d00d      	beq.n	8005bac <HAL_RTC_SetTime+0x4c>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d008      	beq.n	8005bac <HAL_RTC_SetTime+0x4c>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d004      	beq.n	8005bac <HAL_RTC_SetTime+0x4c>
 8005ba2:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005ba6:	4891      	ldr	r0, [pc, #580]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005ba8:	f7fb fa7e 	bl	80010a8 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_RTC_SetTime+0x68>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RTC_SetTime+0x68>
 8005bbe:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005bc2:	488a      	ldr	r0, [pc, #552]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005bc4:	f7fb fa70 	bl	80010a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	7f1b      	ldrb	r3, [r3, #28]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_RTC_SetTime+0x74>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e107      	b.n	8005de4 <HAL_RTC_SetTime+0x284>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d15c      	bne.n	8005ca0 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01a      	beq.n	8005c2a <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_RTC_SetTime+0xa4>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d904      	bls.n	8005c0e <HAL_RTC_SetTime+0xae>
 8005c04:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005c08:	4878      	ldr	r0, [pc, #480]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005c0a:	f7fb fa4d 	bl	80010a8 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	78db      	ldrb	r3, [r3, #3]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d015      	beq.n	8005c42 <HAL_RTC_SetTime+0xe2>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	78db      	ldrb	r3, [r3, #3]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d011      	beq.n	8005c42 <HAL_RTC_SetTime+0xe2>
 8005c1e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005c22:	4872      	ldr	r0, [pc, #456]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005c24:	f7fb fa40 	bl	80010a8 <assert_failed>
 8005c28:	e00b      	b.n	8005c42 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b17      	cmp	r3, #23
 8005c36:	d904      	bls.n	8005c42 <HAL_RTC_SetTime+0xe2>
 8005c38:	f240 21c7 	movw	r1, #711	; 0x2c7
 8005c3c:	486b      	ldr	r0, [pc, #428]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005c3e:	f7fb fa33 	bl	80010a8 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	2b3b      	cmp	r3, #59	; 0x3b
 8005c48:	d904      	bls.n	8005c54 <HAL_RTC_SetTime+0xf4>
 8005c4a:	f240 21c9 	movw	r1, #713	; 0x2c9
 8005c4e:	4867      	ldr	r0, [pc, #412]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005c50:	f7fb fa2a 	bl	80010a8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	789b      	ldrb	r3, [r3, #2]
 8005c58:	2b3b      	cmp	r3, #59	; 0x3b
 8005c5a:	d904      	bls.n	8005c66 <HAL_RTC_SetTime+0x106>
 8005c5c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005c60:	4862      	ldr	r0, [pc, #392]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005c62:	f7fb fa21 	bl	80010a8 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fa50 	bl	8006110 <RTC_ByteToBcd2>
 8005c70:	4603      	mov	r3, r0
 8005c72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fa49 	bl	8006110 <RTC_ByteToBcd2>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	789b      	ldrb	r3, [r3, #2]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fa41 	bl	8006110 <RTC_ByteToBcd2>
 8005c8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e062      	b.n	8005d66 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d022      	beq.n	8005cf4 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fa49 	bl	800614a <RTC_Bcd2ToByte>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_RTC_SetTime+0x16e>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fa41 	bl	800614a <RTC_Bcd2ToByte>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b0c      	cmp	r3, #12
 8005ccc:	d904      	bls.n	8005cd8 <HAL_RTC_SetTime+0x178>
 8005cce:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005cd2:	4846      	ldr	r0, [pc, #280]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005cd4:	f7fb f9e8 	bl	80010a8 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	78db      	ldrb	r3, [r3, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <HAL_RTC_SetTime+0x1b4>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	78db      	ldrb	r3, [r3, #3]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d015      	beq.n	8005d14 <HAL_RTC_SetTime+0x1b4>
 8005ce8:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005cec:	483f      	ldr	r0, [pc, #252]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005cee:	f7fb f9db 	bl	80010a8 <assert_failed>
 8005cf2:	e00f      	b.n	8005d14 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fa23 	bl	800614a <RTC_Bcd2ToByte>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b17      	cmp	r3, #23
 8005d08:	d904      	bls.n	8005d14 <HAL_RTC_SetTime+0x1b4>
 8005d0a:	f240 21db 	movw	r1, #731	; 0x2db
 8005d0e:	4837      	ldr	r0, [pc, #220]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005d10:	f7fb f9ca 	bl	80010a8 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fa16 	bl	800614a <RTC_Bcd2ToByte>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b3b      	cmp	r3, #59	; 0x3b
 8005d22:	d904      	bls.n	8005d2e <HAL_RTC_SetTime+0x1ce>
 8005d24:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005d28:	4830      	ldr	r0, [pc, #192]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005d2a:	f7fb f9bd 	bl	80010a8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	789b      	ldrb	r3, [r3, #2]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fa09 	bl	800614a <RTC_Bcd2ToByte>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b3b      	cmp	r3, #59	; 0x3b
 8005d3c:	d904      	bls.n	8005d48 <HAL_RTC_SetTime+0x1e8>
 8005d3e:	f240 21de 	movw	r1, #734	; 0x2de
 8005d42:	482a      	ldr	r0, [pc, #168]	; (8005dec <HAL_RTC_SetTime+0x28c>)
 8005d44:	f7fb f9b0 	bl	80010a8 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d54:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	78db      	ldrb	r3, [r3, #3]
 8005d60:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	22ca      	movs	r2, #202	; 0xca
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2253      	movs	r2, #83	; 0x53
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f96e 	bl	8006058 <RTC_EnterInitMode>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d120      	bne.n	8005dc8 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d90:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d94:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005da4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6899      	ldr	r1, [r3, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f981 	bl	80060c6 <RTC_ExitInitMode>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005dc8:	7cfb      	ldrb	r3, [r7, #19]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	22ff      	movs	r2, #255	; 0xff
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	771a      	strb	r2, [r3, #28]

  return status;
 8005de2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd90      	pop	{r4, r7, pc}
 8005dec:	08011414 	.word	0x08011414

08005df0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <HAL_RTC_SetDate+0x26>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d004      	beq.n	8005e16 <HAL_RTC_SetDate+0x26>
 8005e0c:	f240 3153 	movw	r1, #851	; 0x353
 8005e10:	487c      	ldr	r0, [pc, #496]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005e12:	f7fb f949 	bl	80010a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	7f1b      	ldrb	r3, [r3, #28]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_RTC_SetDate+0x32>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0ec      	b.n	8005ffc <HAL_RTC_SetDate+0x20c>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10e      	bne.n	8005e52 <HAL_RTC_SetDate+0x62>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	f023 0310 	bic.w	r3, r3, #16
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	330a      	adds	r3, #10
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d01c      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d018      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d014      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d010      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d00c      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d008      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b07      	cmp	r3, #7
 8005e88:	d004      	beq.n	8005e94 <HAL_RTC_SetDate+0xa4>
 8005e8a:	f240 315f 	movw	r1, #863	; 0x35f
 8005e8e:	485d      	ldr	r0, [pc, #372]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005e90:	f7fb f90a 	bl	80010a8 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d13f      	bne.n	8005f1a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	78db      	ldrb	r3, [r3, #3]
 8005e9e:	2b63      	cmp	r3, #99	; 0x63
 8005ea0:	d904      	bls.n	8005eac <HAL_RTC_SetDate+0xbc>
 8005ea2:	f240 3163 	movw	r1, #867	; 0x363
 8005ea6:	4857      	ldr	r0, [pc, #348]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005ea8:	f7fb f8fe 	bl	80010a8 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RTC_SetDate+0xcc>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d904      	bls.n	8005ec6 <HAL_RTC_SetDate+0xd6>
 8005ebc:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005ec0:	4850      	ldr	r0, [pc, #320]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005ec2:	f7fb f8f1 	bl	80010a8 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	789b      	ldrb	r3, [r3, #2]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RTC_SetDate+0xe6>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	789b      	ldrb	r3, [r3, #2]
 8005ed2:	2b1f      	cmp	r3, #31
 8005ed4:	d904      	bls.n	8005ee0 <HAL_RTC_SetDate+0xf0>
 8005ed6:	f240 3165 	movw	r1, #869	; 0x365
 8005eda:	484a      	ldr	r0, [pc, #296]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005edc:	f7fb f8e4 	bl	80010a8 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 f913 	bl	8006110 <RTC_ByteToBcd2>
 8005eea:	4603      	mov	r3, r0
 8005eec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f90c 	bl	8006110 <RTC_ByteToBcd2>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005efc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f904 	bl	8006110 <RTC_ByteToBcd2>
 8005f08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e045      	b.n	8005fa6 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	78db      	ldrb	r3, [r3, #3]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f913 	bl	800614a <RTC_Bcd2ToByte>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b63      	cmp	r3, #99	; 0x63
 8005f28:	d904      	bls.n	8005f34 <HAL_RTC_SetDate+0x144>
 8005f2a:	f240 316e 	movw	r1, #878	; 0x36e
 8005f2e:	4835      	ldr	r0, [pc, #212]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005f30:	f7fb f8ba 	bl	80010a8 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f906 	bl	800614a <RTC_Bcd2ToByte>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <HAL_RTC_SetDate+0x164>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f8fe 	bl	800614a <RTC_Bcd2ToByte>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b0c      	cmp	r3, #12
 8005f52:	d904      	bls.n	8005f5e <HAL_RTC_SetDate+0x16e>
 8005f54:	f240 316f 	movw	r1, #879	; 0x36f
 8005f58:	482a      	ldr	r0, [pc, #168]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005f5a:	f7fb f8a5 	bl	80010a8 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	789b      	ldrb	r3, [r3, #2]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f8f1 	bl	800614a <RTC_Bcd2ToByte>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <HAL_RTC_SetDate+0x18e>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	789b      	ldrb	r3, [r3, #2]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f8e9 	bl	800614a <RTC_Bcd2ToByte>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b1f      	cmp	r3, #31
 8005f7c:	d904      	bls.n	8005f88 <HAL_RTC_SetDate+0x198>
 8005f7e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005f82:	4820      	ldr	r0, [pc, #128]	; (8006004 <HAL_RTC_SetDate+0x214>)
 8005f84:	f7fb f890 	bl	80010a8 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	78db      	ldrb	r3, [r3, #3]
 8005f8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f94:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	22ca      	movs	r2, #202	; 0xca
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2253      	movs	r2, #83	; 0x53
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f84e 	bl	8006058 <RTC_EnterInitMode>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fc0:	7cfb      	ldrb	r3, [r7, #19]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fd4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f875 	bl	80060c6 <RTC_ExitInitMode>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	771a      	strb	r2, [r3, #28]

  return status;
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}
 8006004:	08011414 	.word	0x08011414

08006008 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006022:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006024:	f7fb ffec 	bl	8002000 <HAL_GetTick>
 8006028:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800602a:	e009      	b.n	8006040 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800602c:	f7fb ffe8 	bl	8002000 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800603a:	d901      	bls.n	8006040 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e007      	b.n	8006050 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ee      	beq.n	800602c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d122      	bne.n	80060bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006084:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006086:	f7fb ffbb 	bl	8002000 <HAL_GetTick>
 800608a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800608c:	e00c      	b.n	80060a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800608e:	f7fb ffb7 	bl	8002000 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800609c:	d904      	bls.n	80060a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2204      	movs	r2, #4
 80060a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <RTC_EnterInitMode+0x64>
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d1e8      	bne.n	800608e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff89 	bl	8006008 <HAL_RTC_WaitForSynchro>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d004      	beq.n	8006106 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2204      	movs	r2, #4
 8006100:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006106:	7bfb      	ldrb	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800611e:	e005      	b.n	800612c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	3301      	adds	r3, #1
 8006124:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	3b0a      	subs	r3, #10
 800612a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b09      	cmp	r3, #9
 8006130:	d8f6      	bhi.n	8006120 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	b2da      	uxtb	r2, r3
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	4313      	orrs	r3, r2
 800613c:	b2db      	uxtb	r3, r3
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	4603      	mov	r3, r0
 8006152:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	0092      	lsls	r2, r2, #2
 8006162:	4413      	add	r3, r2
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	b2da      	uxtb	r2, r3
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	4413      	add	r3, r2
 8006174:	b2db      	uxtb	r3, r3
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e18c      	b.n	80064b0 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a75      	ldr	r2, [pc, #468]	; (8006370 <HAL_SPI_Init+0x1ec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d018      	beq.n	80061d2 <HAL_SPI_Init+0x4e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a73      	ldr	r2, [pc, #460]	; (8006374 <HAL_SPI_Init+0x1f0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <HAL_SPI_Init+0x4e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a72      	ldr	r2, [pc, #456]	; (8006378 <HAL_SPI_Init+0x1f4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00e      	beq.n	80061d2 <HAL_SPI_Init+0x4e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a70      	ldr	r2, [pc, #448]	; (800637c <HAL_SPI_Init+0x1f8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d009      	beq.n	80061d2 <HAL_SPI_Init+0x4e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6f      	ldr	r2, [pc, #444]	; (8006380 <HAL_SPI_Init+0x1fc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <HAL_SPI_Init+0x4e>
 80061c8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061cc:	486d      	ldr	r0, [pc, #436]	; (8006384 <HAL_SPI_Init+0x200>)
 80061ce:	f7fa ff6b 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_SPI_Init+0x6a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061e2:	d004      	beq.n	80061ee <HAL_SPI_Init+0x6a>
 80061e4:	f240 1141 	movw	r1, #321	; 0x141
 80061e8:	4866      	ldr	r0, [pc, #408]	; (8006384 <HAL_SPI_Init+0x200>)
 80061ea:	f7fa ff5d 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <HAL_SPI_Init+0x90>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fe:	d009      	beq.n	8006214 <HAL_SPI_Init+0x90>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006208:	d004      	beq.n	8006214 <HAL_SPI_Init+0x90>
 800620a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800620e:	485d      	ldr	r0, [pc, #372]	; (8006384 <HAL_SPI_Init+0x200>)
 8006210:	f7fa ff4a 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621c:	d008      	beq.n	8006230 <HAL_SPI_Init+0xac>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_SPI_Init+0xac>
 8006226:	f240 1143 	movw	r1, #323	; 0x143
 800622a:	4856      	ldr	r0, [pc, #344]	; (8006384 <HAL_SPI_Init+0x200>)
 800622c:	f7fa ff3c 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006238:	d00d      	beq.n	8006256 <HAL_SPI_Init+0xd2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_SPI_Init+0xd2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800624a:	d004      	beq.n	8006256 <HAL_SPI_Init+0xd2>
 800624c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006250:	484c      	ldr	r0, [pc, #304]	; (8006384 <HAL_SPI_Init+0x200>)
 8006252:	f7fa ff29 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d020      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	2b08      	cmp	r3, #8
 8006264:	d01c      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	2b10      	cmp	r3, #16
 800626c:	d018      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	2b18      	cmp	r3, #24
 8006274:	d014      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	2b20      	cmp	r3, #32
 800627c:	d010      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	2b28      	cmp	r3, #40	; 0x28
 8006284:	d00c      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b30      	cmp	r3, #48	; 0x30
 800628c:	d008      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b38      	cmp	r3, #56	; 0x38
 8006294:	d004      	beq.n	80062a0 <HAL_SPI_Init+0x11c>
 8006296:	f240 1145 	movw	r1, #325	; 0x145
 800629a:	483a      	ldr	r0, [pc, #232]	; (8006384 <HAL_SPI_Init+0x200>)
 800629c:	f7fa ff04 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_SPI_Init+0x136>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d004      	beq.n	80062ba <HAL_SPI_Init+0x136>
 80062b0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80062b4:	4833      	ldr	r0, [pc, #204]	; (8006384 <HAL_SPI_Init+0x200>)
 80062b6:	f7fa fef7 	bl	80010a8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_SPI_Init+0x150>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d004      	beq.n	80062d4 <HAL_SPI_Init+0x150>
 80062ca:	f240 1147 	movw	r1, #327	; 0x147
 80062ce:	482d      	ldr	r0, [pc, #180]	; (8006384 <HAL_SPI_Init+0x200>)
 80062d0:	f7fa feea 	bl	80010a8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d155      	bne.n	8006388 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_SPI_Init+0x172>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d004      	beq.n	80062f6 <HAL_SPI_Init+0x172>
 80062ec:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80062f0:	4824      	ldr	r0, [pc, #144]	; (8006384 <HAL_SPI_Init+0x200>)
 80062f2:	f7fa fed9 	bl	80010a8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_SPI_Init+0x18c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d004      	beq.n	8006310 <HAL_SPI_Init+0x18c>
 8006306:	f240 114b 	movw	r1, #331	; 0x14b
 800630a:	481e      	ldr	r0, [pc, #120]	; (8006384 <HAL_SPI_Init+0x200>)
 800630c:	f7fa fecc 	bl	80010a8 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006318:	d125      	bne.n	8006366 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d05d      	beq.n	80063de <HAL_SPI_Init+0x25a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	2b08      	cmp	r3, #8
 8006328:	d059      	beq.n	80063de <HAL_SPI_Init+0x25a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b10      	cmp	r3, #16
 8006330:	d055      	beq.n	80063de <HAL_SPI_Init+0x25a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b18      	cmp	r3, #24
 8006338:	d051      	beq.n	80063de <HAL_SPI_Init+0x25a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	2b20      	cmp	r3, #32
 8006340:	d04d      	beq.n	80063de <HAL_SPI_Init+0x25a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	2b28      	cmp	r3, #40	; 0x28
 8006348:	d049      	beq.n	80063de <HAL_SPI_Init+0x25a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d045      	beq.n	80063de <HAL_SPI_Init+0x25a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	2b38      	cmp	r3, #56	; 0x38
 8006358:	d041      	beq.n	80063de <HAL_SPI_Init+0x25a>
 800635a:	f240 114f 	movw	r1, #335	; 0x14f
 800635e:	4809      	ldr	r0, [pc, #36]	; (8006384 <HAL_SPI_Init+0x200>)
 8006360:	f7fa fea2 	bl	80010a8 <assert_failed>
 8006364:	e03b      	b.n	80063de <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	61da      	str	r2, [r3, #28]
 800636c:	e037      	b.n	80063de <HAL_SPI_Init+0x25a>
 800636e:	bf00      	nop
 8006370:	40013000 	.word	0x40013000
 8006374:	40003800 	.word	0x40003800
 8006378:	40003c00 	.word	0x40003c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40015000 	.word	0x40015000
 8006384:	0801144c 	.word	0x0801144c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d020      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d01c      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	2b10      	cmp	r3, #16
 800639e:	d018      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	2b18      	cmp	r3, #24
 80063a6:	d014      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d010      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	2b28      	cmp	r3, #40	; 0x28
 80063b6:	d00c      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b30      	cmp	r3, #48	; 0x30
 80063be:	d008      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	2b38      	cmp	r3, #56	; 0x38
 80063c6:	d004      	beq.n	80063d2 <HAL_SPI_Init+0x24e>
 80063c8:	f240 1159 	movw	r1, #345	; 0x159
 80063cc:	483a      	ldr	r0, [pc, #232]	; (80064b8 <HAL_SPI_Init+0x334>)
 80063ce:	f7fa fe6b 	bl	80010a8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa ff1d 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006414:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	ea42 0103 	orr.w	r1, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 0104 	and.w	r1, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0210 	and.w	r2, r3, #16
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	0801144c 	.word	0x0801144c

080064bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <HAL_SPI_Transmit+0x30>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e0:	d004      	beq.n	80064ec <HAL_SPI_Transmit+0x30>
 80064e2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80064e6:	4880      	ldr	r0, [pc, #512]	; (80066e8 <HAL_SPI_Transmit+0x22c>)
 80064e8:	f7fa fdde 	bl	80010a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_SPI_Transmit+0x3e>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e128      	b.n	800674c <HAL_SPI_Transmit+0x290>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006502:	f7fb fd7d 	bl	8002000 <HAL_GetTick>
 8006506:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d002      	beq.n	800651e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006518:	2302      	movs	r3, #2
 800651a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800651c:	e10d      	b.n	800673a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_SPI_Transmit+0x6e>
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800652e:	e104      	b.n	800673a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2203      	movs	r2, #3
 8006534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006576:	d10f      	bne.n	8006598 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006586:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006596:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d007      	beq.n	80065b6 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065be:	d14b      	bne.n	8006658 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_SPI_Transmit+0x112>
 80065c8:	8afb      	ldrh	r3, [r7, #22]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d13e      	bne.n	800664c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	881a      	ldrh	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	1c9a      	adds	r2, r3, #2
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065f2:	e02b      	b.n	800664c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d112      	bne.n	8006628 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	881a      	ldrh	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	1c9a      	adds	r2, r3, #2
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	86da      	strh	r2, [r3, #54]	; 0x36
 8006626:	e011      	b.n	800664c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006628:	f7fb fcea 	bl	8002000 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d803      	bhi.n	8006640 <HAL_SPI_Transmit+0x184>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d102      	bne.n	8006646 <HAL_SPI_Transmit+0x18a>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	77fb      	strb	r3, [r7, #31]
          goto error;
 800664a:	e076      	b.n	800673a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1ce      	bne.n	80065f4 <HAL_SPI_Transmit+0x138>
 8006656:	e04e      	b.n	80066f6 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_SPI_Transmit+0x1aa>
 8006660:	8afb      	ldrh	r3, [r7, #22]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d142      	bne.n	80066ec <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800668c:	e02e      	b.n	80066ec <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d113      	bne.n	80066c4 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80066c2:	e013      	b.n	80066ec <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c4:	f7fb fc9c 	bl	8002000 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d803      	bhi.n	80066dc <HAL_SPI_Transmit+0x220>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d102      	bne.n	80066e2 <HAL_SPI_Transmit+0x226>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066e6:	e028      	b.n	800673a <HAL_SPI_Transmit+0x27e>
 80066e8:	0801144c 	.word	0x0801144c
    while (hspi->TxXferCount > 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1cb      	bne.n	800668e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8b2 	bl	8006864 <SPI_EndRxTxTransaction>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e000      	b.n	800673a <HAL_SPI_Transmit+0x27e>
  }

error:
 8006738:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800674a:	7ffb      	ldrb	r3, [r7, #31]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006764:	f7fb fc4c 	bl	8002000 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4413      	add	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006774:	f7fb fc44 	bl	8002000 <HAL_GetTick>
 8006778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800677a:	4b39      	ldr	r3, [pc, #228]	; (8006860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	015b      	lsls	r3, r3, #5
 8006780:	0d1b      	lsrs	r3, r3, #20
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678a:	e054      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d050      	beq.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006794:	f7fb fc34 	bl	8002000 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d13d      	bne.n	8006826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c2:	d111      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067cc:	d004      	beq.n	80067d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d107      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f0:	d10f      	bne.n	8006812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e017      	b.n	8006856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	3b01      	subs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	429a      	cmp	r2, r3
 8006852:	d19b      	bne.n	800678c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000150 	.word	0x20000150

08006864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <SPI_EndRxTxTransaction+0x7c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1b      	ldr	r2, [pc, #108]	; (80068e4 <SPI_EndRxTxTransaction+0x80>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	0d5b      	lsrs	r3, r3, #21
 800687c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800688e:	d112      	bne.n	80068b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff ff5a 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d016      	beq.n	80068d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f043 0220 	orr.w	r2, r3, #32
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00f      	b.n	80068d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	3b01      	subs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068cc:	2b80      	cmp	r3, #128	; 0x80
 80068ce:	d0f2      	beq.n	80068b6 <SPI_EndRxTxTransaction+0x52>
 80068d0:	e000      	b.n	80068d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80068d2:	bf00      	nop
  }

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000150 	.word	0x20000150
 80068e4:	165e9f81 	.word	0x165e9f81

080068e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e0a7      	b.n	8006a4a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a55      	ldr	r2, [pc, #340]	; (8006a54 <HAL_TIM_Base_Init+0x16c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d027      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690c:	d022      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a51      	ldr	r2, [pc, #324]	; (8006a58 <HAL_TIM_Base_Init+0x170>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d01d      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a4f      	ldr	r2, [pc, #316]	; (8006a5c <HAL_TIM_Base_Init+0x174>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d018      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a4e      	ldr	r2, [pc, #312]	; (8006a60 <HAL_TIM_Base_Init+0x178>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d013      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a4c      	ldr	r2, [pc, #304]	; (8006a64 <HAL_TIM_Base_Init+0x17c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00e      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a4b      	ldr	r2, [pc, #300]	; (8006a68 <HAL_TIM_Base_Init+0x180>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a49      	ldr	r2, [pc, #292]	; (8006a6c <HAL_TIM_Base_Init+0x184>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_TIM_Base_Init+0x6c>
 800694a:	f240 1113 	movw	r1, #275	; 0x113
 800694e:	4848      	ldr	r0, [pc, #288]	; (8006a70 <HAL_TIM_Base_Init+0x188>)
 8006950:	f7fa fbaa 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d014      	beq.n	8006986 <HAL_TIM_Base_Init+0x9e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b10      	cmp	r3, #16
 8006962:	d010      	beq.n	8006986 <HAL_TIM_Base_Init+0x9e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b20      	cmp	r3, #32
 800696a:	d00c      	beq.n	8006986 <HAL_TIM_Base_Init+0x9e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d008      	beq.n	8006986 <HAL_TIM_Base_Init+0x9e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b60      	cmp	r3, #96	; 0x60
 800697a:	d004      	beq.n	8006986 <HAL_TIM_Base_Init+0x9e>
 800697c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006980:	483b      	ldr	r0, [pc, #236]	; (8006a70 <HAL_TIM_Base_Init+0x188>)
 8006982:	f7fa fb91 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <HAL_TIM_Base_Init+0xc4>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006996:	d009      	beq.n	80069ac <HAL_TIM_Base_Init+0xc4>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a0:	d004      	beq.n	80069ac <HAL_TIM_Base_Init+0xc4>
 80069a2:	f240 1115 	movw	r1, #277	; 0x115
 80069a6:	4832      	ldr	r0, [pc, #200]	; (8006a70 <HAL_TIM_Base_Init+0x188>)
 80069a8:	f7fa fb7e 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_TIM_Base_Init+0xde>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b80      	cmp	r3, #128	; 0x80
 80069ba:	d004      	beq.n	80069c6 <HAL_TIM_Base_Init+0xde>
 80069bc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80069c0:	482b      	ldr	r0, [pc, #172]	; (8006a70 <HAL_TIM_Base_Init+0x188>)
 80069c2:	f7fa fb71 	bl	80010a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fb fa2c 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f001 fb0a 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	08011484 	.word	0x08011484

08006a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a3d      	ldr	r2, [pc, #244]	; (8006b78 <HAL_TIM_Base_Start_IT+0x104>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d027      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d022      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a39      	ldr	r2, [pc, #228]	; (8006b7c <HAL_TIM_Base_Start_IT+0x108>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a38      	ldr	r2, [pc, #224]	; (8006b80 <HAL_TIM_Base_Start_IT+0x10c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a36      	ldr	r2, [pc, #216]	; (8006b84 <HAL_TIM_Base_Start_IT+0x110>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a35      	ldr	r2, [pc, #212]	; (8006b88 <HAL_TIM_Base_Start_IT+0x114>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a33      	ldr	r2, [pc, #204]	; (8006b8c <HAL_TIM_Base_Start_IT+0x118>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a32      	ldr	r2, [pc, #200]	; (8006b90 <HAL_TIM_Base_Start_IT+0x11c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x62>
 8006acc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006ad0:	4830      	ldr	r0, [pc, #192]	; (8006b94 <HAL_TIM_Base_Start_IT+0x120>)
 8006ad2:	f7fa fae9 	bl	80010a8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d001      	beq.n	8006ae6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e044      	b.n	8006b70 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1d      	ldr	r2, [pc, #116]	; (8006b78 <HAL_TIM_Base_Start_IT+0x104>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d018      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0xc6>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d013      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0xc6>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <HAL_TIM_Base_Start_IT+0x108>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00e      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0xc6>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <HAL_TIM_Base_Start_IT+0x10c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0xc6>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <HAL_TIM_Base_Start_IT+0x110>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0xc6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <HAL_TIM_Base_Start_IT+0x114>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d111      	bne.n	8006b5e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b06      	cmp	r3, #6
 8006b4a:	d010      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5c:	e007      	b.n	8006b6e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0201 	orr.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800
 8006b94:	08011484 	.word	0x08011484

08006b98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e0a7      	b.n	8006cfa <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a55      	ldr	r2, [pc, #340]	; (8006d04 <HAL_TIM_PWM_Init+0x16c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d027      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d022      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a51      	ldr	r2, [pc, #324]	; (8006d08 <HAL_TIM_PWM_Init+0x170>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d01d      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a4f      	ldr	r2, [pc, #316]	; (8006d0c <HAL_TIM_PWM_Init+0x174>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d018      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4e      	ldr	r2, [pc, #312]	; (8006d10 <HAL_TIM_PWM_Init+0x178>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a4c      	ldr	r2, [pc, #304]	; (8006d14 <HAL_TIM_PWM_Init+0x17c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4b      	ldr	r2, [pc, #300]	; (8006d18 <HAL_TIM_PWM_Init+0x180>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d009      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a49      	ldr	r2, [pc, #292]	; (8006d1c <HAL_TIM_PWM_Init+0x184>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIM_PWM_Init+0x6c>
 8006bfa:	f240 5129 	movw	r1, #1321	; 0x529
 8006bfe:	4848      	ldr	r0, [pc, #288]	; (8006d20 <HAL_TIM_PWM_Init+0x188>)
 8006c00:	f7fa fa52 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d014      	beq.n	8006c36 <HAL_TIM_PWM_Init+0x9e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d010      	beq.n	8006c36 <HAL_TIM_PWM_Init+0x9e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d00c      	beq.n	8006c36 <HAL_TIM_PWM_Init+0x9e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d008      	beq.n	8006c36 <HAL_TIM_PWM_Init+0x9e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b60      	cmp	r3, #96	; 0x60
 8006c2a:	d004      	beq.n	8006c36 <HAL_TIM_PWM_Init+0x9e>
 8006c2c:	f240 512a 	movw	r1, #1322	; 0x52a
 8006c30:	483b      	ldr	r0, [pc, #236]	; (8006d20 <HAL_TIM_PWM_Init+0x188>)
 8006c32:	f7fa fa39 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00e      	beq.n	8006c5c <HAL_TIM_PWM_Init+0xc4>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c46:	d009      	beq.n	8006c5c <HAL_TIM_PWM_Init+0xc4>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c50:	d004      	beq.n	8006c5c <HAL_TIM_PWM_Init+0xc4>
 8006c52:	f240 512b 	movw	r1, #1323	; 0x52b
 8006c56:	4832      	ldr	r0, [pc, #200]	; (8006d20 <HAL_TIM_PWM_Init+0x188>)
 8006c58:	f7fa fa26 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_TIM_PWM_Init+0xde>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIM_PWM_Init+0xde>
 8006c6c:	f240 512c 	movw	r1, #1324	; 0x52c
 8006c70:	482b      	ldr	r0, [pc, #172]	; (8006d20 <HAL_TIM_PWM_Init+0x188>)
 8006c72:	f7fa fa19 	bl	80010a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f84a 	bl	8006d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f001 f9b2 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	40000800 	.word	0x40000800
 8006d10:	40000c00 	.word	0x40000c00
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800
 8006d20:	08011484 	.word	0x08011484

08006d24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a8a      	ldr	r2, [pc, #552]	; (8006f70 <HAL_TIM_PWM_Start+0x238>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10b      	bne.n	8006d64 <HAL_TIM_PWM_Start+0x2c>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d06c      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d069      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d066      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b0c      	cmp	r3, #12
 8006d62:	d063      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6c:	d10b      	bne.n	8006d86 <HAL_TIM_PWM_Start+0x4e>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d05b      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d058      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d055      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b0c      	cmp	r3, #12
 8006d84:	d052      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a7a      	ldr	r2, [pc, #488]	; (8006f74 <HAL_TIM_PWM_Start+0x23c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10b      	bne.n	8006da8 <HAL_TIM_PWM_Start+0x70>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d04a      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d047      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d044      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d041      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a72      	ldr	r2, [pc, #456]	; (8006f78 <HAL_TIM_PWM_Start+0x240>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10b      	bne.n	8006dca <HAL_TIM_PWM_Start+0x92>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d039      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d036      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d033      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d030      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6b      	ldr	r2, [pc, #428]	; (8006f7c <HAL_TIM_PWM_Start+0x244>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d10b      	bne.n	8006dec <HAL_TIM_PWM_Start+0xb4>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d025      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d022      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d01f      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a63      	ldr	r2, [pc, #396]	; (8006f80 <HAL_TIM_PWM_Start+0x248>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d105      	bne.n	8006e02 <HAL_TIM_PWM_Start+0xca>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d017      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d014      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a5f      	ldr	r2, [pc, #380]	; (8006f84 <HAL_TIM_PWM_Start+0x24c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d102      	bne.n	8006e12 <HAL_TIM_PWM_Start+0xda>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a5c      	ldr	r2, [pc, #368]	; (8006f88 <HAL_TIM_PWM_Start+0x250>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d102      	bne.n	8006e22 <HAL_TIM_PWM_Start+0xea>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <HAL_TIM_PWM_Start+0xf4>
 8006e22:	f240 51af 	movw	r1, #1455	; 0x5af
 8006e26:	4859      	ldr	r0, [pc, #356]	; (8006f8c <HAL_TIM_PWM_Start+0x254>)
 8006e28:	f7fa f93e 	bl	80010a8 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <HAL_TIM_PWM_Start+0x10e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	e022      	b.n	8006e8c <HAL_TIM_PWM_Start+0x154>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d109      	bne.n	8006e60 <HAL_TIM_PWM_Start+0x128>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	bf14      	ite	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	2300      	moveq	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e015      	b.n	8006e8c <HAL_TIM_PWM_Start+0x154>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d109      	bne.n	8006e7a <HAL_TIM_PWM_Start+0x142>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e008      	b.n	8006e8c <HAL_TIM_PWM_Start+0x154>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	bf14      	ite	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	2300      	moveq	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e068      	b.n	8006f66 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <HAL_TIM_PWM_Start+0x16c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea2:	e013      	b.n	8006ecc <HAL_TIM_PWM_Start+0x194>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d104      	bne.n	8006eb4 <HAL_TIM_PWM_Start+0x17c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb2:	e00b      	b.n	8006ecc <HAL_TIM_PWM_Start+0x194>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d104      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x18c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec2:	e003      	b.n	8006ecc <HAL_TIM_PWM_Start+0x194>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 fbc9 	bl	800866c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a24      	ldr	r2, [pc, #144]	; (8006f70 <HAL_TIM_PWM_Start+0x238>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d107      	bne.n	8006ef4 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <HAL_TIM_PWM_Start+0x238>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d018      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1f8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f06:	d013      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1f8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a19      	ldr	r2, [pc, #100]	; (8006f74 <HAL_TIM_PWM_Start+0x23c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00e      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1f8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_TIM_PWM_Start+0x240>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d009      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1f8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <HAL_TIM_PWM_Start+0x244>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1f8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <HAL_TIM_PWM_Start+0x248>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d111      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b06      	cmp	r3, #6
 8006f40:	d010      	beq.n	8006f64 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f52:	e007      	b.n	8006f64 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40014000 	.word	0x40014000
 8006f84:	40014400 	.word	0x40014400
 8006f88:	40014800 	.word	0x40014800
 8006f8c:	08011484 	.word	0x08011484

08006f90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e18a      	b.n	80072ba <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a78      	ldr	r2, [pc, #480]	; (800718c <HAL_TIM_Encoder_Init+0x1fc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01d      	beq.n	8006fea <HAL_TIM_Encoder_Init+0x5a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d018      	beq.n	8006fea <HAL_TIM_Encoder_Init+0x5a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a74      	ldr	r2, [pc, #464]	; (8007190 <HAL_TIM_Encoder_Init+0x200>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIM_Encoder_Init+0x5a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a73      	ldr	r2, [pc, #460]	; (8007194 <HAL_TIM_Encoder_Init+0x204>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIM_Encoder_Init+0x5a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a71      	ldr	r2, [pc, #452]	; (8007198 <HAL_TIM_Encoder_Init+0x208>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIM_Encoder_Init+0x5a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a70      	ldr	r2, [pc, #448]	; (800719c <HAL_TIM_Encoder_Init+0x20c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIM_Encoder_Init+0x5a>
 8006fe0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006fe4:	486e      	ldr	r0, [pc, #440]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 8006fe6:	f7fa f85f 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d014      	beq.n	800701c <HAL_TIM_Encoder_Init+0x8c>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b10      	cmp	r3, #16
 8006ff8:	d010      	beq.n	800701c <HAL_TIM_Encoder_Init+0x8c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d00c      	beq.n	800701c <HAL_TIM_Encoder_Init+0x8c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d008      	beq.n	800701c <HAL_TIM_Encoder_Init+0x8c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b60      	cmp	r3, #96	; 0x60
 8007010:	d004      	beq.n	800701c <HAL_TIM_Encoder_Init+0x8c>
 8007012:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007016:	4862      	ldr	r0, [pc, #392]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 8007018:	f7fa f846 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00e      	beq.n	8007042 <HAL_TIM_Encoder_Init+0xb2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702c:	d009      	beq.n	8007042 <HAL_TIM_Encoder_Init+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d004      	beq.n	8007042 <HAL_TIM_Encoder_Init+0xb2>
 8007038:	f640 31d3 	movw	r1, #3027	; 0xbd3
 800703c:	4858      	ldr	r0, [pc, #352]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 800703e:	f7fa f833 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_TIM_Encoder_Init+0xcc>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b80      	cmp	r3, #128	; 0x80
 8007050:	d004      	beq.n	800705c <HAL_TIM_Encoder_Init+0xcc>
 8007052:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8007056:	4852      	ldr	r0, [pc, #328]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 8007058:	f7fa f826 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d00c      	beq.n	800707e <HAL_TIM_Encoder_Init+0xee>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d008      	beq.n	800707e <HAL_TIM_Encoder_Init+0xee>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b03      	cmp	r3, #3
 8007072:	d004      	beq.n	800707e <HAL_TIM_Encoder_Init+0xee>
 8007074:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007078:	4849      	ldr	r0, [pc, #292]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 800707a:	f7fa f815 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d00c      	beq.n	80070a0 <HAL_TIM_Encoder_Init+0x110>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d008      	beq.n	80070a0 <HAL_TIM_Encoder_Init+0x110>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b03      	cmp	r3, #3
 8007094:	d004      	beq.n	80070a0 <HAL_TIM_Encoder_Init+0x110>
 8007096:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800709a:	4841      	ldr	r0, [pc, #260]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 800709c:	f7fa f804 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d00c      	beq.n	80070c2 <HAL_TIM_Encoder_Init+0x132>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d008      	beq.n	80070c2 <HAL_TIM_Encoder_Init+0x132>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d004      	beq.n	80070c2 <HAL_TIM_Encoder_Init+0x132>
 80070b8:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80070bc:	4838      	ldr	r0, [pc, #224]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 80070be:	f7f9 fff3 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <HAL_TIM_Encoder_Init+0x14c>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d004      	beq.n	80070dc <HAL_TIM_Encoder_Init+0x14c>
 80070d2:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80070d6:	4832      	ldr	r0, [pc, #200]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 80070d8:	f7f9 ffe6 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <HAL_TIM_Encoder_Init+0x166>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_Encoder_Init+0x166>
 80070ec:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80070f0:	482b      	ldr	r0, [pc, #172]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 80070f2:	f7f9 ffd9 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d010      	beq.n	8007120 <HAL_TIM_Encoder_Init+0x190>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b04      	cmp	r3, #4
 8007104:	d00c      	beq.n	8007120 <HAL_TIM_Encoder_Init+0x190>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b08      	cmp	r3, #8
 800710c:	d008      	beq.n	8007120 <HAL_TIM_Encoder_Init+0x190>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b0c      	cmp	r3, #12
 8007114:	d004      	beq.n	8007120 <HAL_TIM_Encoder_Init+0x190>
 8007116:	f640 31da 	movw	r1, #3034	; 0xbda
 800711a:	4821      	ldr	r0, [pc, #132]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 800711c:	f7f9 ffc4 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <HAL_TIM_Encoder_Init+0x1ba>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	2b04      	cmp	r3, #4
 800712e:	d00c      	beq.n	800714a <HAL_TIM_Encoder_Init+0x1ba>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d008      	beq.n	800714a <HAL_TIM_Encoder_Init+0x1ba>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	2b0c      	cmp	r3, #12
 800713e:	d004      	beq.n	800714a <HAL_TIM_Encoder_Init+0x1ba>
 8007140:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007144:	4816      	ldr	r0, [pc, #88]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 8007146:	f7f9 ffaf 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b0f      	cmp	r3, #15
 8007150:	d904      	bls.n	800715c <HAL_TIM_Encoder_Init+0x1cc>
 8007152:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007156:	4812      	ldr	r0, [pc, #72]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 8007158:	f7f9 ffa6 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	2b0f      	cmp	r3, #15
 8007162:	d904      	bls.n	800716e <HAL_TIM_Encoder_Init+0x1de>
 8007164:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007168:	480d      	ldr	r0, [pc, #52]	; (80071a0 <HAL_TIM_Encoder_Init+0x210>)
 800716a:	f7f9 ff9d 	bl	80010a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d114      	bne.n	80071a4 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fa fde8 	bl	8001d58 <HAL_TIM_Encoder_MspInit>
 8007188:	e00c      	b.n	80071a4 <HAL_TIM_Encoder_Init+0x214>
 800718a:	bf00      	nop
 800718c:	40010000 	.word	0x40010000
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40014000 	.word	0x40014000
 80071a0:	08011484 	.word	0x08011484
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ba:	f023 0307 	bic.w	r3, r3, #7
 80071be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f000 ff1e 	bl	800800c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f8:	f023 0303 	bic.w	r3, r3, #3
 80071fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	4313      	orrs	r3, r2
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007216:	f023 030c 	bic.w	r3, r3, #12
 800721a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	4313      	orrs	r3, r2
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	011a      	lsls	r2, r3, #4
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	031b      	lsls	r3, r3, #12
 8007246:	4313      	orrs	r3, r2
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007254:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800725c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	4313      	orrs	r3, r2
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop

080072c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a4d      	ldr	r2, [pc, #308]	; (8007428 <HAL_TIM_Encoder_Start+0x164>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01d      	beq.n	8007334 <HAL_TIM_Encoder_Start+0x70>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007300:	d018      	beq.n	8007334 <HAL_TIM_Encoder_Start+0x70>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a49      	ldr	r2, [pc, #292]	; (800742c <HAL_TIM_Encoder_Start+0x168>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <HAL_TIM_Encoder_Start+0x70>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a47      	ldr	r2, [pc, #284]	; (8007430 <HAL_TIM_Encoder_Start+0x16c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00e      	beq.n	8007334 <HAL_TIM_Encoder_Start+0x70>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a46      	ldr	r2, [pc, #280]	; (8007434 <HAL_TIM_Encoder_Start+0x170>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d009      	beq.n	8007334 <HAL_TIM_Encoder_Start+0x70>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a44      	ldr	r2, [pc, #272]	; (8007438 <HAL_TIM_Encoder_Start+0x174>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <HAL_TIM_Encoder_Start+0x70>
 800732a:	f640 418e 	movw	r1, #3214	; 0xc8e
 800732e:	4843      	ldr	r0, [pc, #268]	; (800743c <HAL_TIM_Encoder_Start+0x178>)
 8007330:	f7f9 feba 	bl	80010a8 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d110      	bne.n	800735c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d102      	bne.n	8007346 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007340:	7b7b      	ldrb	r3, [r7, #13]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d001      	beq.n	800734a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e069      	b.n	800741e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800735a:	e031      	b.n	80073c0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b04      	cmp	r3, #4
 8007360:	d110      	bne.n	8007384 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d102      	bne.n	800736e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007368:	7b3b      	ldrb	r3, [r7, #12]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d001      	beq.n	8007372 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e055      	b.n	800741e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007382:	e01d      	b.n	80073c0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d108      	bne.n	800739c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d105      	bne.n	800739c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007390:	7b7b      	ldrb	r3, [r7, #13]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d102      	bne.n	800739c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007396:	7b3b      	ldrb	r3, [r7, #12]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d001      	beq.n	80073a0 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e03e      	b.n	800741e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_Encoder_Start+0x10a>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d008      	beq.n	80073de <HAL_TIM_Encoder_Start+0x11a>
 80073cc:	e00f      	b.n	80073ee <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2201      	movs	r2, #1
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 f948 	bl	800866c <TIM_CCxChannelCmd>
      break;
 80073dc:	e016      	b.n	800740c <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	2104      	movs	r1, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f940 	bl	800866c <TIM_CCxChannelCmd>
      break;
 80073ec:	e00e      	b.n	800740c <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2201      	movs	r2, #1
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 f938 	bl	800866c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2201      	movs	r2, #1
 8007402:	2104      	movs	r1, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f001 f931 	bl	800866c <TIM_CCxChannelCmd>
      break;
 800740a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40010000 	.word	0x40010000
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40014000 	.word	0x40014000
 800743c:	08011484 	.word	0x08011484

08007440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d122      	bne.n	800749c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b02      	cmp	r3, #2
 8007462:	d11b      	bne.n	800749c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0202 	mvn.w	r2, #2
 800746c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fda4 	bl	8007fd0 <HAL_TIM_IC_CaptureCallback>
 8007488:	e005      	b.n	8007496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fd96 	bl	8007fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fda7 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d122      	bne.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d11b      	bne.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0204 	mvn.w	r2, #4
 80074c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fd7a 	bl	8007fd0 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fd6c 	bl	8007fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fd7d 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d122      	bne.n	8007544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d11b      	bne.n	8007544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0208 	mvn.w	r2, #8
 8007514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2204      	movs	r2, #4
 800751a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fd50 	bl	8007fd0 <HAL_TIM_IC_CaptureCallback>
 8007530:	e005      	b.n	800753e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fd42 	bl	8007fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fd53 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b10      	cmp	r3, #16
 8007550:	d122      	bne.n	8007598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b10      	cmp	r3, #16
 800755e:	d11b      	bne.n	8007598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0210 	mvn.w	r2, #16
 8007568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2208      	movs	r2, #8
 800756e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fd26 	bl	8007fd0 <HAL_TIM_IC_CaptureCallback>
 8007584:	e005      	b.n	8007592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fd18 	bl	8007fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fd29 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10e      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d107      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0201 	mvn.w	r2, #1
 80075bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7f9 fd58 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d10e      	bne.n	80075f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075dc:	2b80      	cmp	r3, #128	; 0x80
 80075de:	d107      	bne.n	80075f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f972 	bl	80088d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d10e      	bne.n	800761c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d107      	bne.n	800761c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fcee 	bl	8007ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b20      	cmp	r3, #32
 8007628:	d10e      	bne.n	8007648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b20      	cmp	r3, #32
 8007636:	d107      	bne.n	8007648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0220 	mvn.w	r2, #32
 8007640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f93c 	bl	80088c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d010      	beq.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b04      	cmp	r3, #4
 800766a:	d00d      	beq.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x38>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b08      	cmp	r3, #8
 8007670:	d00a      	beq.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b0c      	cmp	r3, #12
 8007676:	d007      	beq.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b3c      	cmp	r3, #60	; 0x3c
 800767c:	d004      	beq.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x38>
 800767e:	f241 0177 	movw	r1, #4215	; 0x1077
 8007682:	4893      	ldr	r0, [pc, #588]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007684:	f7f9 fd10 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b60      	cmp	r3, #96	; 0x60
 800768e:	d008      	beq.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b70      	cmp	r3, #112	; 0x70
 8007696:	d004      	beq.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007698:	f241 0178 	movw	r1, #4216	; 0x1078
 800769c:	488c      	ldr	r0, [pc, #560]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800769e:	f7f9 fd03 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d004      	beq.n	80076bc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80076b2:	f241 0179 	movw	r1, #4217	; 0x1079
 80076b6:	4886      	ldr	r0, [pc, #536]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80076b8:	f7f9 fcf6 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d004      	beq.n	80076d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80076cc:	f241 017a 	movw	r1, #4218	; 0x107a
 80076d0:	487f      	ldr	r0, [pc, #508]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80076d2:	f7f9 fce9 	bl	80010a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x94>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e14c      	b.n	800797e <HAL_TIM_PWM_ConfigChannel+0x32e>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	f200 813d 	bhi.w	800796e <HAL_TIM_PWM_ConfigChannel+0x31e>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <HAL_TIM_PWM_ConfigChannel+0xac>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007731 	.word	0x08007731
 8007700:	0800796f 	.word	0x0800796f
 8007704:	0800796f 	.word	0x0800796f
 8007708:	0800796f 	.word	0x0800796f
 800770c:	080077cb 	.word	0x080077cb
 8007710:	0800796f 	.word	0x0800796f
 8007714:	0800796f 	.word	0x0800796f
 8007718:	0800796f 	.word	0x0800796f
 800771c:	08007853 	.word	0x08007853
 8007720:	0800796f 	.word	0x0800796f
 8007724:	0800796f 	.word	0x0800796f
 8007728:	0800796f 	.word	0x0800796f
 800772c:	080078f1 	.word	0x080078f1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a67      	ldr	r2, [pc, #412]	; (80078d4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d027      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007742:	d022      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a63      	ldr	r2, [pc, #396]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d01d      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a62      	ldr	r2, [pc, #392]	; (80078dc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d018      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a60      	ldr	r2, [pc, #384]	; (80078e0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d013      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a5f      	ldr	r2, [pc, #380]	; (80078e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00e      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5d      	ldr	r2, [pc, #372]	; (80078e8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d009      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a5c      	ldr	r2, [pc, #368]	; (80078ec <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d004      	beq.n	800778a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007780:	f241 0184 	movw	r1, #4228	; 0x1084
 8007784:	4852      	ldr	r0, [pc, #328]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007786:	f7f9 fc8f 	bl	80010a8 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fcbb 	bl	800810c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0208 	orr.w	r2, r2, #8
 80077a4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0204 	bic.w	r2, r2, #4
 80077b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6999      	ldr	r1, [r3, #24]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	619a      	str	r2, [r3, #24]
      break;
 80077c8:	e0d4      	b.n	8007974 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a41      	ldr	r2, [pc, #260]	; (80078d4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d01d      	beq.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077dc:	d018      	beq.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3d      	ldr	r2, [pc, #244]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d013      	beq.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a3b      	ldr	r2, [pc, #236]	; (80078dc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00e      	beq.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a3a      	ldr	r2, [pc, #232]	; (80078e0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d009      	beq.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a38      	ldr	r2, [pc, #224]	; (80078e4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007806:	f241 0195 	movw	r1, #4245	; 0x1095
 800780a:	4831      	ldr	r0, [pc, #196]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800780c:	f7f9 fc4c 	bl	80010a8 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fd08 	bl	800822c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6999      	ldr	r1, [r3, #24]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	619a      	str	r2, [r3, #24]
      break;
 8007850:	e090      	b.n	8007974 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1f      	ldr	r2, [pc, #124]	; (80078d4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d018      	beq.n	800788e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007864:	d013      	beq.n	800788e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00e      	beq.n	800788e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d009      	beq.n	800788e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d004      	beq.n	800788e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007884:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8007888:	4811      	ldr	r0, [pc, #68]	; (80078d0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800788a:	f7f9 fc0d 	bl	80010a8 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fd5d 	bl	8008354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0208 	orr.w	r2, r2, #8
 80078a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0204 	bic.w	r2, r2, #4
 80078b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	61da      	str	r2, [r3, #28]
      break;
 80078cc:	e052      	b.n	8007974 <HAL_TIM_PWM_ConfigChannel+0x324>
 80078ce:	bf00      	nop
 80078d0:	08011484 	.word	0x08011484
 80078d4:	40010000 	.word	0x40010000
 80078d8:	40000400 	.word	0x40000400
 80078dc:	40000800 	.word	0x40000800
 80078e0:	40000c00 	.word	0x40000c00
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40014400 	.word	0x40014400
 80078ec:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a24      	ldr	r2, [pc, #144]	; (8007988 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007902:	d013      	beq.n	800792c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a20      	ldr	r2, [pc, #128]	; (800798c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007922:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007926:	481c      	ldr	r0, [pc, #112]	; (8007998 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007928:	f7f9 fbbe 	bl	80010a8 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fda2 	bl	800847c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	69da      	ldr	r2, [r3, #28]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007946:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69da      	ldr	r2, [r3, #28]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007956:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69d9      	ldr	r1, [r3, #28]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	021a      	lsls	r2, r3, #8
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	61da      	str	r2, [r3, #28]
      break;
 800796c:	e002      	b.n	8007974 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
      break;
 8007972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40010000 	.word	0x40010000
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40000c00 	.word	0x40000c00
 8007998:	08011484 	.word	0x08011484

0800799c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_TIM_ConfigClockSource+0x1c>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e2f0      	b.n	8007f9a <HAL_TIM_ConfigClockSource+0x5fe>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d0:	d029      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b70      	cmp	r3, #112	; 0x70
 80079d8:	d025      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e2:	d020      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b40      	cmp	r3, #64	; 0x40
 80079ea:	d01c      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b50      	cmp	r3, #80	; 0x50
 80079f2:	d018      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b60      	cmp	r3, #96	; 0x60
 80079fa:	d014      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d010      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d00c      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d008      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b30      	cmp	r3, #48	; 0x30
 8007a1a:	d004      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x8a>
 8007a1c:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8007a20:	487c      	ldr	r0, [pc, #496]	; (8007c14 <HAL_TIM_ConfigClockSource+0x278>)
 8007a22:	f7f9 fb41 	bl	80010a8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a4e:	f000 80f1 	beq.w	8007c34 <HAL_TIM_ConfigClockSource+0x298>
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a56:	f200 8293 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d02d      	beq.n	8007abc <HAL_TIM_ConfigClockSource+0x120>
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a64:	f200 828c 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a68:	2b70      	cmp	r3, #112	; 0x70
 8007a6a:	d05d      	beq.n	8007b28 <HAL_TIM_ConfigClockSource+0x18c>
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	f200 8287 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a72:	2b60      	cmp	r3, #96	; 0x60
 8007a74:	f000 81a0 	beq.w	8007db8 <HAL_TIM_ConfigClockSource+0x41c>
 8007a78:	2b60      	cmp	r3, #96	; 0x60
 8007a7a:	f200 8281 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a7e:	2b50      	cmp	r3, #80	; 0x50
 8007a80:	f000 8144 	beq.w	8007d0c <HAL_TIM_ConfigClockSource+0x370>
 8007a84:	2b50      	cmp	r3, #80	; 0x50
 8007a86:	f200 827b 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	f000 81f6 	beq.w	8007e7c <HAL_TIM_ConfigClockSource+0x4e0>
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	f200 8275 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007a96:	2b30      	cmp	r3, #48	; 0x30
 8007a98:	f000 8246 	beq.w	8007f28 <HAL_TIM_ConfigClockSource+0x58c>
 8007a9c:	2b30      	cmp	r3, #48	; 0x30
 8007a9e:	f200 826f 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	f000 8240 	beq.w	8007f28 <HAL_TIM_ConfigClockSource+0x58c>
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	f200 8269 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 823a 	beq.w	8007f28 <HAL_TIM_ConfigClockSource+0x58c>
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	f000 8237 	beq.w	8007f28 <HAL_TIM_ConfigClockSource+0x58c>
 8007aba:	e261      	b.n	8007f80 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a55      	ldr	r2, [pc, #340]	; (8007c18 <HAL_TIM_ConfigClockSource+0x27c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	f000 825f 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad0:	f000 8259 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a50      	ldr	r2, [pc, #320]	; (8007c1c <HAL_TIM_ConfigClockSource+0x280>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	f000 8253 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a4e      	ldr	r2, [pc, #312]	; (8007c20 <HAL_TIM_ConfigClockSource+0x284>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	f000 824d 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a4c      	ldr	r2, [pc, #304]	; (8007c24 <HAL_TIM_ConfigClockSource+0x288>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	f000 8247 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a4a      	ldr	r2, [pc, #296]	; (8007c28 <HAL_TIM_ConfigClockSource+0x28c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	f000 8241 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a48      	ldr	r2, [pc, #288]	; (8007c2c <HAL_TIM_ConfigClockSource+0x290>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	f000 823b 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a46      	ldr	r2, [pc, #280]	; (8007c30 <HAL_TIM_ConfigClockSource+0x294>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	f000 8235 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
 8007b1c:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8007b20:	483c      	ldr	r0, [pc, #240]	; (8007c14 <HAL_TIM_ConfigClockSource+0x278>)
 8007b22:	f7f9 fac1 	bl	80010a8 <assert_failed>
      break;
 8007b26:	e22e      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a3a      	ldr	r2, [pc, #232]	; (8007c18 <HAL_TIM_ConfigClockSource+0x27c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01d      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x1d2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3a:	d018      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x1d2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a36      	ldr	r2, [pc, #216]	; (8007c1c <HAL_TIM_ConfigClockSource+0x280>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x1d2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a35      	ldr	r2, [pc, #212]	; (8007c20 <HAL_TIM_ConfigClockSource+0x284>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x1d2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a33      	ldr	r2, [pc, #204]	; (8007c24 <HAL_TIM_ConfigClockSource+0x288>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x1d2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a32      	ldr	r2, [pc, #200]	; (8007c28 <HAL_TIM_ConfigClockSource+0x28c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x1d2>
 8007b64:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007b68:	482a      	ldr	r0, [pc, #168]	; (8007c14 <HAL_TIM_ConfigClockSource+0x278>)
 8007b6a:	f7f9 fa9d 	bl	80010a8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d013      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0x202>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7e:	d00e      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0x202>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b88:	d009      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0x202>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b92:	d004      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0x202>
 8007b94:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007b98:	481e      	ldr	r0, [pc, #120]	; (8007c14 <HAL_TIM_ConfigClockSource+0x278>)
 8007b9a:	f7f9 fa85 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba6:	d014      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x236>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d010      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x236>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00c      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x236>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d008      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x236>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b0a      	cmp	r3, #10
 8007bc6:	d004      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x236>
 8007bc8:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007bcc:	4811      	ldr	r0, [pc, #68]	; (8007c14 <HAL_TIM_ConfigClockSource+0x278>)
 8007bce:	f7f9 fa6b 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d904      	bls.n	8007be4 <HAL_TIM_ConfigClockSource+0x248>
 8007bda:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8007bde:	480d      	ldr	r0, [pc, #52]	; (8007c14 <HAL_TIM_ConfigClockSource+0x278>)
 8007be0:	f7f9 fa62 	bl	80010a8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6899      	ldr	r1, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f000 fd1a 	bl	800862c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	609a      	str	r2, [r3, #8]
      break;
 8007c10:	e1ba      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
 8007c12:	bf00      	nop
 8007c14:	08011484 	.word	0x08011484
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40000400 	.word	0x40000400
 8007c20:	40000800 	.word	0x40000800
 8007c24:	40000c00 	.word	0x40000c00
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a8a      	ldr	r2, [pc, #552]	; (8007e64 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d013      	beq.n	8007c70 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a86      	ldr	r2, [pc, #536]	; (8007e68 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a85      	ldr	r2, [pc, #532]	; (8007e6c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a83      	ldr	r2, [pc, #524]	; (8007e70 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_TIM_ConfigClockSource+0x2d4>
 8007c66:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007c6a:	4882      	ldr	r0, [pc, #520]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c6c:	f7f9 fa1c 	bl	80010a8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d013      	beq.n	8007ca0 <HAL_TIM_ConfigClockSource+0x304>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d00e      	beq.n	8007ca0 <HAL_TIM_ConfigClockSource+0x304>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8a:	d009      	beq.n	8007ca0 <HAL_TIM_ConfigClockSource+0x304>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c94:	d004      	beq.n	8007ca0 <HAL_TIM_ConfigClockSource+0x304>
 8007c96:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007c9a:	4876      	ldr	r0, [pc, #472]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c9c:	f7f9 fa04 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca8:	d014      	beq.n	8007cd4 <HAL_TIM_ConfigClockSource+0x338>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d010      	beq.n	8007cd4 <HAL_TIM_ConfigClockSource+0x338>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <HAL_TIM_ConfigClockSource+0x338>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d008      	beq.n	8007cd4 <HAL_TIM_ConfigClockSource+0x338>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b0a      	cmp	r3, #10
 8007cc8:	d004      	beq.n	8007cd4 <HAL_TIM_ConfigClockSource+0x338>
 8007cca:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8007cce:	4869      	ldr	r0, [pc, #420]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007cd0:	f7f9 f9ea 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b0f      	cmp	r3, #15
 8007cda:	d904      	bls.n	8007ce6 <HAL_TIM_ConfigClockSource+0x34a>
 8007cdc:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007ce0:	4864      	ldr	r0, [pc, #400]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007ce2:	f7f9 f9e1 	bl	80010a8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6899      	ldr	r1, [r3, #8]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f000 fc99 	bl	800862c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d08:	609a      	str	r2, [r3, #8]
      break;
 8007d0a:	e13d      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a54      	ldr	r2, [pc, #336]	; (8007e64 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01d      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x3b6>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1e:	d018      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x3b6>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a50      	ldr	r2, [pc, #320]	; (8007e68 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x3b6>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a4f      	ldr	r2, [pc, #316]	; (8007e6c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00e      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x3b6>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a4d      	ldr	r2, [pc, #308]	; (8007e70 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d009      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x3b6>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a4d      	ldr	r2, [pc, #308]	; (8007e78 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d004      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x3b6>
 8007d48:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007d4c:	4849      	ldr	r0, [pc, #292]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d4e:	f7f9 f9ab 	bl	80010a8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5a:	d014      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x3ea>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d010      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x3ea>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00c      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x3ea>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d008      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x3ea>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b0a      	cmp	r3, #10
 8007d7a:	d004      	beq.n	8007d86 <HAL_TIM_ConfigClockSource+0x3ea>
 8007d7c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8007d80:	483c      	ldr	r0, [pc, #240]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d82:	f7f9 f991 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	d904      	bls.n	8007d98 <HAL_TIM_ConfigClockSource+0x3fc>
 8007d8e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8007d92:	4838      	ldr	r0, [pc, #224]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d94:	f7f9 f988 	bl	80010a8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6859      	ldr	r1, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	461a      	mov	r2, r3
 8007da6:	f000 fbc7 	bl	8008538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2150      	movs	r1, #80	; 0x50
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fc20 	bl	80085f6 <TIM_ITRx_SetConfig>
      break;
 8007db6:	e0e7      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a29      	ldr	r2, [pc, #164]	; (8007e64 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d01d      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x462>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dca:	d018      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x462>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a25      	ldr	r2, [pc, #148]	; (8007e68 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d013      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x462>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a24      	ldr	r2, [pc, #144]	; (8007e6c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00e      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x462>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a22      	ldr	r2, [pc, #136]	; (8007e70 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d009      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x462>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a22      	ldr	r2, [pc, #136]	; (8007e78 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d004      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x462>
 8007df4:	f241 5106 	movw	r1, #5382	; 0x1506
 8007df8:	481e      	ldr	r0, [pc, #120]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007dfa:	f7f9 f955 	bl	80010a8 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e06:	d014      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x496>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d010      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x496>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00c      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x496>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d008      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x496>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2b0a      	cmp	r3, #10
 8007e26:	d004      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x496>
 8007e28:	f241 5109 	movw	r1, #5385	; 0x1509
 8007e2c:	4811      	ldr	r0, [pc, #68]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e2e:	f7f9 f93b 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	d904      	bls.n	8007e44 <HAL_TIM_ConfigClockSource+0x4a8>
 8007e3a:	f241 510a 	movw	r1, #5386	; 0x150a
 8007e3e:	480d      	ldr	r0, [pc, #52]	; (8007e74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e40:	f7f9 f932 	bl	80010a8 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6859      	ldr	r1, [r3, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	461a      	mov	r2, r3
 8007e52:	f000 fba0 	bl	8008596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2160      	movs	r1, #96	; 0x60
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fbca 	bl	80085f6 <TIM_ITRx_SetConfig>
      break;
 8007e62:	e091      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	08011484 	.word	0x08011484
 8007e78:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a48      	ldr	r2, [pc, #288]	; (8007fa4 <HAL_TIM_ConfigClockSource+0x608>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d01d      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x526>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8e:	d018      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x526>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a44      	ldr	r2, [pc, #272]	; (8007fa8 <HAL_TIM_ConfigClockSource+0x60c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x526>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a43      	ldr	r2, [pc, #268]	; (8007fac <HAL_TIM_ConfigClockSource+0x610>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00e      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x526>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <HAL_TIM_ConfigClockSource+0x614>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d009      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x526>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a40      	ldr	r2, [pc, #256]	; (8007fb4 <HAL_TIM_ConfigClockSource+0x618>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d004      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0x526>
 8007eb8:	f241 5116 	movw	r1, #5398	; 0x1516
 8007ebc:	483e      	ldr	r0, [pc, #248]	; (8007fb8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007ebe:	f7f9 f8f3 	bl	80010a8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eca:	d014      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x55a>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x55a>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00c      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x55a>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d008      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x55a>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b0a      	cmp	r3, #10
 8007eea:	d004      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x55a>
 8007eec:	f241 5119 	movw	r1, #5401	; 0x1519
 8007ef0:	4831      	ldr	r0, [pc, #196]	; (8007fb8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007ef2:	f7f9 f8d9 	bl	80010a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	2b0f      	cmp	r3, #15
 8007efc:	d904      	bls.n	8007f08 <HAL_TIM_ConfigClockSource+0x56c>
 8007efe:	f241 511a 	movw	r1, #5402	; 0x151a
 8007f02:	482d      	ldr	r0, [pc, #180]	; (8007fb8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007f04:	f7f9 f8d0 	bl	80010a8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	6859      	ldr	r1, [r3, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	461a      	mov	r2, r3
 8007f16:	f000 fb0f 	bl	8008538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2140      	movs	r1, #64	; 0x40
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fb68 	bl	80085f6 <TIM_ITRx_SetConfig>
      break;
 8007f26:	e02f      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <HAL_TIM_ConfigClockSource+0x608>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d01d      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x5d2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3a:	d018      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x5d2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <HAL_TIM_ConfigClockSource+0x60c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d013      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x5d2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a18      	ldr	r2, [pc, #96]	; (8007fac <HAL_TIM_ConfigClockSource+0x610>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00e      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x5d2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <HAL_TIM_ConfigClockSource+0x614>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d009      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x5d2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <HAL_TIM_ConfigClockSource+0x618>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d004      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x5d2>
 8007f64:	f241 5129 	movw	r1, #5417	; 0x1529
 8007f68:	4813      	ldr	r0, [pc, #76]	; (8007fb8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007f6a:	f7f9 f89d 	bl	80010a8 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f000 fb3c 	bl	80085f6 <TIM_ITRx_SetConfig>
      break;
 8007f7e:	e003      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e000      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8007f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40010000 	.word	0x40010000
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	08011484 	.word	0x08011484

08007fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a34      	ldr	r2, [pc, #208]	; (80080f0 <TIM_Base_SetConfig+0xe4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00f      	beq.n	8008044 <TIM_Base_SetConfig+0x38>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802a:	d00b      	beq.n	8008044 <TIM_Base_SetConfig+0x38>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a31      	ldr	r2, [pc, #196]	; (80080f4 <TIM_Base_SetConfig+0xe8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d007      	beq.n	8008044 <TIM_Base_SetConfig+0x38>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a30      	ldr	r2, [pc, #192]	; (80080f8 <TIM_Base_SetConfig+0xec>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_Base_SetConfig+0x38>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a2f      	ldr	r2, [pc, #188]	; (80080fc <TIM_Base_SetConfig+0xf0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d108      	bne.n	8008056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a25      	ldr	r2, [pc, #148]	; (80080f0 <TIM_Base_SetConfig+0xe4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01b      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008064:	d017      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a22      	ldr	r2, [pc, #136]	; (80080f4 <TIM_Base_SetConfig+0xe8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d013      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a21      	ldr	r2, [pc, #132]	; (80080f8 <TIM_Base_SetConfig+0xec>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00f      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a20      	ldr	r2, [pc, #128]	; (80080fc <TIM_Base_SetConfig+0xf0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00b      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <TIM_Base_SetConfig+0xf4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d007      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a1e      	ldr	r2, [pc, #120]	; (8008104 <TIM_Base_SetConfig+0xf8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d003      	beq.n	8008096 <TIM_Base_SetConfig+0x8a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a1d      	ldr	r2, [pc, #116]	; (8008108 <TIM_Base_SetConfig+0xfc>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d108      	bne.n	80080a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a08      	ldr	r2, [pc, #32]	; (80080f0 <TIM_Base_SetConfig+0xe4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d103      	bne.n	80080dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	691a      	ldr	r2, [r3, #16]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	615a      	str	r2, [r3, #20]
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40010000 	.word	0x40010000
 80080f4:	40000400 	.word	0x40000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	40000c00 	.word	0x40000c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	40014800 	.word	0x40014800

0800810c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f023 0201 	bic.w	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f023 0302 	bic.w	r3, r3, #2
 8008154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a30      	ldr	r2, [pc, #192]	; (8008224 <TIM_OC1_SetConfig+0x118>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d119      	bne.n	800819c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d008      	beq.n	8008182 <TIM_OC1_SetConfig+0x76>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	2b08      	cmp	r3, #8
 8008176:	d004      	beq.n	8008182 <TIM_OC1_SetConfig+0x76>
 8008178:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 800817c:	482a      	ldr	r0, [pc, #168]	; (8008228 <TIM_OC1_SetConfig+0x11c>)
 800817e:	f7f8 ff93 	bl	80010a8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f023 0308 	bic.w	r3, r3, #8
 8008188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0304 	bic.w	r3, r3, #4
 800819a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a21      	ldr	r2, [pc, #132]	; (8008224 <TIM_OC1_SetConfig+0x118>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d12d      	bne.n	8008200 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ac:	d008      	beq.n	80081c0 <TIM_OC1_SetConfig+0xb4>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <TIM_OC1_SetConfig+0xb4>
 80081b6:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 80081ba:	481b      	ldr	r0, [pc, #108]	; (8008228 <TIM_OC1_SetConfig+0x11c>)
 80081bc:	f7f8 ff74 	bl	80010a8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c8:	d008      	beq.n	80081dc <TIM_OC1_SetConfig+0xd0>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d004      	beq.n	80081dc <TIM_OC1_SetConfig+0xd0>
 80081d2:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80081d6:	4814      	ldr	r0, [pc, #80]	; (8008228 <TIM_OC1_SetConfig+0x11c>)
 80081d8:	f7f8 ff66 	bl	80010a8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	40010000 	.word	0x40010000
 8008228:	08011484 	.word	0x08011484

0800822c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f023 0210 	bic.w	r2, r3, #16
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f023 0320 	bic.w	r3, r3, #32
 8008276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4313      	orrs	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a31      	ldr	r2, [pc, #196]	; (800834c <TIM_OC2_SetConfig+0x120>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d11a      	bne.n	80082c2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d008      	beq.n	80082a6 <TIM_OC2_SetConfig+0x7a>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d004      	beq.n	80082a6 <TIM_OC2_SetConfig+0x7a>
 800829c:	f641 3112 	movw	r1, #6930	; 0x1b12
 80082a0:	482b      	ldr	r0, [pc, #172]	; (8008350 <TIM_OC2_SetConfig+0x124>)
 80082a2:	f7f8 ff01 	bl	80010a8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a21      	ldr	r2, [pc, #132]	; (800834c <TIM_OC2_SetConfig+0x120>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d12f      	bne.n	800832a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d2:	d008      	beq.n	80082e6 <TIM_OC2_SetConfig+0xba>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <TIM_OC2_SetConfig+0xba>
 80082dc:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80082e0:	481b      	ldr	r0, [pc, #108]	; (8008350 <TIM_OC2_SetConfig+0x124>)
 80082e2:	f7f8 fee1 	bl	80010a8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ee:	d008      	beq.n	8008302 <TIM_OC2_SetConfig+0xd6>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <TIM_OC2_SetConfig+0xd6>
 80082f8:	f641 3121 	movw	r1, #6945	; 0x1b21
 80082fc:	4814      	ldr	r0, [pc, #80]	; (8008350 <TIM_OC2_SetConfig+0x124>)
 80082fe:	f7f8 fed3 	bl	80010a8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40010000 	.word	0x40010000
 8008350:	08011484 	.word	0x08011484

08008354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800839c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a31      	ldr	r2, [pc, #196]	; (8008474 <TIM_OC3_SetConfig+0x120>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d11a      	bne.n	80083e8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d008      	beq.n	80083cc <TIM_OC3_SetConfig+0x78>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d004      	beq.n	80083cc <TIM_OC3_SetConfig+0x78>
 80083c2:	f641 315d 	movw	r1, #7005	; 0x1b5d
 80083c6:	482c      	ldr	r0, [pc, #176]	; (8008478 <TIM_OC3_SetConfig+0x124>)
 80083c8:	f7f8 fe6e 	bl	80010a8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a22      	ldr	r2, [pc, #136]	; (8008474 <TIM_OC3_SetConfig+0x120>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d12f      	bne.n	8008450 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f8:	d008      	beq.n	800840c <TIM_OC3_SetConfig+0xb8>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <TIM_OC3_SetConfig+0xb8>
 8008402:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8008406:	481c      	ldr	r0, [pc, #112]	; (8008478 <TIM_OC3_SetConfig+0x124>)
 8008408:	f7f8 fe4e 	bl	80010a8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008414:	d008      	beq.n	8008428 <TIM_OC3_SetConfig+0xd4>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <TIM_OC3_SetConfig+0xd4>
 800841e:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008422:	4815      	ldr	r0, [pc, #84]	; (8008478 <TIM_OC3_SetConfig+0x124>)
 8008424:	f7f8 fe40 	bl	80010a8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800842e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	08011484 	.word	0x08011484

0800847c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	031b      	lsls	r3, r3, #12
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a16      	ldr	r2, [pc, #88]	; (8008530 <TIM_OC4_SetConfig+0xb4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d117      	bne.n	800850c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e4:	d008      	beq.n	80084f8 <TIM_OC4_SetConfig+0x7c>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <TIM_OC4_SetConfig+0x7c>
 80084ee:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 80084f2:	4810      	ldr	r0, [pc, #64]	; (8008534 <TIM_OC4_SetConfig+0xb8>)
 80084f4:	f7f8 fdd8 	bl	80010a8 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	019b      	lsls	r3, r3, #6
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	621a      	str	r2, [r3, #32]
}
 8008526:	bf00      	nop
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40010000 	.word	0x40010000
 8008534:	08011484 	.word	0x08011484

08008538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f023 0201 	bic.w	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f023 030a 	bic.w	r3, r3, #10
 8008574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	621a      	str	r2, [r3, #32]
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008596:	b480      	push	{r7}
 8008598:	b087      	sub	sp, #28
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f023 0210 	bic.w	r2, r3, #16
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	031b      	lsls	r3, r3, #12
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	621a      	str	r2, [r3, #32]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b085      	sub	sp, #20
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	f043 0307 	orr.w	r3, r3, #7
 8008618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	609a      	str	r2, [r3, #8]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	021a      	lsls	r2, r3, #8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	431a      	orrs	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4313      	orrs	r3, r2
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	609a      	str	r2, [r3, #8]
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a2a      	ldr	r2, [pc, #168]	; (8008724 <TIM_CCxChannelCmd+0xb8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d020      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d01c      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a27      	ldr	r2, [pc, #156]	; (8008728 <TIM_CCxChannelCmd+0xbc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d018      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a26      	ldr	r2, [pc, #152]	; (800872c <TIM_CCxChannelCmd+0xc0>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d014      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a25      	ldr	r2, [pc, #148]	; (8008730 <TIM_CCxChannelCmd+0xc4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d010      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a24      	ldr	r2, [pc, #144]	; (8008734 <TIM_CCxChannelCmd+0xc8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00c      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4a23      	ldr	r2, [pc, #140]	; (8008738 <TIM_CCxChannelCmd+0xcc>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d008      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4a22      	ldr	r2, [pc, #136]	; (800873c <TIM_CCxChannelCmd+0xd0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d004      	beq.n	80086c2 <TIM_CCxChannelCmd+0x56>
 80086b8:	f641 5194 	movw	r1, #7572	; 0x1d94
 80086bc:	4820      	ldr	r0, [pc, #128]	; (8008740 <TIM_CCxChannelCmd+0xd4>)
 80086be:	f7f8 fcf3 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <TIM_CCxChannelCmd+0x7e>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d00d      	beq.n	80086ea <TIM_CCxChannelCmd+0x7e>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d00a      	beq.n	80086ea <TIM_CCxChannelCmd+0x7e>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b0c      	cmp	r3, #12
 80086d8:	d007      	beq.n	80086ea <TIM_CCxChannelCmd+0x7e>
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b3c      	cmp	r3, #60	; 0x3c
 80086de:	d004      	beq.n	80086ea <TIM_CCxChannelCmd+0x7e>
 80086e0:	f641 5195 	movw	r1, #7573	; 0x1d95
 80086e4:	4816      	ldr	r0, [pc, #88]	; (8008740 <TIM_CCxChannelCmd+0xd4>)
 80086e6:	f7f8 fcdf 	bl	80010a8 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	2201      	movs	r2, #1
 80086f2:	fa02 f303 	lsl.w	r3, r2, r3
 80086f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6a1a      	ldr	r2, [r3, #32]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	43db      	mvns	r3, r3
 8008700:	401a      	ands	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a1a      	ldr	r2, [r3, #32]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	fa01 f303 	lsl.w	r3, r1, r3
 8008716:	431a      	orrs	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	621a      	str	r2, [r3, #32]
}
 800871c:	bf00      	nop
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	40010000 	.word	0x40010000
 8008728:	40000400 	.word	0x40000400
 800872c:	40000800 	.word	0x40000800
 8008730:	40000c00 	.word	0x40000c00
 8008734:	40014000 	.word	0x40014000
 8008738:	40014400 	.word	0x40014400
 800873c:	40014800 	.word	0x40014800
 8008740:	08011484 	.word	0x08011484

08008744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a55      	ldr	r2, [pc, #340]	; (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d018      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008760:	d013      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a51      	ldr	r2, [pc, #324]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a4f      	ldr	r2, [pc, #316]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a4e      	ldr	r2, [pc, #312]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008780:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8008784:	484c      	ldr	r0, [pc, #304]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008786:	f7f8 fc8f 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d020      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b10      	cmp	r3, #16
 8008798:	d01c      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d018      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b30      	cmp	r3, #48	; 0x30
 80087a8:	d014      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d010      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b50      	cmp	r3, #80	; 0x50
 80087b8:	d00c      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b60      	cmp	r3, #96	; 0x60
 80087c0:	d008      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b70      	cmp	r3, #112	; 0x70
 80087c8:	d004      	beq.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087ca:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80087ce:	483a      	ldr	r0, [pc, #232]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80087d0:	f7f8 fc6a 	bl	80010a8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	2b80      	cmp	r3, #128	; 0x80
 80087da:	d008      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80087e4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80087e8:	4833      	ldr	r0, [pc, #204]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80087ea:	f7f8 fc5d 	bl	80010a8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e050      	b.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008848:	d013      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a17      	ldr	r2, [pc, #92]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a13      	ldr	r2, [pc, #76]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10c      	bne.n	800888c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4313      	orrs	r3, r2
 8008882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40000c00 	.word	0x40000c00
 80088b8:	080114bc 	.word	0x080114bc
 80088bc:	40014000 	.word	0x40014000

080088c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088e8:	b084      	sub	sp, #16
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	f107 001c 	add.w	r0, r7, #28
 80088f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d122      	bne.n	8008946 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d105      	bne.n	800893a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 fbee 	bl	800a11c <USB_CoreReset>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e01a      	b.n	800897c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 fbe2 	bl	800a11c <USB_CoreReset>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800895c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
 800896e:	e005      	b.n	800897c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	2b01      	cmp	r3, #1
 8008980:	d10b      	bne.n	800899a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f043 0206 	orr.w	r2, r3, #6
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f043 0220 	orr.w	r2, r3, #32
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089a6:	b004      	add	sp, #16
 80089a8:	4770      	bx	lr
	...

080089ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d165      	bne.n	8008a8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	4a41      	ldr	r2, [pc, #260]	; (8008ac8 <USB_SetTurnaroundTime+0x11c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d906      	bls.n	80089d6 <USB_SetTurnaroundTime+0x2a>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4a40      	ldr	r2, [pc, #256]	; (8008acc <USB_SetTurnaroundTime+0x120>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d202      	bcs.n	80089d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80089d0:	230f      	movs	r3, #15
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e062      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <USB_SetTurnaroundTime+0x120>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d306      	bcc.n	80089ec <USB_SetTurnaroundTime+0x40>
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4a3b      	ldr	r2, [pc, #236]	; (8008ad0 <USB_SetTurnaroundTime+0x124>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d202      	bcs.n	80089ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80089e6:	230e      	movs	r3, #14
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	e057      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4a38      	ldr	r2, [pc, #224]	; (8008ad0 <USB_SetTurnaroundTime+0x124>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d306      	bcc.n	8008a02 <USB_SetTurnaroundTime+0x56>
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a37      	ldr	r2, [pc, #220]	; (8008ad4 <USB_SetTurnaroundTime+0x128>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d202      	bcs.n	8008a02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089fc:	230d      	movs	r3, #13
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e04c      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4a33      	ldr	r2, [pc, #204]	; (8008ad4 <USB_SetTurnaroundTime+0x128>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d306      	bcc.n	8008a18 <USB_SetTurnaroundTime+0x6c>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4a32      	ldr	r2, [pc, #200]	; (8008ad8 <USB_SetTurnaroundTime+0x12c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d802      	bhi.n	8008a18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a12:	230c      	movs	r3, #12
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e041      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a2f      	ldr	r2, [pc, #188]	; (8008ad8 <USB_SetTurnaroundTime+0x12c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d906      	bls.n	8008a2e <USB_SetTurnaroundTime+0x82>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a2e      	ldr	r2, [pc, #184]	; (8008adc <USB_SetTurnaroundTime+0x130>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d802      	bhi.n	8008a2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a28:	230b      	movs	r3, #11
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e036      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <USB_SetTurnaroundTime+0x130>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d906      	bls.n	8008a44 <USB_SetTurnaroundTime+0x98>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a29      	ldr	r2, [pc, #164]	; (8008ae0 <USB_SetTurnaroundTime+0x134>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d802      	bhi.n	8008a44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a3e:	230a      	movs	r3, #10
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e02b      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4a26      	ldr	r2, [pc, #152]	; (8008ae0 <USB_SetTurnaroundTime+0x134>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d906      	bls.n	8008a5a <USB_SetTurnaroundTime+0xae>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4a25      	ldr	r2, [pc, #148]	; (8008ae4 <USB_SetTurnaroundTime+0x138>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d202      	bcs.n	8008a5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a54:	2309      	movs	r3, #9
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e020      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <USB_SetTurnaroundTime+0x138>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d306      	bcc.n	8008a70 <USB_SetTurnaroundTime+0xc4>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <USB_SetTurnaroundTime+0x13c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d802      	bhi.n	8008a70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a6a:	2308      	movs	r3, #8
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	e015      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4a1d      	ldr	r2, [pc, #116]	; (8008ae8 <USB_SetTurnaroundTime+0x13c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d906      	bls.n	8008a86 <USB_SetTurnaroundTime+0xda>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4a1c      	ldr	r2, [pc, #112]	; (8008aec <USB_SetTurnaroundTime+0x140>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d202      	bcs.n	8008a86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a80:	2307      	movs	r3, #7
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e00a      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a86:	2306      	movs	r3, #6
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	e007      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d102      	bne.n	8008a98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a92:	2309      	movs	r3, #9
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e001      	b.n	8008a9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a98:	2309      	movs	r3, #9
 8008a9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	029b      	lsls	r3, r3, #10
 8008ab0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	371c      	adds	r7, #28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	00d8acbf 	.word	0x00d8acbf
 8008acc:	00e4e1c0 	.word	0x00e4e1c0
 8008ad0:	00f42400 	.word	0x00f42400
 8008ad4:	01067380 	.word	0x01067380
 8008ad8:	011a499f 	.word	0x011a499f
 8008adc:	01312cff 	.word	0x01312cff
 8008ae0:	014ca43f 	.word	0x014ca43f
 8008ae4:	016e3600 	.word	0x016e3600
 8008ae8:	01a6ab1f 	.word	0x01a6ab1f
 8008aec:	01e84800 	.word	0x01e84800

08008af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f043 0201 	orr.w	r2, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d115      	bne.n	8008b82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b62:	2001      	movs	r0, #1
 8008b64:	f7f9 fa58 	bl	8002018 <HAL_Delay>
      ms++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fa45 	bl	8009ffe <USB_GetMode>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d01e      	beq.n	8008bb8 <USB_SetCurrentMode+0x84>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b31      	cmp	r3, #49	; 0x31
 8008b7e:	d9f0      	bls.n	8008b62 <USB_SetCurrentMode+0x2e>
 8008b80:	e01a      	b.n	8008bb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d115      	bne.n	8008bb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b94:	2001      	movs	r0, #1
 8008b96:	f7f9 fa3f 	bl	8002018 <HAL_Delay>
      ms++;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fa2c 	bl	8009ffe <USB_GetMode>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <USB_SetCurrentMode+0x84>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b31      	cmp	r3, #49	; 0x31
 8008bb0:	d9f0      	bls.n	8008b94 <USB_SetCurrentMode+0x60>
 8008bb2:	e001      	b.n	8008bb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e005      	b.n	8008bc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b32      	cmp	r3, #50	; 0x32
 8008bbc:	d101      	bne.n	8008bc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e000      	b.n	8008bc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bcc:	b084      	sub	sp, #16
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b086      	sub	sp, #24
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	e009      	b.n	8008c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	3340      	adds	r3, #64	; 0x40
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2b0e      	cmp	r3, #14
 8008c04:	d9f2      	bls.n	8008bec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11c      	bne.n	8008c46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1a:	f043 0302 	orr.w	r3, r3, #2
 8008c1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	639a      	str	r2, [r3, #56]	; 0x38
 8008c44:	e00b      	b.n	8008c5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c64:	461a      	mov	r2, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c70:	4619      	mov	r1, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	461a      	mov	r2, r3
 8008c7a:	680b      	ldr	r3, [r1, #0]
 8008c7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d10c      	bne.n	8008c9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f965 	bl	8008f5c <USB_SetDevSpeed>
 8008c92:	e008      	b.n	8008ca6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c94:	2101      	movs	r1, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f960 	bl	8008f5c <USB_SetDevSpeed>
 8008c9c:	e003      	b.n	8008ca6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c9e:	2103      	movs	r1, #3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f95b 	bl	8008f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ca6:	2110      	movs	r1, #16
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8f3 	bl	8008e94 <USB_FlushTxFifo>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f91f 	bl	8008efc <USB_FlushRxFifo>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cce:	461a      	mov	r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	461a      	mov	r2, r3
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cec:	2300      	movs	r3, #0
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	e043      	b.n	8008d7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d08:	d118      	bne.n	8008d3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	e013      	b.n	8008d4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d32:	461a      	mov	r2, r3
 8008d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	e008      	b.n	8008d4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3301      	adds	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3b7      	bcc.n	8008cf2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	e043      	b.n	8008e10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d9e:	d118      	bne.n	8008dd2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10a      	bne.n	8008dbc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db2:	461a      	mov	r2, r3
 8008db4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e013      	b.n	8008de4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	e008      	b.n	8008de4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dde:	461a      	mov	r2, r3
 8008de0:	2300      	movs	r3, #0
 8008de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df0:	461a      	mov	r2, r3
 8008df2:	2300      	movs	r3, #0
 8008df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	461a      	mov	r2, r3
 8008e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d3b7      	bcc.n	8008d88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f043 0210 	orr.w	r2, r3, #16
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699a      	ldr	r2, [r3, #24]
 8008e50:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <USB_DevInit+0x2c4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	f043 0208 	orr.w	r2, r3, #8
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d107      	bne.n	8008e80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e78:	f043 0304 	orr.w	r3, r3, #4
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e8c:	b004      	add	sp, #16
 8008e8e:	4770      	bx	lr
 8008e90:	803c3800 	.word	0x803c3800

08008e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <USB_FlushTxFifo+0x64>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d901      	bls.n	8008eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e01b      	b.n	8008eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	daf2      	bge.n	8008ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	019b      	lsls	r3, r3, #6
 8008ec4:	f043 0220 	orr.w	r2, r3, #32
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4a08      	ldr	r2, [pc, #32]	; (8008ef8 <USB_FlushTxFifo+0x64>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d901      	bls.n	8008ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e006      	b.n	8008eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	d0f0      	beq.n	8008ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	00030d40 	.word	0x00030d40

08008efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4a11      	ldr	r2, [pc, #68]	; (8008f58 <USB_FlushRxFifo+0x5c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d901      	bls.n	8008f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e018      	b.n	8008f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	daf2      	bge.n	8008f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2210      	movs	r2, #16
 8008f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4a08      	ldr	r2, [pc, #32]	; (8008f58 <USB_FlushRxFifo+0x5c>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d901      	bls.n	8008f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e006      	b.n	8008f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b10      	cmp	r3, #16
 8008f48:	d0f0      	beq.n	8008f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	00030d40 	.word	0x00030d40

08008f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b087      	sub	sp, #28
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 0306 	and.w	r3, r3, #6
 8008fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
 8008fb2:	e00a      	b.n	8008fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d002      	beq.n	8008fc0 <USB_GetDevSpeed+0x32>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b06      	cmp	r3, #6
 8008fbe:	d102      	bne.n	8008fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	75fb      	strb	r3, [r7, #23]
 8008fc4:	e001      	b.n	8008fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008fc6:	230f      	movs	r3, #15
 8008fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d13a      	bne.n	800906a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f303 	lsl.w	r3, r1, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	68f9      	ldr	r1, [r7, #12]
 800900e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009012:	4313      	orrs	r3, r2
 8009014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d155      	bne.n	80090d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	059b      	lsls	r3, r3, #22
 800904e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009050:	4313      	orrs	r3, r2
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	440a      	add	r2, r1
 800905a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800905e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	e036      	b.n	80090d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009070:	69da      	ldr	r2, [r3, #28]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	2101      	movs	r1, #1
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	041b      	lsls	r3, r3, #16
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009088:	4313      	orrs	r3, r2
 800908a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d11a      	bne.n	80090d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	791b      	ldrb	r3, [r3, #4]
 80090bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090be:	430b      	orrs	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d161      	bne.n	80091c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800911a:	d11f      	bne.n	800915c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800913a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	0151      	lsls	r1, r2, #5
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	440a      	add	r2, r1
 8009152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800915a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	2101      	movs	r1, #1
 800916e:	fa01 f303 	lsl.w	r3, r1, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	43db      	mvns	r3, r3
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800917c:	4013      	ands	r3, r2
 800917e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	2101      	movs	r1, #1
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	b29b      	uxth	r3, r3
 8009198:	43db      	mvns	r3, r3
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a0:	4013      	ands	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	0159      	lsls	r1, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	440b      	add	r3, r1
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	4619      	mov	r1, r3
 80091c0:	4b35      	ldr	r3, [pc, #212]	; (8009298 <USB_DeactivateEndpoint+0x1b0>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	600b      	str	r3, [r1, #0]
 80091c6:	e060      	b.n	800928a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091de:	d11f      	bne.n	8009220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	0151      	lsls	r1, r2, #5
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	440a      	add	r2, r1
 80091f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	0151      	lsls	r1, r2, #5
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	440a      	add	r2, r1
 8009216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800921e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 030f 	and.w	r3, r3, #15
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f303 	lsl.w	r3, r1, r3
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	43db      	mvns	r3, r3
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009240:	4013      	ands	r3, r2
 8009242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	2101      	movs	r1, #1
 8009256:	fa01 f303 	lsl.w	r3, r1, r3
 800925a:	041b      	lsls	r3, r3, #16
 800925c:	43db      	mvns	r3, r3
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009264:	4013      	ands	r3, r2
 8009266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	0159      	lsls	r1, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	440b      	add	r3, r1
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	4619      	mov	r1, r3
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <USB_DeactivateEndpoint+0x1b4>)
 8009286:	4013      	ands	r3, r2
 8009288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	ec337800 	.word	0xec337800
 800929c:	eff37800 	.word	0xeff37800

080092a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	f040 815c 	bne.w	800957a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d132      	bne.n	8009330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	0151      	lsls	r1, r2, #5
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	440a      	add	r2, r1
 80092e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	440a      	add	r2, r1
 8009304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800930c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	0151      	lsls	r1, r2, #5
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	440a      	add	r2, r1
 8009324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009328:	0cdb      	lsrs	r3, r3, #19
 800932a:	04db      	lsls	r3, r3, #19
 800932c:	6113      	str	r3, [r2, #16]
 800932e:	e074      	b.n	800941a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934a:	0cdb      	lsrs	r3, r3, #19
 800934c:	04db      	lsls	r3, r3, #19
 800934e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800936e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009380:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6999      	ldr	r1, [r3, #24]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	440b      	add	r3, r1
 800938c:	1e59      	subs	r1, r3, #1
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	fbb1 f3f3 	udiv	r3, r1, r3
 8009396:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009398:	4b9d      	ldr	r3, [pc, #628]	; (8009610 <USB_EPStartXfer+0x370>)
 800939a:	400b      	ands	r3, r1
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	0148      	lsls	r0, r1, #5
 80093a0:	69f9      	ldr	r1, [r7, #28]
 80093a2:	4401      	add	r1, r0
 80093a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093a8:	4313      	orrs	r3, r2
 80093aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c2:	69b9      	ldr	r1, [r7, #24]
 80093c4:	0148      	lsls	r0, r1, #5
 80093c6:	69f9      	ldr	r1, [r7, #28]
 80093c8:	4401      	add	r1, r0
 80093ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093ce:	4313      	orrs	r3, r2
 80093d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	791b      	ldrb	r3, [r3, #4]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d11f      	bne.n	800941a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009418:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d14b      	bne.n	80094b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d009      	beq.n	800943c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009434:	461a      	mov	r2, r3
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	791b      	ldrb	r3, [r3, #4]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d128      	bne.n	8009496 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009450:	2b00      	cmp	r3, #0
 8009452:	d110      	bne.n	8009476 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800946e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	e00f      	b.n	8009496 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009494:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	69fa      	ldr	r2, [r7, #28]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	e133      	b.n	8009720 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	0151      	lsls	r1, r2, #5
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	440a      	add	r2, r1
 80094ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	791b      	ldrb	r3, [r3, #4]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d015      	beq.n	800950c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 811b 	beq.w	8009720 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	2101      	movs	r1, #1
 80094fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009500:	69f9      	ldr	r1, [r7, #28]
 8009502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009506:	4313      	orrs	r3, r2
 8009508:	634b      	str	r3, [r1, #52]	; 0x34
 800950a:	e109      	b.n	8009720 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009518:	2b00      	cmp	r3, #0
 800951a:	d110      	bne.n	800953e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	0151      	lsls	r1, r2, #5
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	440a      	add	r2, r1
 8009532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	e00f      	b.n	800955e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800955c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	6919      	ldr	r1, [r3, #16]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	b298      	uxth	r0, r3
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	4603      	mov	r3, r0
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fade 	bl	8009b34 <USB_WritePacket>
 8009578:	e0d2      	b.n	8009720 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	69fa      	ldr	r2, [r7, #28]
 800958e:	440a      	add	r2, r1
 8009590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009594:	0cdb      	lsrs	r3, r3, #19
 8009596:	04db      	lsls	r3, r3, #19
 8009598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d126      	bne.n	8009614 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	0148      	lsls	r0, r1, #5
 80095e0:	69f9      	ldr	r1, [r7, #28]
 80095e2:	4401      	add	r1, r0
 80095e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095e8:	4313      	orrs	r3, r2
 80095ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800960a:	6113      	str	r3, [r2, #16]
 800960c:	e03a      	b.n	8009684 <USB_EPStartXfer+0x3e4>
 800960e:	bf00      	nop
 8009610:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	699a      	ldr	r2, [r3, #24]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	4413      	add	r3, r2
 800961e:	1e5a      	subs	r2, r3, #1
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	fbb2 f3f3 	udiv	r3, r2, r3
 8009628:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	8afa      	ldrh	r2, [r7, #22]
 8009630:	fb03 f202 	mul.w	r2, r3, r2
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	8afb      	ldrh	r3, [r7, #22]
 8009648:	04d9      	lsls	r1, r3, #19
 800964a:	4b38      	ldr	r3, [pc, #224]	; (800972c <USB_EPStartXfer+0x48c>)
 800964c:	400b      	ands	r3, r1
 800964e:	69b9      	ldr	r1, [r7, #24]
 8009650:	0148      	lsls	r0, r1, #5
 8009652:	69f9      	ldr	r1, [r7, #28]
 8009654:	4401      	add	r1, r0
 8009656:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800965a:	4313      	orrs	r3, r2
 800965c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009674:	69b9      	ldr	r1, [r7, #24]
 8009676:	0148      	lsls	r0, r1, #5
 8009678:	69f9      	ldr	r1, [r7, #28]
 800967a:	4401      	add	r1, r0
 800967c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009680:	4313      	orrs	r3, r2
 8009682:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d10d      	bne.n	80096a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d009      	beq.n	80096a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6919      	ldr	r1, [r3, #16]
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	460a      	mov	r2, r1
 80096a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	791b      	ldrb	r3, [r3, #4]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d128      	bne.n	8009700 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d110      	bne.n	80096e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	e00f      	b.n	8009700 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	0151      	lsls	r1, r2, #5
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	440a      	add	r2, r1
 8009716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800971a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800971e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	1ff80000 	.word	0x1ff80000

08009730 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	2b01      	cmp	r3, #1
 800974e:	f040 80ce 	bne.w	80098ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d132      	bne.n	80097c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	440a      	add	r2, r1
 8009770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800977c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800979c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b8:	0cdb      	lsrs	r3, r3, #19
 80097ba:	04db      	lsls	r3, r3, #19
 80097bc:	6113      	str	r3, [r2, #16]
 80097be:	e04e      	b.n	800985e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	0151      	lsls	r1, r2, #5
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	440a      	add	r2, r1
 80097d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097da:	0cdb      	lsrs	r3, r3, #19
 80097dc:	04db      	lsls	r3, r3, #19
 80097de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	0151      	lsls	r1, r2, #5
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	440a      	add	r2, r1
 80097f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009802:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	699a      	ldr	r2, [r3, #24]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	429a      	cmp	r2, r3
 800980e:	d903      	bls.n	8009818 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009844:	691a      	ldr	r2, [r3, #16]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800984e:	6939      	ldr	r1, [r7, #16]
 8009850:	0148      	lsls	r0, r1, #5
 8009852:	6979      	ldr	r1, [r7, #20]
 8009854:	4401      	add	r1, r0
 8009856:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800985a:	4313      	orrs	r3, r2
 800985c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d11e      	bne.n	80098a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d009      	beq.n	8009880 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	461a      	mov	r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e097      	b.n	80099d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 8083 	beq.w	80099d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	2101      	movs	r1, #1
 80098de:	fa01 f303 	lsl.w	r3, r1, r3
 80098e2:	6979      	ldr	r1, [r7, #20]
 80098e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098e8:	4313      	orrs	r3, r2
 80098ea:	634b      	str	r3, [r1, #52]	; 0x34
 80098ec:	e071      	b.n	80099d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	440a      	add	r2, r1
 8009904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009908:	0cdb      	lsrs	r3, r3, #19
 800990a:	04db      	lsls	r3, r3, #19
 800990c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	015a      	lsls	r2, r3, #5
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4413      	add	r3, r2
 8009916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	0151      	lsls	r1, r2, #5
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	440a      	add	r2, r1
 8009924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800992c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009930:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009980:	6939      	ldr	r1, [r7, #16]
 8009982:	0148      	lsls	r0, r1, #5
 8009984:	6979      	ldr	r1, [r7, #20]
 8009986:	4401      	add	r1, r0
 8009988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800998c:	4313      	orrs	r3, r2
 800998e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d10d      	bne.n	80099b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d009      	beq.n	80099b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6919      	ldr	r1, [r3, #16]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ae:	460a      	mov	r2, r1
 80099b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	0151      	lsls	r1, r2, #5
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	440a      	add	r2, r1
 80099c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	371c      	adds	r7, #28
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d14a      	bne.n	8009a94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a16:	f040 8086 	bne.w	8009b26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	7812      	ldrb	r2, [r2, #0]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d902      	bls.n	8009a78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75fb      	strb	r3, [r7, #23]
          break;
 8009a76:	e056      	b.n	8009b26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a90:	d0e7      	beq.n	8009a62 <USB_EPStopXfer+0x82>
 8009a92:	e048      	b.n	8009b26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aac:	d13b      	bne.n	8009b26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	7812      	ldrb	r2, [r2, #0]
 8009ac2:	0151      	lsls	r1, r2, #5
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	440a      	add	r2, r1
 8009ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009acc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ad0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	7812      	ldrb	r2, [r2, #0]
 8009ae6:	0151      	lsls	r1, r2, #5
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	440a      	add	r2, r1
 8009aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009af4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d902      	bls.n	8009b0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
          break;
 8009b0a:	e00c      	b.n	8009b26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b24:	d0e7      	beq.n	8009af6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b089      	sub	sp, #36	; 0x24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	461a      	mov	r2, r3
 8009b42:	460b      	mov	r3, r1
 8009b44:	71fb      	strb	r3, [r7, #7]
 8009b46:	4613      	mov	r3, r2
 8009b48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d123      	bne.n	8009ba2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b5a:	88bb      	ldrh	r3, [r7, #4]
 8009b5c:	3303      	adds	r3, #3
 8009b5e:	089b      	lsrs	r3, r3, #2
 8009b60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e018      	b.n	8009b9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	031a      	lsls	r2, r3, #12
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b74:	461a      	mov	r2, r3
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	3301      	adds	r3, #1
 8009b86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	3301      	adds	r3, #1
 8009b92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	3301      	adds	r3, #1
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d3e2      	bcc.n	8009b68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3724      	adds	r7, #36	; 0x24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b08b      	sub	sp, #44	; 0x2c
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	089b      	lsrs	r3, r3, #2
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bce:	88fb      	ldrh	r3, [r7, #6]
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	623b      	str	r3, [r7, #32]
 8009bda:	e014      	b.n	8009c06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	3301      	adds	r3, #1
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	3301      	adds	r3, #1
 8009c04:	623b      	str	r3, [r7, #32]
 8009c06:	6a3a      	ldr	r2, [r7, #32]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d3e6      	bcc.n	8009bdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c0e:	8bfb      	ldrh	r3, [r7, #30]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01e      	beq.n	8009c52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f107 0310 	add.w	r3, r7, #16
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	fa22 f303 	lsr.w	r3, r2, r3
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	701a      	strb	r2, [r3, #0]
      i++;
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	3301      	adds	r3, #1
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c46:	8bfb      	ldrh	r3, [r7, #30]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c4c:	8bfb      	ldrh	r3, [r7, #30]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1ea      	bne.n	8009c28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	372c      	adds	r7, #44	; 0x2c
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d12c      	bne.n	8009cd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	db12      	blt.n	8009cb4 <USB_EPSetStall+0x54>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00f      	beq.n	8009cb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	0151      	lsls	r1, r2, #5
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	440a      	add	r2, r1
 8009caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	0151      	lsls	r1, r2, #5
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	440a      	add	r2, r1
 8009cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e02b      	b.n	8009d2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	db12      	blt.n	8009d0e <USB_EPSetStall+0xae>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00f      	beq.n	8009d0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	0151      	lsls	r1, r2, #5
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	440a      	add	r2, r1
 8009d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d128      	bne.n	8009daa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	791b      	ldrb	r3, [r3, #4]
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d003      	beq.n	8009d88 <USB_EPClearStall+0x4c>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	791b      	ldrb	r3, [r3, #4]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d138      	bne.n	8009dfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	e027      	b.n	8009dfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	791b      	ldrb	r3, [r3, #4]
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d003      	beq.n	8009dda <USB_EPClearStall+0x9e>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	791b      	ldrb	r3, [r3, #4]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d10f      	bne.n	8009dfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009df8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e3c:	68f9      	ldr	r1, [r7, #12]
 8009e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e42:	4313      	orrs	r3, r2
 8009e44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e82:	f023 0302 	bic.w	r3, r3, #2
 8009e86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ec4:	f043 0302 	orr.w	r3, r3, #2
 8009ec8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4013      	ands	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	0c1b      	lsrs	r3, r3, #16
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	4013      	ands	r3, r2
 8009f54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	b29b      	uxth	r3, r3
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4013      	ands	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f94:	68bb      	ldr	r3, [r7, #8]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b087      	sub	sp, #28
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd2:	01db      	lsls	r3, r3, #7
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4013      	ands	r3, r2
 8009fee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ffe:	b480      	push	{r7}
 800a000:	b083      	sub	sp, #12
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f003 0301 	and.w	r3, r3, #1
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a034:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a04c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	460b      	mov	r3, r1
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	333c      	adds	r3, #60	; 0x3c
 800a076:	3304      	adds	r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4a26      	ldr	r2, [pc, #152]	; (800a118 <USB_EP0_OutStart+0xb8>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d90a      	bls.n	800a09a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a094:	d101      	bne.n	800a09a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	e037      	b.n	800a10a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c8:	f043 0318 	orr.w	r3, r3, #24
 800a0cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a0e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d10f      	bne.n	800a108 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a102:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	371c      	adds	r7, #28
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	4f54300a 	.word	0x4f54300a

0800a11c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4a13      	ldr	r2, [pc, #76]	; (800a180 <USB_CoreReset+0x64>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d901      	bls.n	800a13a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e01b      	b.n	800a172 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	daf2      	bge.n	800a128 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	f043 0201 	orr.w	r2, r3, #1
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4a09      	ldr	r2, [pc, #36]	; (800a180 <USB_CoreReset+0x64>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d901      	bls.n	800a164 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e006      	b.n	800a172 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d0f0      	beq.n	800a152 <USB_CoreReset+0x36>

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	00030d40 	.word	0x00030d40

0800a184 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800a18c:	4a18      	ldr	r2, [pc, #96]	; (800a1f0 <si5351_Init+0x6c>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800a192:	21ff      	movs	r1, #255	; 0xff
 800a194:	2003      	movs	r0, #3
 800a196:	f000 fa0d 	bl	800a5b4 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800a19a:	2180      	movs	r1, #128	; 0x80
 800a19c:	2010      	movs	r0, #16
 800a19e:	f000 fa09 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800a1a2:	2180      	movs	r1, #128	; 0x80
 800a1a4:	2011      	movs	r0, #17
 800a1a6:	f000 fa05 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800a1aa:	2180      	movs	r1, #128	; 0x80
 800a1ac:	2012      	movs	r0, #18
 800a1ae:	f000 fa01 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800a1b2:	2180      	movs	r1, #128	; 0x80
 800a1b4:	2013      	movs	r0, #19
 800a1b6:	f000 f9fd 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800a1ba:	2180      	movs	r1, #128	; 0x80
 800a1bc:	2014      	movs	r0, #20
 800a1be:	f000 f9f9 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800a1c2:	2180      	movs	r1, #128	; 0x80
 800a1c4:	2015      	movs	r0, #21
 800a1c6:	f000 f9f5 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800a1ca:	2180      	movs	r1, #128	; 0x80
 800a1cc:	2016      	movs	r0, #22
 800a1ce:	f000 f9f1 	bl	800a5b4 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800a1d2:	2180      	movs	r1, #128	; 0x80
 800a1d4:	2017      	movs	r0, #23
 800a1d6:	f000 f9ed 	bl	800a5b4 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800a1da:	23c0      	movs	r3, #192	; 0xc0
 800a1dc:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	20b7      	movs	r0, #183	; 0xb7
 800a1e4:	f000 f9e6 	bl	800a5b4 <si5351_write>
}
 800a1e8:	bf00      	nop
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200004bc 	.word	0x200004bc

0800a1f4 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08c      	sub	sp, #48	; 0x30
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	01da      	lsls	r2, r3, #7
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	01d9      	lsls	r1, r3, #7
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	fb91 f3f3 	sdiv	r3, r1, r3
 800a220:	4413      	add	r3, r2
 800a222:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a226:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	01db      	lsls	r3, r3, #7
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a232:	69f9      	ldr	r1, [r7, #28]
 800a234:	fb01 f202 	mul.w	r2, r1, r2
 800a238:	1a9b      	subs	r3, r3, r2
 800a23a:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <si5351_SetupPLL+0x56>
 800a246:	231a      	movs	r3, #26
 800a248:	e000      	b.n	800a24c <si5351_SetupPLL+0x58>
 800a24a:	2322      	movs	r3, #34	; 0x22
 800a24c:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800a24e:	7bf8      	ldrb	r0, [r7, #15]
 800a250:	2300      	movs	r3, #0
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	69b9      	ldr	r1, [r7, #24]
 800a25e:	f000 f9d1 	bl	800a604 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 800a262:	21a0      	movs	r1, #160	; 0xa0
 800a264:	20b1      	movs	r0, #177	; 0xb1
 800a266:	f000 f9a5 	bl	800a5b4 <si5351_write>
}
 800a26a:	bf00      	nop
 800a26c:	3728      	adds	r7, #40	; 0x28
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800a272:	b580      	push	{r7, lr}
 800a274:	b08c      	sub	sp, #48	; 0x30
 800a276:	af02      	add	r7, sp, #8
 800a278:	603b      	str	r3, [r7, #0]
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
 800a27e:	460b      	mov	r3, r1
 800a280:	71bb      	strb	r3, [r7, #6]
 800a282:	4613      	mov	r3, r2
 800a284:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <si5351_SetupOutput+0x36>
        return 1;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e08d      	b.n	800a3c4 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <si5351_SetupOutput+0x54>
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b07      	cmp	r3, #7
 800a2b4:	dd05      	ble.n	800a2c2 <si5351_SetupOutput+0x50>
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d104      	bne.n	800a2c6 <si5351_SetupOutput+0x54>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e07e      	b.n	800a3c4 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d109      	bne.n	800a2e0 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2de:	e016      	b.n	800a30e <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	01da      	lsls	r2, r3, #7
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	01d9      	lsls	r1, r3, #7
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	fb91 f3f3 	sdiv	r3, r1, r3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a2f4:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	01db      	lsls	r3, r3, #7
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	fb93 f2f2 	sdiv	r2, r3, r2
 800a300:	68b9      	ldr	r1, [r7, #8]
 800a302:	fb01 f202 	mul.w	r2, r1, r2
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d014      	beq.n	800a34a <si5351_SetupOutput+0xd8>
 800a320:	2b02      	cmp	r3, #2
 800a322:	dc19      	bgt.n	800a358 <si5351_SetupOutput+0xe6>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <si5351_SetupOutput+0xbc>
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d007      	beq.n	800a33c <si5351_SetupOutput+0xca>
 800a32c:	e014      	b.n	800a358 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a32e:	232a      	movs	r3, #42	; 0x2a
 800a330:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a332:	23a5      	movs	r3, #165	; 0xa5
 800a334:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a336:	2310      	movs	r3, #16
 800a338:	757b      	strb	r3, [r7, #21]
        break;
 800a33a:	e00d      	b.n	800a358 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a33c:	2332      	movs	r3, #50	; 0x32
 800a33e:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a340:	23a6      	movs	r3, #166	; 0xa6
 800a342:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a344:	2311      	movs	r3, #17
 800a346:	757b      	strb	r3, [r7, #21]
        break;
 800a348:	e006      	b.n	800a358 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a34a:	233a      	movs	r3, #58	; 0x3a
 800a34c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a34e:	23a7      	movs	r3, #167	; 0xa7
 800a350:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a352:	2312      	movs	r3, #18
 800a354:	757b      	strb	r3, [r7, #21]
        break;
 800a356:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a358:	797b      	ldrb	r3, [r7, #5]
 800a35a:	f043 030c 	orr.w	r3, r3, #12
 800a35e:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a360:	79bb      	ldrb	r3, [r7, #6]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d103      	bne.n	800a36e <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a366:	7d3b      	ldrb	r3, [r7, #20]
 800a368:	f043 0320 	orr.w	r3, r3, #32
 800a36c:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d009      	beq.n	800a38a <si5351_SetupOutput+0x118>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <si5351_SetupOutput+0x110>
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b04      	cmp	r3, #4
 800a380:	d103      	bne.n	800a38a <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a382:	7d3b      	ldrb	r3, [r7, #20]
 800a384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a388:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a38a:	7d3a      	ldrb	r2, [r7, #20]
 800a38c:	7d7b      	ldrb	r3, [r7, #21]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f90f 	bl	800a5b4 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	7c1b      	ldrb	r3, [r3, #16]
 800a39a:	7df8      	ldrb	r0, [r7, #23]
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	6a39      	ldr	r1, [r7, #32]
 800a3aa:	f000 f92b 	bl	800a604 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a3ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	7dbb      	ldrb	r3, [r7, #22]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f8f9 	bl	800a5b4 <si5351_write>

    return 0;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3728      	adds	r7, #40	; 0x28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a3cc:	b480      	push	{r7}
 800a3ce:	b08f      	sub	sp, #60	; 0x3c
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a3de:	da03      	bge.n	800a3e8 <si5351_Calc+0x1c>
 800a3e0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	e005      	b.n	800a3f4 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4a4f      	ldr	r2, [pc, #316]	; (800a528 <si5351_Calc+0x15c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	dd01      	ble.n	800a3f4 <si5351_Calc+0x28>
 800a3f0:	4b4d      	ldr	r3, [pc, #308]	; (800a528 <si5351_Calc+0x15c>)
 800a3f2:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	4a4b      	ldr	r2, [pc, #300]	; (800a52c <si5351_Calc+0x160>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	dc06      	bgt.n	800a410 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	019b      	lsls	r3, r3, #6
 800a406:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2206      	movs	r2, #6
 800a40c:	741a      	strb	r2, [r3, #16]
 800a40e:	e002      	b.n	800a416 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4a45      	ldr	r2, [pc, #276]	; (800a530 <si5351_Calc+0x164>)
 800a41a:	fb82 1203 	smull	r1, r2, r2, r3
 800a41e:	1492      	asrs	r2, r2, #18
 800a420:	17db      	asrs	r3, r3, #31
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	4a43      	ldr	r2, [pc, #268]	; (800a534 <si5351_Calc+0x168>)
 800a426:	6812      	ldr	r2, [r2, #0]
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	4a42      	ldr	r2, [pc, #264]	; (800a538 <si5351_Calc+0x16c>)
 800a42e:	fb82 1203 	smull	r1, r2, r2, r3
 800a432:	1152      	asrs	r2, r2, #5
 800a434:	17db      	asrs	r3, r3, #31
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a43e:	4b3f      	ldr	r3, [pc, #252]	; (800a53c <si5351_Calc+0x170>)
 800a440:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4a3e      	ldr	r2, [pc, #248]	; (800a540 <si5351_Calc+0x174>)
 800a446:	4293      	cmp	r3, r2
 800a448:	dc22      	bgt.n	800a490 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a44a:	2324      	movs	r3, #36	; 0x24
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a452:	2301      	movs	r3, #1
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a456:	4b3b      	ldr	r3, [pc, #236]	; (800a544 <si5351_Calc+0x178>)
 800a458:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	151b      	asrs	r3, r3, #20
 800a468:	3301      	adds	r3, #1
 800a46a:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	fb93 f2f2 	sdiv	r2, r3, r2
 800a474:	68f9      	ldr	r1, [r7, #12]
 800a476:	fb01 f202 	mul.w	r2, r1, r2
 800a47a:	1a9a      	subs	r2, r3, r2
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	fb92 f3f3 	sdiv	r3, r2, r3
 800a48c:	623b      	str	r3, [r7, #32]
 800a48e:	e032      	b.n	800a4f6 <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4a2d      	ldr	r2, [pc, #180]	; (800a548 <si5351_Calc+0x17c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	dd02      	ble.n	800a49e <si5351_Calc+0xd2>
            x = 4;
 800a498:	2304      	movs	r3, #4
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a49c:	e008      	b.n	800a4b0 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <si5351_Calc+0x180>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	dd02      	ble.n	800a4ac <si5351_Calc+0xe0>
            x = 6;
 800a4a6:	2306      	movs	r3, #6
 800a4a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4aa:	e001      	b.n	800a4b0 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a4ac:	2308      	movs	r3, #8
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	fb02 f303 	mul.w	r3, r2, r3
 800a4c0:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	151b      	asrs	r3, r3, #20
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	fb93 f2f2 	sdiv	r2, r3, r2
 800a4dc:	69f9      	ldr	r1, [r7, #28]
 800a4de:	fb01 f202 	mul.w	r2, r1, r2
 800a4e2:	1a9a      	subs	r2, r3, r2
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4ea:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4fa:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a500:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a506:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50c:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a512:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a3a      	ldr	r2, [r7, #32]
 800a518:	60da      	str	r2, [r3, #12]
}
 800a51a:	bf00      	nop
 800a51c:	373c      	adds	r7, #60	; 0x3c
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	09896800 	.word	0x09896800
 800a52c:	000f423f 	.word	0x000f423f
 800a530:	431bde83 	.word	0x431bde83
 800a534:	200004bc 	.word	0x200004bc
 800a538:	51eb851f 	.word	0x51eb851f
 800a53c:	017d7840 	.word	0x017d7840
 800a540:	04d3f63f 	.word	0x04d3f63f
 800a544:	35a4e900 	.word	0x35a4e900
 800a548:	08f0d17f 	.word	0x08f0d17f
 800a54c:	05f5e0ff 	.word	0x05f5e0ff

0800a550 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800a550:	b580      	push	{r7, lr}
 800a552:	b08c      	sub	sp, #48	; 0x30
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800a55c:	f107 0208 	add.w	r2, r7, #8
 800a560:	f107 031c 	add.w	r3, r7, #28
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff ff30 	bl	800a3cc <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800a56c:	f107 031c 	add.w	r3, r7, #28
 800a570:	4619      	mov	r1, r3
 800a572:	2000      	movs	r0, #0
 800a574:	f7ff fe3e 	bl	800a1f4 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800a578:	f107 0308 	add.w	r3, r7, #8
 800a57c:	78fa      	ldrb	r2, [r7, #3]
 800a57e:	2100      	movs	r1, #0
 800a580:	9100      	str	r1, [sp, #0]
 800a582:	2100      	movs	r1, #0
 800a584:	2000      	movs	r0, #0
 800a586:	f7ff fe74 	bl	800a272 <si5351_SetupOutput>
}
 800a58a:	bf00      	nop
 800a58c:	3728      	adds	r7, #40	; 0x28
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	4603      	mov	r3, r0
 800a59a:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	43db      	mvns	r3, r3
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	2003      	movs	r0, #3
 800a5a6:	f000 f805 	bl	800a5b4 <si5351_write>
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af04      	add	r7, sp, #16
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	460a      	mov	r2, r1
 800a5be:	71fb      	strb	r3, [r7, #7]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a5c4:	bf00      	nop
 800a5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ca:	2203      	movs	r2, #3
 800a5cc:	21c0      	movs	r1, #192	; 0xc0
 800a5ce:	480c      	ldr	r0, [pc, #48]	; (800a600 <si5351_write+0x4c>)
 800a5d0:	f7f8 fc36 	bl	8002e40 <HAL_I2C_IsDeviceReady>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1f5      	bne.n	800a5c6 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e2:	9302      	str	r3, [sp, #8]
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	1dbb      	adds	r3, r7, #6
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	21c0      	movs	r1, #192	; 0xc0
 800a5f0:	4803      	ldr	r0, [pc, #12]	; (800a600 <si5351_write+0x4c>)
 800a5f2:	f7f8 fb1f 	bl	8002c34 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	200002fc 	.word	0x200002fc

0800a604 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	121b      	asrs	r3, r3, #8
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	4611      	mov	r1, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff ffc8 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a624:	7bfb      	ldrb	r3, [r7, #15]
 800a626:	3301      	adds	r3, #1
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	b2d2      	uxtb	r2, r2
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff ffbf 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	3302      	adds	r3, #2
 800a63a:	b2d8      	uxtb	r0, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	141b      	asrs	r3, r3, #16
 800a640:	b25b      	sxtb	r3, r3
 800a642:	f003 0303 	and.w	r3, r3, #3
 800a646:	b25a      	sxtb	r2, r3
 800a648:	7e3b      	ldrb	r3, [r7, #24]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	b25b      	sxtb	r3, r3
 800a64e:	f003 030c 	and.w	r3, r3, #12
 800a652:	b25b      	sxtb	r3, r3
 800a654:	4313      	orrs	r3, r2
 800a656:	b25a      	sxtb	r2, r3
 800a658:	7f3b      	ldrb	r3, [r7, #28]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a662:	b25b      	sxtb	r3, r3
 800a664:	4313      	orrs	r3, r2
 800a666:	b25b      	sxtb	r3, r3
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	4619      	mov	r1, r3
 800a66c:	f7ff ffa2 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	3303      	adds	r3, #3
 800a674:	b2da      	uxtb	r2, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	121b      	asrs	r3, r3, #8
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	f7ff ff98 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	3304      	adds	r3, #4
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	b2d2      	uxtb	r2, r2
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff ff8f 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	3305      	adds	r3, #5
 800a69a:	b2d8      	uxtb	r0, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	131b      	asrs	r3, r3, #12
 800a6a0:	b25b      	sxtb	r3, r3
 800a6a2:	f023 030f 	bic.w	r3, r3, #15
 800a6a6:	b25a      	sxtb	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	141b      	asrs	r3, r3, #16
 800a6ac:	b25b      	sxtb	r3, r3
 800a6ae:	f003 030f 	and.w	r3, r3, #15
 800a6b2:	b25b      	sxtb	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b25b      	sxtb	r3, r3
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	f7ff ff7a 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	3306      	adds	r3, #6
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	121b      	asrs	r3, r3, #8
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	f7ff ff70 	bl	800a5b4 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	3307      	adds	r3, #7
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	b2d2      	uxtb	r2, r2
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff ff67 	bl	800a5b4 <si5351_write>
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a700:	f005 fa88 	bl	800fc14 <USBD_static_malloc>
 800a704:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d109      	bne.n	800a720 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	32b0      	adds	r2, #176	; 0xb0
 800a716:	2100      	movs	r1, #0
 800a718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a71c:	2302      	movs	r3, #2
 800a71e:	e0d4      	b.n	800a8ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a720:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a724:	2100      	movs	r1, #0
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f005 fbfa 	bl	800ff20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32b0      	adds	r2, #176	; 0xb0
 800a736:	68f9      	ldr	r1, [r7, #12]
 800a738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	32b0      	adds	r2, #176	; 0xb0
 800a746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7c1b      	ldrb	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d138      	bne.n	800a7ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a758:	4b5e      	ldr	r3, [pc, #376]	; (800a8d4 <USBD_CDC_Init+0x1e4>)
 800a75a:	7819      	ldrb	r1, [r3, #0]
 800a75c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a760:	2202      	movs	r2, #2
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f005 f933 	bl	800f9ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a768:	4b5a      	ldr	r3, [pc, #360]	; (800a8d4 <USBD_CDC_Init+0x1e4>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 020f 	and.w	r2, r3, #15
 800a770:	6879      	ldr	r1, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	440b      	add	r3, r1
 800a77c:	3324      	adds	r3, #36	; 0x24
 800a77e:	2201      	movs	r2, #1
 800a780:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a782:	4b55      	ldr	r3, [pc, #340]	; (800a8d8 <USBD_CDC_Init+0x1e8>)
 800a784:	7819      	ldrb	r1, [r3, #0]
 800a786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a78a:	2202      	movs	r2, #2
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f005 f91e 	bl	800f9ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a792:	4b51      	ldr	r3, [pc, #324]	; (800a8d8 <USBD_CDC_Init+0x1e8>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f003 020f 	and.w	r2, r3, #15
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a7ae:	4b4b      	ldr	r3, [pc, #300]	; (800a8dc <USBD_CDC_Init+0x1ec>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	f003 020f 	and.w	r2, r3, #15
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	3326      	adds	r3, #38	; 0x26
 800a7c4:	2210      	movs	r2, #16
 800a7c6:	801a      	strh	r2, [r3, #0]
 800a7c8:	e035      	b.n	800a836 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7ca:	4b42      	ldr	r3, [pc, #264]	; (800a8d4 <USBD_CDC_Init+0x1e4>)
 800a7cc:	7819      	ldrb	r1, [r3, #0]
 800a7ce:	2340      	movs	r3, #64	; 0x40
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f005 f8fb 	bl	800f9ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7d8:	4b3e      	ldr	r3, [pc, #248]	; (800a8d4 <USBD_CDC_Init+0x1e4>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 020f 	and.w	r2, r3, #15
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	3324      	adds	r3, #36	; 0x24
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7f2:	4b39      	ldr	r3, [pc, #228]	; (800a8d8 <USBD_CDC_Init+0x1e8>)
 800a7f4:	7819      	ldrb	r1, [r3, #0]
 800a7f6:	2340      	movs	r3, #64	; 0x40
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f005 f8e7 	bl	800f9ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a800:	4b35      	ldr	r3, [pc, #212]	; (800a8d8 <USBD_CDC_Init+0x1e8>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a818:	2201      	movs	r2, #1
 800a81a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a81c:	4b2f      	ldr	r3, [pc, #188]	; (800a8dc <USBD_CDC_Init+0x1ec>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f003 020f 	and.w	r2, r3, #15
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	440b      	add	r3, r1
 800a830:	3326      	adds	r3, #38	; 0x26
 800a832:	2210      	movs	r2, #16
 800a834:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a836:	4b29      	ldr	r3, [pc, #164]	; (800a8dc <USBD_CDC_Init+0x1ec>)
 800a838:	7819      	ldrb	r1, [r3, #0]
 800a83a:	2308      	movs	r3, #8
 800a83c:	2203      	movs	r2, #3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f005 f8c5 	bl	800f9ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a844:	4b25      	ldr	r3, [pc, #148]	; (800a8dc <USBD_CDC_Init+0x1ec>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f003 020f 	and.w	r2, r3, #15
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	440b      	add	r3, r1
 800a858:	3324      	adds	r3, #36	; 0x24
 800a85a:	2201      	movs	r2, #1
 800a85c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	33b0      	adds	r3, #176	; 0xb0
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a894:	2302      	movs	r3, #2
 800a896:	e018      	b.n	800a8ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	7c1b      	ldrb	r3, [r3, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8a0:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <USBD_CDC_Init+0x1e8>)
 800a8a2:	7819      	ldrb	r1, [r3, #0]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f005 f97c 	bl	800fbac <USBD_LL_PrepareReceive>
 800a8b4:	e008      	b.n	800a8c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8b6:	4b08      	ldr	r3, [pc, #32]	; (800a8d8 <USBD_CDC_Init+0x1e8>)
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8c0:	2340      	movs	r3, #64	; 0x40
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f005 f972 	bl	800fbac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	200001e3 	.word	0x200001e3
 800a8d8:	200001e4 	.word	0x200001e4
 800a8dc:	200001e5 	.word	0x200001e5

0800a8e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8ec:	4b3a      	ldr	r3, [pc, #232]	; (800a9d8 <USBD_CDC_DeInit+0xf8>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f005 f891 	bl	800fa1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8f8:	4b37      	ldr	r3, [pc, #220]	; (800a9d8 <USBD_CDC_DeInit+0xf8>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	f003 020f 	and.w	r2, r3, #15
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	4613      	mov	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4413      	add	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	440b      	add	r3, r1
 800a90c:	3324      	adds	r3, #36	; 0x24
 800a90e:	2200      	movs	r2, #0
 800a910:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a912:	4b32      	ldr	r3, [pc, #200]	; (800a9dc <USBD_CDC_DeInit+0xfc>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f005 f87e 	bl	800fa1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a91e:	4b2f      	ldr	r3, [pc, #188]	; (800a9dc <USBD_CDC_DeInit+0xfc>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 020f 	and.w	r2, r3, #15
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a936:	2200      	movs	r2, #0
 800a938:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a93a:	4b29      	ldr	r3, [pc, #164]	; (800a9e0 <USBD_CDC_DeInit+0x100>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f005 f86a 	bl	800fa1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a946:	4b26      	ldr	r3, [pc, #152]	; (800a9e0 <USBD_CDC_DeInit+0x100>)
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	f003 020f 	and.w	r2, r3, #15
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	2200      	movs	r2, #0
 800a95e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a960:	4b1f      	ldr	r3, [pc, #124]	; (800a9e0 <USBD_CDC_DeInit+0x100>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f003 020f 	and.w	r2, r3, #15
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	3326      	adds	r3, #38	; 0x26
 800a976:	2200      	movs	r2, #0
 800a978:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	32b0      	adds	r2, #176	; 0xb0
 800a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01f      	beq.n	800a9cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	33b0      	adds	r3, #176	; 0xb0
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	32b0      	adds	r2, #176	; 0xb0
 800a9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f005 f93e 	bl	800fc30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32b0      	adds	r2, #176	; 0xb0
 800a9be:	2100      	movs	r1, #0
 800a9c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200001e3 	.word	0x200001e3
 800a9dc:	200001e4 	.word	0x200001e4
 800a9e0:	200001e5 	.word	0x200001e5

0800a9e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	32b0      	adds	r2, #176	; 0xb0
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e0bf      	b.n	800ab94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d050      	beq.n	800aac2 <USBD_CDC_Setup+0xde>
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	f040 80af 	bne.w	800ab84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	88db      	ldrh	r3, [r3, #6]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d03a      	beq.n	800aaa4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	b25b      	sxtb	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	da1b      	bge.n	800aa70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	33b0      	adds	r3, #176	; 0xb0
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	88d2      	ldrh	r2, [r2, #6]
 800aa54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	88db      	ldrh	r3, [r3, #6]
 800aa5a:	2b07      	cmp	r3, #7
 800aa5c:	bf28      	it	cs
 800aa5e:	2307      	movcs	r3, #7
 800aa60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	89fa      	ldrh	r2, [r7, #14]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 fda5 	bl	800c5b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa6e:	e090      	b.n	800ab92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	785a      	ldrb	r2, [r3, #1]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	88db      	ldrh	r3, [r3, #6]
 800aa7e:	2b3f      	cmp	r3, #63	; 0x3f
 800aa80:	d803      	bhi.n	800aa8a <USBD_CDC_Setup+0xa6>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	88db      	ldrh	r3, [r3, #6]
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	e000      	b.n	800aa8c <USBD_CDC_Setup+0xa8>
 800aa8a:	2240      	movs	r2, #64	; 0x40
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa92:	6939      	ldr	r1, [r7, #16]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 fdb7 	bl	800c610 <USBD_CtlPrepareRx>
      break;
 800aaa2:	e076      	b.n	800ab92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	33b0      	adds	r3, #176	; 0xb0
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	7850      	ldrb	r0, [r2, #1]
 800aaba:	2200      	movs	r2, #0
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	4798      	blx	r3
      break;
 800aac0:	e067      	b.n	800ab92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	2b0b      	cmp	r3, #11
 800aac8:	d851      	bhi.n	800ab6e <USBD_CDC_Setup+0x18a>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_CDC_Setup+0xec>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800ab01 	.word	0x0800ab01
 800aad4:	0800ab7d 	.word	0x0800ab7d
 800aad8:	0800ab6f 	.word	0x0800ab6f
 800aadc:	0800ab6f 	.word	0x0800ab6f
 800aae0:	0800ab6f 	.word	0x0800ab6f
 800aae4:	0800ab6f 	.word	0x0800ab6f
 800aae8:	0800ab6f 	.word	0x0800ab6f
 800aaec:	0800ab6f 	.word	0x0800ab6f
 800aaf0:	0800ab6f 	.word	0x0800ab6f
 800aaf4:	0800ab6f 	.word	0x0800ab6f
 800aaf8:	0800ab2b 	.word	0x0800ab2b
 800aafc:	0800ab55 	.word	0x0800ab55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d107      	bne.n	800ab1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab0c:	f107 030a 	add.w	r3, r7, #10
 800ab10:	2202      	movs	r2, #2
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f001 fd4f 	bl	800c5b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab1a:	e032      	b.n	800ab82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 fcd9 	bl	800c4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab24:	2303      	movs	r3, #3
 800ab26:	75fb      	strb	r3, [r7, #23]
          break;
 800ab28:	e02b      	b.n	800ab82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d107      	bne.n	800ab46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab36:	f107 030d 	add.w	r3, r7, #13
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f001 fd3a 	bl	800c5b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab44:	e01d      	b.n	800ab82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 fcc4 	bl	800c4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	75fb      	strb	r3, [r7, #23]
          break;
 800ab52:	e016      	b.n	800ab82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d00f      	beq.n	800ab80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 fcb7 	bl	800c4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab6c:	e008      	b.n	800ab80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 fcb0 	bl	800c4d6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab76:	2303      	movs	r3, #3
 800ab78:	75fb      	strb	r3, [r7, #23]
          break;
 800ab7a:	e002      	b.n	800ab82 <USBD_CDC_Setup+0x19e>
          break;
 800ab7c:	bf00      	nop
 800ab7e:	e008      	b.n	800ab92 <USBD_CDC_Setup+0x1ae>
          break;
 800ab80:	bf00      	nop
      }
      break;
 800ab82:	e006      	b.n	800ab92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f001 fca5 	bl	800c4d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab90:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	32b0      	adds	r2, #176	; 0xb0
 800abba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e065      	b.n	800ac92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	32b0      	adds	r2, #176	; 0xb0
 800abd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abd6:	78fb      	ldrb	r3, [r7, #3]
 800abd8:	f003 020f 	and.w	r2, r3, #15
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	440b      	add	r3, r1
 800abe8:	3318      	adds	r3, #24
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d02f      	beq.n	800ac50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abf0:	78fb      	ldrb	r3, [r7, #3]
 800abf2:	f003 020f 	and.w	r2, r3, #15
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	3318      	adds	r3, #24
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	78fb      	ldrb	r3, [r7, #3]
 800ac08:	f003 010f 	and.w	r1, r3, #15
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	00db      	lsls	r3, r3, #3
 800ac12:	440b      	add	r3, r1
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4403      	add	r3, r0
 800ac18:	3348      	adds	r3, #72	; 0x48
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac20:	fb01 f303 	mul.w	r3, r1, r3
 800ac24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d112      	bne.n	800ac50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	f003 020f 	and.w	r2, r3, #15
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	4613      	mov	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	440b      	add	r3, r1
 800ac3c:	3318      	adds	r3, #24
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac42:	78f9      	ldrb	r1, [r7, #3]
 800ac44:	2300      	movs	r3, #0
 800ac46:	2200      	movs	r2, #0
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f004 ff8e 	bl	800fb6a <USBD_LL_Transmit>
 800ac4e:	e01f      	b.n	800ac90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	33b0      	adds	r3, #176	; 0xb0
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d010      	beq.n	800ac90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	33b0      	adds	r3, #176	; 0xb0
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac8c:	78fa      	ldrb	r2, [r7, #3]
 800ac8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	32b0      	adds	r2, #176	; 0xb0
 800acb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	32b0      	adds	r2, #176	; 0xb0
 800acc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800acc8:	2303      	movs	r3, #3
 800acca:	e01a      	b.n	800ad02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f004 ff8c 	bl	800fbee <USBD_LL_GetRxDataSize>
 800acd6:	4602      	mov	r2, r0
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	33b0      	adds	r3, #176	; 0xb0
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800acfc:	4611      	mov	r1, r2
 800acfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	32b0      	adds	r2, #176	; 0xb0
 800ad1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e025      	b.n	800ad78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	33b0      	adds	r3, #176	; 0xb0
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d01a      	beq.n	800ad76 <USBD_CDC_EP0_RxReady+0x6c>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad46:	2bff      	cmp	r3, #255	; 0xff
 800ad48:	d015      	beq.n	800ad76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	33b0      	adds	r3, #176	; 0xb0
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad6a:	b292      	uxth	r2, r2
 800ad6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	22ff      	movs	r2, #255	; 0xff
 800ad72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad88:	2182      	movs	r1, #130	; 0x82
 800ad8a:	4818      	ldr	r0, [pc, #96]	; (800adec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad8c:	f000 fd6b 	bl	800b866 <USBD_GetEpDesc>
 800ad90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad92:	2101      	movs	r1, #1
 800ad94:	4815      	ldr	r0, [pc, #84]	; (800adec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad96:	f000 fd66 	bl	800b866 <USBD_GetEpDesc>
 800ad9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad9c:	2181      	movs	r1, #129	; 0x81
 800ad9e:	4813      	ldr	r0, [pc, #76]	; (800adec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ada0:	f000 fd61 	bl	800b866 <USBD_GetEpDesc>
 800ada4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2210      	movs	r2, #16
 800adb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d006      	beq.n	800adc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	2200      	movs	r2, #0
 800adbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adc0:	711a      	strb	r2, [r3, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800add4:	711a      	strb	r2, [r3, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2243      	movs	r2, #67	; 0x43
 800adde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ade0:	4b02      	ldr	r3, [pc, #8]	; (800adec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	200001a0 	.word	0x200001a0

0800adf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adf8:	2182      	movs	r1, #130	; 0x82
 800adfa:	4818      	ldr	r0, [pc, #96]	; (800ae5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adfc:	f000 fd33 	bl	800b866 <USBD_GetEpDesc>
 800ae00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae02:	2101      	movs	r1, #1
 800ae04:	4815      	ldr	r0, [pc, #84]	; (800ae5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae06:	f000 fd2e 	bl	800b866 <USBD_GetEpDesc>
 800ae0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae0c:	2181      	movs	r1, #129	; 0x81
 800ae0e:	4813      	ldr	r0, [pc, #76]	; (800ae5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae10:	f000 fd29 	bl	800b866 <USBD_GetEpDesc>
 800ae14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2210      	movs	r2, #16
 800ae20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d006      	beq.n	800ae36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	711a      	strb	r2, [r3, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f042 0202 	orr.w	r2, r2, #2
 800ae34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	711a      	strb	r2, [r3, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f042 0202 	orr.w	r2, r2, #2
 800ae48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2243      	movs	r2, #67	; 0x43
 800ae4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200001a0 	.word	0x200001a0

0800ae60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae68:	2182      	movs	r1, #130	; 0x82
 800ae6a:	4818      	ldr	r0, [pc, #96]	; (800aecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae6c:	f000 fcfb 	bl	800b866 <USBD_GetEpDesc>
 800ae70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae72:	2101      	movs	r1, #1
 800ae74:	4815      	ldr	r0, [pc, #84]	; (800aecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae76:	f000 fcf6 	bl	800b866 <USBD_GetEpDesc>
 800ae7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae7c:	2181      	movs	r1, #129	; 0x81
 800ae7e:	4813      	ldr	r0, [pc, #76]	; (800aecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae80:	f000 fcf1 	bl	800b866 <USBD_GetEpDesc>
 800ae84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2210      	movs	r2, #16
 800ae90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d006      	beq.n	800aea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aea0:	711a      	strb	r2, [r3, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d006      	beq.n	800aeba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeb4:	711a      	strb	r2, [r3, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2243      	movs	r2, #67	; 0x43
 800aebe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aec0:	4b02      	ldr	r3, [pc, #8]	; (800aecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	200001a0 	.word	0x200001a0

0800aed0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	220a      	movs	r2, #10
 800aedc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aede:	4b03      	ldr	r3, [pc, #12]	; (800aeec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	2000015c 	.word	0x2000015c

0800aef0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af00:	2303      	movs	r3, #3
 800af02:	e009      	b.n	800af18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	33b0      	adds	r3, #176	; 0xb0
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	32b0      	adds	r2, #176	; 0xb0
 800af3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af46:	2303      	movs	r3, #3
 800af48:	e008      	b.n	800af5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	371c      	adds	r7, #28
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	32b0      	adds	r2, #176	; 0xb0
 800af7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af88:	2303      	movs	r3, #3
 800af8a:	e004      	b.n	800af96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
	...

0800afa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	32b0      	adds	r2, #176	; 0xb0
 800afb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800afbc:	2301      	movs	r3, #1
 800afbe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	32b0      	adds	r2, #176	; 0xb0
 800afca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e025      	b.n	800b022 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d11f      	bne.n	800b020 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800afe8:	4b10      	ldr	r3, [pc, #64]	; (800b02c <USBD_CDC_TransmitPacket+0x88>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 020f 	and.w	r2, r3, #15
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	4613      	mov	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4403      	add	r3, r0
 800b002:	3318      	adds	r3, #24
 800b004:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b006:	4b09      	ldr	r3, [pc, #36]	; (800b02c <USBD_CDC_TransmitPacket+0x88>)
 800b008:	7819      	ldrb	r1, [r3, #0]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f004 fda7 	bl	800fb6a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200001e3 	.word	0x200001e3

0800b030 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	; 0xb0
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32b0      	adds	r2, #176	; 0xb0
 800b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e018      	b.n	800b090 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	7c1b      	ldrb	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10a      	bne.n	800b07c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b066:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <USBD_CDC_ReceivePacket+0x68>)
 800b068:	7819      	ldrb	r1, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f004 fd99 	bl	800fbac <USBD_LL_PrepareReceive>
 800b07a:	e008      	b.n	800b08e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b07c:	4b06      	ldr	r3, [pc, #24]	; (800b098 <USBD_CDC_ReceivePacket+0x68>)
 800b07e:	7819      	ldrb	r1, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b086:	2340      	movs	r3, #64	; 0x40
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f004 fd8f 	bl	800fbac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	200001e4 	.word	0x200001e4

0800b09c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800b0b0:	4817      	ldr	r0, [pc, #92]	; (800b110 <USBD_Init+0x74>)
 800b0b2:	f005 f81d 	bl	80100f0 <iprintf>
 800b0b6:	4817      	ldr	r0, [pc, #92]	; (800b114 <USBD_Init+0x78>)
 800b0b8:	f005 f81a 	bl	80100f0 <iprintf>
 800b0bc:	200a      	movs	r0, #10
 800b0be:	f005 f82f 	bl	8010120 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e01f      	b.n	800b106 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d003      	beq.n	800b0ec <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	79fa      	ldrb	r2, [r7, #7]
 800b0f8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f004 fc00 	bl	800f900 <USBD_LL_Init>
 800b100:	4603      	mov	r3, r0
 800b102:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	080114f8 	.word	0x080114f8
 800b114:	08011500 	.word	0x08011500

0800b118 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b122:	2300      	movs	r3, #0
 800b124:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b12c:	481a      	ldr	r0, [pc, #104]	; (800b198 <USBD_RegisterClass+0x80>)
 800b12e:	f004 ffdf 	bl	80100f0 <iprintf>
 800b132:	481a      	ldr	r0, [pc, #104]	; (800b19c <USBD_RegisterClass+0x84>)
 800b134:	f004 ffdc 	bl	80100f0 <iprintf>
 800b138:	200a      	movs	r0, #10
 800b13a:	f004 fff1 	bl	8010120 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b13e:	2303      	movs	r3, #3
 800b140:	e025      	b.n	800b18e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	32ae      	adds	r2, #174	; 0xae
 800b154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00f      	beq.n	800b17e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	32ae      	adds	r2, #174	; 0xae
 800b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	f107 020e 	add.w	r2, r7, #14
 800b172:	4610      	mov	r0, r2
 800b174:	4798      	blx	r3
 800b176:	4602      	mov	r2, r0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	080114f8 	.word	0x080114f8
 800b19c:	08011518 	.word	0x08011518

0800b1a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f004 fbf5 	bl	800f998 <USBD_LL_Start>
 800b1ae:	4603      	mov	r3, r0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d009      	beq.n	800b1fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	4798      	blx	r3
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	460b      	mov	r3, r1
 800b210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	78fa      	ldrb	r2, [r7, #3]
 800b220:	4611      	mov	r1, r2
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	4798      	blx	r3
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 f908 	bl	800c462 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b260:	461a      	mov	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b26e:	f003 031f 	and.w	r3, r3, #31
 800b272:	2b02      	cmp	r3, #2
 800b274:	d01a      	beq.n	800b2ac <USBD_LL_SetupStage+0x72>
 800b276:	2b02      	cmp	r3, #2
 800b278:	d822      	bhi.n	800b2c0 <USBD_LL_SetupStage+0x86>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <USBD_LL_SetupStage+0x4a>
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d00a      	beq.n	800b298 <USBD_LL_SetupStage+0x5e>
 800b282:	e01d      	b.n	800b2c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fb5f 	bl	800b950 <USBD_StdDevReq>
 800b292:	4603      	mov	r3, r0
 800b294:	73fb      	strb	r3, [r7, #15]
      break;
 800b296:	e020      	b.n	800b2da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fbc7 	bl	800ba34 <USBD_StdItfReq>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2aa:	e016      	b.n	800b2da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fc29 	bl	800bb0c <USBD_StdEPReq>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2be:	e00c      	b.n	800b2da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f004 fbc2 	bl	800fa58 <USBD_LL_StallEP>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d8:	bf00      	nop
  }

  return ret;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2f6:	7afb      	ldrb	r3, [r7, #11]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d16e      	bne.n	800b3da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b302:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	f040 8098 	bne.w	800b440 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	689a      	ldr	r2, [r3, #8]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d913      	bls.n	800b344 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	1ad2      	subs	r2, r2, r3
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	4293      	cmp	r3, r2
 800b334:	bf28      	it	cs
 800b336:	4613      	movcs	r3, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f001 f984 	bl	800c64a <USBD_CtlContinueRx>
 800b342:	e07d      	b.n	800b440 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b34a:	f003 031f 	and.w	r3, r3, #31
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d014      	beq.n	800b37c <USBD_LL_DataOutStage+0x98>
 800b352:	2b02      	cmp	r3, #2
 800b354:	d81d      	bhi.n	800b392 <USBD_LL_DataOutStage+0xae>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <USBD_LL_DataOutStage+0x7c>
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d003      	beq.n	800b366 <USBD_LL_DataOutStage+0x82>
 800b35e:	e018      	b.n	800b392 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b360:	2300      	movs	r3, #0
 800b362:	75bb      	strb	r3, [r7, #22]
            break;
 800b364:	e018      	b.n	800b398 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	4619      	mov	r1, r3
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 fa5e 	bl	800b832 <USBD_CoreFindIF>
 800b376:	4603      	mov	r3, r0
 800b378:	75bb      	strb	r3, [r7, #22]
            break;
 800b37a:	e00d      	b.n	800b398 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b382:	b2db      	uxtb	r3, r3
 800b384:	4619      	mov	r1, r3
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 fa60 	bl	800b84c <USBD_CoreFindEP>
 800b38c:	4603      	mov	r3, r0
 800b38e:	75bb      	strb	r3, [r7, #22]
            break;
 800b390:	e002      	b.n	800b398 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	75bb      	strb	r3, [r7, #22]
            break;
 800b396:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b398:	7dbb      	ldrb	r3, [r7, #22]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d119      	bne.n	800b3d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d113      	bne.n	800b3d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b3aa:	7dba      	ldrb	r2, [r7, #22]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	32ae      	adds	r2, #174	; 0xae
 800b3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b3ba:	7dba      	ldrb	r2, [r7, #22]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b3c2:	7dba      	ldrb	r2, [r7, #22]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	32ae      	adds	r2, #174	; 0xae
 800b3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f001 f94a 	bl	800c66c <USBD_CtlSendStatus>
 800b3d8:	e032      	b.n	800b440 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b3da:	7afb      	ldrb	r3, [r7, #11]
 800b3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 fa31 	bl	800b84c <USBD_CoreFindEP>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3ee:	7dbb      	ldrb	r3, [r7, #22]
 800b3f0:	2bff      	cmp	r3, #255	; 0xff
 800b3f2:	d025      	beq.n	800b440 <USBD_LL_DataOutStage+0x15c>
 800b3f4:	7dbb      	ldrb	r3, [r7, #22]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d122      	bne.n	800b440 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b03      	cmp	r3, #3
 800b404:	d117      	bne.n	800b436 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b406:	7dba      	ldrb	r2, [r7, #22]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	32ae      	adds	r2, #174	; 0xae
 800b40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00f      	beq.n	800b436 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b416:	7dba      	ldrb	r2, [r7, #22]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b41e:	7dba      	ldrb	r2, [r7, #22]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	32ae      	adds	r2, #174	; 0xae
 800b424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	7afa      	ldrb	r2, [r7, #11]
 800b42c:	4611      	mov	r1, r2
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	4798      	blx	r3
 800b432:	4603      	mov	r3, r0
 800b434:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	e000      	b.n	800b442 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b086      	sub	sp, #24
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	460b      	mov	r3, r1
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b458:	7afb      	ldrb	r3, [r7, #11]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d16f      	bne.n	800b53e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3314      	adds	r3, #20
 800b462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d15a      	bne.n	800b524 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	689a      	ldr	r2, [r3, #8]
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d914      	bls.n	800b4a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	1ad2      	subs	r2, r2, r3
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	461a      	mov	r2, r3
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f001 f8ac 	bl	800c5ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b496:	2300      	movs	r3, #0
 800b498:	2200      	movs	r2, #0
 800b49a:	2100      	movs	r1, #0
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f004 fb85 	bl	800fbac <USBD_LL_PrepareReceive>
 800b4a2:	e03f      	b.n	800b524 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d11c      	bne.n	800b4ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d316      	bcc.n	800b4ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d20f      	bcs.n	800b4ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f001 f88d 	bl	800c5ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4dc:	2300      	movs	r3, #0
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f004 fb62 	bl	800fbac <USBD_LL_PrepareReceive>
 800b4e8:	e01c      	b.n	800b524 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d10f      	bne.n	800b516 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d009      	beq.n	800b516 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b516:	2180      	movs	r1, #128	; 0x80
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f004 fa9d 	bl	800fa58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f001 f8b7 	bl	800c692 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d03a      	beq.n	800b5a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7ff fe42 	bl	800b1b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b53c:	e032      	b.n	800b5a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b544:	b2db      	uxtb	r3, r3
 800b546:	4619      	mov	r1, r3
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f97f 	bl	800b84c <USBD_CoreFindEP>
 800b54e:	4603      	mov	r3, r0
 800b550:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	2bff      	cmp	r3, #255	; 0xff
 800b556:	d025      	beq.n	800b5a4 <USBD_LL_DataInStage+0x15a>
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d122      	bne.n	800b5a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b03      	cmp	r3, #3
 800b568:	d11c      	bne.n	800b5a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b56a:	7dfa      	ldrb	r2, [r7, #23]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	32ae      	adds	r2, #174	; 0xae
 800b570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d014      	beq.n	800b5a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b57a:	7dfa      	ldrb	r2, [r7, #23]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b582:	7dfa      	ldrb	r2, [r7, #23]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	32ae      	adds	r2, #174	; 0xae
 800b588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	7afa      	ldrb	r2, [r7, #11]
 800b590:	4611      	mov	r1, r2
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	4798      	blx	r3
 800b596:	4603      	mov	r3, r0
 800b598:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b59a:	7dbb      	ldrb	r3, [r7, #22]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b5a0:	7dbb      	ldrb	r3, [r7, #22]
 800b5a2:	e000      	b.n	800b5a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d014      	beq.n	800b614 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00e      	beq.n	800b614 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6852      	ldr	r2, [r2, #4]
 800b602:	b2d2      	uxtb	r2, r2
 800b604:	4611      	mov	r1, r2
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	4798      	blx	r3
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b610:	2303      	movs	r3, #3
 800b612:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b614:	2340      	movs	r3, #64	; 0x40
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f004 f9d7 	bl	800f9ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2240      	movs	r2, #64	; 0x40
 800b62c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	2200      	movs	r2, #0
 800b634:	2180      	movs	r1, #128	; 0x80
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f004 f9c9 	bl	800f9ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2240      	movs	r2, #64	; 0x40
 800b646:	621a      	str	r2, [r3, #32]

  return ret;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	78fa      	ldrb	r2, [r7, #3]
 800b662:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2204      	movs	r2, #4
 800b68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b083      	sub	sp, #12
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	d106      	bne.n	800b6c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d110      	bne.n	800b704 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d005      	beq.n	800b704 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fe:	69db      	ldr	r3, [r3, #28]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b082      	sub	sp, #8
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	460b      	mov	r3, r1
 800b718:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	32ae      	adds	r2, #174	; 0xae
 800b724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e01c      	b.n	800b76a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d115      	bne.n	800b768 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	32ae      	adds	r2, #174	; 0xae
 800b746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00b      	beq.n	800b768 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	32ae      	adds	r2, #174	; 0xae
 800b75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	4611      	mov	r1, r2
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	32ae      	adds	r2, #174	; 0xae
 800b788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b790:	2303      	movs	r3, #3
 800b792:	e01c      	b.n	800b7ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d115      	bne.n	800b7cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	32ae      	adds	r2, #174	; 0xae
 800b7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00b      	beq.n	800b7cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32ae      	adds	r2, #174	; 0xae
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	78fa      	ldrb	r2, [r7, #3]
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00e      	beq.n	800b828 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6852      	ldr	r2, [r2, #4]
 800b816:	b2d2      	uxtb	r2, r2
 800b818:	4611      	mov	r1, r2
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	4798      	blx	r3
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	460b      	mov	r3, r1
 800b83c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b83e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b858:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b086      	sub	sp, #24
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	885b      	ldrh	r3, [r3, #2]
 800b882:	b29a      	uxth	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d920      	bls.n	800b8d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	b29b      	uxth	r3, r3
 800b894:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b896:	e013      	b.n	800b8c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b898:	f107 030a 	add.w	r3, r7, #10
 800b89c:	4619      	mov	r1, r3
 800b89e:	6978      	ldr	r0, [r7, #20]
 800b8a0:	f000 f81b 	bl	800b8da <USBD_GetNextDesc>
 800b8a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	785b      	ldrb	r3, [r3, #1]
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	d108      	bne.n	800b8c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	789b      	ldrb	r3, [r3, #2]
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d008      	beq.n	800b8ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	885b      	ldrh	r3, [r3, #2]
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	897b      	ldrh	r3, [r7, #10]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d8e5      	bhi.n	800b898 <USBD_GetEpDesc+0x32>
 800b8cc:	e000      	b.n	800b8d0 <USBD_GetEpDesc+0x6a>
          break;
 800b8ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b8d0:	693b      	ldr	r3, [r7, #16]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	881a      	ldrh	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	4413      	add	r3, r2
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4413      	add	r3, r2
 800b904:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b906:	68fb      	ldr	r3, [r7, #12]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b914:	b480      	push	{r7}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	3301      	adds	r3, #1
 800b92a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b932:	8a3b      	ldrh	r3, [r7, #16]
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	b21a      	sxth	r2, r3
 800b938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	b21b      	sxth	r3, r3
 800b940:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b942:	89fb      	ldrh	r3, [r7, #14]
}
 800b944:	4618      	mov	r0, r3
 800b946:	371c      	adds	r7, #28
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b966:	2b40      	cmp	r3, #64	; 0x40
 800b968:	d005      	beq.n	800b976 <USBD_StdDevReq+0x26>
 800b96a:	2b40      	cmp	r3, #64	; 0x40
 800b96c:	d857      	bhi.n	800ba1e <USBD_StdDevReq+0xce>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00f      	beq.n	800b992 <USBD_StdDevReq+0x42>
 800b972:	2b20      	cmp	r3, #32
 800b974:	d153      	bne.n	800ba1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	32ae      	adds	r2, #174	; 0xae
 800b980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4798      	blx	r3
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
      break;
 800b990:	e04a      	b.n	800ba28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	2b09      	cmp	r3, #9
 800b998:	d83b      	bhi.n	800ba12 <USBD_StdDevReq+0xc2>
 800b99a:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <USBD_StdDevReq+0x50>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9f5 	.word	0x0800b9f5
 800b9a4:	0800ba09 	.word	0x0800ba09
 800b9a8:	0800ba13 	.word	0x0800ba13
 800b9ac:	0800b9ff 	.word	0x0800b9ff
 800b9b0:	0800ba13 	.word	0x0800ba13
 800b9b4:	0800b9d3 	.word	0x0800b9d3
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	0800ba13 	.word	0x0800ba13
 800b9c0:	0800b9eb 	.word	0x0800b9eb
 800b9c4:	0800b9dd 	.word	0x0800b9dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa3c 	bl	800be48 <USBD_GetDescriptor>
          break;
 800b9d0:	e024      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fba1 	bl	800c11c <USBD_SetAddress>
          break;
 800b9da:	e01f      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fbe0 	bl	800c1a4 <USBD_SetConfig>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73fb      	strb	r3, [r7, #15]
          break;
 800b9e8:	e018      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 fc83 	bl	800c2f8 <USBD_GetConfig>
          break;
 800b9f2:	e013      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fcb4 	bl	800c364 <USBD_GetStatus>
          break;
 800b9fc:	e00e      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9fe:	6839      	ldr	r1, [r7, #0]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fce3 	bl	800c3cc <USBD_SetFeature>
          break;
 800ba06:	e009      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fd07 	bl	800c41e <USBD_ClrFeature>
          break;
 800ba10:	e004      	b.n	800ba1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fd5e 	bl	800c4d6 <USBD_CtlError>
          break;
 800ba1a:	bf00      	nop
      }
      break;
 800ba1c:	e004      	b.n	800ba28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fd58 	bl	800c4d6 <USBD_CtlError>
      break;
 800ba26:	bf00      	nop
  }

  return ret;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop

0800ba34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba4a:	2b40      	cmp	r3, #64	; 0x40
 800ba4c:	d005      	beq.n	800ba5a <USBD_StdItfReq+0x26>
 800ba4e:	2b40      	cmp	r3, #64	; 0x40
 800ba50:	d852      	bhi.n	800baf8 <USBD_StdItfReq+0xc4>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <USBD_StdItfReq+0x26>
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	d14e      	bne.n	800baf8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	3b01      	subs	r3, #1
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d840      	bhi.n	800baea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	889b      	ldrh	r3, [r3, #4]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d836      	bhi.n	800bae0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	889b      	ldrh	r3, [r3, #4]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7ff fed9 	bl	800b832 <USBD_CoreFindIF>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	2bff      	cmp	r3, #255	; 0xff
 800ba88:	d01d      	beq.n	800bac6 <USBD_StdItfReq+0x92>
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d11a      	bne.n	800bac6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba90:	7bba      	ldrb	r2, [r7, #14]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	32ae      	adds	r2, #174	; 0xae
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00f      	beq.n	800bac0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800baa0:	7bba      	ldrb	r2, [r7, #14]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800baa8:	7bba      	ldrb	r2, [r7, #14]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	32ae      	adds	r2, #174	; 0xae
 800baae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	4798      	blx	r3
 800baba:	4603      	mov	r3, r0
 800babc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800babe:	e004      	b.n	800baca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bac0:	2303      	movs	r3, #3
 800bac2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bac4:	e001      	b.n	800baca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bac6:	2303      	movs	r3, #3
 800bac8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	88db      	ldrh	r3, [r3, #6]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d110      	bne.n	800baf4 <USBD_StdItfReq+0xc0>
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10d      	bne.n	800baf4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fdc7 	bl	800c66c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bade:	e009      	b.n	800baf4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fcf7 	bl	800c4d6 <USBD_CtlError>
          break;
 800bae8:	e004      	b.n	800baf4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fcf2 	bl	800c4d6 <USBD_CtlError>
          break;
 800baf2:	e000      	b.n	800baf6 <USBD_StdItfReq+0xc2>
          break;
 800baf4:	bf00      	nop
      }
      break;
 800baf6:	e004      	b.n	800bb02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fceb 	bl	800c4d6 <USBD_CtlError>
      break;
 800bb00:	bf00      	nop
  }

  return ret;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	889b      	ldrh	r3, [r3, #4]
 800bb1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb28:	2b40      	cmp	r3, #64	; 0x40
 800bb2a:	d007      	beq.n	800bb3c <USBD_StdEPReq+0x30>
 800bb2c:	2b40      	cmp	r3, #64	; 0x40
 800bb2e:	f200 817f 	bhi.w	800be30 <USBD_StdEPReq+0x324>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d02a      	beq.n	800bb8c <USBD_StdEPReq+0x80>
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	f040 817a 	bne.w	800be30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff fe83 	bl	800b84c <USBD_CoreFindEP>
 800bb46:	4603      	mov	r3, r0
 800bb48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb4a:	7b7b      	ldrb	r3, [r7, #13]
 800bb4c:	2bff      	cmp	r3, #255	; 0xff
 800bb4e:	f000 8174 	beq.w	800be3a <USBD_StdEPReq+0x32e>
 800bb52:	7b7b      	ldrb	r3, [r7, #13]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f040 8170 	bne.w	800be3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb5a:	7b7a      	ldrb	r2, [r7, #13]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb62:	7b7a      	ldrb	r2, [r7, #13]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	32ae      	adds	r2, #174	; 0xae
 800bb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 8163 	beq.w	800be3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb74:	7b7a      	ldrb	r2, [r7, #13]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	32ae      	adds	r2, #174	; 0xae
 800bb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb8a:	e156      	b.n	800be3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	785b      	ldrb	r3, [r3, #1]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d008      	beq.n	800bba6 <USBD_StdEPReq+0x9a>
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	f300 8145 	bgt.w	800be24 <USBD_StdEPReq+0x318>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f000 809b 	beq.w	800bcd6 <USBD_StdEPReq+0x1ca>
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d03c      	beq.n	800bc1e <USBD_StdEPReq+0x112>
 800bba4:	e13e      	b.n	800be24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d002      	beq.n	800bbb8 <USBD_StdEPReq+0xac>
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d016      	beq.n	800bbe4 <USBD_StdEPReq+0xd8>
 800bbb6:	e02c      	b.n	800bc12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00d      	beq.n	800bbda <USBD_StdEPReq+0xce>
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	2b80      	cmp	r3, #128	; 0x80
 800bbc2:	d00a      	beq.n	800bbda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f003 ff45 	bl	800fa58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbce:	2180      	movs	r1, #128	; 0x80
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f003 ff41 	bl	800fa58 <USBD_LL_StallEP>
 800bbd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbd8:	e020      	b.n	800bc1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fc7a 	bl	800c4d6 <USBD_CtlError>
              break;
 800bbe2:	e01b      	b.n	800bc1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	885b      	ldrh	r3, [r3, #2]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10e      	bne.n	800bc0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00b      	beq.n	800bc0a <USBD_StdEPReq+0xfe>
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b80      	cmp	r3, #128	; 0x80
 800bbf6:	d008      	beq.n	800bc0a <USBD_StdEPReq+0xfe>
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	88db      	ldrh	r3, [r3, #6]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d104      	bne.n	800bc0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f003 ff27 	bl	800fa58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fd2e 	bl	800c66c <USBD_CtlSendStatus>

              break;
 800bc10:	e004      	b.n	800bc1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fc5e 	bl	800c4d6 <USBD_CtlError>
              break;
 800bc1a:	bf00      	nop
          }
          break;
 800bc1c:	e107      	b.n	800be2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d002      	beq.n	800bc30 <USBD_StdEPReq+0x124>
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d016      	beq.n	800bc5c <USBD_StdEPReq+0x150>
 800bc2e:	e04b      	b.n	800bcc8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc30:	7bbb      	ldrb	r3, [r7, #14]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00d      	beq.n	800bc52 <USBD_StdEPReq+0x146>
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	2b80      	cmp	r3, #128	; 0x80
 800bc3a:	d00a      	beq.n	800bc52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f003 ff09 	bl	800fa58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc46:	2180      	movs	r1, #128	; 0x80
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f003 ff05 	bl	800fa58 <USBD_LL_StallEP>
 800bc4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc50:	e040      	b.n	800bcd4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fc3e 	bl	800c4d6 <USBD_CtlError>
              break;
 800bc5a:	e03b      	b.n	800bcd4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	885b      	ldrh	r3, [r3, #2]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d136      	bne.n	800bcd2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc64:	7bbb      	ldrb	r3, [r7, #14]
 800bc66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d004      	beq.n	800bc78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc6e:	7bbb      	ldrb	r3, [r7, #14]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f003 ff0f 	bl	800fa96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fcf7 	bl	800c66c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7ff fde2 	bl	800b84c <USBD_CoreFindEP>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc8c:	7b7b      	ldrb	r3, [r7, #13]
 800bc8e:	2bff      	cmp	r3, #255	; 0xff
 800bc90:	d01f      	beq.n	800bcd2 <USBD_StdEPReq+0x1c6>
 800bc92:	7b7b      	ldrb	r3, [r7, #13]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d11c      	bne.n	800bcd2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc98:	7b7a      	ldrb	r2, [r7, #13]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bca0:	7b7a      	ldrb	r2, [r7, #13]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	32ae      	adds	r2, #174	; 0xae
 800bca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d010      	beq.n	800bcd2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bcb0:	7b7a      	ldrb	r2, [r7, #13]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	32ae      	adds	r2, #174	; 0xae
 800bcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	4798      	blx	r3
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bcc6:	e004      	b.n	800bcd2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fc03 	bl	800c4d6 <USBD_CtlError>
              break;
 800bcd0:	e000      	b.n	800bcd4 <USBD_StdEPReq+0x1c8>
              break;
 800bcd2:	bf00      	nop
          }
          break;
 800bcd4:	e0ab      	b.n	800be2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d002      	beq.n	800bce8 <USBD_StdEPReq+0x1dc>
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d032      	beq.n	800bd4c <USBD_StdEPReq+0x240>
 800bce6:	e097      	b.n	800be18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d007      	beq.n	800bcfe <USBD_StdEPReq+0x1f2>
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	2b80      	cmp	r3, #128	; 0x80
 800bcf2:	d004      	beq.n	800bcfe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fbed 	bl	800c4d6 <USBD_CtlError>
                break;
 800bcfc:	e091      	b.n	800be22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	da0b      	bge.n	800bd1e <USBD_StdEPReq+0x212>
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
 800bd08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	3310      	adds	r3, #16
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	4413      	add	r3, r2
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	e00b      	b.n	800bd36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
 800bd20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	4413      	add	r3, r2
 800bd34:	3304      	adds	r3, #4
 800bd36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2202      	movs	r2, #2
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fc37 	bl	800c5b8 <USBD_CtlSendData>
              break;
 800bd4a:	e06a      	b.n	800be22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	da11      	bge.n	800bd78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	f003 020f 	and.w	r2, r3, #15
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	440b      	add	r3, r1
 800bd66:	3324      	adds	r3, #36	; 0x24
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d117      	bne.n	800bd9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fbb0 	bl	800c4d6 <USBD_CtlError>
                  break;
 800bd76:	e054      	b.n	800be22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	f003 020f 	and.w	r2, r3, #15
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	4613      	mov	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	440b      	add	r3, r1
 800bd8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d104      	bne.n	800bd9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fb9d 	bl	800c4d6 <USBD_CtlError>
                  break;
 800bd9c:	e041      	b.n	800be22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	da0b      	bge.n	800bdbe <USBD_StdEPReq+0x2b2>
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdac:	4613      	mov	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	3310      	adds	r3, #16
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	4413      	add	r3, r2
 800bdba:	3304      	adds	r3, #4
 800bdbc:	e00b      	b.n	800bdd6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdbe:	7bbb      	ldrb	r3, [r7, #14]
 800bdc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <USBD_StdEPReq+0x2d8>
 800bdde:	7bbb      	ldrb	r3, [r7, #14]
 800bde0:	2b80      	cmp	r3, #128	; 0x80
 800bde2:	d103      	bne.n	800bdec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2200      	movs	r2, #0
 800bde8:	601a      	str	r2, [r3, #0]
 800bdea:	e00e      	b.n	800be0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f003 fe6f 	bl	800fad4 <USBD_LL_IsStallEP>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d003      	beq.n	800be04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2201      	movs	r2, #1
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	e002      	b.n	800be0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2202      	movs	r2, #2
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fbd1 	bl	800c5b8 <USBD_CtlSendData>
              break;
 800be16:	e004      	b.n	800be22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fb5b 	bl	800c4d6 <USBD_CtlError>
              break;
 800be20:	bf00      	nop
          }
          break;
 800be22:	e004      	b.n	800be2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fb55 	bl	800c4d6 <USBD_CtlError>
          break;
 800be2c:	bf00      	nop
      }
      break;
 800be2e:	e005      	b.n	800be3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fb4f 	bl	800c4d6 <USBD_CtlError>
      break;
 800be38:	e000      	b.n	800be3c <USBD_StdEPReq+0x330>
      break;
 800be3a:	bf00      	nop
  }

  return ret;
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
	...

0800be48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be56:	2300      	movs	r3, #0
 800be58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	885b      	ldrh	r3, [r3, #2]
 800be62:	0a1b      	lsrs	r3, r3, #8
 800be64:	b29b      	uxth	r3, r3
 800be66:	3b01      	subs	r3, #1
 800be68:	2b06      	cmp	r3, #6
 800be6a:	f200 8128 	bhi.w	800c0be <USBD_GetDescriptor+0x276>
 800be6e:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <USBD_GetDescriptor+0x2c>)
 800be70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be74:	0800be91 	.word	0x0800be91
 800be78:	0800bea9 	.word	0x0800bea9
 800be7c:	0800bee9 	.word	0x0800bee9
 800be80:	0800c0bf 	.word	0x0800c0bf
 800be84:	0800c0bf 	.word	0x0800c0bf
 800be88:	0800c05f 	.word	0x0800c05f
 800be8c:	0800c08b 	.word	0x0800c08b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	7c12      	ldrb	r2, [r2, #16]
 800be9c:	f107 0108 	add.w	r1, r7, #8
 800bea0:	4610      	mov	r0, r2
 800bea2:	4798      	blx	r3
 800bea4:	60f8      	str	r0, [r7, #12]
      break;
 800bea6:	e112      	b.n	800c0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7c1b      	ldrb	r3, [r3, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10d      	bne.n	800becc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb8:	f107 0208 	add.w	r2, r7, #8
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
 800bec0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3301      	adds	r3, #1
 800bec6:	2202      	movs	r2, #2
 800bec8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800beca:	e100      	b.n	800c0ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	f107 0208 	add.w	r2, r7, #8
 800bed8:	4610      	mov	r0, r2
 800beda:	4798      	blx	r3
 800bedc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	2202      	movs	r2, #2
 800bee4:	701a      	strb	r2, [r3, #0]
      break;
 800bee6:	e0f2      	b.n	800c0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	885b      	ldrh	r3, [r3, #2]
 800beec:	b2db      	uxtb	r3, r3
 800beee:	2b05      	cmp	r3, #5
 800bef0:	f200 80ac 	bhi.w	800c04c <USBD_GetDescriptor+0x204>
 800bef4:	a201      	add	r2, pc, #4	; (adr r2, 800befc <USBD_GetDescriptor+0xb4>)
 800bef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befa:	bf00      	nop
 800befc:	0800bf15 	.word	0x0800bf15
 800bf00:	0800bf49 	.word	0x0800bf49
 800bf04:	0800bf7d 	.word	0x0800bf7d
 800bf08:	0800bfb1 	.word	0x0800bfb1
 800bf0c:	0800bfe5 	.word	0x0800bfe5
 800bf10:	0800c019 	.word	0x0800c019
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	7c12      	ldrb	r2, [r2, #16]
 800bf2c:	f107 0108 	add.w	r1, r7, #8
 800bf30:	4610      	mov	r0, r2
 800bf32:	4798      	blx	r3
 800bf34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf36:	e091      	b.n	800c05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 facb 	bl	800c4d6 <USBD_CtlError>
            err++;
 800bf40:	7afb      	ldrb	r3, [r7, #11]
 800bf42:	3301      	adds	r3, #1
 800bf44:	72fb      	strb	r3, [r7, #11]
          break;
 800bf46:	e089      	b.n	800c05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00b      	beq.n	800bf6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	7c12      	ldrb	r2, [r2, #16]
 800bf60:	f107 0108 	add.w	r1, r7, #8
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf6a:	e077      	b.n	800c05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fab1 	bl	800c4d6 <USBD_CtlError>
            err++;
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	3301      	adds	r3, #1
 800bf78:	72fb      	strb	r3, [r7, #11]
          break;
 800bf7a:	e06f      	b.n	800c05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	7c12      	ldrb	r2, [r2, #16]
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf9e:	e05d      	b.n	800c05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fa97 	bl	800c4d6 <USBD_CtlError>
            err++;
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	72fb      	strb	r3, [r7, #11]
          break;
 800bfae:	e055      	b.n	800c05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	7c12      	ldrb	r2, [r2, #16]
 800bfc8:	f107 0108 	add.w	r1, r7, #8
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4798      	blx	r3
 800bfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfd2:	e043      	b.n	800c05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fa7d 	bl	800c4d6 <USBD_CtlError>
            err++;
 800bfdc:	7afb      	ldrb	r3, [r7, #11]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfe2:	e03b      	b.n	800c05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	7c12      	ldrb	r2, [r2, #16]
 800bffc:	f107 0108 	add.w	r1, r7, #8
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c006:	e029      	b.n	800c05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fa63 	bl	800c4d6 <USBD_CtlError>
            err++;
 800c010:	7afb      	ldrb	r3, [r7, #11]
 800c012:	3301      	adds	r3, #1
 800c014:	72fb      	strb	r3, [r7, #11]
          break;
 800c016:	e021      	b.n	800c05c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	7c12      	ldrb	r2, [r2, #16]
 800c030:	f107 0108 	add.w	r1, r7, #8
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
 800c038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c03a:	e00f      	b.n	800c05c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa49 	bl	800c4d6 <USBD_CtlError>
            err++;
 800c044:	7afb      	ldrb	r3, [r7, #11]
 800c046:	3301      	adds	r3, #1
 800c048:	72fb      	strb	r3, [r7, #11]
          break;
 800c04a:	e007      	b.n	800c05c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fa41 	bl	800c4d6 <USBD_CtlError>
          err++;
 800c054:	7afb      	ldrb	r3, [r7, #11]
 800c056:	3301      	adds	r3, #1
 800c058:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c05a:	bf00      	nop
      }
      break;
 800c05c:	e037      	b.n	800c0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7c1b      	ldrb	r3, [r3, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d109      	bne.n	800c07a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06e:	f107 0208 	add.w	r2, r7, #8
 800c072:	4610      	mov	r0, r2
 800c074:	4798      	blx	r3
 800c076:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c078:	e029      	b.n	800c0ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fa2a 	bl	800c4d6 <USBD_CtlError>
        err++;
 800c082:	7afb      	ldrb	r3, [r7, #11]
 800c084:	3301      	adds	r3, #1
 800c086:	72fb      	strb	r3, [r7, #11]
      break;
 800c088:	e021      	b.n	800c0ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	7c1b      	ldrb	r3, [r3, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10d      	bne.n	800c0ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09a:	f107 0208 	add.w	r2, r7, #8
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4798      	blx	r3
 800c0a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	2207      	movs	r2, #7
 800c0aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0ac:	e00f      	b.n	800c0ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fa10 	bl	800c4d6 <USBD_CtlError>
        err++;
 800c0b6:	7afb      	ldrb	r3, [r7, #11]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	72fb      	strb	r3, [r7, #11]
      break;
 800c0bc:	e007      	b.n	800c0ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fa08 	bl	800c4d6 <USBD_CtlError>
      err++;
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800c0cc:	bf00      	nop
  }

  if (err != 0U)
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d11e      	bne.n	800c112 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	88db      	ldrh	r3, [r3, #6]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d016      	beq.n	800c10a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c0dc:	893b      	ldrh	r3, [r7, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00e      	beq.n	800c100 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	88da      	ldrh	r2, [r3, #6]
 800c0e6:	893b      	ldrh	r3, [r7, #8]
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	bf28      	it	cs
 800c0ec:	4613      	movcs	r3, r2
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0f2:	893b      	ldrh	r3, [r7, #8]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	68f9      	ldr	r1, [r7, #12]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fa5d 	bl	800c5b8 <USBD_CtlSendData>
 800c0fe:	e009      	b.n	800c114 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f9e7 	bl	800c4d6 <USBD_CtlError>
 800c108:	e004      	b.n	800c114 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 faae 	bl	800c66c <USBD_CtlSendStatus>
 800c110:	e000      	b.n	800c114 <USBD_GetDescriptor+0x2cc>
    return;
 800c112:	bf00      	nop
  }
}
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop

0800c11c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	889b      	ldrh	r3, [r3, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d131      	bne.n	800c192 <USBD_SetAddress+0x76>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	88db      	ldrh	r3, [r3, #6]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d12d      	bne.n	800c192 <USBD_SetAddress+0x76>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	885b      	ldrh	r3, [r3, #2]
 800c13a:	2b7f      	cmp	r3, #127	; 0x7f
 800c13c:	d829      	bhi.n	800c192 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b03      	cmp	r3, #3
 800c154:	d104      	bne.n	800c160 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f9bc 	bl	800c4d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c15e:	e01d      	b.n	800c19c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7bfa      	ldrb	r2, [r7, #15]
 800c164:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f003 fcdd 	bl	800fb2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa7a 	bl	800c66c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c178:	7bfb      	ldrb	r3, [r7, #15]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2202      	movs	r2, #2
 800c182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c186:	e009      	b.n	800c19c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c190:	e004      	b.n	800c19c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f99e 	bl	800c4d6 <USBD_CtlError>
  }
}
 800c19a:	bf00      	nop
 800c19c:	bf00      	nop
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	4b4e      	ldr	r3, [pc, #312]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c1ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1bc:	4b4d      	ldr	r3, [pc, #308]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d905      	bls.n	800c1d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f985 	bl	800c4d6 <USBD_CtlError>
    return USBD_FAIL;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e08c      	b.n	800c2ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d002      	beq.n	800c1e2 <USBD_SetConfig+0x3e>
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	d029      	beq.n	800c234 <USBD_SetConfig+0x90>
 800c1e0:	e075      	b.n	800c2ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1e2:	4b44      	ldr	r3, [pc, #272]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d020      	beq.n	800c22c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c1ea:	4b42      	ldr	r3, [pc, #264]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1f4:	4b3f      	ldr	r3, [pc, #252]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7fe ffe7 	bl	800b1ce <USBD_SetClassConfig>
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c204:	7bfb      	ldrb	r3, [r7, #15]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d008      	beq.n	800c21c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f962 	bl	800c4d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c21a:	e065      	b.n	800c2e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fa25 	bl	800c66c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2203      	movs	r2, #3
 800c226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c22a:	e05d      	b.n	800c2e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fa1d 	bl	800c66c <USBD_CtlSendStatus>
      break;
 800c232:	e059      	b.n	800c2e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c234:	4b2f      	ldr	r3, [pc, #188]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d112      	bne.n	800c262 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2202      	movs	r2, #2
 800c240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c244:	4b2b      	ldr	r3, [pc, #172]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	461a      	mov	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c24e:	4b29      	ldr	r3, [pc, #164]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7fe ffd6 	bl	800b206 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fa06 	bl	800c66c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c260:	e042      	b.n	800c2e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c262:	4b24      	ldr	r3, [pc, #144]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d02a      	beq.n	800c2c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	b2db      	uxtb	r3, r3
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7fe ffc4 	bl	800b206 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c27e:	4b1d      	ldr	r3, [pc, #116]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c288:	4b1a      	ldr	r3, [pc, #104]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7fe ff9d 	bl	800b1ce <USBD_SetClassConfig>
 800c294:	4603      	mov	r3, r0
 800c296:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00f      	beq.n	800c2be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f918 	bl	800c4d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7fe ffa9 	bl	800b206 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2202      	movs	r2, #2
 800c2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c2bc:	e014      	b.n	800c2e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f9d4 	bl	800c66c <USBD_CtlSendStatus>
      break;
 800c2c4:	e010      	b.n	800c2e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f9d0 	bl	800c66c <USBD_CtlSendStatus>
      break;
 800c2cc:	e00c      	b.n	800c2e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f900 	bl	800c4d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2d6:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <USBD_SetConfig+0x150>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7fe ff92 	bl	800b206 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c2e6:	bf00      	nop
  }

  return ret;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	200004c0 	.word	0x200004c0

0800c2f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	88db      	ldrh	r3, [r3, #6]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d004      	beq.n	800c314 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f8e2 	bl	800c4d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c312:	e023      	b.n	800c35c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	dc02      	bgt.n	800c326 <USBD_GetConfig+0x2e>
 800c320:	2b00      	cmp	r3, #0
 800c322:	dc03      	bgt.n	800c32c <USBD_GetConfig+0x34>
 800c324:	e015      	b.n	800c352 <USBD_GetConfig+0x5a>
 800c326:	2b03      	cmp	r3, #3
 800c328:	d00b      	beq.n	800c342 <USBD_GetConfig+0x4a>
 800c32a:	e012      	b.n	800c352 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	3308      	adds	r3, #8
 800c336:	2201      	movs	r2, #1
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f93c 	bl	800c5b8 <USBD_CtlSendData>
        break;
 800c340:	e00c      	b.n	800c35c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	3304      	adds	r3, #4
 800c346:	2201      	movs	r2, #1
 800c348:	4619      	mov	r1, r3
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f934 	bl	800c5b8 <USBD_CtlSendData>
        break;
 800c350:	e004      	b.n	800c35c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f8be 	bl	800c4d6 <USBD_CtlError>
        break;
 800c35a:	bf00      	nop
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c374:	b2db      	uxtb	r3, r3
 800c376:	3b01      	subs	r3, #1
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d81e      	bhi.n	800c3ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	88db      	ldrh	r3, [r3, #6]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d004      	beq.n	800c38e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f8a5 	bl	800c4d6 <USBD_CtlError>
        break;
 800c38c:	e01a      	b.n	800c3c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f043 0202 	orr.w	r2, r3, #2
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	330c      	adds	r3, #12
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f900 	bl	800c5b8 <USBD_CtlSendData>
      break;
 800c3b8:	e004      	b.n	800c3c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f88a 	bl	800c4d6 <USBD_CtlError>
      break;
 800c3c2:	bf00      	nop
  }
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	885b      	ldrh	r3, [r3, #2]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d107      	bne.n	800c3ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f940 	bl	800c66c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c3ec:	e013      	b.n	800c416 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	885b      	ldrh	r3, [r3, #2]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d10b      	bne.n	800c40e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	889b      	ldrh	r3, [r3, #4]
 800c3fa:	0a1b      	lsrs	r3, r3, #8
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	b2da      	uxtb	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f930 	bl	800c66c <USBD_CtlSendStatus>
}
 800c40c:	e003      	b.n	800c416 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f860 	bl	800c4d6 <USBD_CtlError>
}
 800c416:	bf00      	nop
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	2b02      	cmp	r3, #2
 800c434:	d80b      	bhi.n	800c44e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	885b      	ldrh	r3, [r3, #2]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d10c      	bne.n	800c458 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f910 	bl	800c66c <USBD_CtlSendStatus>
      }
      break;
 800c44c:	e004      	b.n	800c458 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f840 	bl	800c4d6 <USBD_CtlError>
      break;
 800c456:	e000      	b.n	800c45a <USBD_ClrFeature+0x3c>
      break;
 800c458:	bf00      	nop
  }
}
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	781a      	ldrb	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3301      	adds	r3, #1
 800c48a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f7ff fa41 	bl	800b914 <SWAPBYTE>
 800c492:	4603      	mov	r3, r0
 800c494:	461a      	mov	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3301      	adds	r3, #1
 800c49e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f7ff fa34 	bl	800b914 <SWAPBYTE>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7ff fa27 	bl	800b914 <SWAPBYTE>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	80da      	strh	r2, [r3, #6]
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4e0:	2180      	movs	r1, #128	; 0x80
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f003 fab8 	bl	800fa58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f003 fab4 	bl	800fa58 <USBD_LL_StallEP>
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c504:	2300      	movs	r3, #0
 800c506:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d036      	beq.n	800c57c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c512:	6938      	ldr	r0, [r7, #16]
 800c514:	f000 f836 	bl	800c584 <USBD_GetLen>
 800c518:	4603      	mov	r3, r0
 800c51a:	3301      	adds	r3, #1
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	b29a      	uxth	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	4413      	add	r3, r2
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	7812      	ldrb	r2, [r2, #0]
 800c530:	701a      	strb	r2, [r3, #0]
  idx++;
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	3301      	adds	r3, #1
 800c536:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	4413      	add	r3, r2
 800c53e:	2203      	movs	r2, #3
 800c540:	701a      	strb	r2, [r3, #0]
  idx++;
 800c542:	7dfb      	ldrb	r3, [r7, #23]
 800c544:	3301      	adds	r3, #1
 800c546:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c548:	e013      	b.n	800c572 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	4413      	add	r3, r2
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	7812      	ldrb	r2, [r2, #0]
 800c554:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	3301      	adds	r3, #1
 800c55a:	613b      	str	r3, [r7, #16]
    idx++;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
 800c55e:	3301      	adds	r3, #1
 800c560:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	4413      	add	r3, r2
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	3301      	adds	r3, #1
 800c570:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1e7      	bne.n	800c54a <USBD_GetString+0x52>
 800c57a:	e000      	b.n	800c57e <USBD_GetString+0x86>
    return;
 800c57c:	bf00      	nop
  }
}
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c594:	e005      	b.n	800c5a2 <USBD_GetLen+0x1e>
  {
    len++;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	3301      	adds	r3, #1
 800c59a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1f5      	bne.n	800c596 <USBD_GetLen+0x12>
  }

  return len;
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	2100      	movs	r1, #0
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f003 fac3 	bl	800fb6a <USBD_LL_Transmit>

  return USBD_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	2100      	movs	r1, #0
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f003 fab2 	bl	800fb6a <USBD_LL_Transmit>

  return USBD_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2203      	movs	r2, #3
 800c620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	2100      	movs	r1, #0
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f003 fab6 	bl	800fbac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	2100      	movs	r1, #0
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f003 faa5 	bl	800fbac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2204      	movs	r2, #4
 800c678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c67c:	2300      	movs	r3, #0
 800c67e:	2200      	movs	r2, #0
 800c680:	2100      	movs	r1, #0
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f003 fa71 	bl	800fb6a <USBD_LL_Transmit>

  return USBD_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b082      	sub	sp, #8
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2205      	movs	r2, #5
 800c69e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f003 fa7f 	bl	800fbac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <__NVIC_SetPriority>:
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	6039      	str	r1, [r7, #0]
 800c6c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c6c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db0a      	blt.n	800c6e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	490c      	ldr	r1, [pc, #48]	; (800c704 <__NVIC_SetPriority+0x4c>)
 800c6d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6d6:	0112      	lsls	r2, r2, #4
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	440b      	add	r3, r1
 800c6dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c6e0:	e00a      	b.n	800c6f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	4908      	ldr	r1, [pc, #32]	; (800c708 <__NVIC_SetPriority+0x50>)
 800c6e8:	79fb      	ldrb	r3, [r7, #7]
 800c6ea:	f003 030f 	and.w	r3, r3, #15
 800c6ee:	3b04      	subs	r3, #4
 800c6f0:	0112      	lsls	r2, r2, #4
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	440b      	add	r3, r1
 800c6f6:	761a      	strb	r2, [r3, #24]
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	e000e100 	.word	0xe000e100
 800c708:	e000ed00 	.word	0xe000ed00

0800c70c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c710:	4b05      	ldr	r3, [pc, #20]	; (800c728 <SysTick_Handler+0x1c>)
 800c712:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c714:	f001 fd4c 	bl	800e1b0 <xTaskGetSchedulerState>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d001      	beq.n	800c722 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c71e:	f002 fb33 	bl	800ed88 <xPortSysTickHandler>
  }
}
 800c722:	bf00      	nop
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	e000e010 	.word	0xe000e010

0800c72c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c730:	2100      	movs	r1, #0
 800c732:	f06f 0004 	mvn.w	r0, #4
 800c736:	f7ff ffbf 	bl	800c6b8 <__NVIC_SetPriority>
#endif
}
 800c73a:	bf00      	nop
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c746:	f3ef 8305 	mrs	r3, IPSR
 800c74a:	603b      	str	r3, [r7, #0]
  return(result);
 800c74c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d003      	beq.n	800c75a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c752:	f06f 0305 	mvn.w	r3, #5
 800c756:	607b      	str	r3, [r7, #4]
 800c758:	e00c      	b.n	800c774 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c75a:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <osKernelInitialize+0x44>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d105      	bne.n	800c76e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c762:	4b08      	ldr	r3, [pc, #32]	; (800c784 <osKernelInitialize+0x44>)
 800c764:	2201      	movs	r2, #1
 800c766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c768:	2300      	movs	r3, #0
 800c76a:	607b      	str	r3, [r7, #4]
 800c76c:	e002      	b.n	800c774 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c76e:	f04f 33ff 	mov.w	r3, #4294967295
 800c772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c774:	687b      	ldr	r3, [r7, #4]
}
 800c776:	4618      	mov	r0, r3
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	200004c4 	.word	0x200004c4

0800c788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c78e:	f3ef 8305 	mrs	r3, IPSR
 800c792:	603b      	str	r3, [r7, #0]
  return(result);
 800c794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c79a:	f06f 0305 	mvn.w	r3, #5
 800c79e:	607b      	str	r3, [r7, #4]
 800c7a0:	e010      	b.n	800c7c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c7a2:	4b0b      	ldr	r3, [pc, #44]	; (800c7d0 <osKernelStart+0x48>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d109      	bne.n	800c7be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c7aa:	f7ff ffbf 	bl	800c72c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c7ae:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <osKernelStart+0x48>)
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7b4:	f001 f880 	bl	800d8b8 <vTaskStartScheduler>
      stat = osOK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	607b      	str	r3, [r7, #4]
 800c7bc:	e002      	b.n	800c7c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c7be:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7c4:	687b      	ldr	r3, [r7, #4]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	200004c4 	.word	0x200004c4

0800c7d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08e      	sub	sp, #56	; 0x38
 800c7d8:	af04      	add	r7, sp, #16
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7e4:	f3ef 8305 	mrs	r3, IPSR
 800c7e8:	617b      	str	r3, [r7, #20]
  return(result);
 800c7ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d17e      	bne.n	800c8ee <osThreadNew+0x11a>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d07b      	beq.n	800c8ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c7f6:	2380      	movs	r3, #128	; 0x80
 800c7f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c7fa:	2318      	movs	r3, #24
 800c7fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c802:	f04f 33ff 	mov.w	r3, #4294967295
 800c806:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d045      	beq.n	800c89a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <osThreadNew+0x48>
        name = attr->name;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d008      	beq.n	800c842 <osThreadNew+0x6e>
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	2b38      	cmp	r3, #56	; 0x38
 800c834:	d805      	bhi.n	800c842 <osThreadNew+0x6e>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d001      	beq.n	800c846 <osThreadNew+0x72>
        return (NULL);
 800c842:	2300      	movs	r3, #0
 800c844:	e054      	b.n	800c8f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	089b      	lsrs	r3, r3, #2
 800c854:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00e      	beq.n	800c87c <osThreadNew+0xa8>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	2bbf      	cmp	r3, #191	; 0xbf
 800c864:	d90a      	bls.n	800c87c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d006      	beq.n	800c87c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <osThreadNew+0xa8>
        mem = 1;
 800c876:	2301      	movs	r3, #1
 800c878:	61bb      	str	r3, [r7, #24]
 800c87a:	e010      	b.n	800c89e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10c      	bne.n	800c89e <osThreadNew+0xca>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d108      	bne.n	800c89e <osThreadNew+0xca>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d104      	bne.n	800c89e <osThreadNew+0xca>
          mem = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	61bb      	str	r3, [r7, #24]
 800c898:	e001      	b.n	800c89e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d110      	bne.n	800c8c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8ac:	9202      	str	r2, [sp, #8]
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	6a3a      	ldr	r2, [r7, #32]
 800c8b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f000 fe0c 	bl	800d4d8 <xTaskCreateStatic>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	613b      	str	r3, [r7, #16]
 800c8c4:	e013      	b.n	800c8ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d110      	bne.n	800c8ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	f107 0310 	add.w	r3, r7, #16
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 fe57 	bl	800d592 <xTaskCreate>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d001      	beq.n	800c8ee <osThreadNew+0x11a>
            hTask = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c8ee:	693b      	ldr	r3, [r7, #16]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3728      	adds	r7, #40	; 0x28
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c900:	f3ef 8305 	mrs	r3, IPSR
 800c904:	60bb      	str	r3, [r7, #8]
  return(result);
 800c906:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d003      	beq.n	800c914 <osDelay+0x1c>
    stat = osErrorISR;
 800c90c:	f06f 0305 	mvn.w	r3, #5
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	e007      	b.n	800c924 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c914:	2300      	movs	r3, #0
 800c916:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 ff96 	bl	800d850 <vTaskDelay>
    }
  }

  return (stat);
 800c924:	68fb      	ldr	r3, [r7, #12]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
	...

0800c930 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4a07      	ldr	r2, [pc, #28]	; (800c95c <vApplicationGetIdleTaskMemory+0x2c>)
 800c940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	4a06      	ldr	r2, [pc, #24]	; (800c960 <vApplicationGetIdleTaskMemory+0x30>)
 800c946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2280      	movs	r2, #128	; 0x80
 800c94c:	601a      	str	r2, [r3, #0]
}
 800c94e:	bf00      	nop
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	200004c8 	.word	0x200004c8
 800c960:	20000588 	.word	0x20000588

0800c964 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	4a07      	ldr	r2, [pc, #28]	; (800c990 <vApplicationGetTimerTaskMemory+0x2c>)
 800c974:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	4a06      	ldr	r2, [pc, #24]	; (800c994 <vApplicationGetTimerTaskMemory+0x30>)
 800c97a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20000788 	.word	0x20000788
 800c994:	20000848 	.word	0x20000848

0800c998 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f103 0208 	add.w	r2, r3, #8
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f103 0208 	add.w	r2, r3, #8
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f103 0208 	add.w	r2, r3, #8
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9e6:	bf00      	nop
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
}
 800ca2e:	bf00      	nop
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b085      	sub	sp, #20
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca50:	d103      	bne.n	800ca5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	60fb      	str	r3, [r7, #12]
 800ca58:	e00c      	b.n	800ca74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e002      	b.n	800ca68 <vListInsert+0x2e>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d2f6      	bcs.n	800ca62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	601a      	str	r2, [r3, #0]
}
 800caa0:	bf00      	nop
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	6892      	ldr	r2, [r2, #8]
 800cac2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	6852      	ldr	r2, [r2, #4]
 800cacc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d103      	bne.n	800cae0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	689a      	ldr	r2, [r3, #8]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	1e5a      	subs	r2, r3, #1
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10a      	bne.n	800cb2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb26:	bf00      	nop
 800cb28:	e7fe      	b.n	800cb28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb2a:	f002 f89b 	bl	800ec64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb36:	68f9      	ldr	r1, [r7, #12]
 800cb38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb3a:	fb01 f303 	mul.w	r3, r1, r3
 800cb3e:	441a      	add	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb60:	fb01 f303 	mul.w	r3, r1, r3
 800cb64:	441a      	add	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	22ff      	movs	r2, #255	; 0xff
 800cb6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	22ff      	movs	r2, #255	; 0xff
 800cb76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d114      	bne.n	800cbaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01a      	beq.n	800cbbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3310      	adds	r3, #16
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 f94b 	bl	800de28 <xTaskRemoveFromEventList>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d012      	beq.n	800cbbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb98:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <xQueueGenericReset+0xcc>)
 800cb9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	e009      	b.n	800cbbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3310      	adds	r3, #16
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff fef2 	bl	800c998 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3324      	adds	r3, #36	; 0x24
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff feed 	bl	800c998 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbbe:	f002 f881 	bl	800ecc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbc2:	2301      	movs	r3, #1
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	e000ed04 	.word	0xe000ed04

0800cbd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08e      	sub	sp, #56	; 0x38
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbf6:	bf00      	nop
 800cbf8:	e7fe      	b.n	800cbf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc12:	bf00      	nop
 800cc14:	e7fe      	b.n	800cc14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <xQueueGenericCreateStatic+0x52>
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <xQueueGenericCreateStatic+0x56>
 800cc22:	2301      	movs	r3, #1
 800cc24:	e000      	b.n	800cc28 <xQueueGenericCreateStatic+0x58>
 800cc26:	2300      	movs	r3, #0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	623b      	str	r3, [r7, #32]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d102      	bne.n	800cc4e <xQueueGenericCreateStatic+0x7e>
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <xQueueGenericCreateStatic+0x82>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e000      	b.n	800cc54 <xQueueGenericCreateStatic+0x84>
 800cc52:	2300      	movs	r3, #0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	61fb      	str	r3, [r7, #28]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc6e:	2350      	movs	r3, #80	; 0x50
 800cc70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b50      	cmp	r3, #80	; 0x50
 800cc76:	d00a      	beq.n	800cc8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	61bb      	str	r3, [r7, #24]
}
 800cc8a:	bf00      	nop
 800cc8c:	e7fe      	b.n	800cc8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00d      	beq.n	800ccb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cca2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 f805 	bl	800ccc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3730      	adds	r7, #48	; 0x30
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d103      	bne.n	800ccdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	69ba      	ldr	r2, [r7, #24]
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	e002      	b.n	800cce2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ccee:	2101      	movs	r1, #1
 800ccf0:	69b8      	ldr	r0, [r7, #24]
 800ccf2:	f7ff ff05 	bl	800cb00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	78fa      	ldrb	r2, [r7, #3]
 800ccfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccfe:	bf00      	nop
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08e      	sub	sp, #56	; 0x38
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd16:	2300      	movs	r3, #0
 800cd18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10a      	bne.n	800cd3a <xQueueGenericSend+0x32>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd36:	bf00      	nop
 800cd38:	e7fe      	b.n	800cd38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d103      	bne.n	800cd48 <xQueueGenericSend+0x40>
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <xQueueGenericSend+0x44>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e000      	b.n	800cd4e <xQueueGenericSend+0x46>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10a      	bne.n	800cd68 <xQueueGenericSend+0x60>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d103      	bne.n	800cd76 <xQueueGenericSend+0x6e>
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d101      	bne.n	800cd7a <xQueueGenericSend+0x72>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e000      	b.n	800cd7c <xQueueGenericSend+0x74>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10a      	bne.n	800cd96 <xQueueGenericSend+0x8e>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	623b      	str	r3, [r7, #32]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd96:	f001 fa0b 	bl	800e1b0 <xTaskGetSchedulerState>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <xQueueGenericSend+0x9e>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <xQueueGenericSend+0xa2>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e000      	b.n	800cdac <xQueueGenericSend+0xa4>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <xQueueGenericSend+0xbe>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	61fb      	str	r3, [r7, #28]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdc6:	f001 ff4d 	bl	800ec64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d302      	bcc.n	800cddc <xQueueGenericSend+0xd4>
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d129      	bne.n	800ce30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	68b9      	ldr	r1, [r7, #8]
 800cde0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cde2:	f000 fa0b 	bl	800d1fc <prvCopyDataToQueue>
 800cde6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d010      	beq.n	800ce12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	3324      	adds	r3, #36	; 0x24
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 f817 	bl	800de28 <xTaskRemoveFromEventList>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d013      	beq.n	800ce28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce00:	4b3f      	ldr	r3, [pc, #252]	; (800cf00 <xQueueGenericSend+0x1f8>)
 800ce02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	e00a      	b.n	800ce28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d007      	beq.n	800ce28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce18:	4b39      	ldr	r3, [pc, #228]	; (800cf00 <xQueueGenericSend+0x1f8>)
 800ce1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce28:	f001 ff4c 	bl	800ecc4 <vPortExitCritical>
				return pdPASS;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e063      	b.n	800cef8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d103      	bne.n	800ce3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce36:	f001 ff45 	bl	800ecc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e05c      	b.n	800cef8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce44:	f107 0314 	add.w	r3, r7, #20
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 f851 	bl	800def0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce52:	f001 ff37 	bl	800ecc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce56:	f000 fda1 	bl	800d99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce5a:	f001 ff03 	bl	800ec64 <vPortEnterCritical>
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce64:	b25b      	sxtb	r3, r3
 800ce66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6a:	d103      	bne.n	800ce74 <xQueueGenericSend+0x16c>
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce7a:	b25b      	sxtb	r3, r3
 800ce7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce80:	d103      	bne.n	800ce8a <xQueueGenericSend+0x182>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce8a:	f001 ff1b 	bl	800ecc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce8e:	1d3a      	adds	r2, r7, #4
 800ce90:	f107 0314 	add.w	r3, r7, #20
 800ce94:	4611      	mov	r1, r2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f001 f840 	bl	800df1c <xTaskCheckForTimeOut>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d124      	bne.n	800ceec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea4:	f000 faa2 	bl	800d3ec <prvIsQueueFull>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d018      	beq.n	800cee0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	3310      	adds	r3, #16
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 ff66 	bl	800dd88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cebe:	f000 fa2d 	bl	800d31c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cec2:	f000 fd79 	bl	800d9b8 <xTaskResumeAll>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f47f af7c 	bne.w	800cdc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cece:	4b0c      	ldr	r3, [pc, #48]	; (800cf00 <xQueueGenericSend+0x1f8>)
 800ced0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	e772      	b.n	800cdc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee2:	f000 fa1b 	bl	800d31c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cee6:	f000 fd67 	bl	800d9b8 <xTaskResumeAll>
 800ceea:	e76c      	b.n	800cdc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ceec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceee:	f000 fa15 	bl	800d31c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cef2:	f000 fd61 	bl	800d9b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3738      	adds	r7, #56	; 0x38
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	e000ed04 	.word	0xe000ed04

0800cf04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b090      	sub	sp, #64	; 0x40
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10a      	bne.n	800cf32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d103      	bne.n	800cf40 <xQueueGenericSendFromISR+0x3c>
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d101      	bne.n	800cf44 <xQueueGenericSendFromISR+0x40>
 800cf40:	2301      	movs	r3, #1
 800cf42:	e000      	b.n	800cf46 <xQueueGenericSendFromISR+0x42>
 800cf44:	2300      	movs	r3, #0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10a      	bne.n	800cf60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d103      	bne.n	800cf6e <xQueueGenericSendFromISR+0x6a>
 800cf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d101      	bne.n	800cf72 <xQueueGenericSendFromISR+0x6e>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <xQueueGenericSendFromISR+0x70>
 800cf72:	2300      	movs	r3, #0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	623b      	str	r3, [r7, #32]
}
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf8e:	f001 ff4b 	bl	800ee28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf92:	f3ef 8211 	mrs	r2, BASEPRI
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	61fa      	str	r2, [r7, #28]
 800cfa8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfaa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d302      	bcc.n	800cfc0 <xQueueGenericSendFromISR+0xbc>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d12f      	bne.n	800d020 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	68b9      	ldr	r1, [r7, #8]
 800cfd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfd6:	f000 f911 	bl	800d1fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe2:	d112      	bne.n	800d00a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d016      	beq.n	800d01a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	3324      	adds	r3, #36	; 0x24
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 ff19 	bl	800de28 <xTaskRemoveFromEventList>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00e      	beq.n	800d01a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00b      	beq.n	800d01a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	e007      	b.n	800d01a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d00a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d00e:	3301      	adds	r3, #1
 800d010:	b2db      	uxtb	r3, r3
 800d012:	b25a      	sxtb	r2, r3
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d01a:	2301      	movs	r3, #1
 800d01c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d01e:	e001      	b.n	800d024 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d020:	2300      	movs	r3, #0
 800d022:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d026:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d02e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d032:	4618      	mov	r0, r3
 800d034:	3740      	adds	r7, #64	; 0x40
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08c      	sub	sp, #48	; 0x30
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d048:	2300      	movs	r3, #0
 800d04a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <xQueueReceive+0x30>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	623b      	str	r3, [r7, #32]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <xQueueReceive+0x3e>
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <xQueueReceive+0x42>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <xQueueReceive+0x44>
 800d07e:	2300      	movs	r3, #0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueReceive+0x5e>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	61fb      	str	r3, [r7, #28]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09a:	f001 f889 	bl	800e1b0 <xTaskGetSchedulerState>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <xQueueReceive+0x6e>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <xQueueReceive+0x72>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <xQueueReceive+0x74>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <xQueueReceive+0x8e>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61bb      	str	r3, [r7, #24]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ca:	f001 fdcb 	bl	800ec64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d01f      	beq.n	800d11a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0de:	f000 f8f7 	bl	800d2d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	1e5a      	subs	r2, r3, #1
 800d0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00f      	beq.n	800d112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	3310      	adds	r3, #16
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fe96 	bl	800de28 <xTaskRemoveFromEventList>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d007      	beq.n	800d112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d102:	4b3d      	ldr	r3, [pc, #244]	; (800d1f8 <xQueueReceive+0x1bc>)
 800d104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d112:	f001 fdd7 	bl	800ecc4 <vPortExitCritical>
				return pdPASS;
 800d116:	2301      	movs	r3, #1
 800d118:	e069      	b.n	800d1ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d103      	bne.n	800d128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d120:	f001 fdd0 	bl	800ecc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d124:	2300      	movs	r3, #0
 800d126:	e062      	b.n	800d1ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d12e:	f107 0310 	add.w	r3, r7, #16
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fedc 	bl	800def0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d138:	2301      	movs	r3, #1
 800d13a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d13c:	f001 fdc2 	bl	800ecc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d140:	f000 fc2c 	bl	800d99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d144:	f001 fd8e 	bl	800ec64 <vPortEnterCritical>
 800d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d14e:	b25b      	sxtb	r3, r3
 800d150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d154:	d103      	bne.n	800d15e <xQueueReceive+0x122>
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d164:	b25b      	sxtb	r3, r3
 800d166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16a:	d103      	bne.n	800d174 <xQueueReceive+0x138>
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d174:	f001 fda6 	bl	800ecc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d178:	1d3a      	adds	r2, r7, #4
 800d17a:	f107 0310 	add.w	r3, r7, #16
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fecb 	bl	800df1c <xTaskCheckForTimeOut>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d123      	bne.n	800d1d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f000 f917 	bl	800d3c0 <prvIsQueueEmpty>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d017      	beq.n	800d1c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	3324      	adds	r3, #36	; 0x24
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fdf1 	bl	800dd88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a8:	f000 f8b8 	bl	800d31c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1ac:	f000 fc04 	bl	800d9b8 <xTaskResumeAll>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d189      	bne.n	800d0ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1b6:	4b10      	ldr	r3, [pc, #64]	; (800d1f8 <xQueueReceive+0x1bc>)
 800d1b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	e780      	b.n	800d0ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ca:	f000 f8a7 	bl	800d31c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1ce:	f000 fbf3 	bl	800d9b8 <xTaskResumeAll>
 800d1d2:	e77a      	b.n	800d0ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d6:	f000 f8a1 	bl	800d31c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1da:	f000 fbed 	bl	800d9b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e0:	f000 f8ee 	bl	800d3c0 <prvIsQueueEmpty>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f43f af6f 	beq.w	800d0ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3730      	adds	r7, #48	; 0x30
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b086      	sub	sp, #24
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d210:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10d      	bne.n	800d236 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d14d      	bne.n	800d2be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	4618      	mov	r0, r3
 800d228:	f000 ffe0 	bl	800e1ec <xTaskPriorityDisinherit>
 800d22c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	609a      	str	r2, [r3, #8]
 800d234:	e043      	b.n	800d2be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d119      	bne.n	800d270 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6858      	ldr	r0, [r3, #4]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d244:	461a      	mov	r2, r3
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	f002 fe5c 	bl	800ff04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d254:	441a      	add	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	429a      	cmp	r2, r3
 800d264:	d32b      	bcc.n	800d2be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	605a      	str	r2, [r3, #4]
 800d26e:	e026      	b.n	800d2be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	68d8      	ldr	r0, [r3, #12]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	461a      	mov	r2, r3
 800d27a:	68b9      	ldr	r1, [r7, #8]
 800d27c:	f002 fe42 	bl	800ff04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	68da      	ldr	r2, [r3, #12]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d288:	425b      	negs	r3, r3
 800d28a:	441a      	add	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	68da      	ldr	r2, [r3, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d207      	bcs.n	800d2ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	689a      	ldr	r2, [r3, #8]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a4:	425b      	negs	r3, r3
 800d2a6:	441a      	add	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	d105      	bne.n	800d2be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d002      	beq.n	800d2be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2c6:	697b      	ldr	r3, [r7, #20]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3718      	adds	r7, #24
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d018      	beq.n	800d314 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ea:	441a      	add	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68da      	ldr	r2, [r3, #12]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d303      	bcc.n	800d304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68d9      	ldr	r1, [r3, #12]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30c:	461a      	mov	r2, r3
 800d30e:	6838      	ldr	r0, [r7, #0]
 800d310:	f002 fdf8 	bl	800ff04 <memcpy>
	}
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d324:	f001 fc9e 	bl	800ec64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d32e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d330:	e011      	b.n	800d356 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	2b00      	cmp	r3, #0
 800d338:	d012      	beq.n	800d360 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	3324      	adds	r3, #36	; 0x24
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 fd72 	bl	800de28 <xTaskRemoveFromEventList>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d34a:	f000 fe49 	bl	800dfe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	3b01      	subs	r3, #1
 800d352:	b2db      	uxtb	r3, r3
 800d354:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	dce9      	bgt.n	800d332 <prvUnlockQueue+0x16>
 800d35e:	e000      	b.n	800d362 <prvUnlockQueue+0x46>
					break;
 800d360:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	22ff      	movs	r2, #255	; 0xff
 800d366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d36a:	f001 fcab 	bl	800ecc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d36e:	f001 fc79 	bl	800ec64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d378:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d37a:	e011      	b.n	800d3a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d012      	beq.n	800d3aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	3310      	adds	r3, #16
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 fd4d 	bl	800de28 <xTaskRemoveFromEventList>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d394:	f000 fe24 	bl	800dfe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dce9      	bgt.n	800d37c <prvUnlockQueue+0x60>
 800d3a8:	e000      	b.n	800d3ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	22ff      	movs	r2, #255	; 0xff
 800d3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3b4:	f001 fc86 	bl	800ecc4 <vPortExitCritical>
}
 800d3b8:	bf00      	nop
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3c8:	f001 fc4c 	bl	800ec64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	e001      	b.n	800d3de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3de:	f001 fc71 	bl	800ecc4 <vPortExitCritical>

	return xReturn;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3f4:	f001 fc36 	bl	800ec64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d400:	429a      	cmp	r2, r3
 800d402:	d102      	bne.n	800d40a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d404:	2301      	movs	r3, #1
 800d406:	60fb      	str	r3, [r7, #12]
 800d408:	e001      	b.n	800d40e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d40e:	f001 fc59 	bl	800ecc4 <vPortExitCritical>

	return xReturn;
 800d412:	68fb      	ldr	r3, [r7, #12]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	e014      	b.n	800d456 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d42c:	4a0f      	ldr	r2, [pc, #60]	; (800d46c <vQueueAddToRegistry+0x50>)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10b      	bne.n	800d450 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d438:	490c      	ldr	r1, [pc, #48]	; (800d46c <vQueueAddToRegistry+0x50>)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	683a      	ldr	r2, [r7, #0]
 800d43e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d442:	4a0a      	ldr	r2, [pc, #40]	; (800d46c <vQueueAddToRegistry+0x50>)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	4413      	add	r3, r2
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d44e:	e006      	b.n	800d45e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	3301      	adds	r3, #1
 800d454:	60fb      	str	r3, [r7, #12]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b07      	cmp	r3, #7
 800d45a:	d9e7      	bls.n	800d42c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	20000c48 	.word	0x20000c48

0800d470 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d480:	f001 fbf0 	bl	800ec64 <vPortEnterCritical>
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d48a:	b25b      	sxtb	r3, r3
 800d48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d490:	d103      	bne.n	800d49a <vQueueWaitForMessageRestricted+0x2a>
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a0:	b25b      	sxtb	r3, r3
 800d4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a6:	d103      	bne.n	800d4b0 <vQueueWaitForMessageRestricted+0x40>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4b0:	f001 fc08 	bl	800ecc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d106      	bne.n	800d4ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	3324      	adds	r3, #36	; 0x24
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	68b9      	ldr	r1, [r7, #8]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fc83 	bl	800ddd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d4ca:	6978      	ldr	r0, [r7, #20]
 800d4cc:	f7ff ff26 	bl	800d31c <prvUnlockQueue>
	}
 800d4d0:	bf00      	nop
 800d4d2:	3718      	adds	r7, #24
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08e      	sub	sp, #56	; 0x38
 800d4dc:	af04      	add	r7, sp, #16
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10a      	bne.n	800d502 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	623b      	str	r3, [r7, #32]
}
 800d4fe:	bf00      	nop
 800d500:	e7fe      	b.n	800d500 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <xTaskCreateStatic+0x46>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	61fb      	str	r3, [r7, #28]
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d51e:	23c0      	movs	r3, #192	; 0xc0
 800d520:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	2bc0      	cmp	r3, #192	; 0xc0
 800d526:	d00a      	beq.n	800d53e <xTaskCreateStatic+0x66>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	61bb      	str	r3, [r7, #24]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d53e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	2b00      	cmp	r3, #0
 800d544:	d01e      	beq.n	800d584 <xTaskCreateStatic+0xac>
 800d546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d01b      	beq.n	800d584 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d554:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	2202      	movs	r2, #2
 800d55a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d55e:	2300      	movs	r3, #0
 800d560:	9303      	str	r3, [sp, #12]
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d564:	9302      	str	r3, [sp, #8]
 800d566:	f107 0314 	add.w	r3, r7, #20
 800d56a:	9301      	str	r3, [sp, #4]
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f000 f850 	bl	800d61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d57e:	f000 f8f7 	bl	800d770 <prvAddNewTaskToReadyList>
 800d582:	e001      	b.n	800d588 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d584:	2300      	movs	r3, #0
 800d586:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d588:	697b      	ldr	r3, [r7, #20]
	}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3728      	adds	r7, #40	; 0x28
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d592:	b580      	push	{r7, lr}
 800d594:	b08c      	sub	sp, #48	; 0x30
 800d596:	af04      	add	r7, sp, #16
 800d598:	60f8      	str	r0, [r7, #12]
 800d59a:	60b9      	str	r1, [r7, #8]
 800d59c:	603b      	str	r3, [r7, #0]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5a2:	88fb      	ldrh	r3, [r7, #6]
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f001 fc7e 	bl	800eea8 <pvPortMalloc>
 800d5ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00e      	beq.n	800d5d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5b4:	20c0      	movs	r0, #192	; 0xc0
 800d5b6:	f001 fc77 	bl	800eea8 <pvPortMalloc>
 800d5ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	697a      	ldr	r2, [r7, #20]
 800d5c6:	631a      	str	r2, [r3, #48]	; 0x30
 800d5c8:	e005      	b.n	800d5d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d5ca:	6978      	ldr	r0, [r7, #20]
 800d5cc:	f001 fd38 	bl	800f040 <vPortFree>
 800d5d0:	e001      	b.n	800d5d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d017      	beq.n	800d60c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d5e4:	88fa      	ldrh	r2, [r7, #6]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9303      	str	r3, [sp, #12]
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	9302      	str	r3, [sp, #8]
 800d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68b9      	ldr	r1, [r7, #8]
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f000 f80e 	bl	800d61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d600:	69f8      	ldr	r0, [r7, #28]
 800d602:	f000 f8b5 	bl	800d770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d606:	2301      	movs	r3, #1
 800d608:	61bb      	str	r3, [r7, #24]
 800d60a:	e002      	b.n	800d612 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d60c:	f04f 33ff 	mov.w	r3, #4294967295
 800d610:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d612:	69bb      	ldr	r3, [r7, #24]
	}
 800d614:	4618      	mov	r0, r3
 800d616:	3720      	adds	r7, #32
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	461a      	mov	r2, r3
 800d634:	21a5      	movs	r1, #165	; 0xa5
 800d636:	f002 fc73 	bl	800ff20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d644:	3b01      	subs	r3, #1
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	f023 0307 	bic.w	r3, r3, #7
 800d652:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	617b      	str	r3, [r7, #20]
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d01f      	beq.n	800d6ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d67a:	2300      	movs	r3, #0
 800d67c:	61fb      	str	r3, [r7, #28]
 800d67e:	e012      	b.n	800d6a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	4413      	add	r3, r2
 800d686:	7819      	ldrb	r1, [r3, #0]
 800d688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	4413      	add	r3, r2
 800d68e:	3334      	adds	r3, #52	; 0x34
 800d690:	460a      	mov	r2, r1
 800d692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d694:	68ba      	ldr	r2, [r7, #8]
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	4413      	add	r3, r2
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d006      	beq.n	800d6ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	61fb      	str	r3, [r7, #28]
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	2b0f      	cmp	r3, #15
 800d6aa:	d9e9      	bls.n	800d680 <prvInitialiseNewTask+0x64>
 800d6ac:	e000      	b.n	800d6b0 <prvInitialiseNewTask+0x94>
			{
				break;
 800d6ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6b8:	e003      	b.n	800d6c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	2b37      	cmp	r3, #55	; 0x37
 800d6c6:	d901      	bls.n	800d6cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6c8:	2337      	movs	r3, #55	; 0x37
 800d6ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6da:	2200      	movs	r2, #0
 800d6dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7ff f978 	bl	800c9d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ea:	3318      	adds	r3, #24
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff f973 	bl	800c9d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d706:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	2200      	movs	r2, #0
 800d70c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	2200      	movs	r2, #0
 800d712:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	3358      	adds	r3, #88	; 0x58
 800d722:	2260      	movs	r2, #96	; 0x60
 800d724:	2100      	movs	r1, #0
 800d726:	4618      	mov	r0, r3
 800d728:	f002 fbfa 	bl	800ff20 <memset>
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	4a0d      	ldr	r2, [pc, #52]	; (800d764 <prvInitialiseNewTask+0x148>)
 800d730:	65da      	str	r2, [r3, #92]	; 0x5c
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	4a0c      	ldr	r2, [pc, #48]	; (800d768 <prvInitialiseNewTask+0x14c>)
 800d736:	661a      	str	r2, [r3, #96]	; 0x60
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	4a0c      	ldr	r2, [pc, #48]	; (800d76c <prvInitialiseNewTask+0x150>)
 800d73c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	68f9      	ldr	r1, [r7, #12]
 800d742:	69b8      	ldr	r0, [r7, #24]
 800d744:	f001 f962 	bl	800ea0c <pxPortInitialiseStack>
 800d748:	4602      	mov	r2, r0
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	2b00      	cmp	r3, #0
 800d752:	d002      	beq.n	800d75a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d75a:	bf00      	nop
 800d75c:	3720      	adds	r7, #32
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08013ee8 	.word	0x08013ee8
 800d768:	08013f08 	.word	0x08013f08
 800d76c:	08013ec8 	.word	0x08013ec8

0800d770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d778:	f001 fa74 	bl	800ec64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d77c:	4b2d      	ldr	r3, [pc, #180]	; (800d834 <prvAddNewTaskToReadyList+0xc4>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3301      	adds	r3, #1
 800d782:	4a2c      	ldr	r2, [pc, #176]	; (800d834 <prvAddNewTaskToReadyList+0xc4>)
 800d784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d786:	4b2c      	ldr	r3, [pc, #176]	; (800d838 <prvAddNewTaskToReadyList+0xc8>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d109      	bne.n	800d7a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d78e:	4a2a      	ldr	r2, [pc, #168]	; (800d838 <prvAddNewTaskToReadyList+0xc8>)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d794:	4b27      	ldr	r3, [pc, #156]	; (800d834 <prvAddNewTaskToReadyList+0xc4>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d110      	bne.n	800d7be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d79c:	f000 fc46 	bl	800e02c <prvInitialiseTaskLists>
 800d7a0:	e00d      	b.n	800d7be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7a2:	4b26      	ldr	r3, [pc, #152]	; (800d83c <prvAddNewTaskToReadyList+0xcc>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d109      	bne.n	800d7be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7aa:	4b23      	ldr	r3, [pc, #140]	; (800d838 <prvAddNewTaskToReadyList+0xc8>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d802      	bhi.n	800d7be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7b8:	4a1f      	ldr	r2, [pc, #124]	; (800d838 <prvAddNewTaskToReadyList+0xc8>)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7be:	4b20      	ldr	r3, [pc, #128]	; (800d840 <prvAddNewTaskToReadyList+0xd0>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	4a1e      	ldr	r2, [pc, #120]	; (800d840 <prvAddNewTaskToReadyList+0xd0>)
 800d7c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7c8:	4b1d      	ldr	r3, [pc, #116]	; (800d840 <prvAddNewTaskToReadyList+0xd0>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d4:	4b1b      	ldr	r3, [pc, #108]	; (800d844 <prvAddNewTaskToReadyList+0xd4>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d903      	bls.n	800d7e4 <prvAddNewTaskToReadyList+0x74>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e0:	4a18      	ldr	r2, [pc, #96]	; (800d844 <prvAddNewTaskToReadyList+0xd4>)
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4a15      	ldr	r2, [pc, #84]	; (800d848 <prvAddNewTaskToReadyList+0xd8>)
 800d7f2:	441a      	add	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7ff f8f9 	bl	800c9f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d800:	f001 fa60 	bl	800ecc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d804:	4b0d      	ldr	r3, [pc, #52]	; (800d83c <prvAddNewTaskToReadyList+0xcc>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00e      	beq.n	800d82a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d80c:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <prvAddNewTaskToReadyList+0xc8>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d816:	429a      	cmp	r2, r3
 800d818:	d207      	bcs.n	800d82a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d81a:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <prvAddNewTaskToReadyList+0xdc>)
 800d81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d82a:	bf00      	nop
 800d82c:	3708      	adds	r7, #8
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2000115c 	.word	0x2000115c
 800d838:	20000c88 	.word	0x20000c88
 800d83c:	20001168 	.word	0x20001168
 800d840:	20001178 	.word	0x20001178
 800d844:	20001164 	.word	0x20001164
 800d848:	20000c8c 	.word	0x20000c8c
 800d84c:	e000ed04 	.word	0xe000ed04

0800d850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d858:	2300      	movs	r3, #0
 800d85a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d017      	beq.n	800d892 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d862:	4b13      	ldr	r3, [pc, #76]	; (800d8b0 <vTaskDelay+0x60>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <vTaskDelay+0x30>
	__asm volatile
 800d86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	60bb      	str	r3, [r7, #8]
}
 800d87c:	bf00      	nop
 800d87e:	e7fe      	b.n	800d87e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d880:	f000 f88c 	bl	800d99c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d884:	2100      	movs	r1, #0
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fd1e 	bl	800e2c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d88c:	f000 f894 	bl	800d9b8 <xTaskResumeAll>
 800d890:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d107      	bne.n	800d8a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d898:	4b06      	ldr	r3, [pc, #24]	; (800d8b4 <vTaskDelay+0x64>)
 800d89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8a8:	bf00      	nop
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20001184 	.word	0x20001184
 800d8b4:	e000ed04 	.word	0xe000ed04

0800d8b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08a      	sub	sp, #40	; 0x28
 800d8bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8c6:	463a      	mov	r2, r7
 800d8c8:	1d39      	adds	r1, r7, #4
 800d8ca:	f107 0308 	add.w	r3, r7, #8
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff f82e 	bl	800c930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	9202      	str	r2, [sp, #8]
 800d8dc:	9301      	str	r3, [sp, #4]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	460a      	mov	r2, r1
 800d8e6:	4925      	ldr	r1, [pc, #148]	; (800d97c <vTaskStartScheduler+0xc4>)
 800d8e8:	4825      	ldr	r0, [pc, #148]	; (800d980 <vTaskStartScheduler+0xc8>)
 800d8ea:	f7ff fdf5 	bl	800d4d8 <xTaskCreateStatic>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	4a24      	ldr	r2, [pc, #144]	; (800d984 <vTaskStartScheduler+0xcc>)
 800d8f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d8f4:	4b23      	ldr	r3, [pc, #140]	; (800d984 <vTaskStartScheduler+0xcc>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	617b      	str	r3, [r7, #20]
 800d900:	e001      	b.n	800d906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d902:	2300      	movs	r3, #0
 800d904:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d102      	bne.n	800d912 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d90c:	f000 fd30 	bl	800e370 <xTimerCreateTimerTask>
 800d910:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d11d      	bne.n	800d954 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91c:	f383 8811 	msr	BASEPRI, r3
 800d920:	f3bf 8f6f 	isb	sy
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	613b      	str	r3, [r7, #16]
}
 800d92a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d92c:	4b16      	ldr	r3, [pc, #88]	; (800d988 <vTaskStartScheduler+0xd0>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3358      	adds	r3, #88	; 0x58
 800d932:	4a16      	ldr	r2, [pc, #88]	; (800d98c <vTaskStartScheduler+0xd4>)
 800d934:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d936:	4b16      	ldr	r3, [pc, #88]	; (800d990 <vTaskStartScheduler+0xd8>)
 800d938:	f04f 32ff 	mov.w	r2, #4294967295
 800d93c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <vTaskStartScheduler+0xdc>)
 800d940:	2201      	movs	r2, #1
 800d942:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d944:	4b14      	ldr	r3, [pc, #80]	; (800d998 <vTaskStartScheduler+0xe0>)
 800d946:	2200      	movs	r2, #0
 800d948:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d94a:	f7f2 ff66 	bl	800081a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d94e:	f001 f8e7 	bl	800eb20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d952:	e00e      	b.n	800d972 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95a:	d10a      	bne.n	800d972 <vTaskStartScheduler+0xba>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	60fb      	str	r3, [r7, #12]
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <vTaskStartScheduler+0xb8>
}
 800d972:	bf00      	nop
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	08011530 	.word	0x08011530
 800d980:	0800dff9 	.word	0x0800dff9
 800d984:	20001180 	.word	0x20001180
 800d988:	20000c88 	.word	0x20000c88
 800d98c:	20000250 	.word	0x20000250
 800d990:	2000117c 	.word	0x2000117c
 800d994:	20001168 	.word	0x20001168
 800d998:	20001160 	.word	0x20001160

0800d99c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d99c:	b480      	push	{r7}
 800d99e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9a0:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <vTaskSuspendAll+0x18>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	4a03      	ldr	r2, [pc, #12]	; (800d9b4 <vTaskSuspendAll+0x18>)
 800d9a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d9aa:	bf00      	nop
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	20001184 	.word	0x20001184

0800d9b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9c6:	4b42      	ldr	r3, [pc, #264]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10a      	bne.n	800d9e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	603b      	str	r3, [r7, #0]
}
 800d9e0:	bf00      	nop
 800d9e2:	e7fe      	b.n	800d9e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9e4:	f001 f93e 	bl	800ec64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9e8:	4b39      	ldr	r3, [pc, #228]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	4a38      	ldr	r2, [pc, #224]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9f2:	4b37      	ldr	r3, [pc, #220]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d162      	bne.n	800dac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9fa:	4b36      	ldr	r3, [pc, #216]	; (800dad4 <xTaskResumeAll+0x11c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d05e      	beq.n	800dac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da02:	e02f      	b.n	800da64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da04:	4b34      	ldr	r3, [pc, #208]	; (800dad8 <xTaskResumeAll+0x120>)
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3318      	adds	r3, #24
 800da10:	4618      	mov	r0, r3
 800da12:	f7ff f84b 	bl	800caac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	3304      	adds	r3, #4
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff f846 	bl	800caac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da24:	4b2d      	ldr	r3, [pc, #180]	; (800dadc <xTaskResumeAll+0x124>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d903      	bls.n	800da34 <xTaskResumeAll+0x7c>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da30:	4a2a      	ldr	r2, [pc, #168]	; (800dadc <xTaskResumeAll+0x124>)
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da38:	4613      	mov	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4a27      	ldr	r2, [pc, #156]	; (800dae0 <xTaskResumeAll+0x128>)
 800da42:	441a      	add	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3304      	adds	r3, #4
 800da48:	4619      	mov	r1, r3
 800da4a:	4610      	mov	r0, r2
 800da4c:	f7fe ffd1 	bl	800c9f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da54:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <xTaskResumeAll+0x12c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d302      	bcc.n	800da64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da5e:	4b22      	ldr	r3, [pc, #136]	; (800dae8 <xTaskResumeAll+0x130>)
 800da60:	2201      	movs	r2, #1
 800da62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da64:	4b1c      	ldr	r3, [pc, #112]	; (800dad8 <xTaskResumeAll+0x120>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1cb      	bne.n	800da04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d001      	beq.n	800da76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da72:	f000 fb7d 	bl	800e170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da76:	4b1d      	ldr	r3, [pc, #116]	; (800daec <xTaskResumeAll+0x134>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d010      	beq.n	800daa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da82:	f000 f847 	bl	800db14 <xTaskIncrementTick>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800da8c:	4b16      	ldr	r3, [pc, #88]	; (800dae8 <xTaskResumeAll+0x130>)
 800da8e:	2201      	movs	r2, #1
 800da90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3b01      	subs	r3, #1
 800da96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1f1      	bne.n	800da82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800da9e:	4b13      	ldr	r3, [pc, #76]	; (800daec <xTaskResumeAll+0x134>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800daa4:	4b10      	ldr	r3, [pc, #64]	; (800dae8 <xTaskResumeAll+0x130>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d009      	beq.n	800dac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800daac:	2301      	movs	r3, #1
 800daae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dab0:	4b0f      	ldr	r3, [pc, #60]	; (800daf0 <xTaskResumeAll+0x138>)
 800dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dac0:	f001 f900 	bl	800ecc4 <vPortExitCritical>

	return xAlreadyYielded;
 800dac4:	68bb      	ldr	r3, [r7, #8]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	20001184 	.word	0x20001184
 800dad4:	2000115c 	.word	0x2000115c
 800dad8:	2000111c 	.word	0x2000111c
 800dadc:	20001164 	.word	0x20001164
 800dae0:	20000c8c 	.word	0x20000c8c
 800dae4:	20000c88 	.word	0x20000c88
 800dae8:	20001170 	.word	0x20001170
 800daec:	2000116c 	.word	0x2000116c
 800daf0:	e000ed04 	.word	0xe000ed04

0800daf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dafa:	4b05      	ldr	r3, [pc, #20]	; (800db10 <xTaskGetTickCount+0x1c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db00:	687b      	ldr	r3, [r7, #4]
}
 800db02:	4618      	mov	r0, r3
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	20001160 	.word	0x20001160

0800db14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db1a:	2300      	movs	r3, #0
 800db1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db1e:	4b4f      	ldr	r3, [pc, #316]	; (800dc5c <xTaskIncrementTick+0x148>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f040 808f 	bne.w	800dc46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db28:	4b4d      	ldr	r3, [pc, #308]	; (800dc60 <xTaskIncrementTick+0x14c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3301      	adds	r3, #1
 800db2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db30:	4a4b      	ldr	r2, [pc, #300]	; (800dc60 <xTaskIncrementTick+0x14c>)
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d120      	bne.n	800db7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db3c:	4b49      	ldr	r3, [pc, #292]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <xTaskIncrementTick+0x48>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	603b      	str	r3, [r7, #0]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <xTaskIncrementTick+0x46>
 800db5c:	4b41      	ldr	r3, [pc, #260]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	4b41      	ldr	r3, [pc, #260]	; (800dc68 <xTaskIncrementTick+0x154>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a3f      	ldr	r2, [pc, #252]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db68:	6013      	str	r3, [r2, #0]
 800db6a:	4a3f      	ldr	r2, [pc, #252]	; (800dc68 <xTaskIncrementTick+0x154>)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	4b3e      	ldr	r3, [pc, #248]	; (800dc6c <xTaskIncrementTick+0x158>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	4a3d      	ldr	r2, [pc, #244]	; (800dc6c <xTaskIncrementTick+0x158>)
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	f000 faf9 	bl	800e170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db7e:	4b3c      	ldr	r3, [pc, #240]	; (800dc70 <xTaskIncrementTick+0x15c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	429a      	cmp	r2, r3
 800db86:	d349      	bcc.n	800dc1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db88:	4b36      	ldr	r3, [pc, #216]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d104      	bne.n	800db9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db92:	4b37      	ldr	r3, [pc, #220]	; (800dc70 <xTaskIncrementTick+0x15c>)
 800db94:	f04f 32ff 	mov.w	r2, #4294967295
 800db98:	601a      	str	r2, [r3, #0]
					break;
 800db9a:	e03f      	b.n	800dc1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9c:	4b31      	ldr	r3, [pc, #196]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d203      	bcs.n	800dbbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbb4:	4a2e      	ldr	r2, [pc, #184]	; (800dc70 <xTaskIncrementTick+0x15c>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbba:	e02f      	b.n	800dc1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fe ff73 	bl	800caac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d004      	beq.n	800dbd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	3318      	adds	r3, #24
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe ff6a 	bl	800caac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbdc:	4b25      	ldr	r3, [pc, #148]	; (800dc74 <xTaskIncrementTick+0x160>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d903      	bls.n	800dbec <xTaskIncrementTick+0xd8>
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	4a22      	ldr	r2, [pc, #136]	; (800dc74 <xTaskIncrementTick+0x160>)
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4a1f      	ldr	r2, [pc, #124]	; (800dc78 <xTaskIncrementTick+0x164>)
 800dbfa:	441a      	add	r2, r3
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7fe fef5 	bl	800c9f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0c:	4b1b      	ldr	r3, [pc, #108]	; (800dc7c <xTaskIncrementTick+0x168>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d3b8      	bcc.n	800db88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc16:	2301      	movs	r3, #1
 800dc18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc1a:	e7b5      	b.n	800db88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc1c:	4b17      	ldr	r3, [pc, #92]	; (800dc7c <xTaskIncrementTick+0x168>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	4915      	ldr	r1, [pc, #84]	; (800dc78 <xTaskIncrementTick+0x164>)
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d901      	bls.n	800dc38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dc34:	2301      	movs	r3, #1
 800dc36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc38:	4b11      	ldr	r3, [pc, #68]	; (800dc80 <xTaskIncrementTick+0x16c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dc40:	2301      	movs	r3, #1
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e004      	b.n	800dc50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <xTaskIncrementTick+0x170>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	4a0d      	ldr	r2, [pc, #52]	; (800dc84 <xTaskIncrementTick+0x170>)
 800dc4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc50:	697b      	ldr	r3, [r7, #20]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20001184 	.word	0x20001184
 800dc60:	20001160 	.word	0x20001160
 800dc64:	20001114 	.word	0x20001114
 800dc68:	20001118 	.word	0x20001118
 800dc6c:	20001174 	.word	0x20001174
 800dc70:	2000117c 	.word	0x2000117c
 800dc74:	20001164 	.word	0x20001164
 800dc78:	20000c8c 	.word	0x20000c8c
 800dc7c:	20000c88 	.word	0x20000c88
 800dc80:	20001170 	.word	0x20001170
 800dc84:	2000116c 	.word	0x2000116c

0800dc88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc8e:	4b36      	ldr	r3, [pc, #216]	; (800dd68 <vTaskSwitchContext+0xe0>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc96:	4b35      	ldr	r3, [pc, #212]	; (800dd6c <vTaskSwitchContext+0xe4>)
 800dc98:	2201      	movs	r2, #1
 800dc9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc9c:	e05f      	b.n	800dd5e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800dc9e:	4b33      	ldr	r3, [pc, #204]	; (800dd6c <vTaskSwitchContext+0xe4>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dca4:	f7f2 fdc0 	bl	8000828 <getRunTimeCounterValue>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	4a31      	ldr	r2, [pc, #196]	; (800dd70 <vTaskSwitchContext+0xe8>)
 800dcac:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800dcae:	4b30      	ldr	r3, [pc, #192]	; (800dd70 <vTaskSwitchContext+0xe8>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b30      	ldr	r3, [pc, #192]	; (800dd74 <vTaskSwitchContext+0xec>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d909      	bls.n	800dcce <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800dcba:	4b2f      	ldr	r3, [pc, #188]	; (800dd78 <vTaskSwitchContext+0xf0>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dcc0:	4a2b      	ldr	r2, [pc, #172]	; (800dd70 <vTaskSwitchContext+0xe8>)
 800dcc2:	6810      	ldr	r0, [r2, #0]
 800dcc4:	4a2b      	ldr	r2, [pc, #172]	; (800dd74 <vTaskSwitchContext+0xec>)
 800dcc6:	6812      	ldr	r2, [r2, #0]
 800dcc8:	1a82      	subs	r2, r0, r2
 800dcca:	440a      	add	r2, r1
 800dccc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800dcce:	4b28      	ldr	r3, [pc, #160]	; (800dd70 <vTaskSwitchContext+0xe8>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a28      	ldr	r2, [pc, #160]	; (800dd74 <vTaskSwitchContext+0xec>)
 800dcd4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcd6:	4b29      	ldr	r3, [pc, #164]	; (800dd7c <vTaskSwitchContext+0xf4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	e010      	b.n	800dd00 <vTaskSwitchContext+0x78>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <vTaskSwitchContext+0x72>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	607b      	str	r3, [r7, #4]
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <vTaskSwitchContext+0x70>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	491f      	ldr	r1, [pc, #124]	; (800dd80 <vTaskSwitchContext+0xf8>)
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	440b      	add	r3, r1
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d0e4      	beq.n	800dcde <vTaskSwitchContext+0x56>
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	4a18      	ldr	r2, [pc, #96]	; (800dd80 <vTaskSwitchContext+0xf8>)
 800dd20:	4413      	add	r3, r2
 800dd22:	60bb      	str	r3, [r7, #8]
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	605a      	str	r2, [r3, #4]
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	3308      	adds	r3, #8
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d104      	bne.n	800dd44 <vTaskSwitchContext+0xbc>
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	605a      	str	r2, [r3, #4]
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	4a0b      	ldr	r2, [pc, #44]	; (800dd78 <vTaskSwitchContext+0xf0>)
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	4a0b      	ldr	r2, [pc, #44]	; (800dd7c <vTaskSwitchContext+0xf4>)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd54:	4b08      	ldr	r3, [pc, #32]	; (800dd78 <vTaskSwitchContext+0xf0>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3358      	adds	r3, #88	; 0x58
 800dd5a:	4a0a      	ldr	r2, [pc, #40]	; (800dd84 <vTaskSwitchContext+0xfc>)
 800dd5c:	6013      	str	r3, [r2, #0]
}
 800dd5e:	bf00      	nop
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20001184 	.word	0x20001184
 800dd6c:	20001170 	.word	0x20001170
 800dd70:	2000118c 	.word	0x2000118c
 800dd74:	20001188 	.word	0x20001188
 800dd78:	20000c88 	.word	0x20000c88
 800dd7c:	20001164 	.word	0x20001164
 800dd80:	20000c8c 	.word	0x20000c8c
 800dd84:	20000250 	.word	0x20000250

0800dd88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10a      	bne.n	800ddae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	60fb      	str	r3, [r7, #12]
}
 800ddaa:	bf00      	nop
 800ddac:	e7fe      	b.n	800ddac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddae:	4b07      	ldr	r3, [pc, #28]	; (800ddcc <vTaskPlaceOnEventList+0x44>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3318      	adds	r3, #24
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7fe fe3f 	bl	800ca3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	6838      	ldr	r0, [r7, #0]
 800ddc0:	f000 fa82 	bl	800e2c8 <prvAddCurrentTaskToDelayedList>
}
 800ddc4:	bf00      	nop
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20000c88 	.word	0x20000c88

0800ddd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10a      	bne.n	800ddf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde6:	f383 8811 	msr	BASEPRI, r3
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	f3bf 8f4f 	dsb	sy
 800ddf2:	617b      	str	r3, [r7, #20]
}
 800ddf4:	bf00      	nop
 800ddf6:	e7fe      	b.n	800ddf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	; (800de24 <vTaskPlaceOnEventListRestricted+0x54>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3318      	adds	r3, #24
 800ddfe:	4619      	mov	r1, r3
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f7fe fdf6 	bl	800c9f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800de0c:	f04f 33ff 	mov.w	r3, #4294967295
 800de10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de12:	6879      	ldr	r1, [r7, #4]
 800de14:	68b8      	ldr	r0, [r7, #8]
 800de16:	f000 fa57 	bl	800e2c8 <prvAddCurrentTaskToDelayedList>
	}
 800de1a:	bf00      	nop
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20000c88 	.word	0x20000c88

0800de28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10a      	bne.n	800de54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	60fb      	str	r3, [r7, #12]
}
 800de50:	bf00      	nop
 800de52:	e7fe      	b.n	800de52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	3318      	adds	r3, #24
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe fe27 	bl	800caac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de5e:	4b1e      	ldr	r3, [pc, #120]	; (800ded8 <xTaskRemoveFromEventList+0xb0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d11d      	bne.n	800dea2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	3304      	adds	r3, #4
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fe1e 	bl	800caac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de74:	4b19      	ldr	r3, [pc, #100]	; (800dedc <xTaskRemoveFromEventList+0xb4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d903      	bls.n	800de84 <xTaskRemoveFromEventList+0x5c>
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de80:	4a16      	ldr	r2, [pc, #88]	; (800dedc <xTaskRemoveFromEventList+0xb4>)
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de88:	4613      	mov	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4a13      	ldr	r2, [pc, #76]	; (800dee0 <xTaskRemoveFromEventList+0xb8>)
 800de92:	441a      	add	r2, r3
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	3304      	adds	r3, #4
 800de98:	4619      	mov	r1, r3
 800de9a:	4610      	mov	r0, r2
 800de9c:	f7fe fda9 	bl	800c9f2 <vListInsertEnd>
 800dea0:	e005      	b.n	800deae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	3318      	adds	r3, #24
 800dea6:	4619      	mov	r1, r3
 800dea8:	480e      	ldr	r0, [pc, #56]	; (800dee4 <xTaskRemoveFromEventList+0xbc>)
 800deaa:	f7fe fda2 	bl	800c9f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb2:	4b0d      	ldr	r3, [pc, #52]	; (800dee8 <xTaskRemoveFromEventList+0xc0>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb8:	429a      	cmp	r2, r3
 800deba:	d905      	bls.n	800dec8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800debc:	2301      	movs	r3, #1
 800debe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dec0:	4b0a      	ldr	r3, [pc, #40]	; (800deec <xTaskRemoveFromEventList+0xc4>)
 800dec2:	2201      	movs	r2, #1
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	e001      	b.n	800decc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dec8:	2300      	movs	r3, #0
 800deca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800decc:	697b      	ldr	r3, [r7, #20]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20001184 	.word	0x20001184
 800dedc:	20001164 	.word	0x20001164
 800dee0:	20000c8c 	.word	0x20000c8c
 800dee4:	2000111c 	.word	0x2000111c
 800dee8:	20000c88 	.word	0x20000c88
 800deec:	20001170 	.word	0x20001170

0800def0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800def8:	4b06      	ldr	r3, [pc, #24]	; (800df14 <vTaskInternalSetTimeOutState+0x24>)
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df00:	4b05      	ldr	r3, [pc, #20]	; (800df18 <vTaskInternalSetTimeOutState+0x28>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	605a      	str	r2, [r3, #4]
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	20001174 	.word	0x20001174
 800df18:	20001160 	.word	0x20001160

0800df1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b088      	sub	sp, #32
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10a      	bne.n	800df42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	613b      	str	r3, [r7, #16]
}
 800df3e:	bf00      	nop
 800df40:	e7fe      	b.n	800df40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	60fb      	str	r3, [r7, #12]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df5e:	f000 fe81 	bl	800ec64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df62:	4b1d      	ldr	r3, [pc, #116]	; (800dfd8 <xTaskCheckForTimeOut+0xbc>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	69ba      	ldr	r2, [r7, #24]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7a:	d102      	bne.n	800df82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df7c:	2300      	movs	r3, #0
 800df7e:	61fb      	str	r3, [r7, #28]
 800df80:	e023      	b.n	800dfca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	4b15      	ldr	r3, [pc, #84]	; (800dfdc <xTaskCheckForTimeOut+0xc0>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d007      	beq.n	800df9e <xTaskCheckForTimeOut+0x82>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	69ba      	ldr	r2, [r7, #24]
 800df94:	429a      	cmp	r2, r3
 800df96:	d302      	bcc.n	800df9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df98:	2301      	movs	r3, #1
 800df9a:	61fb      	str	r3, [r7, #28]
 800df9c:	e015      	b.n	800dfca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d20b      	bcs.n	800dfc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	1ad2      	subs	r2, r2, r3
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff ff9b 	bl	800def0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	61fb      	str	r3, [r7, #28]
 800dfbe:	e004      	b.n	800dfca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfca:	f000 fe7b 	bl	800ecc4 <vPortExitCritical>

	return xReturn;
 800dfce:	69fb      	ldr	r3, [r7, #28]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3720      	adds	r7, #32
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	20001160 	.word	0x20001160
 800dfdc:	20001174 	.word	0x20001174

0800dfe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfe4:	4b03      	ldr	r3, [pc, #12]	; (800dff4 <vTaskMissedYield+0x14>)
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	601a      	str	r2, [r3, #0]
}
 800dfea:	bf00      	nop
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr
 800dff4:	20001170 	.word	0x20001170

0800dff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e000:	f000 f854 	bl	800e0ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e004:	4b07      	ldr	r3, [pc, #28]	; (800e024 <prvIdleTask+0x2c>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d907      	bls.n	800e01c <prvIdleTask+0x24>
			{
				taskYIELD();
 800e00c:	4b06      	ldr	r3, [pc, #24]	; (800e028 <prvIdleTask+0x30>)
 800e00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e01c:	f7f2 fc10 	bl	8000840 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e020:	e7ee      	b.n	800e000 <prvIdleTask+0x8>
 800e022:	bf00      	nop
 800e024:	20000c8c 	.word	0x20000c8c
 800e028:	e000ed04 	.word	0xe000ed04

0800e02c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e032:	2300      	movs	r3, #0
 800e034:	607b      	str	r3, [r7, #4]
 800e036:	e00c      	b.n	800e052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	4613      	mov	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	4a12      	ldr	r2, [pc, #72]	; (800e08c <prvInitialiseTaskLists+0x60>)
 800e044:	4413      	add	r3, r2
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe fca6 	bl	800c998 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3301      	adds	r3, #1
 800e050:	607b      	str	r3, [r7, #4]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b37      	cmp	r3, #55	; 0x37
 800e056:	d9ef      	bls.n	800e038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e058:	480d      	ldr	r0, [pc, #52]	; (800e090 <prvInitialiseTaskLists+0x64>)
 800e05a:	f7fe fc9d 	bl	800c998 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e05e:	480d      	ldr	r0, [pc, #52]	; (800e094 <prvInitialiseTaskLists+0x68>)
 800e060:	f7fe fc9a 	bl	800c998 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e064:	480c      	ldr	r0, [pc, #48]	; (800e098 <prvInitialiseTaskLists+0x6c>)
 800e066:	f7fe fc97 	bl	800c998 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e06a:	480c      	ldr	r0, [pc, #48]	; (800e09c <prvInitialiseTaskLists+0x70>)
 800e06c:	f7fe fc94 	bl	800c998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e070:	480b      	ldr	r0, [pc, #44]	; (800e0a0 <prvInitialiseTaskLists+0x74>)
 800e072:	f7fe fc91 	bl	800c998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e076:	4b0b      	ldr	r3, [pc, #44]	; (800e0a4 <prvInitialiseTaskLists+0x78>)
 800e078:	4a05      	ldr	r2, [pc, #20]	; (800e090 <prvInitialiseTaskLists+0x64>)
 800e07a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e07c:	4b0a      	ldr	r3, [pc, #40]	; (800e0a8 <prvInitialiseTaskLists+0x7c>)
 800e07e:	4a05      	ldr	r2, [pc, #20]	; (800e094 <prvInitialiseTaskLists+0x68>)
 800e080:	601a      	str	r2, [r3, #0]
}
 800e082:	bf00      	nop
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20000c8c 	.word	0x20000c8c
 800e090:	200010ec 	.word	0x200010ec
 800e094:	20001100 	.word	0x20001100
 800e098:	2000111c 	.word	0x2000111c
 800e09c:	20001130 	.word	0x20001130
 800e0a0:	20001148 	.word	0x20001148
 800e0a4:	20001114 	.word	0x20001114
 800e0a8:	20001118 	.word	0x20001118

0800e0ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0b2:	e019      	b.n	800e0e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e0b4:	f000 fdd6 	bl	800ec64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0b8:	4b10      	ldr	r3, [pc, #64]	; (800e0fc <prvCheckTasksWaitingTermination+0x50>)
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fe fcf1 	bl	800caac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0ca:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <prvCheckTasksWaitingTermination+0x54>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	4a0b      	ldr	r2, [pc, #44]	; (800e100 <prvCheckTasksWaitingTermination+0x54>)
 800e0d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0d4:	4b0b      	ldr	r3, [pc, #44]	; (800e104 <prvCheckTasksWaitingTermination+0x58>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	4a0a      	ldr	r2, [pc, #40]	; (800e104 <prvCheckTasksWaitingTermination+0x58>)
 800e0dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0de:	f000 fdf1 	bl	800ecc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f810 	bl	800e108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0e8:	4b06      	ldr	r3, [pc, #24]	; (800e104 <prvCheckTasksWaitingTermination+0x58>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e1      	bne.n	800e0b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0f0:	bf00      	nop
 800e0f2:	bf00      	nop
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20001130 	.word	0x20001130
 800e100:	2000115c 	.word	0x2000115c
 800e104:	20001144 	.word	0x20001144

0800e108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3358      	adds	r3, #88	; 0x58
 800e114:	4618      	mov	r0, r3
 800e116:	f002 f827 	bl	8010168 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e120:	2b00      	cmp	r3, #0
 800e122:	d108      	bne.n	800e136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e128:	4618      	mov	r0, r3
 800e12a:	f000 ff89 	bl	800f040 <vPortFree>
				vPortFree( pxTCB );
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 ff86 	bl	800f040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e134:	e018      	b.n	800e168 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d103      	bne.n	800e148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 ff7d 	bl	800f040 <vPortFree>
	}
 800e146:	e00f      	b.n	800e168 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d00a      	beq.n	800e168 <prvDeleteTCB+0x60>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	60fb      	str	r3, [r7, #12]
}
 800e164:	bf00      	nop
 800e166:	e7fe      	b.n	800e166 <prvDeleteTCB+0x5e>
	}
 800e168:	bf00      	nop
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e176:	4b0c      	ldr	r3, [pc, #48]	; (800e1a8 <prvResetNextTaskUnblockTime+0x38>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d104      	bne.n	800e18a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e180:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <prvResetNextTaskUnblockTime+0x3c>)
 800e182:	f04f 32ff 	mov.w	r2, #4294967295
 800e186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e188:	e008      	b.n	800e19c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e18a:	4b07      	ldr	r3, [pc, #28]	; (800e1a8 <prvResetNextTaskUnblockTime+0x38>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	4a04      	ldr	r2, [pc, #16]	; (800e1ac <prvResetNextTaskUnblockTime+0x3c>)
 800e19a:	6013      	str	r3, [r2, #0]
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	20001114 	.word	0x20001114
 800e1ac:	2000117c 	.word	0x2000117c

0800e1b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1b6:	4b0b      	ldr	r3, [pc, #44]	; (800e1e4 <xTaskGetSchedulerState+0x34>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d102      	bne.n	800e1c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	607b      	str	r3, [r7, #4]
 800e1c2:	e008      	b.n	800e1d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1c4:	4b08      	ldr	r3, [pc, #32]	; (800e1e8 <xTaskGetSchedulerState+0x38>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d102      	bne.n	800e1d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	607b      	str	r3, [r7, #4]
 800e1d0:	e001      	b.n	800e1d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1d6:	687b      	ldr	r3, [r7, #4]
	}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr
 800e1e4:	20001168 	.word	0x20001168
 800e1e8:	20001184 	.word	0x20001184

0800e1ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d056      	beq.n	800e2b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e202:	4b2e      	ldr	r3, [pc, #184]	; (800e2bc <xTaskPriorityDisinherit+0xd0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d00a      	beq.n	800e222 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	60fb      	str	r3, [r7, #12]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e226:	2b00      	cmp	r3, #0
 800e228:	d10a      	bne.n	800e240 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	60bb      	str	r3, [r7, #8]
}
 800e23c:	bf00      	nop
 800e23e:	e7fe      	b.n	800e23e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e244:	1e5a      	subs	r2, r3, #1
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e252:	429a      	cmp	r2, r3
 800e254:	d02c      	beq.n	800e2b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d128      	bne.n	800e2b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	3304      	adds	r3, #4
 800e262:	4618      	mov	r0, r3
 800e264:	f7fe fc22 	bl	800caac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e274:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <xTaskPriorityDisinherit+0xd4>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	429a      	cmp	r2, r3
 800e286:	d903      	bls.n	800e290 <xTaskPriorityDisinherit+0xa4>
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28c:	4a0c      	ldr	r2, [pc, #48]	; (800e2c0 <xTaskPriorityDisinherit+0xd4>)
 800e28e:	6013      	str	r3, [r2, #0]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4a09      	ldr	r2, [pc, #36]	; (800e2c4 <xTaskPriorityDisinherit+0xd8>)
 800e29e:	441a      	add	r2, r3
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	3304      	adds	r3, #4
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	f7fe fba3 	bl	800c9f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2b0:	697b      	ldr	r3, [r7, #20]
	}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3718      	adds	r7, #24
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20000c88 	.word	0x20000c88
 800e2c0:	20001164 	.word	0x20001164
 800e2c4:	20000c8c 	.word	0x20000c8c

0800e2c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e2d2:	4b21      	ldr	r3, [pc, #132]	; (800e358 <prvAddCurrentTaskToDelayedList+0x90>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2d8:	4b20      	ldr	r3, [pc, #128]	; (800e35c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe fbe4 	bl	800caac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ea:	d10a      	bne.n	800e302 <prvAddCurrentTaskToDelayedList+0x3a>
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d007      	beq.n	800e302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2f2:	4b1a      	ldr	r3, [pc, #104]	; (800e35c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4819      	ldr	r0, [pc, #100]	; (800e360 <prvAddCurrentTaskToDelayedList+0x98>)
 800e2fc:	f7fe fb79 	bl	800c9f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e300:	e026      	b.n	800e350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4413      	add	r3, r2
 800e308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e30a:	4b14      	ldr	r3, [pc, #80]	; (800e35c <prvAddCurrentTaskToDelayedList+0x94>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	429a      	cmp	r2, r3
 800e318:	d209      	bcs.n	800e32e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e31a:	4b12      	ldr	r3, [pc, #72]	; (800e364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <prvAddCurrentTaskToDelayedList+0x94>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3304      	adds	r3, #4
 800e324:	4619      	mov	r1, r3
 800e326:	4610      	mov	r0, r2
 800e328:	f7fe fb87 	bl	800ca3a <vListInsert>
}
 800e32c:	e010      	b.n	800e350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e32e:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <prvAddCurrentTaskToDelayedList+0x94>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	3304      	adds	r3, #4
 800e338:	4619      	mov	r1, r3
 800e33a:	4610      	mov	r0, r2
 800e33c:	f7fe fb7d 	bl	800ca3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	429a      	cmp	r2, r3
 800e348:	d202      	bcs.n	800e350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e34a:	4a08      	ldr	r2, [pc, #32]	; (800e36c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	6013      	str	r3, [r2, #0]
}
 800e350:	bf00      	nop
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	20001160 	.word	0x20001160
 800e35c:	20000c88 	.word	0x20000c88
 800e360:	20001148 	.word	0x20001148
 800e364:	20001118 	.word	0x20001118
 800e368:	20001114 	.word	0x20001114
 800e36c:	2000117c 	.word	0x2000117c

0800e370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08a      	sub	sp, #40	; 0x28
 800e374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e376:	2300      	movs	r3, #0
 800e378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e37a:	f000 fb07 	bl	800e98c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e37e:	4b1c      	ldr	r3, [pc, #112]	; (800e3f0 <xTimerCreateTimerTask+0x80>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d021      	beq.n	800e3ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e38e:	1d3a      	adds	r2, r7, #4
 800e390:	f107 0108 	add.w	r1, r7, #8
 800e394:	f107 030c 	add.w	r3, r7, #12
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fe fae3 	bl	800c964 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	9202      	str	r2, [sp, #8]
 800e3a6:	9301      	str	r3, [sp, #4]
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	460a      	mov	r2, r1
 800e3b0:	4910      	ldr	r1, [pc, #64]	; (800e3f4 <xTimerCreateTimerTask+0x84>)
 800e3b2:	4811      	ldr	r0, [pc, #68]	; (800e3f8 <xTimerCreateTimerTask+0x88>)
 800e3b4:	f7ff f890 	bl	800d4d8 <xTaskCreateStatic>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	4a10      	ldr	r2, [pc, #64]	; (800e3fc <xTimerCreateTimerTask+0x8c>)
 800e3bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e3be:	4b0f      	ldr	r3, [pc, #60]	; (800e3fc <xTimerCreateTimerTask+0x8c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	613b      	str	r3, [r7, #16]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e3e6:	697b      	ldr	r3, [r7, #20]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	200011c0 	.word	0x200011c0
 800e3f4:	08011560 	.word	0x08011560
 800e3f8:	0800e535 	.word	0x0800e535
 800e3fc:	200011c4 	.word	0x200011c4

0800e400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b08a      	sub	sp, #40	; 0x28
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e40e:	2300      	movs	r3, #0
 800e410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10a      	bne.n	800e42e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	623b      	str	r3, [r7, #32]
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e42e:	4b1a      	ldr	r3, [pc, #104]	; (800e498 <xTimerGenericCommand+0x98>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d02a      	beq.n	800e48c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	2b05      	cmp	r3, #5
 800e446:	dc18      	bgt.n	800e47a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e448:	f7ff feb2 	bl	800e1b0 <xTaskGetSchedulerState>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d109      	bne.n	800e466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e452:	4b11      	ldr	r3, [pc, #68]	; (800e498 <xTimerGenericCommand+0x98>)
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	f107 0110 	add.w	r1, r7, #16
 800e45a:	2300      	movs	r3, #0
 800e45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e45e:	f7fe fc53 	bl	800cd08 <xQueueGenericSend>
 800e462:	6278      	str	r0, [r7, #36]	; 0x24
 800e464:	e012      	b.n	800e48c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e466:	4b0c      	ldr	r3, [pc, #48]	; (800e498 <xTimerGenericCommand+0x98>)
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	f107 0110 	add.w	r1, r7, #16
 800e46e:	2300      	movs	r3, #0
 800e470:	2200      	movs	r2, #0
 800e472:	f7fe fc49 	bl	800cd08 <xQueueGenericSend>
 800e476:	6278      	str	r0, [r7, #36]	; 0x24
 800e478:	e008      	b.n	800e48c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e47a:	4b07      	ldr	r3, [pc, #28]	; (800e498 <xTimerGenericCommand+0x98>)
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	f107 0110 	add.w	r1, r7, #16
 800e482:	2300      	movs	r3, #0
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	f7fe fd3d 	bl	800cf04 <xQueueGenericSendFromISR>
 800e48a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3728      	adds	r7, #40	; 0x28
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	200011c0 	.word	0x200011c0

0800e49c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4a6:	4b22      	ldr	r3, [pc, #136]	; (800e530 <prvProcessExpiredTimer+0x94>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe faf9 	bl	800caac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4c0:	f003 0304 	and.w	r3, r3, #4
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d022      	beq.n	800e50e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	699a      	ldr	r2, [r3, #24]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	18d1      	adds	r1, r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	f000 f8d1 	bl	800e67c <prvInsertTimerInActiveList>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d01f      	beq.n	800e520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	6978      	ldr	r0, [r7, #20]
 800e4ec:	f7ff ff88 	bl	800e400 <xTimerGenericCommand>
 800e4f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d113      	bne.n	800e520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	60fb      	str	r3, [r7, #12]
}
 800e50a:	bf00      	nop
 800e50c:	e7fe      	b.n	800e50c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e514:	f023 0301 	bic.w	r3, r3, #1
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	6a1b      	ldr	r3, [r3, #32]
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	4798      	blx	r3
}
 800e528:	bf00      	nop
 800e52a:	3718      	adds	r7, #24
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	200011b8 	.word	0x200011b8

0800e534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e53c:	f107 0308 	add.w	r3, r7, #8
 800e540:	4618      	mov	r0, r3
 800e542:	f000 f857 	bl	800e5f4 <prvGetNextExpireTime>
 800e546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	4619      	mov	r1, r3
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f803 	bl	800e558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e552:	f000 f8d5 	bl	800e700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e556:	e7f1      	b.n	800e53c <prvTimerTask+0x8>

0800e558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e562:	f7ff fa1b 	bl	800d99c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e566:	f107 0308 	add.w	r3, r7, #8
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 f866 	bl	800e63c <prvSampleTimeNow>
 800e570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d130      	bne.n	800e5da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10a      	bne.n	800e594 <prvProcessTimerOrBlockTask+0x3c>
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	429a      	cmp	r2, r3
 800e584:	d806      	bhi.n	800e594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e586:	f7ff fa17 	bl	800d9b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e58a:	68f9      	ldr	r1, [r7, #12]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7ff ff85 	bl	800e49c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e592:	e024      	b.n	800e5de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d008      	beq.n	800e5ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e59a:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <prvProcessTimerOrBlockTask+0x90>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d101      	bne.n	800e5a8 <prvProcessTimerOrBlockTask+0x50>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e000      	b.n	800e5aa <prvProcessTimerOrBlockTask+0x52>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5ac:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <prvProcessTimerOrBlockTask+0x94>)
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	f7fe ff59 	bl	800d470 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e5be:	f7ff f9fb 	bl	800d9b8 <xTaskResumeAll>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10a      	bne.n	800e5de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5c8:	4b09      	ldr	r3, [pc, #36]	; (800e5f0 <prvProcessTimerOrBlockTask+0x98>)
 800e5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	f3bf 8f6f 	isb	sy
}
 800e5d8:	e001      	b.n	800e5de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5da:	f7ff f9ed 	bl	800d9b8 <xTaskResumeAll>
}
 800e5de:	bf00      	nop
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200011bc 	.word	0x200011bc
 800e5ec:	200011c0 	.word	0x200011c0
 800e5f0:	e000ed04 	.word	0xe000ed04

0800e5f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5fc:	4b0e      	ldr	r3, [pc, #56]	; (800e638 <prvGetNextExpireTime+0x44>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <prvGetNextExpireTime+0x16>
 800e606:	2201      	movs	r2, #1
 800e608:	e000      	b.n	800e60c <prvGetNextExpireTime+0x18>
 800e60a:	2200      	movs	r2, #0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d105      	bne.n	800e624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e618:	4b07      	ldr	r3, [pc, #28]	; (800e638 <prvGetNextExpireTime+0x44>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	60fb      	str	r3, [r7, #12]
 800e622:	e001      	b.n	800e628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e624:	2300      	movs	r3, #0
 800e626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e628:	68fb      	ldr	r3, [r7, #12]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3714      	adds	r7, #20
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	200011b8 	.word	0x200011b8

0800e63c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e644:	f7ff fa56 	bl	800daf4 <xTaskGetTickCount>
 800e648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e64a:	4b0b      	ldr	r3, [pc, #44]	; (800e678 <prvSampleTimeNow+0x3c>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	429a      	cmp	r2, r3
 800e652:	d205      	bcs.n	800e660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e654:	f000 f936 	bl	800e8c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	e002      	b.n	800e666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e666:	4a04      	ldr	r2, [pc, #16]	; (800e678 <prvSampleTimeNow+0x3c>)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e66c:	68fb      	ldr	r3, [r7, #12]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	200011c8 	.word	0x200011c8

0800e67c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e68a:	2300      	movs	r3, #0
 800e68c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d812      	bhi.n	800e6c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	1ad2      	subs	r2, r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d302      	bcc.n	800e6b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	e01b      	b.n	800e6ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6b6:	4b10      	ldr	r3, [pc, #64]	; (800e6f8 <prvInsertTimerInActiveList+0x7c>)
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f7fe f9ba 	bl	800ca3a <vListInsert>
 800e6c6:	e012      	b.n	800e6ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d206      	bcs.n	800e6de <prvInsertTimerInActiveList+0x62>
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d302      	bcc.n	800e6de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	617b      	str	r3, [r7, #20]
 800e6dc:	e007      	b.n	800e6ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6de:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <prvInsertTimerInActiveList+0x80>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	f7fe f9a6 	bl	800ca3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6ee:	697b      	ldr	r3, [r7, #20]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	200011bc 	.word	0x200011bc
 800e6fc:	200011b8 	.word	0x200011b8

0800e700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08e      	sub	sp, #56	; 0x38
 800e704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e706:	e0ca      	b.n	800e89e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	da18      	bge.n	800e740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e70e:	1d3b      	adds	r3, r7, #4
 800e710:	3304      	adds	r3, #4
 800e712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10a      	bne.n	800e730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71e:	f383 8811 	msr	BASEPRI, r3
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	f3bf 8f4f 	dsb	sy
 800e72a:	61fb      	str	r3, [r7, #28]
}
 800e72c:	bf00      	nop
 800e72e:	e7fe      	b.n	800e72e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e736:	6850      	ldr	r0, [r2, #4]
 800e738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e73a:	6892      	ldr	r2, [r2, #8]
 800e73c:	4611      	mov	r1, r2
 800e73e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	f2c0 80aa 	blt.w	800e89c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d004      	beq.n	800e75e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	3304      	adds	r3, #4
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe f9a7 	bl	800caac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e75e:	463b      	mov	r3, r7
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff ff6b 	bl	800e63c <prvSampleTimeNow>
 800e766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b09      	cmp	r3, #9
 800e76c:	f200 8097 	bhi.w	800e89e <prvProcessReceivedCommands+0x19e>
 800e770:	a201      	add	r2, pc, #4	; (adr r2, 800e778 <prvProcessReceivedCommands+0x78>)
 800e772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e776:	bf00      	nop
 800e778:	0800e7a1 	.word	0x0800e7a1
 800e77c:	0800e7a1 	.word	0x0800e7a1
 800e780:	0800e7a1 	.word	0x0800e7a1
 800e784:	0800e815 	.word	0x0800e815
 800e788:	0800e829 	.word	0x0800e829
 800e78c:	0800e873 	.word	0x0800e873
 800e790:	0800e7a1 	.word	0x0800e7a1
 800e794:	0800e7a1 	.word	0x0800e7a1
 800e798:	0800e815 	.word	0x0800e815
 800e79c:	0800e829 	.word	0x0800e829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7a6:	f043 0301 	orr.w	r3, r3, #1
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	18d1      	adds	r1, r2, r3
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7c0:	f7ff ff5c 	bl	800e67c <prvInsertTimerInActiveList>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d069      	beq.n	800e89e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7d8:	f003 0304 	and.w	r3, r3, #4
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d05e      	beq.n	800e89e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	441a      	add	r2, r3
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7f2:	f7ff fe05 	bl	800e400 <xTimerGenericCommand>
 800e7f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7f8:	6a3b      	ldr	r3, [r7, #32]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d14f      	bne.n	800e89e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	61bb      	str	r3, [r7, #24]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e81a:	f023 0301 	bic.w	r3, r3, #1
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e826:	e03a      	b.n	800e89e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e82e:	f043 0301 	orr.w	r3, r3, #1
 800e832:	b2da      	uxtb	r2, r3
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10a      	bne.n	800e85e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	617b      	str	r3, [r7, #20]
}
 800e85a:	bf00      	nop
 800e85c:	e7fe      	b.n	800e85c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	699a      	ldr	r2, [r3, #24]
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	18d1      	adds	r1, r2, r3
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e86c:	f7ff ff06 	bl	800e67c <prvInsertTimerInActiveList>
					break;
 800e870:	e015      	b.n	800e89e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d103      	bne.n	800e888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e882:	f000 fbdd 	bl	800f040 <vPortFree>
 800e886:	e00a      	b.n	800e89e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e88e:	f023 0301 	bic.w	r3, r3, #1
 800e892:	b2da      	uxtb	r2, r3
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e89a:	e000      	b.n	800e89e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e89c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e89e:	4b08      	ldr	r3, [pc, #32]	; (800e8c0 <prvProcessReceivedCommands+0x1c0>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	1d39      	adds	r1, r7, #4
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe fbc8 	bl	800d03c <xQueueReceive>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f47f af2a 	bne.w	800e708 <prvProcessReceivedCommands+0x8>
	}
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	3730      	adds	r7, #48	; 0x30
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	200011c0 	.word	0x200011c0

0800e8c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b088      	sub	sp, #32
 800e8c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8ca:	e048      	b.n	800e95e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8cc:	4b2d      	ldr	r3, [pc, #180]	; (800e984 <prvSwitchTimerLists+0xc0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8d6:	4b2b      	ldr	r3, [pc, #172]	; (800e984 <prvSwitchTimerLists+0xc0>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fe f8e1 	bl	800caac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6a1b      	ldr	r3, [r3, #32]
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8f8:	f003 0304 	and.w	r3, r3, #4
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d02e      	beq.n	800e95e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	4413      	add	r3, r2
 800e908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d90e      	bls.n	800e930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e91e:	4b19      	ldr	r3, [pc, #100]	; (800e984 <prvSwitchTimerLists+0xc0>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	3304      	adds	r3, #4
 800e926:	4619      	mov	r1, r3
 800e928:	4610      	mov	r0, r2
 800e92a:	f7fe f886 	bl	800ca3a <vListInsert>
 800e92e:	e016      	b.n	800e95e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e930:	2300      	movs	r3, #0
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	2300      	movs	r3, #0
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	2100      	movs	r1, #0
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f7ff fd60 	bl	800e400 <xTimerGenericCommand>
 800e940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10a      	bne.n	800e95e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94c:	f383 8811 	msr	BASEPRI, r3
 800e950:	f3bf 8f6f 	isb	sy
 800e954:	f3bf 8f4f 	dsb	sy
 800e958:	603b      	str	r3, [r7, #0]
}
 800e95a:	bf00      	nop
 800e95c:	e7fe      	b.n	800e95c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e95e:	4b09      	ldr	r3, [pc, #36]	; (800e984 <prvSwitchTimerLists+0xc0>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1b1      	bne.n	800e8cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e968:	4b06      	ldr	r3, [pc, #24]	; (800e984 <prvSwitchTimerLists+0xc0>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e96e:	4b06      	ldr	r3, [pc, #24]	; (800e988 <prvSwitchTimerLists+0xc4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a04      	ldr	r2, [pc, #16]	; (800e984 <prvSwitchTimerLists+0xc0>)
 800e974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e976:	4a04      	ldr	r2, [pc, #16]	; (800e988 <prvSwitchTimerLists+0xc4>)
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	6013      	str	r3, [r2, #0]
}
 800e97c:	bf00      	nop
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	200011b8 	.word	0x200011b8
 800e988:	200011bc 	.word	0x200011bc

0800e98c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e992:	f000 f967 	bl	800ec64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e996:	4b15      	ldr	r3, [pc, #84]	; (800e9ec <prvCheckForValidListAndQueue+0x60>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d120      	bne.n	800e9e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e99e:	4814      	ldr	r0, [pc, #80]	; (800e9f0 <prvCheckForValidListAndQueue+0x64>)
 800e9a0:	f7fd fffa 	bl	800c998 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9a4:	4813      	ldr	r0, [pc, #76]	; (800e9f4 <prvCheckForValidListAndQueue+0x68>)
 800e9a6:	f7fd fff7 	bl	800c998 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e9aa:	4b13      	ldr	r3, [pc, #76]	; (800e9f8 <prvCheckForValidListAndQueue+0x6c>)
 800e9ac:	4a10      	ldr	r2, [pc, #64]	; (800e9f0 <prvCheckForValidListAndQueue+0x64>)
 800e9ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e9b0:	4b12      	ldr	r3, [pc, #72]	; (800e9fc <prvCheckForValidListAndQueue+0x70>)
 800e9b2:	4a10      	ldr	r2, [pc, #64]	; (800e9f4 <prvCheckForValidListAndQueue+0x68>)
 800e9b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	4b11      	ldr	r3, [pc, #68]	; (800ea00 <prvCheckForValidListAndQueue+0x74>)
 800e9bc:	4a11      	ldr	r2, [pc, #68]	; (800ea04 <prvCheckForValidListAndQueue+0x78>)
 800e9be:	2110      	movs	r1, #16
 800e9c0:	200a      	movs	r0, #10
 800e9c2:	f7fe f905 	bl	800cbd0 <xQueueGenericCreateStatic>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	4a08      	ldr	r2, [pc, #32]	; (800e9ec <prvCheckForValidListAndQueue+0x60>)
 800e9ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e9cc:	4b07      	ldr	r3, [pc, #28]	; (800e9ec <prvCheckForValidListAndQueue+0x60>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d005      	beq.n	800e9e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e9d4:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <prvCheckForValidListAndQueue+0x60>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	490b      	ldr	r1, [pc, #44]	; (800ea08 <prvCheckForValidListAndQueue+0x7c>)
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fe fd1e 	bl	800d41c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9e0:	f000 f970 	bl	800ecc4 <vPortExitCritical>
}
 800e9e4:	bf00      	nop
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	200011c0 	.word	0x200011c0
 800e9f0:	20001190 	.word	0x20001190
 800e9f4:	200011a4 	.word	0x200011a4
 800e9f8:	200011b8 	.word	0x200011b8
 800e9fc:	200011bc 	.word	0x200011bc
 800ea00:	2000126c 	.word	0x2000126c
 800ea04:	200011cc 	.word	0x200011cc
 800ea08:	08011568 	.word	0x08011568

0800ea0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	3b04      	subs	r3, #4
 800ea1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3b04      	subs	r3, #4
 800ea2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	f023 0201 	bic.w	r2, r3, #1
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	3b04      	subs	r3, #4
 800ea3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea3c:	4a0c      	ldr	r2, [pc, #48]	; (800ea70 <pxPortInitialiseStack+0x64>)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	3b14      	subs	r3, #20
 800ea46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3b04      	subs	r3, #4
 800ea52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f06f 0202 	mvn.w	r2, #2
 800ea5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	3b20      	subs	r3, #32
 800ea60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea62:	68fb      	ldr	r3, [r7, #12]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3714      	adds	r7, #20
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	0800ea75 	.word	0x0800ea75

0800ea74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea7e:	4b12      	ldr	r3, [pc, #72]	; (800eac8 <prvTaskExitError+0x54>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea86:	d00a      	beq.n	800ea9e <prvTaskExitError+0x2a>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	60fb      	str	r3, [r7, #12]
}
 800ea9a:	bf00      	nop
 800ea9c:	e7fe      	b.n	800ea9c <prvTaskExitError+0x28>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	60bb      	str	r3, [r7, #8]
}
 800eab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eab2:	bf00      	nop
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0fc      	beq.n	800eab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	200001e8 	.word	0x200001e8
 800eacc:	00000000 	.word	0x00000000

0800ead0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ead0:	4b07      	ldr	r3, [pc, #28]	; (800eaf0 <pxCurrentTCBConst2>)
 800ead2:	6819      	ldr	r1, [r3, #0]
 800ead4:	6808      	ldr	r0, [r1, #0]
 800ead6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eada:	f380 8809 	msr	PSP, r0
 800eade:	f3bf 8f6f 	isb	sy
 800eae2:	f04f 0000 	mov.w	r0, #0
 800eae6:	f380 8811 	msr	BASEPRI, r0
 800eaea:	4770      	bx	lr
 800eaec:	f3af 8000 	nop.w

0800eaf0 <pxCurrentTCBConst2>:
 800eaf0:	20000c88 	.word	0x20000c88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eaf4:	bf00      	nop
 800eaf6:	bf00      	nop

0800eaf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eaf8:	4808      	ldr	r0, [pc, #32]	; (800eb1c <prvPortStartFirstTask+0x24>)
 800eafa:	6800      	ldr	r0, [r0, #0]
 800eafc:	6800      	ldr	r0, [r0, #0]
 800eafe:	f380 8808 	msr	MSP, r0
 800eb02:	f04f 0000 	mov.w	r0, #0
 800eb06:	f380 8814 	msr	CONTROL, r0
 800eb0a:	b662      	cpsie	i
 800eb0c:	b661      	cpsie	f
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	df00      	svc	0
 800eb18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb1a:	bf00      	nop
 800eb1c:	e000ed08 	.word	0xe000ed08

0800eb20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb26:	4b46      	ldr	r3, [pc, #280]	; (800ec40 <xPortStartScheduler+0x120>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4a46      	ldr	r2, [pc, #280]	; (800ec44 <xPortStartScheduler+0x124>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d10a      	bne.n	800eb46 <xPortStartScheduler+0x26>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	613b      	str	r3, [r7, #16]
}
 800eb42:	bf00      	nop
 800eb44:	e7fe      	b.n	800eb44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb46:	4b3e      	ldr	r3, [pc, #248]	; (800ec40 <xPortStartScheduler+0x120>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a3f      	ldr	r2, [pc, #252]	; (800ec48 <xPortStartScheduler+0x128>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d10a      	bne.n	800eb66 <xPortStartScheduler+0x46>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60fb      	str	r3, [r7, #12]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb66:	4b39      	ldr	r3, [pc, #228]	; (800ec4c <xPortStartScheduler+0x12c>)
 800eb68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	22ff      	movs	r2, #255	; 0xff
 800eb76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb80:	78fb      	ldrb	r3, [r7, #3]
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	4b31      	ldr	r3, [pc, #196]	; (800ec50 <xPortStartScheduler+0x130>)
 800eb8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb8e:	4b31      	ldr	r3, [pc, #196]	; (800ec54 <xPortStartScheduler+0x134>)
 800eb90:	2207      	movs	r2, #7
 800eb92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb94:	e009      	b.n	800ebaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb96:	4b2f      	ldr	r3, [pc, #188]	; (800ec54 <xPortStartScheduler+0x134>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	4a2d      	ldr	r2, [pc, #180]	; (800ec54 <xPortStartScheduler+0x134>)
 800eb9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebaa:	78fb      	ldrb	r3, [r7, #3]
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebb2:	2b80      	cmp	r3, #128	; 0x80
 800ebb4:	d0ef      	beq.n	800eb96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ebb6:	4b27      	ldr	r3, [pc, #156]	; (800ec54 <xPortStartScheduler+0x134>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f1c3 0307 	rsb	r3, r3, #7
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d00a      	beq.n	800ebd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	60bb      	str	r3, [r7, #8]
}
 800ebd4:	bf00      	nop
 800ebd6:	e7fe      	b.n	800ebd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebd8:	4b1e      	ldr	r3, [pc, #120]	; (800ec54 <xPortStartScheduler+0x134>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	021b      	lsls	r3, r3, #8
 800ebde:	4a1d      	ldr	r2, [pc, #116]	; (800ec54 <xPortStartScheduler+0x134>)
 800ebe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebe2:	4b1c      	ldr	r3, [pc, #112]	; (800ec54 <xPortStartScheduler+0x134>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebea:	4a1a      	ldr	r2, [pc, #104]	; (800ec54 <xPortStartScheduler+0x134>)
 800ebec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebf6:	4b18      	ldr	r3, [pc, #96]	; (800ec58 <xPortStartScheduler+0x138>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a17      	ldr	r2, [pc, #92]	; (800ec58 <xPortStartScheduler+0x138>)
 800ebfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec02:	4b15      	ldr	r3, [pc, #84]	; (800ec58 <xPortStartScheduler+0x138>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4a14      	ldr	r2, [pc, #80]	; (800ec58 <xPortStartScheduler+0x138>)
 800ec08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec0e:	f000 f8dd 	bl	800edcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec12:	4b12      	ldr	r3, [pc, #72]	; (800ec5c <xPortStartScheduler+0x13c>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec18:	f000 f8fc 	bl	800ee14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec1c:	4b10      	ldr	r3, [pc, #64]	; (800ec60 <xPortStartScheduler+0x140>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a0f      	ldr	r2, [pc, #60]	; (800ec60 <xPortStartScheduler+0x140>)
 800ec22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec28:	f7ff ff66 	bl	800eaf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec2c:	f7ff f82c 	bl	800dc88 <vTaskSwitchContext>
	prvTaskExitError();
 800ec30:	f7ff ff20 	bl	800ea74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	e000ed00 	.word	0xe000ed00
 800ec44:	410fc271 	.word	0x410fc271
 800ec48:	410fc270 	.word	0x410fc270
 800ec4c:	e000e400 	.word	0xe000e400
 800ec50:	200012bc 	.word	0x200012bc
 800ec54:	200012c0 	.word	0x200012c0
 800ec58:	e000ed20 	.word	0xe000ed20
 800ec5c:	200001e8 	.word	0x200001e8
 800ec60:	e000ef34 	.word	0xe000ef34

0800ec64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	607b      	str	r3, [r7, #4]
}
 800ec7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec7e:	4b0f      	ldr	r3, [pc, #60]	; (800ecbc <vPortEnterCritical+0x58>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3301      	adds	r3, #1
 800ec84:	4a0d      	ldr	r2, [pc, #52]	; (800ecbc <vPortEnterCritical+0x58>)
 800ec86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec88:	4b0c      	ldr	r3, [pc, #48]	; (800ecbc <vPortEnterCritical+0x58>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d10f      	bne.n	800ecb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec90:	4b0b      	ldr	r3, [pc, #44]	; (800ecc0 <vPortEnterCritical+0x5c>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00a      	beq.n	800ecb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	f383 8811 	msr	BASEPRI, r3
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	f3bf 8f4f 	dsb	sy
 800ecaa:	603b      	str	r3, [r7, #0]
}
 800ecac:	bf00      	nop
 800ecae:	e7fe      	b.n	800ecae <vPortEnterCritical+0x4a>
	}
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	200001e8 	.word	0x200001e8
 800ecc0:	e000ed04 	.word	0xe000ed04

0800ecc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ecca:	4b12      	ldr	r3, [pc, #72]	; (800ed14 <vPortExitCritical+0x50>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10a      	bne.n	800ece8 <vPortExitCritical+0x24>
	__asm volatile
 800ecd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd6:	f383 8811 	msr	BASEPRI, r3
 800ecda:	f3bf 8f6f 	isb	sy
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	607b      	str	r3, [r7, #4]
}
 800ece4:	bf00      	nop
 800ece6:	e7fe      	b.n	800ece6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ece8:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <vPortExitCritical+0x50>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	4a09      	ldr	r2, [pc, #36]	; (800ed14 <vPortExitCritical+0x50>)
 800ecf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ecf2:	4b08      	ldr	r3, [pc, #32]	; (800ed14 <vPortExitCritical+0x50>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d105      	bne.n	800ed06 <vPortExitCritical+0x42>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	f383 8811 	msr	BASEPRI, r3
}
 800ed04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed06:	bf00      	nop
 800ed08:	370c      	adds	r7, #12
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	200001e8 	.word	0x200001e8
	...

0800ed20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed20:	f3ef 8009 	mrs	r0, PSP
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	4b15      	ldr	r3, [pc, #84]	; (800ed80 <pxCurrentTCBConst>)
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	f01e 0f10 	tst.w	lr, #16
 800ed30:	bf08      	it	eq
 800ed32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3a:	6010      	str	r0, [r2, #0]
 800ed3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed44:	f380 8811 	msr	BASEPRI, r0
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f7fe ff9a 	bl	800dc88 <vTaskSwitchContext>
 800ed54:	f04f 0000 	mov.w	r0, #0
 800ed58:	f380 8811 	msr	BASEPRI, r0
 800ed5c:	bc09      	pop	{r0, r3}
 800ed5e:	6819      	ldr	r1, [r3, #0]
 800ed60:	6808      	ldr	r0, [r1, #0]
 800ed62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed66:	f01e 0f10 	tst.w	lr, #16
 800ed6a:	bf08      	it	eq
 800ed6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed70:	f380 8809 	msr	PSP, r0
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	f3af 8000 	nop.w

0800ed80 <pxCurrentTCBConst>:
 800ed80:	20000c88 	.word	0x20000c88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop

0800ed88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed92:	f383 8811 	msr	BASEPRI, r3
 800ed96:	f3bf 8f6f 	isb	sy
 800ed9a:	f3bf 8f4f 	dsb	sy
 800ed9e:	607b      	str	r3, [r7, #4]
}
 800eda0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eda2:	f7fe feb7 	bl	800db14 <xTaskIncrementTick>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d003      	beq.n	800edb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800edac:	4b06      	ldr	r3, [pc, #24]	; (800edc8 <xPortSysTickHandler+0x40>)
 800edae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	2300      	movs	r3, #0
 800edb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	f383 8811 	msr	BASEPRI, r3
}
 800edbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800edc0:	bf00      	nop
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	e000ed04 	.word	0xe000ed04

0800edcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800edd0:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <vPortSetupTimerInterrupt+0x34>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800edd6:	4b0b      	ldr	r3, [pc, #44]	; (800ee04 <vPortSetupTimerInterrupt+0x38>)
 800edd8:	2200      	movs	r2, #0
 800edda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eddc:	4b0a      	ldr	r3, [pc, #40]	; (800ee08 <vPortSetupTimerInterrupt+0x3c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a0a      	ldr	r2, [pc, #40]	; (800ee0c <vPortSetupTimerInterrupt+0x40>)
 800ede2:	fba2 2303 	umull	r2, r3, r2, r3
 800ede6:	099b      	lsrs	r3, r3, #6
 800ede8:	4a09      	ldr	r2, [pc, #36]	; (800ee10 <vPortSetupTimerInterrupt+0x44>)
 800edea:	3b01      	subs	r3, #1
 800edec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800edee:	4b04      	ldr	r3, [pc, #16]	; (800ee00 <vPortSetupTimerInterrupt+0x34>)
 800edf0:	2207      	movs	r2, #7
 800edf2:	601a      	str	r2, [r3, #0]
}
 800edf4:	bf00      	nop
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	e000e010 	.word	0xe000e010
 800ee04:	e000e018 	.word	0xe000e018
 800ee08:	20000150 	.word	0x20000150
 800ee0c:	10624dd3 	.word	0x10624dd3
 800ee10:	e000e014 	.word	0xe000e014

0800ee14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee24 <vPortEnableVFP+0x10>
 800ee18:	6801      	ldr	r1, [r0, #0]
 800ee1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee1e:	6001      	str	r1, [r0, #0]
 800ee20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee22:	bf00      	nop
 800ee24:	e000ed88 	.word	0xe000ed88

0800ee28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee2e:	f3ef 8305 	mrs	r3, IPSR
 800ee32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2b0f      	cmp	r3, #15
 800ee38:	d914      	bls.n	800ee64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee3a:	4a17      	ldr	r2, [pc, #92]	; (800ee98 <vPortValidateInterruptPriority+0x70>)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	4413      	add	r3, r2
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee44:	4b15      	ldr	r3, [pc, #84]	; (800ee9c <vPortValidateInterruptPriority+0x74>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	7afa      	ldrb	r2, [r7, #11]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d20a      	bcs.n	800ee64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	607b      	str	r3, [r7, #4]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee64:	4b0e      	ldr	r3, [pc, #56]	; (800eea0 <vPortValidateInterruptPriority+0x78>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee6c:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <vPortValidateInterruptPriority+0x7c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d90a      	bls.n	800ee8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	603b      	str	r3, [r7, #0]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <vPortValidateInterruptPriority+0x60>
	}
 800ee8a:	bf00      	nop
 800ee8c:	3714      	adds	r7, #20
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	e000e3f0 	.word	0xe000e3f0
 800ee9c:	200012bc 	.word	0x200012bc
 800eea0:	e000ed0c 	.word	0xe000ed0c
 800eea4:	200012c0 	.word	0x200012c0

0800eea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b08a      	sub	sp, #40	; 0x28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eeb4:	f7fe fd72 	bl	800d99c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eeb8:	4b5b      	ldr	r3, [pc, #364]	; (800f028 <pvPortMalloc+0x180>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eec0:	f000 f920 	bl	800f104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eec4:	4b59      	ldr	r3, [pc, #356]	; (800f02c <pvPortMalloc+0x184>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4013      	ands	r3, r2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f040 8093 	bne.w	800eff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d01d      	beq.n	800ef14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eed8:	2208      	movs	r2, #8
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4413      	add	r3, r2
 800eede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f003 0307 	and.w	r3, r3, #7
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d014      	beq.n	800ef14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f023 0307 	bic.w	r3, r3, #7
 800eef0:	3308      	adds	r3, #8
 800eef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f003 0307 	and.w	r3, r3, #7
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00a      	beq.n	800ef14 <pvPortMalloc+0x6c>
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef02:	f383 8811 	msr	BASEPRI, r3
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	617b      	str	r3, [r7, #20]
}
 800ef10:	bf00      	nop
 800ef12:	e7fe      	b.n	800ef12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d06e      	beq.n	800eff8 <pvPortMalloc+0x150>
 800ef1a:	4b45      	ldr	r3, [pc, #276]	; (800f030 <pvPortMalloc+0x188>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d869      	bhi.n	800eff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef24:	4b43      	ldr	r3, [pc, #268]	; (800f034 <pvPortMalloc+0x18c>)
 800ef26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef28:	4b42      	ldr	r3, [pc, #264]	; (800f034 <pvPortMalloc+0x18c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef2e:	e004      	b.n	800ef3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d903      	bls.n	800ef4c <pvPortMalloc+0xa4>
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d1f1      	bne.n	800ef30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef4c:	4b36      	ldr	r3, [pc, #216]	; (800f028 <pvPortMalloc+0x180>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d050      	beq.n	800eff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2208      	movs	r2, #8
 800ef5c:	4413      	add	r3, r2
 800ef5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	1ad2      	subs	r2, r2, r3
 800ef70:	2308      	movs	r3, #8
 800ef72:	005b      	lsls	r3, r3, #1
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d91f      	bls.n	800efb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00a      	beq.n	800efa0 <pvPortMalloc+0xf8>
	__asm volatile
 800ef8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8e:	f383 8811 	msr	BASEPRI, r3
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	613b      	str	r3, [r7, #16]
}
 800ef9c:	bf00      	nop
 800ef9e:	e7fe      	b.n	800ef9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	1ad2      	subs	r2, r2, r3
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efb2:	69b8      	ldr	r0, [r7, #24]
 800efb4:	f000 f908 	bl	800f1c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efb8:	4b1d      	ldr	r3, [pc, #116]	; (800f030 <pvPortMalloc+0x188>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	4a1b      	ldr	r2, [pc, #108]	; (800f030 <pvPortMalloc+0x188>)
 800efc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800efc6:	4b1a      	ldr	r3, [pc, #104]	; (800f030 <pvPortMalloc+0x188>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	4b1b      	ldr	r3, [pc, #108]	; (800f038 <pvPortMalloc+0x190>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d203      	bcs.n	800efda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efd2:	4b17      	ldr	r3, [pc, #92]	; (800f030 <pvPortMalloc+0x188>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a18      	ldr	r2, [pc, #96]	; (800f038 <pvPortMalloc+0x190>)
 800efd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800efda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	4b13      	ldr	r3, [pc, #76]	; (800f02c <pvPortMalloc+0x184>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	431a      	orrs	r2, r3
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efea:	2200      	movs	r2, #0
 800efec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800efee:	4b13      	ldr	r3, [pc, #76]	; (800f03c <pvPortMalloc+0x194>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	3301      	adds	r3, #1
 800eff4:	4a11      	ldr	r2, [pc, #68]	; (800f03c <pvPortMalloc+0x194>)
 800eff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eff8:	f7fe fcde 	bl	800d9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	f003 0307 	and.w	r3, r3, #7
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00a      	beq.n	800f01c <pvPortMalloc+0x174>
	__asm volatile
 800f006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	60fb      	str	r3, [r7, #12]
}
 800f018:	bf00      	nop
 800f01a:	e7fe      	b.n	800f01a <pvPortMalloc+0x172>
	return pvReturn;
 800f01c:	69fb      	ldr	r3, [r7, #28]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3728      	adds	r7, #40	; 0x28
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	2001a2cc 	.word	0x2001a2cc
 800f02c:	2001a2e0 	.word	0x2001a2e0
 800f030:	2001a2d0 	.word	0x2001a2d0
 800f034:	2001a2c4 	.word	0x2001a2c4
 800f038:	2001a2d4 	.word	0x2001a2d4
 800f03c:	2001a2d8 	.word	0x2001a2d8

0800f040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d04d      	beq.n	800f0ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f052:	2308      	movs	r3, #8
 800f054:	425b      	negs	r3, r3
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	4413      	add	r3, r2
 800f05a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	4b24      	ldr	r3, [pc, #144]	; (800f0f8 <vPortFree+0xb8>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4013      	ands	r3, r2
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <vPortFree+0x44>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	60fb      	str	r3, [r7, #12]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00a      	beq.n	800f0a2 <vPortFree+0x62>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	60bb      	str	r3, [r7, #8]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	685a      	ldr	r2, [r3, #4]
 800f0a6:	4b14      	ldr	r3, [pc, #80]	; (800f0f8 <vPortFree+0xb8>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d01e      	beq.n	800f0ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d11a      	bne.n	800f0ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	4b0e      	ldr	r3, [pc, #56]	; (800f0f8 <vPortFree+0xb8>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	43db      	mvns	r3, r3
 800f0c2:	401a      	ands	r2, r3
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f0c8:	f7fe fc68 	bl	800d99c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	685a      	ldr	r2, [r3, #4]
 800f0d0:	4b0a      	ldr	r3, [pc, #40]	; (800f0fc <vPortFree+0xbc>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	4a09      	ldr	r2, [pc, #36]	; (800f0fc <vPortFree+0xbc>)
 800f0d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0da:	6938      	ldr	r0, [r7, #16]
 800f0dc:	f000 f874 	bl	800f1c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f0e0:	4b07      	ldr	r3, [pc, #28]	; (800f100 <vPortFree+0xc0>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	4a06      	ldr	r2, [pc, #24]	; (800f100 <vPortFree+0xc0>)
 800f0e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f0ea:	f7fe fc65 	bl	800d9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f0ee:	bf00      	nop
 800f0f0:	3718      	adds	r7, #24
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	2001a2e0 	.word	0x2001a2e0
 800f0fc:	2001a2d0 	.word	0x2001a2d0
 800f100:	2001a2dc 	.word	0x2001a2dc

0800f104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f10a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800f10e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f110:	4b27      	ldr	r3, [pc, #156]	; (800f1b0 <prvHeapInit+0xac>)
 800f112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f003 0307 	and.w	r3, r3, #7
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00c      	beq.n	800f138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3307      	adds	r3, #7
 800f122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f023 0307 	bic.w	r3, r3, #7
 800f12a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	4a1f      	ldr	r2, [pc, #124]	; (800f1b0 <prvHeapInit+0xac>)
 800f134:	4413      	add	r3, r2
 800f136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f13c:	4a1d      	ldr	r2, [pc, #116]	; (800f1b4 <prvHeapInit+0xb0>)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f142:	4b1c      	ldr	r3, [pc, #112]	; (800f1b4 <prvHeapInit+0xb0>)
 800f144:	2200      	movs	r2, #0
 800f146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	4413      	add	r3, r2
 800f14e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f150:	2208      	movs	r2, #8
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	1a9b      	subs	r3, r3, r2
 800f156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f023 0307 	bic.w	r3, r3, #7
 800f15e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	4a15      	ldr	r2, [pc, #84]	; (800f1b8 <prvHeapInit+0xb4>)
 800f164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f166:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <prvHeapInit+0xb4>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2200      	movs	r2, #0
 800f16c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f16e:	4b12      	ldr	r3, [pc, #72]	; (800f1b8 <prvHeapInit+0xb4>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	1ad2      	subs	r2, r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f184:	4b0c      	ldr	r3, [pc, #48]	; (800f1b8 <prvHeapInit+0xb4>)
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	4a0a      	ldr	r2, [pc, #40]	; (800f1bc <prvHeapInit+0xb8>)
 800f192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	4a09      	ldr	r2, [pc, #36]	; (800f1c0 <prvHeapInit+0xbc>)
 800f19a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f19c:	4b09      	ldr	r3, [pc, #36]	; (800f1c4 <prvHeapInit+0xc0>)
 800f19e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1a2:	601a      	str	r2, [r3, #0]
}
 800f1a4:	bf00      	nop
 800f1a6:	3714      	adds	r7, #20
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	200012c4 	.word	0x200012c4
 800f1b4:	2001a2c4 	.word	0x2001a2c4
 800f1b8:	2001a2cc 	.word	0x2001a2cc
 800f1bc:	2001a2d4 	.word	0x2001a2d4
 800f1c0:	2001a2d0 	.word	0x2001a2d0
 800f1c4:	2001a2e0 	.word	0x2001a2e0

0800f1c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1d0:	4b28      	ldr	r3, [pc, #160]	; (800f274 <prvInsertBlockIntoFreeList+0xac>)
 800f1d2:	60fb      	str	r3, [r7, #12]
 800f1d4:	e002      	b.n	800f1dc <prvInsertBlockIntoFreeList+0x14>
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	60fb      	str	r3, [r7, #12]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d8f7      	bhi.n	800f1d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d108      	bne.n	800f20a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	685a      	ldr	r2, [r3, #4]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	441a      	add	r2, r3
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	441a      	add	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d118      	bne.n	800f250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	4b15      	ldr	r3, [pc, #84]	; (800f278 <prvInsertBlockIntoFreeList+0xb0>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	429a      	cmp	r2, r3
 800f228:	d00d      	beq.n	800f246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	685a      	ldr	r2, [r3, #4]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	441a      	add	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	e008      	b.n	800f258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f246:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <prvInsertBlockIntoFreeList+0xb0>)
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	601a      	str	r2, [r3, #0]
 800f24e:	e003      	b.n	800f258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d002      	beq.n	800f266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f266:	bf00      	nop
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	2001a2c4 	.word	0x2001a2c4
 800f278:	2001a2cc 	.word	0x2001a2cc

0800f27c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f280:	2200      	movs	r2, #0
 800f282:	4912      	ldr	r1, [pc, #72]	; (800f2cc <MX_USB_DEVICE_Init+0x50>)
 800f284:	4812      	ldr	r0, [pc, #72]	; (800f2d0 <MX_USB_DEVICE_Init+0x54>)
 800f286:	f7fb ff09 	bl	800b09c <USBD_Init>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f290:	f7f1 ff00 	bl	8001094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f294:	490f      	ldr	r1, [pc, #60]	; (800f2d4 <MX_USB_DEVICE_Init+0x58>)
 800f296:	480e      	ldr	r0, [pc, #56]	; (800f2d0 <MX_USB_DEVICE_Init+0x54>)
 800f298:	f7fb ff3e 	bl	800b118 <USBD_RegisterClass>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d001      	beq.n	800f2a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f2a2:	f7f1 fef7 	bl	8001094 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f2a6:	490c      	ldr	r1, [pc, #48]	; (800f2d8 <MX_USB_DEVICE_Init+0x5c>)
 800f2a8:	4809      	ldr	r0, [pc, #36]	; (800f2d0 <MX_USB_DEVICE_Init+0x54>)
 800f2aa:	f7fb fe21 	bl	800aef0 <USBD_CDC_RegisterInterface>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f2b4:	f7f1 feee 	bl	8001094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f2b8:	4805      	ldr	r0, [pc, #20]	; (800f2d0 <MX_USB_DEVICE_Init+0x54>)
 800f2ba:	f7fb ff71 	bl	800b1a0 <USBD_Start>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f2c4:	f7f1 fee6 	bl	8001094 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f2c8:	bf00      	nop
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20000200 	.word	0x20000200
 800f2d0:	2001a2e4 	.word	0x2001a2e4
 800f2d4:	20000168 	.word	0x20000168
 800f2d8:	200001ec 	.word	0x200001ec

0800f2dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	4905      	ldr	r1, [pc, #20]	; (800f2f8 <CDC_Init_FS+0x1c>)
 800f2e4:	4805      	ldr	r0, [pc, #20]	; (800f2fc <CDC_Init_FS+0x20>)
 800f2e6:	f7fb fe1d 	bl	800af24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f2ea:	4905      	ldr	r1, [pc, #20]	; (800f300 <CDC_Init_FS+0x24>)
 800f2ec:	4803      	ldr	r0, [pc, #12]	; (800f2fc <CDC_Init_FS+0x20>)
 800f2ee:	f7fb fe3b 	bl	800af68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f2f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	2001a7c0 	.word	0x2001a7c0
 800f2fc:	2001a2e4 	.word	0x2001a2e4
 800f300:	2001a5c0 	.word	0x2001a5c0

0800f304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f304:	b480      	push	{r7}
 800f306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	6039      	str	r1, [r7, #0]
 800f31e:	71fb      	strb	r3, [r7, #7]
 800f320:	4613      	mov	r3, r2
 800f322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	2b23      	cmp	r3, #35	; 0x23
 800f328:	d84a      	bhi.n	800f3c0 <CDC_Control_FS+0xac>
 800f32a:	a201      	add	r2, pc, #4	; (adr r2, 800f330 <CDC_Control_FS+0x1c>)
 800f32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f330:	0800f3c1 	.word	0x0800f3c1
 800f334:	0800f3c1 	.word	0x0800f3c1
 800f338:	0800f3c1 	.word	0x0800f3c1
 800f33c:	0800f3c1 	.word	0x0800f3c1
 800f340:	0800f3c1 	.word	0x0800f3c1
 800f344:	0800f3c1 	.word	0x0800f3c1
 800f348:	0800f3c1 	.word	0x0800f3c1
 800f34c:	0800f3c1 	.word	0x0800f3c1
 800f350:	0800f3c1 	.word	0x0800f3c1
 800f354:	0800f3c1 	.word	0x0800f3c1
 800f358:	0800f3c1 	.word	0x0800f3c1
 800f35c:	0800f3c1 	.word	0x0800f3c1
 800f360:	0800f3c1 	.word	0x0800f3c1
 800f364:	0800f3c1 	.word	0x0800f3c1
 800f368:	0800f3c1 	.word	0x0800f3c1
 800f36c:	0800f3c1 	.word	0x0800f3c1
 800f370:	0800f3c1 	.word	0x0800f3c1
 800f374:	0800f3c1 	.word	0x0800f3c1
 800f378:	0800f3c1 	.word	0x0800f3c1
 800f37c:	0800f3c1 	.word	0x0800f3c1
 800f380:	0800f3c1 	.word	0x0800f3c1
 800f384:	0800f3c1 	.word	0x0800f3c1
 800f388:	0800f3c1 	.word	0x0800f3c1
 800f38c:	0800f3c1 	.word	0x0800f3c1
 800f390:	0800f3c1 	.word	0x0800f3c1
 800f394:	0800f3c1 	.word	0x0800f3c1
 800f398:	0800f3c1 	.word	0x0800f3c1
 800f39c:	0800f3c1 	.word	0x0800f3c1
 800f3a0:	0800f3c1 	.word	0x0800f3c1
 800f3a4:	0800f3c1 	.word	0x0800f3c1
 800f3a8:	0800f3c1 	.word	0x0800f3c1
 800f3ac:	0800f3c1 	.word	0x0800f3c1
 800f3b0:	0800f3c1 	.word	0x0800f3c1
 800f3b4:	0800f3c1 	.word	0x0800f3c1
 800f3b8:	0800f3c1 	.word	0x0800f3c1
 800f3bc:	0800f3c1 	.word	0x0800f3c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f3c0:	bf00      	nop
  }

  return (USBD_OK);
 800f3c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f3da:	6879      	ldr	r1, [r7, #4]
 800f3dc:	4805      	ldr	r0, [pc, #20]	; (800f3f4 <CDC_Receive_FS+0x24>)
 800f3de:	f7fb fdc3 	bl	800af68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f3e2:	4804      	ldr	r0, [pc, #16]	; (800f3f4 <CDC_Receive_FS+0x24>)
 800f3e4:	f7fb fe24 	bl	800b030 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f3e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	2001a2e4 	.word	0x2001a2e4

0800f3f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	460b      	mov	r3, r1
 800f402:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f408:	4b0d      	ldr	r3, [pc, #52]	; (800f440 <CDC_Transmit_FS+0x48>)
 800f40a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f40e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e00b      	b.n	800f436 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f41e:	887b      	ldrh	r3, [r7, #2]
 800f420:	461a      	mov	r2, r3
 800f422:	6879      	ldr	r1, [r7, #4]
 800f424:	4806      	ldr	r0, [pc, #24]	; (800f440 <CDC_Transmit_FS+0x48>)
 800f426:	f7fb fd7d 	bl	800af24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f42a:	4805      	ldr	r0, [pc, #20]	; (800f440 <CDC_Transmit_FS+0x48>)
 800f42c:	f7fb fdba 	bl	800afa4 <USBD_CDC_TransmitPacket>
 800f430:	4603      	mov	r3, r0
 800f432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f434:	7bfb      	ldrb	r3, [r7, #15]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	2001a2e4 	.word	0x2001a2e4

0800f444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4613      	mov	r3, r2
 800f450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	371c      	adds	r7, #28
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
	...

0800f468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	6039      	str	r1, [r7, #0]
 800f472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2212      	movs	r2, #18
 800f478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f47a:	4b03      	ldr	r3, [pc, #12]	; (800f488 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	2000021c 	.word	0x2000021c

0800f48c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	4603      	mov	r3, r0
 800f494:	6039      	str	r1, [r7, #0]
 800f496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	2204      	movs	r2, #4
 800f49c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f49e:	4b03      	ldr	r3, [pc, #12]	; (800f4ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	20000230 	.word	0x20000230

0800f4b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	6039      	str	r1, [r7, #0]
 800f4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d105      	bne.n	800f4ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4c2:	683a      	ldr	r2, [r7, #0]
 800f4c4:	4907      	ldr	r1, [pc, #28]	; (800f4e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4c6:	4808      	ldr	r0, [pc, #32]	; (800f4e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4c8:	f7fd f816 	bl	800c4f8 <USBD_GetString>
 800f4cc:	e004      	b.n	800f4d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	4904      	ldr	r1, [pc, #16]	; (800f4e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4d2:	4805      	ldr	r0, [pc, #20]	; (800f4e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4d4:	f7fd f810 	bl	800c4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4d8:	4b02      	ldr	r3, [pc, #8]	; (800f4e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	2001a9c0 	.word	0x2001a9c0
 800f4e8:	08011570 	.word	0x08011570

0800f4ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	6039      	str	r1, [r7, #0]
 800f4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f4f8:	683a      	ldr	r2, [r7, #0]
 800f4fa:	4904      	ldr	r1, [pc, #16]	; (800f50c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f4fc:	4804      	ldr	r0, [pc, #16]	; (800f510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f4fe:	f7fc fffb 	bl	800c4f8 <USBD_GetString>
  return USBD_StrDesc;
 800f502:	4b02      	ldr	r3, [pc, #8]	; (800f50c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	2001a9c0 	.word	0x2001a9c0
 800f510:	08011588 	.word	0x08011588

0800f514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	221a      	movs	r2, #26
 800f524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f526:	f000 f843 	bl	800f5b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f52a:	4b02      	ldr	r3, [pc, #8]	; (800f534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	20000234 	.word	0x20000234

0800f538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4603      	mov	r3, r0
 800f540:	6039      	str	r1, [r7, #0]
 800f542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d105      	bne.n	800f556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	4907      	ldr	r1, [pc, #28]	; (800f56c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f54e:	4808      	ldr	r0, [pc, #32]	; (800f570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f550:	f7fc ffd2 	bl	800c4f8 <USBD_GetString>
 800f554:	e004      	b.n	800f560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	4904      	ldr	r1, [pc, #16]	; (800f56c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f55a:	4805      	ldr	r0, [pc, #20]	; (800f570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f55c:	f7fc ffcc 	bl	800c4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f560:	4b02      	ldr	r3, [pc, #8]	; (800f56c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f562:	4618      	mov	r0, r3
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	2001a9c0 	.word	0x2001a9c0
 800f570:	0801159c 	.word	0x0801159c

0800f574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	4603      	mov	r3, r0
 800f57c:	6039      	str	r1, [r7, #0]
 800f57e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f580:	79fb      	ldrb	r3, [r7, #7]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d105      	bne.n	800f592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	4907      	ldr	r1, [pc, #28]	; (800f5a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f58a:	4808      	ldr	r0, [pc, #32]	; (800f5ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f58c:	f7fc ffb4 	bl	800c4f8 <USBD_GetString>
 800f590:	e004      	b.n	800f59c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	4904      	ldr	r1, [pc, #16]	; (800f5a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f596:	4805      	ldr	r0, [pc, #20]	; (800f5ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f598:	f7fc ffae 	bl	800c4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f59c:	4b02      	ldr	r3, [pc, #8]	; (800f5a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	2001a9c0 	.word	0x2001a9c0
 800f5ac:	080115a8 	.word	0x080115a8

0800f5b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5b6:	4b0f      	ldr	r3, [pc, #60]	; (800f5f4 <Get_SerialNum+0x44>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5bc:	4b0e      	ldr	r3, [pc, #56]	; (800f5f8 <Get_SerialNum+0x48>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f5c2:	4b0e      	ldr	r3, [pc, #56]	; (800f5fc <Get_SerialNum+0x4c>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d009      	beq.n	800f5ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f5d6:	2208      	movs	r2, #8
 800f5d8:	4909      	ldr	r1, [pc, #36]	; (800f600 <Get_SerialNum+0x50>)
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f000 f814 	bl	800f608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f5e0:	2204      	movs	r2, #4
 800f5e2:	4908      	ldr	r1, [pc, #32]	; (800f604 <Get_SerialNum+0x54>)
 800f5e4:	68b8      	ldr	r0, [r7, #8]
 800f5e6:	f000 f80f 	bl	800f608 <IntToUnicode>
  }
}
 800f5ea:	bf00      	nop
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	1fff7a10 	.word	0x1fff7a10
 800f5f8:	1fff7a14 	.word	0x1fff7a14
 800f5fc:	1fff7a18 	.word	0x1fff7a18
 800f600:	20000236 	.word	0x20000236
 800f604:	20000246 	.word	0x20000246

0800f608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f608:	b480      	push	{r7}
 800f60a:	b087      	sub	sp, #28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	4613      	mov	r3, r2
 800f614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f616:	2300      	movs	r3, #0
 800f618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f61a:	2300      	movs	r3, #0
 800f61c:	75fb      	strb	r3, [r7, #23]
 800f61e:	e027      	b.n	800f670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	0f1b      	lsrs	r3, r3, #28
 800f624:	2b09      	cmp	r3, #9
 800f626:	d80b      	bhi.n	800f640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	0f1b      	lsrs	r3, r3, #28
 800f62c:	b2da      	uxtb	r2, r3
 800f62e:	7dfb      	ldrb	r3, [r7, #23]
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	4619      	mov	r1, r3
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	440b      	add	r3, r1
 800f638:	3230      	adds	r2, #48	; 0x30
 800f63a:	b2d2      	uxtb	r2, r2
 800f63c:	701a      	strb	r2, [r3, #0]
 800f63e:	e00a      	b.n	800f656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	0f1b      	lsrs	r3, r3, #28
 800f644:	b2da      	uxtb	r2, r3
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	4619      	mov	r1, r3
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	440b      	add	r3, r1
 800f650:	3237      	adds	r2, #55	; 0x37
 800f652:	b2d2      	uxtb	r2, r2
 800f654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	011b      	lsls	r3, r3, #4
 800f65a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f65c:	7dfb      	ldrb	r3, [r7, #23]
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	3301      	adds	r3, #1
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	4413      	add	r3, r2
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f66a:	7dfb      	ldrb	r3, [r7, #23]
 800f66c:	3301      	adds	r3, #1
 800f66e:	75fb      	strb	r3, [r7, #23]
 800f670:	7dfa      	ldrb	r2, [r7, #23]
 800f672:	79fb      	ldrb	r3, [r7, #7]
 800f674:	429a      	cmp	r2, r3
 800f676:	d3d3      	bcc.n	800f620 <IntToUnicode+0x18>
  }
}
 800f678:	bf00      	nop
 800f67a:	bf00      	nop
 800f67c:	371c      	adds	r7, #28
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
	...

0800f688 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08a      	sub	sp, #40	; 0x28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f690:	f107 0314 	add.w	r3, r7, #20
 800f694:	2200      	movs	r2, #0
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	605a      	str	r2, [r3, #4]
 800f69a:	609a      	str	r2, [r3, #8]
 800f69c:	60da      	str	r2, [r3, #12]
 800f69e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6a8:	d13a      	bne.n	800f720 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	613b      	str	r3, [r7, #16]
 800f6ae:	4b1e      	ldr	r3, [pc, #120]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6b2:	4a1d      	ldr	r2, [pc, #116]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6b4:	f043 0301 	orr.w	r3, r3, #1
 800f6b8:	6313      	str	r3, [r2, #48]	; 0x30
 800f6ba:	4b1b      	ldr	r3, [pc, #108]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	613b      	str	r3, [r7, #16]
 800f6c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f6c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6cc:	2302      	movs	r3, #2
 800f6ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6d4:	2303      	movs	r3, #3
 800f6d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f6d8:	230a      	movs	r3, #10
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6dc:	f107 0314 	add.w	r3, r7, #20
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4812      	ldr	r0, [pc, #72]	; (800f72c <HAL_PCD_MspInit+0xa4>)
 800f6e4:	f7f2 fdce 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f6e8:	4b0f      	ldr	r3, [pc, #60]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ec:	4a0e      	ldr	r2, [pc, #56]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6f2:	6353      	str	r3, [r2, #52]	; 0x34
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	60fb      	str	r3, [r7, #12]
 800f6f8:	4b0b      	ldr	r3, [pc, #44]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fc:	4a0a      	ldr	r2, [pc, #40]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f6fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f702:	6453      	str	r3, [r2, #68]	; 0x44
 800f704:	4b08      	ldr	r3, [pc, #32]	; (800f728 <HAL_PCD_MspInit+0xa0>)
 800f706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f710:	2200      	movs	r2, #0
 800f712:	2105      	movs	r1, #5
 800f714:	2043      	movs	r0, #67	; 0x43
 800f716:	f7f2 fd71 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f71a:	2043      	movs	r0, #67	; 0x43
 800f71c:	f7f2 fd9a 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f720:	bf00      	nop
 800f722:	3728      	adds	r7, #40	; 0x28
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	40023800 	.word	0x40023800
 800f72c:	40020000 	.word	0x40020000

0800f730 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f744:	4619      	mov	r1, r3
 800f746:	4610      	mov	r0, r2
 800f748:	f7fb fd77 	bl	800b23a <USBD_LL_SetupStage>
}
 800f74c:	bf00      	nop
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	460b      	mov	r3, r1
 800f75e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f766:	78fa      	ldrb	r2, [r7, #3]
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	4613      	mov	r3, r2
 800f76c:	00db      	lsls	r3, r3, #3
 800f76e:	4413      	add	r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	440b      	add	r3, r1
 800f774:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	78fb      	ldrb	r3, [r7, #3]
 800f77c:	4619      	mov	r1, r3
 800f77e:	f7fb fdb1 	bl	800b2e4 <USBD_LL_DataOutStage>
}
 800f782:	bf00      	nop
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	460b      	mov	r3, r1
 800f794:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f79c:	78fa      	ldrb	r2, [r7, #3]
 800f79e:	6879      	ldr	r1, [r7, #4]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	00db      	lsls	r3, r3, #3
 800f7a4:	4413      	add	r3, r2
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	440b      	add	r3, r1
 800f7aa:	334c      	adds	r3, #76	; 0x4c
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	78fb      	ldrb	r3, [r7, #3]
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	f7fb fe4a 	bl	800b44a <USBD_LL_DataInStage>
}
 800f7b6:	bf00      	nop
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b082      	sub	sp, #8
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fb ff7e 	bl	800b6ce <USBD_LL_SOF>
}
 800f7d2:	bf00      	nop
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	2b02      	cmp	r3, #2
 800f7ec:	d001      	beq.n	800f7f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f7ee:	f7f1 fc51 	bl	8001094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7f8:	7bfa      	ldrb	r2, [r7, #15]
 800f7fa:	4611      	mov	r1, r2
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fb ff28 	bl	800b652 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fb fed0 	bl	800b5ae <USBD_LL_Reset>
}
 800f80e:	bf00      	nop
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f826:	4618      	mov	r0, r3
 800f828:	f7fb ff23 	bl	800b672 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	6812      	ldr	r2, [r2, #0]
 800f83a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f83e:	f043 0301 	orr.w	r3, r3, #1
 800f842:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a1b      	ldr	r3, [r3, #32]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d005      	beq.n	800f858 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f84c:	4b04      	ldr	r3, [pc, #16]	; (800f860 <HAL_PCD_SuspendCallback+0x48>)
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	4a03      	ldr	r2, [pc, #12]	; (800f860 <HAL_PCD_SuspendCallback+0x48>)
 800f852:	f043 0306 	orr.w	r3, r3, #6
 800f856:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f858:	bf00      	nop
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	e000ed00 	.word	0xe000ed00

0800f864 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f872:	4618      	mov	r0, r3
 800f874:	f7fb ff13 	bl	800b69e <USBD_LL_Resume>
}
 800f878:	bf00      	nop
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	460b      	mov	r3, r1
 800f88a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f892:	78fa      	ldrb	r2, [r7, #3]
 800f894:	4611      	mov	r1, r2
 800f896:	4618      	mov	r0, r3
 800f898:	f7fb ff6b 	bl	800b772 <USBD_LL_IsoOUTIncomplete>
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8b6:	78fa      	ldrb	r2, [r7, #3]
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fb ff27 	bl	800b70e <USBD_LL_IsoINIncomplete>
}
 800f8c0:	bf00      	nop
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fb ff7d 	bl	800b7d6 <USBD_LL_DevConnected>
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fb ff7a 	bl	800b7ec <USBD_LL_DevDisconnected>
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d13c      	bne.n	800f98a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f910:	4a20      	ldr	r2, [pc, #128]	; (800f994 <USBD_LL_Init+0x94>)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a1e      	ldr	r2, [pc, #120]	; (800f994 <USBD_LL_Init+0x94>)
 800f91c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f920:	4b1c      	ldr	r3, [pc, #112]	; (800f994 <USBD_LL_Init+0x94>)
 800f922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f928:	4b1a      	ldr	r3, [pc, #104]	; (800f994 <USBD_LL_Init+0x94>)
 800f92a:	2204      	movs	r2, #4
 800f92c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f92e:	4b19      	ldr	r3, [pc, #100]	; (800f994 <USBD_LL_Init+0x94>)
 800f930:	2202      	movs	r2, #2
 800f932:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f934:	4b17      	ldr	r3, [pc, #92]	; (800f994 <USBD_LL_Init+0x94>)
 800f936:	2200      	movs	r2, #0
 800f938:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f93a:	4b16      	ldr	r3, [pc, #88]	; (800f994 <USBD_LL_Init+0x94>)
 800f93c:	2202      	movs	r2, #2
 800f93e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f940:	4b14      	ldr	r3, [pc, #80]	; (800f994 <USBD_LL_Init+0x94>)
 800f942:	2200      	movs	r2, #0
 800f944:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f946:	4b13      	ldr	r3, [pc, #76]	; (800f994 <USBD_LL_Init+0x94>)
 800f948:	2200      	movs	r2, #0
 800f94a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f94c:	4b11      	ldr	r3, [pc, #68]	; (800f994 <USBD_LL_Init+0x94>)
 800f94e:	2200      	movs	r2, #0
 800f950:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f952:	4b10      	ldr	r3, [pc, #64]	; (800f994 <USBD_LL_Init+0x94>)
 800f954:	2200      	movs	r2, #0
 800f956:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f958:	4b0e      	ldr	r3, [pc, #56]	; (800f994 <USBD_LL_Init+0x94>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f95e:	480d      	ldr	r0, [pc, #52]	; (800f994 <USBD_LL_Init+0x94>)
 800f960:	f7f3 fdba 	bl	80034d8 <HAL_PCD_Init>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f96a:	f7f1 fb93 	bl	8001094 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f96e:	2180      	movs	r1, #128	; 0x80
 800f970:	4808      	ldr	r0, [pc, #32]	; (800f994 <USBD_LL_Init+0x94>)
 800f972:	f7f5 f81c 	bl	80049ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f976:	2240      	movs	r2, #64	; 0x40
 800f978:	2100      	movs	r1, #0
 800f97a:	4806      	ldr	r0, [pc, #24]	; (800f994 <USBD_LL_Init+0x94>)
 800f97c:	f7f4 ffd0 	bl	8004920 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f980:	2280      	movs	r2, #128	; 0x80
 800f982:	2101      	movs	r1, #1
 800f984:	4803      	ldr	r0, [pc, #12]	; (800f994 <USBD_LL_Init+0x94>)
 800f986:	f7f4 ffcb 	bl	8004920 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	2001abc0 	.word	0x2001abc0

0800f998 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7f3 feba 	bl	8003728 <HAL_PCD_Start>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 f942 	bl	800fc44 <USBD_Get_USB_Status>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b084      	sub	sp, #16
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
 800f9d6:	4608      	mov	r0, r1
 800f9d8:	4611      	mov	r1, r2
 800f9da:	461a      	mov	r2, r3
 800f9dc:	4603      	mov	r3, r0
 800f9de:	70fb      	strb	r3, [r7, #3]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	70bb      	strb	r3, [r7, #2]
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9f6:	78bb      	ldrb	r3, [r7, #2]
 800f9f8:	883a      	ldrh	r2, [r7, #0]
 800f9fa:	78f9      	ldrb	r1, [r7, #3]
 800f9fc:	f7f4 fb8b 	bl	8004116 <HAL_PCD_EP_Open>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 f91c 	bl	800fc44 <USBD_Get_USB_Status>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	460b      	mov	r3, r1
 800fa24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa26:	2300      	movs	r3, #0
 800fa28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa34:	78fa      	ldrb	r2, [r7, #3]
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7f4 fbd4 	bl	80041e6 <HAL_PCD_EP_Close>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa42:	7bfb      	ldrb	r3, [r7, #15]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 f8fd 	bl	800fc44 <USBD_Get_USB_Status>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	460b      	mov	r3, r1
 800fa62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa72:	78fa      	ldrb	r2, [r7, #3]
 800fa74:	4611      	mov	r1, r2
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7f4 fcac 	bl	80043d4 <HAL_PCD_EP_SetStall>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 f8de 	bl	800fc44 <USBD_Get_USB_Status>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b084      	sub	sp, #16
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
 800fa9e:	460b      	mov	r3, r1
 800faa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fab0:	78fa      	ldrb	r2, [r7, #3]
 800fab2:	4611      	mov	r1, r2
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f4 fcf1 	bl	800449c <HAL_PCD_EP_ClrStall>
 800faba:	4603      	mov	r3, r0
 800fabc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fabe:	7bfb      	ldrb	r3, [r7, #15]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f8bf 	bl	800fc44 <USBD_Get_USB_Status>
 800fac6:	4603      	mov	r3, r0
 800fac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faca:	7bbb      	ldrb	r3, [r7, #14]
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	460b      	mov	r3, r1
 800fade:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fae6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800faec:	2b00      	cmp	r3, #0
 800faee:	da0b      	bge.n	800fb08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800faf0:	78fb      	ldrb	r3, [r7, #3]
 800faf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faf6:	68f9      	ldr	r1, [r7, #12]
 800faf8:	4613      	mov	r3, r2
 800fafa:	00db      	lsls	r3, r3, #3
 800fafc:	4413      	add	r3, r2
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	440b      	add	r3, r1
 800fb02:	333e      	adds	r3, #62	; 0x3e
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	e00b      	b.n	800fb20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb08:	78fb      	ldrb	r3, [r7, #3]
 800fb0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb0e:	68f9      	ldr	r1, [r7, #12]
 800fb10:	4613      	mov	r3, r2
 800fb12:	00db      	lsls	r3, r3, #3
 800fb14:	4413      	add	r3, r2
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	440b      	add	r3, r1
 800fb1a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	460b      	mov	r3, r1
 800fb36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb46:	78fa      	ldrb	r2, [r7, #3]
 800fb48:	4611      	mov	r1, r2
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7f4 fabe 	bl	80040cc <HAL_PCD_SetAddress>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb54:	7bfb      	ldrb	r3, [r7, #15]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f000 f874 	bl	800fc44 <USBD_Get_USB_Status>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3710      	adds	r7, #16
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b086      	sub	sp, #24
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	60f8      	str	r0, [r7, #12]
 800fb72:	607a      	str	r2, [r7, #4]
 800fb74:	603b      	str	r3, [r7, #0]
 800fb76:	460b      	mov	r3, r1
 800fb78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb88:	7af9      	ldrb	r1, [r7, #11]
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	f7f4 fbd7 	bl	8004340 <HAL_PCD_EP_Transmit>
 800fb92:	4603      	mov	r3, r0
 800fb94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb96:	7dfb      	ldrb	r3, [r7, #23]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 f853 	bl	800fc44 <USBD_Get_USB_Status>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fba2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	607a      	str	r2, [r7, #4]
 800fbb6:	603b      	str	r3, [r7, #0]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbca:	7af9      	ldrb	r1, [r7, #11]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	f7f4 fb53 	bl	800427a <HAL_PCD_EP_Receive>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f000 f832 	bl	800fc44 <USBD_Get_USB_Status>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fbe4:	7dbb      	ldrb	r3, [r7, #22]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3718      	adds	r7, #24
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc00:	78fa      	ldrb	r2, [r7, #3]
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f4 fb83 	bl	8004310 <HAL_PCD_EP_GetRxCount>
 800fc0a:	4603      	mov	r3, r0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc1c:	4b03      	ldr	r3, [pc, #12]	; (800fc2c <USBD_static_malloc+0x18>)
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	370c      	adds	r7, #12
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	2001b0cc 	.word	0x2001b0cc

0800fc30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]

}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc52:	79fb      	ldrb	r3, [r7, #7]
 800fc54:	2b03      	cmp	r3, #3
 800fc56:	d817      	bhi.n	800fc88 <USBD_Get_USB_Status+0x44>
 800fc58:	a201      	add	r2, pc, #4	; (adr r2, 800fc60 <USBD_Get_USB_Status+0x1c>)
 800fc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc5e:	bf00      	nop
 800fc60:	0800fc71 	.word	0x0800fc71
 800fc64:	0800fc77 	.word	0x0800fc77
 800fc68:	0800fc7d 	.word	0x0800fc7d
 800fc6c:	0800fc83 	.word	0x0800fc83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	73fb      	strb	r3, [r7, #15]
    break;
 800fc74:	e00b      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc76:	2303      	movs	r3, #3
 800fc78:	73fb      	strb	r3, [r7, #15]
    break;
 800fc7a:	e008      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc80:	e005      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc82:	2303      	movs	r3, #3
 800fc84:	73fb      	strb	r3, [r7, #15]
    break;
 800fc86:	e002      	b.n	800fc8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc8c:	bf00      	nop
  }
  return usb_status;
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3714      	adds	r7, #20
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <__errno>:
 800fc9c:	4b01      	ldr	r3, [pc, #4]	; (800fca4 <__errno+0x8>)
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	20000250 	.word	0x20000250

0800fca8 <std>:
 800fca8:	2300      	movs	r3, #0
 800fcaa:	b510      	push	{r4, lr}
 800fcac:	4604      	mov	r4, r0
 800fcae:	e9c0 3300 	strd	r3, r3, [r0]
 800fcb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcb6:	6083      	str	r3, [r0, #8]
 800fcb8:	8181      	strh	r1, [r0, #12]
 800fcba:	6643      	str	r3, [r0, #100]	; 0x64
 800fcbc:	81c2      	strh	r2, [r0, #14]
 800fcbe:	6183      	str	r3, [r0, #24]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	2208      	movs	r2, #8
 800fcc4:	305c      	adds	r0, #92	; 0x5c
 800fcc6:	f000 f92b 	bl	800ff20 <memset>
 800fcca:	4b05      	ldr	r3, [pc, #20]	; (800fce0 <std+0x38>)
 800fccc:	6263      	str	r3, [r4, #36]	; 0x24
 800fcce:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <std+0x3c>)
 800fcd0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcd2:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <std+0x40>)
 800fcd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcd6:	4b05      	ldr	r3, [pc, #20]	; (800fcec <std+0x44>)
 800fcd8:	6224      	str	r4, [r4, #32]
 800fcda:	6323      	str	r3, [r4, #48]	; 0x30
 800fcdc:	bd10      	pop	{r4, pc}
 800fcde:	bf00      	nop
 800fce0:	08010281 	.word	0x08010281
 800fce4:	080102a3 	.word	0x080102a3
 800fce8:	080102db 	.word	0x080102db
 800fcec:	080102ff 	.word	0x080102ff

0800fcf0 <_cleanup_r>:
 800fcf0:	4901      	ldr	r1, [pc, #4]	; (800fcf8 <_cleanup_r+0x8>)
 800fcf2:	f000 b8af 	b.w	800fe54 <_fwalk_reent>
 800fcf6:	bf00      	nop
 800fcf8:	08010459 	.word	0x08010459

0800fcfc <__sfmoreglue>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	2268      	movs	r2, #104	; 0x68
 800fd00:	1e4d      	subs	r5, r1, #1
 800fd02:	4355      	muls	r5, r2
 800fd04:	460e      	mov	r6, r1
 800fd06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd0a:	f000 f97d 	bl	8010008 <_malloc_r>
 800fd0e:	4604      	mov	r4, r0
 800fd10:	b140      	cbz	r0, 800fd24 <__sfmoreglue+0x28>
 800fd12:	2100      	movs	r1, #0
 800fd14:	e9c0 1600 	strd	r1, r6, [r0]
 800fd18:	300c      	adds	r0, #12
 800fd1a:	60a0      	str	r0, [r4, #8]
 800fd1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd20:	f000 f8fe 	bl	800ff20 <memset>
 800fd24:	4620      	mov	r0, r4
 800fd26:	bd70      	pop	{r4, r5, r6, pc}

0800fd28 <__sfp_lock_acquire>:
 800fd28:	4801      	ldr	r0, [pc, #4]	; (800fd30 <__sfp_lock_acquire+0x8>)
 800fd2a:	f000 b8d8 	b.w	800fede <__retarget_lock_acquire_recursive>
 800fd2e:	bf00      	nop
 800fd30:	2001b2ed 	.word	0x2001b2ed

0800fd34 <__sfp_lock_release>:
 800fd34:	4801      	ldr	r0, [pc, #4]	; (800fd3c <__sfp_lock_release+0x8>)
 800fd36:	f000 b8d3 	b.w	800fee0 <__retarget_lock_release_recursive>
 800fd3a:	bf00      	nop
 800fd3c:	2001b2ed 	.word	0x2001b2ed

0800fd40 <__sinit_lock_acquire>:
 800fd40:	4801      	ldr	r0, [pc, #4]	; (800fd48 <__sinit_lock_acquire+0x8>)
 800fd42:	f000 b8cc 	b.w	800fede <__retarget_lock_acquire_recursive>
 800fd46:	bf00      	nop
 800fd48:	2001b2ee 	.word	0x2001b2ee

0800fd4c <__sinit_lock_release>:
 800fd4c:	4801      	ldr	r0, [pc, #4]	; (800fd54 <__sinit_lock_release+0x8>)
 800fd4e:	f000 b8c7 	b.w	800fee0 <__retarget_lock_release_recursive>
 800fd52:	bf00      	nop
 800fd54:	2001b2ee 	.word	0x2001b2ee

0800fd58 <__sinit>:
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	f7ff fff0 	bl	800fd40 <__sinit_lock_acquire>
 800fd60:	69a3      	ldr	r3, [r4, #24]
 800fd62:	b11b      	cbz	r3, 800fd6c <__sinit+0x14>
 800fd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd68:	f7ff bff0 	b.w	800fd4c <__sinit_lock_release>
 800fd6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd70:	6523      	str	r3, [r4, #80]	; 0x50
 800fd72:	4b13      	ldr	r3, [pc, #76]	; (800fdc0 <__sinit+0x68>)
 800fd74:	4a13      	ldr	r2, [pc, #76]	; (800fdc4 <__sinit+0x6c>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd7a:	42a3      	cmp	r3, r4
 800fd7c:	bf04      	itt	eq
 800fd7e:	2301      	moveq	r3, #1
 800fd80:	61a3      	streq	r3, [r4, #24]
 800fd82:	4620      	mov	r0, r4
 800fd84:	f000 f820 	bl	800fdc8 <__sfp>
 800fd88:	6060      	str	r0, [r4, #4]
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	f000 f81c 	bl	800fdc8 <__sfp>
 800fd90:	60a0      	str	r0, [r4, #8]
 800fd92:	4620      	mov	r0, r4
 800fd94:	f000 f818 	bl	800fdc8 <__sfp>
 800fd98:	2200      	movs	r2, #0
 800fd9a:	60e0      	str	r0, [r4, #12]
 800fd9c:	2104      	movs	r1, #4
 800fd9e:	6860      	ldr	r0, [r4, #4]
 800fda0:	f7ff ff82 	bl	800fca8 <std>
 800fda4:	68a0      	ldr	r0, [r4, #8]
 800fda6:	2201      	movs	r2, #1
 800fda8:	2109      	movs	r1, #9
 800fdaa:	f7ff ff7d 	bl	800fca8 <std>
 800fdae:	68e0      	ldr	r0, [r4, #12]
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	2112      	movs	r1, #18
 800fdb4:	f7ff ff78 	bl	800fca8 <std>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	61a3      	str	r3, [r4, #24]
 800fdbc:	e7d2      	b.n	800fd64 <__sinit+0xc>
 800fdbe:	bf00      	nop
 800fdc0:	08013f28 	.word	0x08013f28
 800fdc4:	0800fcf1 	.word	0x0800fcf1

0800fdc8 <__sfp>:
 800fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdca:	4607      	mov	r7, r0
 800fdcc:	f7ff ffac 	bl	800fd28 <__sfp_lock_acquire>
 800fdd0:	4b1e      	ldr	r3, [pc, #120]	; (800fe4c <__sfp+0x84>)
 800fdd2:	681e      	ldr	r6, [r3, #0]
 800fdd4:	69b3      	ldr	r3, [r6, #24]
 800fdd6:	b913      	cbnz	r3, 800fdde <__sfp+0x16>
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f7ff ffbd 	bl	800fd58 <__sinit>
 800fdde:	3648      	adds	r6, #72	; 0x48
 800fde0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fde4:	3b01      	subs	r3, #1
 800fde6:	d503      	bpl.n	800fdf0 <__sfp+0x28>
 800fde8:	6833      	ldr	r3, [r6, #0]
 800fdea:	b30b      	cbz	r3, 800fe30 <__sfp+0x68>
 800fdec:	6836      	ldr	r6, [r6, #0]
 800fdee:	e7f7      	b.n	800fde0 <__sfp+0x18>
 800fdf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fdf4:	b9d5      	cbnz	r5, 800fe2c <__sfp+0x64>
 800fdf6:	4b16      	ldr	r3, [pc, #88]	; (800fe50 <__sfp+0x88>)
 800fdf8:	60e3      	str	r3, [r4, #12]
 800fdfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdfe:	6665      	str	r5, [r4, #100]	; 0x64
 800fe00:	f000 f86c 	bl	800fedc <__retarget_lock_init_recursive>
 800fe04:	f7ff ff96 	bl	800fd34 <__sfp_lock_release>
 800fe08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe10:	6025      	str	r5, [r4, #0]
 800fe12:	61a5      	str	r5, [r4, #24]
 800fe14:	2208      	movs	r2, #8
 800fe16:	4629      	mov	r1, r5
 800fe18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe1c:	f000 f880 	bl	800ff20 <memset>
 800fe20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe28:	4620      	mov	r0, r4
 800fe2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe2c:	3468      	adds	r4, #104	; 0x68
 800fe2e:	e7d9      	b.n	800fde4 <__sfp+0x1c>
 800fe30:	2104      	movs	r1, #4
 800fe32:	4638      	mov	r0, r7
 800fe34:	f7ff ff62 	bl	800fcfc <__sfmoreglue>
 800fe38:	4604      	mov	r4, r0
 800fe3a:	6030      	str	r0, [r6, #0]
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	d1d5      	bne.n	800fdec <__sfp+0x24>
 800fe40:	f7ff ff78 	bl	800fd34 <__sfp_lock_release>
 800fe44:	230c      	movs	r3, #12
 800fe46:	603b      	str	r3, [r7, #0]
 800fe48:	e7ee      	b.n	800fe28 <__sfp+0x60>
 800fe4a:	bf00      	nop
 800fe4c:	08013f28 	.word	0x08013f28
 800fe50:	ffff0001 	.word	0xffff0001

0800fe54 <_fwalk_reent>:
 800fe54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe58:	4606      	mov	r6, r0
 800fe5a:	4688      	mov	r8, r1
 800fe5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe60:	2700      	movs	r7, #0
 800fe62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe66:	f1b9 0901 	subs.w	r9, r9, #1
 800fe6a:	d505      	bpl.n	800fe78 <_fwalk_reent+0x24>
 800fe6c:	6824      	ldr	r4, [r4, #0]
 800fe6e:	2c00      	cmp	r4, #0
 800fe70:	d1f7      	bne.n	800fe62 <_fwalk_reent+0xe>
 800fe72:	4638      	mov	r0, r7
 800fe74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe78:	89ab      	ldrh	r3, [r5, #12]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d907      	bls.n	800fe8e <_fwalk_reent+0x3a>
 800fe7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe82:	3301      	adds	r3, #1
 800fe84:	d003      	beq.n	800fe8e <_fwalk_reent+0x3a>
 800fe86:	4629      	mov	r1, r5
 800fe88:	4630      	mov	r0, r6
 800fe8a:	47c0      	blx	r8
 800fe8c:	4307      	orrs	r7, r0
 800fe8e:	3568      	adds	r5, #104	; 0x68
 800fe90:	e7e9      	b.n	800fe66 <_fwalk_reent+0x12>
	...

0800fe94 <__libc_init_array>:
 800fe94:	b570      	push	{r4, r5, r6, lr}
 800fe96:	4d0d      	ldr	r5, [pc, #52]	; (800fecc <__libc_init_array+0x38>)
 800fe98:	4c0d      	ldr	r4, [pc, #52]	; (800fed0 <__libc_init_array+0x3c>)
 800fe9a:	1b64      	subs	r4, r4, r5
 800fe9c:	10a4      	asrs	r4, r4, #2
 800fe9e:	2600      	movs	r6, #0
 800fea0:	42a6      	cmp	r6, r4
 800fea2:	d109      	bne.n	800feb8 <__libc_init_array+0x24>
 800fea4:	4d0b      	ldr	r5, [pc, #44]	; (800fed4 <__libc_init_array+0x40>)
 800fea6:	4c0c      	ldr	r4, [pc, #48]	; (800fed8 <__libc_init_array+0x44>)
 800fea8:	f001 f96e 	bl	8011188 <_init>
 800feac:	1b64      	subs	r4, r4, r5
 800feae:	10a4      	asrs	r4, r4, #2
 800feb0:	2600      	movs	r6, #0
 800feb2:	42a6      	cmp	r6, r4
 800feb4:	d105      	bne.n	800fec2 <__libc_init_array+0x2e>
 800feb6:	bd70      	pop	{r4, r5, r6, pc}
 800feb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800febc:	4798      	blx	r3
 800febe:	3601      	adds	r6, #1
 800fec0:	e7ee      	b.n	800fea0 <__libc_init_array+0xc>
 800fec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fec6:	4798      	blx	r3
 800fec8:	3601      	adds	r6, #1
 800feca:	e7f2      	b.n	800feb2 <__libc_init_array+0x1e>
 800fecc:	08013f68 	.word	0x08013f68
 800fed0:	08013f68 	.word	0x08013f68
 800fed4:	08013f68 	.word	0x08013f68
 800fed8:	08013f6c 	.word	0x08013f6c

0800fedc <__retarget_lock_init_recursive>:
 800fedc:	4770      	bx	lr

0800fede <__retarget_lock_acquire_recursive>:
 800fede:	4770      	bx	lr

0800fee0 <__retarget_lock_release_recursive>:
 800fee0:	4770      	bx	lr
	...

0800fee4 <malloc>:
 800fee4:	4b02      	ldr	r3, [pc, #8]	; (800fef0 <malloc+0xc>)
 800fee6:	4601      	mov	r1, r0
 800fee8:	6818      	ldr	r0, [r3, #0]
 800feea:	f000 b88d 	b.w	8010008 <_malloc_r>
 800feee:	bf00      	nop
 800fef0:	20000250 	.word	0x20000250

0800fef4 <free>:
 800fef4:	4b02      	ldr	r3, [pc, #8]	; (800ff00 <free+0xc>)
 800fef6:	4601      	mov	r1, r0
 800fef8:	6818      	ldr	r0, [r3, #0]
 800fefa:	f000 b819 	b.w	800ff30 <_free_r>
 800fefe:	bf00      	nop
 800ff00:	20000250 	.word	0x20000250

0800ff04 <memcpy>:
 800ff04:	440a      	add	r2, r1
 800ff06:	4291      	cmp	r1, r2
 800ff08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff0c:	d100      	bne.n	800ff10 <memcpy+0xc>
 800ff0e:	4770      	bx	lr
 800ff10:	b510      	push	{r4, lr}
 800ff12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff1a:	4291      	cmp	r1, r2
 800ff1c:	d1f9      	bne.n	800ff12 <memcpy+0xe>
 800ff1e:	bd10      	pop	{r4, pc}

0800ff20 <memset>:
 800ff20:	4402      	add	r2, r0
 800ff22:	4603      	mov	r3, r0
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d100      	bne.n	800ff2a <memset+0xa>
 800ff28:	4770      	bx	lr
 800ff2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff2e:	e7f9      	b.n	800ff24 <memset+0x4>

0800ff30 <_free_r>:
 800ff30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff32:	2900      	cmp	r1, #0
 800ff34:	d044      	beq.n	800ffc0 <_free_r+0x90>
 800ff36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff3a:	9001      	str	r0, [sp, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff42:	bfb8      	it	lt
 800ff44:	18e4      	addlt	r4, r4, r3
 800ff46:	f000 fad5 	bl	80104f4 <__malloc_lock>
 800ff4a:	4a1e      	ldr	r2, [pc, #120]	; (800ffc4 <_free_r+0x94>)
 800ff4c:	9801      	ldr	r0, [sp, #4]
 800ff4e:	6813      	ldr	r3, [r2, #0]
 800ff50:	b933      	cbnz	r3, 800ff60 <_free_r+0x30>
 800ff52:	6063      	str	r3, [r4, #4]
 800ff54:	6014      	str	r4, [r2, #0]
 800ff56:	b003      	add	sp, #12
 800ff58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff5c:	f000 bad0 	b.w	8010500 <__malloc_unlock>
 800ff60:	42a3      	cmp	r3, r4
 800ff62:	d908      	bls.n	800ff76 <_free_r+0x46>
 800ff64:	6825      	ldr	r5, [r4, #0]
 800ff66:	1961      	adds	r1, r4, r5
 800ff68:	428b      	cmp	r3, r1
 800ff6a:	bf01      	itttt	eq
 800ff6c:	6819      	ldreq	r1, [r3, #0]
 800ff6e:	685b      	ldreq	r3, [r3, #4]
 800ff70:	1949      	addeq	r1, r1, r5
 800ff72:	6021      	streq	r1, [r4, #0]
 800ff74:	e7ed      	b.n	800ff52 <_free_r+0x22>
 800ff76:	461a      	mov	r2, r3
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	b10b      	cbz	r3, 800ff80 <_free_r+0x50>
 800ff7c:	42a3      	cmp	r3, r4
 800ff7e:	d9fa      	bls.n	800ff76 <_free_r+0x46>
 800ff80:	6811      	ldr	r1, [r2, #0]
 800ff82:	1855      	adds	r5, r2, r1
 800ff84:	42a5      	cmp	r5, r4
 800ff86:	d10b      	bne.n	800ffa0 <_free_r+0x70>
 800ff88:	6824      	ldr	r4, [r4, #0]
 800ff8a:	4421      	add	r1, r4
 800ff8c:	1854      	adds	r4, r2, r1
 800ff8e:	42a3      	cmp	r3, r4
 800ff90:	6011      	str	r1, [r2, #0]
 800ff92:	d1e0      	bne.n	800ff56 <_free_r+0x26>
 800ff94:	681c      	ldr	r4, [r3, #0]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	6053      	str	r3, [r2, #4]
 800ff9a:	4421      	add	r1, r4
 800ff9c:	6011      	str	r1, [r2, #0]
 800ff9e:	e7da      	b.n	800ff56 <_free_r+0x26>
 800ffa0:	d902      	bls.n	800ffa8 <_free_r+0x78>
 800ffa2:	230c      	movs	r3, #12
 800ffa4:	6003      	str	r3, [r0, #0]
 800ffa6:	e7d6      	b.n	800ff56 <_free_r+0x26>
 800ffa8:	6825      	ldr	r5, [r4, #0]
 800ffaa:	1961      	adds	r1, r4, r5
 800ffac:	428b      	cmp	r3, r1
 800ffae:	bf04      	itt	eq
 800ffb0:	6819      	ldreq	r1, [r3, #0]
 800ffb2:	685b      	ldreq	r3, [r3, #4]
 800ffb4:	6063      	str	r3, [r4, #4]
 800ffb6:	bf04      	itt	eq
 800ffb8:	1949      	addeq	r1, r1, r5
 800ffba:	6021      	streq	r1, [r4, #0]
 800ffbc:	6054      	str	r4, [r2, #4]
 800ffbe:	e7ca      	b.n	800ff56 <_free_r+0x26>
 800ffc0:	b003      	add	sp, #12
 800ffc2:	bd30      	pop	{r4, r5, pc}
 800ffc4:	2001b2f0 	.word	0x2001b2f0

0800ffc8 <sbrk_aligned>:
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	4e0e      	ldr	r6, [pc, #56]	; (8010004 <sbrk_aligned+0x3c>)
 800ffcc:	460c      	mov	r4, r1
 800ffce:	6831      	ldr	r1, [r6, #0]
 800ffd0:	4605      	mov	r5, r0
 800ffd2:	b911      	cbnz	r1, 800ffda <sbrk_aligned+0x12>
 800ffd4:	f000 f924 	bl	8010220 <_sbrk_r>
 800ffd8:	6030      	str	r0, [r6, #0]
 800ffda:	4621      	mov	r1, r4
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f000 f91f 	bl	8010220 <_sbrk_r>
 800ffe2:	1c43      	adds	r3, r0, #1
 800ffe4:	d00a      	beq.n	800fffc <sbrk_aligned+0x34>
 800ffe6:	1cc4      	adds	r4, r0, #3
 800ffe8:	f024 0403 	bic.w	r4, r4, #3
 800ffec:	42a0      	cmp	r0, r4
 800ffee:	d007      	beq.n	8010000 <sbrk_aligned+0x38>
 800fff0:	1a21      	subs	r1, r4, r0
 800fff2:	4628      	mov	r0, r5
 800fff4:	f000 f914 	bl	8010220 <_sbrk_r>
 800fff8:	3001      	adds	r0, #1
 800fffa:	d101      	bne.n	8010000 <sbrk_aligned+0x38>
 800fffc:	f04f 34ff 	mov.w	r4, #4294967295
 8010000:	4620      	mov	r0, r4
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	2001b2f4 	.word	0x2001b2f4

08010008 <_malloc_r>:
 8010008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000c:	1ccd      	adds	r5, r1, #3
 801000e:	f025 0503 	bic.w	r5, r5, #3
 8010012:	3508      	adds	r5, #8
 8010014:	2d0c      	cmp	r5, #12
 8010016:	bf38      	it	cc
 8010018:	250c      	movcc	r5, #12
 801001a:	2d00      	cmp	r5, #0
 801001c:	4607      	mov	r7, r0
 801001e:	db01      	blt.n	8010024 <_malloc_r+0x1c>
 8010020:	42a9      	cmp	r1, r5
 8010022:	d905      	bls.n	8010030 <_malloc_r+0x28>
 8010024:	230c      	movs	r3, #12
 8010026:	603b      	str	r3, [r7, #0]
 8010028:	2600      	movs	r6, #0
 801002a:	4630      	mov	r0, r6
 801002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010030:	4e2e      	ldr	r6, [pc, #184]	; (80100ec <_malloc_r+0xe4>)
 8010032:	f000 fa5f 	bl	80104f4 <__malloc_lock>
 8010036:	6833      	ldr	r3, [r6, #0]
 8010038:	461c      	mov	r4, r3
 801003a:	bb34      	cbnz	r4, 801008a <_malloc_r+0x82>
 801003c:	4629      	mov	r1, r5
 801003e:	4638      	mov	r0, r7
 8010040:	f7ff ffc2 	bl	800ffc8 <sbrk_aligned>
 8010044:	1c43      	adds	r3, r0, #1
 8010046:	4604      	mov	r4, r0
 8010048:	d14d      	bne.n	80100e6 <_malloc_r+0xde>
 801004a:	6834      	ldr	r4, [r6, #0]
 801004c:	4626      	mov	r6, r4
 801004e:	2e00      	cmp	r6, #0
 8010050:	d140      	bne.n	80100d4 <_malloc_r+0xcc>
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	4631      	mov	r1, r6
 8010056:	4638      	mov	r0, r7
 8010058:	eb04 0803 	add.w	r8, r4, r3
 801005c:	f000 f8e0 	bl	8010220 <_sbrk_r>
 8010060:	4580      	cmp	r8, r0
 8010062:	d13a      	bne.n	80100da <_malloc_r+0xd2>
 8010064:	6821      	ldr	r1, [r4, #0]
 8010066:	3503      	adds	r5, #3
 8010068:	1a6d      	subs	r5, r5, r1
 801006a:	f025 0503 	bic.w	r5, r5, #3
 801006e:	3508      	adds	r5, #8
 8010070:	2d0c      	cmp	r5, #12
 8010072:	bf38      	it	cc
 8010074:	250c      	movcc	r5, #12
 8010076:	4629      	mov	r1, r5
 8010078:	4638      	mov	r0, r7
 801007a:	f7ff ffa5 	bl	800ffc8 <sbrk_aligned>
 801007e:	3001      	adds	r0, #1
 8010080:	d02b      	beq.n	80100da <_malloc_r+0xd2>
 8010082:	6823      	ldr	r3, [r4, #0]
 8010084:	442b      	add	r3, r5
 8010086:	6023      	str	r3, [r4, #0]
 8010088:	e00e      	b.n	80100a8 <_malloc_r+0xa0>
 801008a:	6822      	ldr	r2, [r4, #0]
 801008c:	1b52      	subs	r2, r2, r5
 801008e:	d41e      	bmi.n	80100ce <_malloc_r+0xc6>
 8010090:	2a0b      	cmp	r2, #11
 8010092:	d916      	bls.n	80100c2 <_malloc_r+0xba>
 8010094:	1961      	adds	r1, r4, r5
 8010096:	42a3      	cmp	r3, r4
 8010098:	6025      	str	r5, [r4, #0]
 801009a:	bf18      	it	ne
 801009c:	6059      	strne	r1, [r3, #4]
 801009e:	6863      	ldr	r3, [r4, #4]
 80100a0:	bf08      	it	eq
 80100a2:	6031      	streq	r1, [r6, #0]
 80100a4:	5162      	str	r2, [r4, r5]
 80100a6:	604b      	str	r3, [r1, #4]
 80100a8:	4638      	mov	r0, r7
 80100aa:	f104 060b 	add.w	r6, r4, #11
 80100ae:	f000 fa27 	bl	8010500 <__malloc_unlock>
 80100b2:	f026 0607 	bic.w	r6, r6, #7
 80100b6:	1d23      	adds	r3, r4, #4
 80100b8:	1af2      	subs	r2, r6, r3
 80100ba:	d0b6      	beq.n	801002a <_malloc_r+0x22>
 80100bc:	1b9b      	subs	r3, r3, r6
 80100be:	50a3      	str	r3, [r4, r2]
 80100c0:	e7b3      	b.n	801002a <_malloc_r+0x22>
 80100c2:	6862      	ldr	r2, [r4, #4]
 80100c4:	42a3      	cmp	r3, r4
 80100c6:	bf0c      	ite	eq
 80100c8:	6032      	streq	r2, [r6, #0]
 80100ca:	605a      	strne	r2, [r3, #4]
 80100cc:	e7ec      	b.n	80100a8 <_malloc_r+0xa0>
 80100ce:	4623      	mov	r3, r4
 80100d0:	6864      	ldr	r4, [r4, #4]
 80100d2:	e7b2      	b.n	801003a <_malloc_r+0x32>
 80100d4:	4634      	mov	r4, r6
 80100d6:	6876      	ldr	r6, [r6, #4]
 80100d8:	e7b9      	b.n	801004e <_malloc_r+0x46>
 80100da:	230c      	movs	r3, #12
 80100dc:	603b      	str	r3, [r7, #0]
 80100de:	4638      	mov	r0, r7
 80100e0:	f000 fa0e 	bl	8010500 <__malloc_unlock>
 80100e4:	e7a1      	b.n	801002a <_malloc_r+0x22>
 80100e6:	6025      	str	r5, [r4, #0]
 80100e8:	e7de      	b.n	80100a8 <_malloc_r+0xa0>
 80100ea:	bf00      	nop
 80100ec:	2001b2f0 	.word	0x2001b2f0

080100f0 <iprintf>:
 80100f0:	b40f      	push	{r0, r1, r2, r3}
 80100f2:	4b0a      	ldr	r3, [pc, #40]	; (801011c <iprintf+0x2c>)
 80100f4:	b513      	push	{r0, r1, r4, lr}
 80100f6:	681c      	ldr	r4, [r3, #0]
 80100f8:	b124      	cbz	r4, 8010104 <iprintf+0x14>
 80100fa:	69a3      	ldr	r3, [r4, #24]
 80100fc:	b913      	cbnz	r3, 8010104 <iprintf+0x14>
 80100fe:	4620      	mov	r0, r4
 8010100:	f7ff fe2a 	bl	800fd58 <__sinit>
 8010104:	ab05      	add	r3, sp, #20
 8010106:	9a04      	ldr	r2, [sp, #16]
 8010108:	68a1      	ldr	r1, [r4, #8]
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	4620      	mov	r0, r4
 801010e:	f000 fb83 	bl	8010818 <_vfiprintf_r>
 8010112:	b002      	add	sp, #8
 8010114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010118:	b004      	add	sp, #16
 801011a:	4770      	bx	lr
 801011c:	20000250 	.word	0x20000250

08010120 <putchar>:
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <putchar+0x28>)
 8010122:	b513      	push	{r0, r1, r4, lr}
 8010124:	681c      	ldr	r4, [r3, #0]
 8010126:	4601      	mov	r1, r0
 8010128:	b134      	cbz	r4, 8010138 <putchar+0x18>
 801012a:	69a3      	ldr	r3, [r4, #24]
 801012c:	b923      	cbnz	r3, 8010138 <putchar+0x18>
 801012e:	9001      	str	r0, [sp, #4]
 8010130:	4620      	mov	r0, r4
 8010132:	f7ff fe11 	bl	800fd58 <__sinit>
 8010136:	9901      	ldr	r1, [sp, #4]
 8010138:	68a2      	ldr	r2, [r4, #8]
 801013a:	4620      	mov	r0, r4
 801013c:	b002      	add	sp, #8
 801013e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010142:	f000 be2d 	b.w	8010da0 <_putc_r>
 8010146:	bf00      	nop
 8010148:	20000250 	.word	0x20000250

0801014c <cleanup_glue>:
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	460c      	mov	r4, r1
 8010150:	6809      	ldr	r1, [r1, #0]
 8010152:	4605      	mov	r5, r0
 8010154:	b109      	cbz	r1, 801015a <cleanup_glue+0xe>
 8010156:	f7ff fff9 	bl	801014c <cleanup_glue>
 801015a:	4621      	mov	r1, r4
 801015c:	4628      	mov	r0, r5
 801015e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010162:	f7ff bee5 	b.w	800ff30 <_free_r>
	...

08010168 <_reclaim_reent>:
 8010168:	4b2c      	ldr	r3, [pc, #176]	; (801021c <_reclaim_reent+0xb4>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4283      	cmp	r3, r0
 801016e:	b570      	push	{r4, r5, r6, lr}
 8010170:	4604      	mov	r4, r0
 8010172:	d051      	beq.n	8010218 <_reclaim_reent+0xb0>
 8010174:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010176:	b143      	cbz	r3, 801018a <_reclaim_reent+0x22>
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d14a      	bne.n	8010214 <_reclaim_reent+0xac>
 801017e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010180:	6819      	ldr	r1, [r3, #0]
 8010182:	b111      	cbz	r1, 801018a <_reclaim_reent+0x22>
 8010184:	4620      	mov	r0, r4
 8010186:	f7ff fed3 	bl	800ff30 <_free_r>
 801018a:	6961      	ldr	r1, [r4, #20]
 801018c:	b111      	cbz	r1, 8010194 <_reclaim_reent+0x2c>
 801018e:	4620      	mov	r0, r4
 8010190:	f7ff fece 	bl	800ff30 <_free_r>
 8010194:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010196:	b111      	cbz	r1, 801019e <_reclaim_reent+0x36>
 8010198:	4620      	mov	r0, r4
 801019a:	f7ff fec9 	bl	800ff30 <_free_r>
 801019e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80101a0:	b111      	cbz	r1, 80101a8 <_reclaim_reent+0x40>
 80101a2:	4620      	mov	r0, r4
 80101a4:	f7ff fec4 	bl	800ff30 <_free_r>
 80101a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80101aa:	b111      	cbz	r1, 80101b2 <_reclaim_reent+0x4a>
 80101ac:	4620      	mov	r0, r4
 80101ae:	f7ff febf 	bl	800ff30 <_free_r>
 80101b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80101b4:	b111      	cbz	r1, 80101bc <_reclaim_reent+0x54>
 80101b6:	4620      	mov	r0, r4
 80101b8:	f7ff feba 	bl	800ff30 <_free_r>
 80101bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80101be:	b111      	cbz	r1, 80101c6 <_reclaim_reent+0x5e>
 80101c0:	4620      	mov	r0, r4
 80101c2:	f7ff feb5 	bl	800ff30 <_free_r>
 80101c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80101c8:	b111      	cbz	r1, 80101d0 <_reclaim_reent+0x68>
 80101ca:	4620      	mov	r0, r4
 80101cc:	f7ff feb0 	bl	800ff30 <_free_r>
 80101d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101d2:	b111      	cbz	r1, 80101da <_reclaim_reent+0x72>
 80101d4:	4620      	mov	r0, r4
 80101d6:	f7ff feab 	bl	800ff30 <_free_r>
 80101da:	69a3      	ldr	r3, [r4, #24]
 80101dc:	b1e3      	cbz	r3, 8010218 <_reclaim_reent+0xb0>
 80101de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101e0:	4620      	mov	r0, r4
 80101e2:	4798      	blx	r3
 80101e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80101e6:	b1b9      	cbz	r1, 8010218 <_reclaim_reent+0xb0>
 80101e8:	4620      	mov	r0, r4
 80101ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101ee:	f7ff bfad 	b.w	801014c <cleanup_glue>
 80101f2:	5949      	ldr	r1, [r1, r5]
 80101f4:	b941      	cbnz	r1, 8010208 <_reclaim_reent+0xa0>
 80101f6:	3504      	adds	r5, #4
 80101f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101fa:	2d80      	cmp	r5, #128	; 0x80
 80101fc:	68d9      	ldr	r1, [r3, #12]
 80101fe:	d1f8      	bne.n	80101f2 <_reclaim_reent+0x8a>
 8010200:	4620      	mov	r0, r4
 8010202:	f7ff fe95 	bl	800ff30 <_free_r>
 8010206:	e7ba      	b.n	801017e <_reclaim_reent+0x16>
 8010208:	680e      	ldr	r6, [r1, #0]
 801020a:	4620      	mov	r0, r4
 801020c:	f7ff fe90 	bl	800ff30 <_free_r>
 8010210:	4631      	mov	r1, r6
 8010212:	e7ef      	b.n	80101f4 <_reclaim_reent+0x8c>
 8010214:	2500      	movs	r5, #0
 8010216:	e7ef      	b.n	80101f8 <_reclaim_reent+0x90>
 8010218:	bd70      	pop	{r4, r5, r6, pc}
 801021a:	bf00      	nop
 801021c:	20000250 	.word	0x20000250

08010220 <_sbrk_r>:
 8010220:	b538      	push	{r3, r4, r5, lr}
 8010222:	4d06      	ldr	r5, [pc, #24]	; (801023c <_sbrk_r+0x1c>)
 8010224:	2300      	movs	r3, #0
 8010226:	4604      	mov	r4, r0
 8010228:	4608      	mov	r0, r1
 801022a:	602b      	str	r3, [r5, #0]
 801022c:	f7f1 fc82 	bl	8001b34 <_sbrk>
 8010230:	1c43      	adds	r3, r0, #1
 8010232:	d102      	bne.n	801023a <_sbrk_r+0x1a>
 8010234:	682b      	ldr	r3, [r5, #0]
 8010236:	b103      	cbz	r3, 801023a <_sbrk_r+0x1a>
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	2001b2f8 	.word	0x2001b2f8

08010240 <siprintf>:
 8010240:	b40e      	push	{r1, r2, r3}
 8010242:	b500      	push	{lr}
 8010244:	b09c      	sub	sp, #112	; 0x70
 8010246:	ab1d      	add	r3, sp, #116	; 0x74
 8010248:	9002      	str	r0, [sp, #8]
 801024a:	9006      	str	r0, [sp, #24]
 801024c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010250:	4809      	ldr	r0, [pc, #36]	; (8010278 <siprintf+0x38>)
 8010252:	9107      	str	r1, [sp, #28]
 8010254:	9104      	str	r1, [sp, #16]
 8010256:	4909      	ldr	r1, [pc, #36]	; (801027c <siprintf+0x3c>)
 8010258:	f853 2b04 	ldr.w	r2, [r3], #4
 801025c:	9105      	str	r1, [sp, #20]
 801025e:	6800      	ldr	r0, [r0, #0]
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	a902      	add	r1, sp, #8
 8010264:	f000 f9ae 	bl	80105c4 <_svfiprintf_r>
 8010268:	9b02      	ldr	r3, [sp, #8]
 801026a:	2200      	movs	r2, #0
 801026c:	701a      	strb	r2, [r3, #0]
 801026e:	b01c      	add	sp, #112	; 0x70
 8010270:	f85d eb04 	ldr.w	lr, [sp], #4
 8010274:	b003      	add	sp, #12
 8010276:	4770      	bx	lr
 8010278:	20000250 	.word	0x20000250
 801027c:	ffff0208 	.word	0xffff0208

08010280 <__sread>:
 8010280:	b510      	push	{r4, lr}
 8010282:	460c      	mov	r4, r1
 8010284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010288:	f000 fdd2 	bl	8010e30 <_read_r>
 801028c:	2800      	cmp	r0, #0
 801028e:	bfab      	itete	ge
 8010290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010292:	89a3      	ldrhlt	r3, [r4, #12]
 8010294:	181b      	addge	r3, r3, r0
 8010296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801029a:	bfac      	ite	ge
 801029c:	6563      	strge	r3, [r4, #84]	; 0x54
 801029e:	81a3      	strhlt	r3, [r4, #12]
 80102a0:	bd10      	pop	{r4, pc}

080102a2 <__swrite>:
 80102a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a6:	461f      	mov	r7, r3
 80102a8:	898b      	ldrh	r3, [r1, #12]
 80102aa:	05db      	lsls	r3, r3, #23
 80102ac:	4605      	mov	r5, r0
 80102ae:	460c      	mov	r4, r1
 80102b0:	4616      	mov	r6, r2
 80102b2:	d505      	bpl.n	80102c0 <__swrite+0x1e>
 80102b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b8:	2302      	movs	r3, #2
 80102ba:	2200      	movs	r2, #0
 80102bc:	f000 f908 	bl	80104d0 <_lseek_r>
 80102c0:	89a3      	ldrh	r3, [r4, #12]
 80102c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102ca:	81a3      	strh	r3, [r4, #12]
 80102cc:	4632      	mov	r2, r6
 80102ce:	463b      	mov	r3, r7
 80102d0:	4628      	mov	r0, r5
 80102d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d6:	f000 b817 	b.w	8010308 <_write_r>

080102da <__sseek>:
 80102da:	b510      	push	{r4, lr}
 80102dc:	460c      	mov	r4, r1
 80102de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e2:	f000 f8f5 	bl	80104d0 <_lseek_r>
 80102e6:	1c43      	adds	r3, r0, #1
 80102e8:	89a3      	ldrh	r3, [r4, #12]
 80102ea:	bf15      	itete	ne
 80102ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80102ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102f6:	81a3      	strheq	r3, [r4, #12]
 80102f8:	bf18      	it	ne
 80102fa:	81a3      	strhne	r3, [r4, #12]
 80102fc:	bd10      	pop	{r4, pc}

080102fe <__sclose>:
 80102fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010302:	f000 b813 	b.w	801032c <_close_r>
	...

08010308 <_write_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4d07      	ldr	r5, [pc, #28]	; (8010328 <_write_r+0x20>)
 801030c:	4604      	mov	r4, r0
 801030e:	4608      	mov	r0, r1
 8010310:	4611      	mov	r1, r2
 8010312:	2200      	movs	r2, #0
 8010314:	602a      	str	r2, [r5, #0]
 8010316:	461a      	mov	r2, r3
 8010318:	f7f0 fe8a 	bl	8001030 <_write>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_write_r+0x1e>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b103      	cbz	r3, 8010326 <_write_r+0x1e>
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	2001b2f8 	.word	0x2001b2f8

0801032c <_close_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4d06      	ldr	r5, [pc, #24]	; (8010348 <_close_r+0x1c>)
 8010330:	2300      	movs	r3, #0
 8010332:	4604      	mov	r4, r0
 8010334:	4608      	mov	r0, r1
 8010336:	602b      	str	r3, [r5, #0]
 8010338:	f7f1 fbc7 	bl	8001aca <_close>
 801033c:	1c43      	adds	r3, r0, #1
 801033e:	d102      	bne.n	8010346 <_close_r+0x1a>
 8010340:	682b      	ldr	r3, [r5, #0]
 8010342:	b103      	cbz	r3, 8010346 <_close_r+0x1a>
 8010344:	6023      	str	r3, [r4, #0]
 8010346:	bd38      	pop	{r3, r4, r5, pc}
 8010348:	2001b2f8 	.word	0x2001b2f8

0801034c <__sflush_r>:
 801034c:	898a      	ldrh	r2, [r1, #12]
 801034e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010352:	4605      	mov	r5, r0
 8010354:	0710      	lsls	r0, r2, #28
 8010356:	460c      	mov	r4, r1
 8010358:	d458      	bmi.n	801040c <__sflush_r+0xc0>
 801035a:	684b      	ldr	r3, [r1, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	dc05      	bgt.n	801036c <__sflush_r+0x20>
 8010360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010362:	2b00      	cmp	r3, #0
 8010364:	dc02      	bgt.n	801036c <__sflush_r+0x20>
 8010366:	2000      	movs	r0, #0
 8010368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801036c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801036e:	2e00      	cmp	r6, #0
 8010370:	d0f9      	beq.n	8010366 <__sflush_r+0x1a>
 8010372:	2300      	movs	r3, #0
 8010374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010378:	682f      	ldr	r7, [r5, #0]
 801037a:	602b      	str	r3, [r5, #0]
 801037c:	d032      	beq.n	80103e4 <__sflush_r+0x98>
 801037e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	075a      	lsls	r2, r3, #29
 8010384:	d505      	bpl.n	8010392 <__sflush_r+0x46>
 8010386:	6863      	ldr	r3, [r4, #4]
 8010388:	1ac0      	subs	r0, r0, r3
 801038a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801038c:	b10b      	cbz	r3, 8010392 <__sflush_r+0x46>
 801038e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010390:	1ac0      	subs	r0, r0, r3
 8010392:	2300      	movs	r3, #0
 8010394:	4602      	mov	r2, r0
 8010396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010398:	6a21      	ldr	r1, [r4, #32]
 801039a:	4628      	mov	r0, r5
 801039c:	47b0      	blx	r6
 801039e:	1c43      	adds	r3, r0, #1
 80103a0:	89a3      	ldrh	r3, [r4, #12]
 80103a2:	d106      	bne.n	80103b2 <__sflush_r+0x66>
 80103a4:	6829      	ldr	r1, [r5, #0]
 80103a6:	291d      	cmp	r1, #29
 80103a8:	d82c      	bhi.n	8010404 <__sflush_r+0xb8>
 80103aa:	4a2a      	ldr	r2, [pc, #168]	; (8010454 <__sflush_r+0x108>)
 80103ac:	40ca      	lsrs	r2, r1
 80103ae:	07d6      	lsls	r6, r2, #31
 80103b0:	d528      	bpl.n	8010404 <__sflush_r+0xb8>
 80103b2:	2200      	movs	r2, #0
 80103b4:	6062      	str	r2, [r4, #4]
 80103b6:	04d9      	lsls	r1, r3, #19
 80103b8:	6922      	ldr	r2, [r4, #16]
 80103ba:	6022      	str	r2, [r4, #0]
 80103bc:	d504      	bpl.n	80103c8 <__sflush_r+0x7c>
 80103be:	1c42      	adds	r2, r0, #1
 80103c0:	d101      	bne.n	80103c6 <__sflush_r+0x7a>
 80103c2:	682b      	ldr	r3, [r5, #0]
 80103c4:	b903      	cbnz	r3, 80103c8 <__sflush_r+0x7c>
 80103c6:	6560      	str	r0, [r4, #84]	; 0x54
 80103c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103ca:	602f      	str	r7, [r5, #0]
 80103cc:	2900      	cmp	r1, #0
 80103ce:	d0ca      	beq.n	8010366 <__sflush_r+0x1a>
 80103d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103d4:	4299      	cmp	r1, r3
 80103d6:	d002      	beq.n	80103de <__sflush_r+0x92>
 80103d8:	4628      	mov	r0, r5
 80103da:	f7ff fda9 	bl	800ff30 <_free_r>
 80103de:	2000      	movs	r0, #0
 80103e0:	6360      	str	r0, [r4, #52]	; 0x34
 80103e2:	e7c1      	b.n	8010368 <__sflush_r+0x1c>
 80103e4:	6a21      	ldr	r1, [r4, #32]
 80103e6:	2301      	movs	r3, #1
 80103e8:	4628      	mov	r0, r5
 80103ea:	47b0      	blx	r6
 80103ec:	1c41      	adds	r1, r0, #1
 80103ee:	d1c7      	bne.n	8010380 <__sflush_r+0x34>
 80103f0:	682b      	ldr	r3, [r5, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0c4      	beq.n	8010380 <__sflush_r+0x34>
 80103f6:	2b1d      	cmp	r3, #29
 80103f8:	d001      	beq.n	80103fe <__sflush_r+0xb2>
 80103fa:	2b16      	cmp	r3, #22
 80103fc:	d101      	bne.n	8010402 <__sflush_r+0xb6>
 80103fe:	602f      	str	r7, [r5, #0]
 8010400:	e7b1      	b.n	8010366 <__sflush_r+0x1a>
 8010402:	89a3      	ldrh	r3, [r4, #12]
 8010404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010408:	81a3      	strh	r3, [r4, #12]
 801040a:	e7ad      	b.n	8010368 <__sflush_r+0x1c>
 801040c:	690f      	ldr	r7, [r1, #16]
 801040e:	2f00      	cmp	r7, #0
 8010410:	d0a9      	beq.n	8010366 <__sflush_r+0x1a>
 8010412:	0793      	lsls	r3, r2, #30
 8010414:	680e      	ldr	r6, [r1, #0]
 8010416:	bf08      	it	eq
 8010418:	694b      	ldreq	r3, [r1, #20]
 801041a:	600f      	str	r7, [r1, #0]
 801041c:	bf18      	it	ne
 801041e:	2300      	movne	r3, #0
 8010420:	eba6 0807 	sub.w	r8, r6, r7
 8010424:	608b      	str	r3, [r1, #8]
 8010426:	f1b8 0f00 	cmp.w	r8, #0
 801042a:	dd9c      	ble.n	8010366 <__sflush_r+0x1a>
 801042c:	6a21      	ldr	r1, [r4, #32]
 801042e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010430:	4643      	mov	r3, r8
 8010432:	463a      	mov	r2, r7
 8010434:	4628      	mov	r0, r5
 8010436:	47b0      	blx	r6
 8010438:	2800      	cmp	r0, #0
 801043a:	dc06      	bgt.n	801044a <__sflush_r+0xfe>
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010442:	81a3      	strh	r3, [r4, #12]
 8010444:	f04f 30ff 	mov.w	r0, #4294967295
 8010448:	e78e      	b.n	8010368 <__sflush_r+0x1c>
 801044a:	4407      	add	r7, r0
 801044c:	eba8 0800 	sub.w	r8, r8, r0
 8010450:	e7e9      	b.n	8010426 <__sflush_r+0xda>
 8010452:	bf00      	nop
 8010454:	20400001 	.word	0x20400001

08010458 <_fflush_r>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	690b      	ldr	r3, [r1, #16]
 801045c:	4605      	mov	r5, r0
 801045e:	460c      	mov	r4, r1
 8010460:	b913      	cbnz	r3, 8010468 <_fflush_r+0x10>
 8010462:	2500      	movs	r5, #0
 8010464:	4628      	mov	r0, r5
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	b118      	cbz	r0, 8010472 <_fflush_r+0x1a>
 801046a:	6983      	ldr	r3, [r0, #24]
 801046c:	b90b      	cbnz	r3, 8010472 <_fflush_r+0x1a>
 801046e:	f7ff fc73 	bl	800fd58 <__sinit>
 8010472:	4b14      	ldr	r3, [pc, #80]	; (80104c4 <_fflush_r+0x6c>)
 8010474:	429c      	cmp	r4, r3
 8010476:	d11b      	bne.n	80104b0 <_fflush_r+0x58>
 8010478:	686c      	ldr	r4, [r5, #4]
 801047a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d0ef      	beq.n	8010462 <_fflush_r+0xa>
 8010482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010484:	07d0      	lsls	r0, r2, #31
 8010486:	d404      	bmi.n	8010492 <_fflush_r+0x3a>
 8010488:	0599      	lsls	r1, r3, #22
 801048a:	d402      	bmi.n	8010492 <_fflush_r+0x3a>
 801048c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801048e:	f7ff fd26 	bl	800fede <__retarget_lock_acquire_recursive>
 8010492:	4628      	mov	r0, r5
 8010494:	4621      	mov	r1, r4
 8010496:	f7ff ff59 	bl	801034c <__sflush_r>
 801049a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801049c:	07da      	lsls	r2, r3, #31
 801049e:	4605      	mov	r5, r0
 80104a0:	d4e0      	bmi.n	8010464 <_fflush_r+0xc>
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	059b      	lsls	r3, r3, #22
 80104a6:	d4dd      	bmi.n	8010464 <_fflush_r+0xc>
 80104a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104aa:	f7ff fd19 	bl	800fee0 <__retarget_lock_release_recursive>
 80104ae:	e7d9      	b.n	8010464 <_fflush_r+0xc>
 80104b0:	4b05      	ldr	r3, [pc, #20]	; (80104c8 <_fflush_r+0x70>)
 80104b2:	429c      	cmp	r4, r3
 80104b4:	d101      	bne.n	80104ba <_fflush_r+0x62>
 80104b6:	68ac      	ldr	r4, [r5, #8]
 80104b8:	e7df      	b.n	801047a <_fflush_r+0x22>
 80104ba:	4b04      	ldr	r3, [pc, #16]	; (80104cc <_fflush_r+0x74>)
 80104bc:	429c      	cmp	r4, r3
 80104be:	bf08      	it	eq
 80104c0:	68ec      	ldreq	r4, [r5, #12]
 80104c2:	e7da      	b.n	801047a <_fflush_r+0x22>
 80104c4:	08013ee8 	.word	0x08013ee8
 80104c8:	08013f08 	.word	0x08013f08
 80104cc:	08013ec8 	.word	0x08013ec8

080104d0 <_lseek_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d07      	ldr	r5, [pc, #28]	; (80104f0 <_lseek_r+0x20>)
 80104d4:	4604      	mov	r4, r0
 80104d6:	4608      	mov	r0, r1
 80104d8:	4611      	mov	r1, r2
 80104da:	2200      	movs	r2, #0
 80104dc:	602a      	str	r2, [r5, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	f7f1 fb1a 	bl	8001b18 <_lseek>
 80104e4:	1c43      	adds	r3, r0, #1
 80104e6:	d102      	bne.n	80104ee <_lseek_r+0x1e>
 80104e8:	682b      	ldr	r3, [r5, #0]
 80104ea:	b103      	cbz	r3, 80104ee <_lseek_r+0x1e>
 80104ec:	6023      	str	r3, [r4, #0]
 80104ee:	bd38      	pop	{r3, r4, r5, pc}
 80104f0:	2001b2f8 	.word	0x2001b2f8

080104f4 <__malloc_lock>:
 80104f4:	4801      	ldr	r0, [pc, #4]	; (80104fc <__malloc_lock+0x8>)
 80104f6:	f7ff bcf2 	b.w	800fede <__retarget_lock_acquire_recursive>
 80104fa:	bf00      	nop
 80104fc:	2001b2ec 	.word	0x2001b2ec

08010500 <__malloc_unlock>:
 8010500:	4801      	ldr	r0, [pc, #4]	; (8010508 <__malloc_unlock+0x8>)
 8010502:	f7ff bced 	b.w	800fee0 <__retarget_lock_release_recursive>
 8010506:	bf00      	nop
 8010508:	2001b2ec 	.word	0x2001b2ec

0801050c <__ssputs_r>:
 801050c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010510:	688e      	ldr	r6, [r1, #8]
 8010512:	429e      	cmp	r6, r3
 8010514:	4682      	mov	sl, r0
 8010516:	460c      	mov	r4, r1
 8010518:	4690      	mov	r8, r2
 801051a:	461f      	mov	r7, r3
 801051c:	d838      	bhi.n	8010590 <__ssputs_r+0x84>
 801051e:	898a      	ldrh	r2, [r1, #12]
 8010520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010524:	d032      	beq.n	801058c <__ssputs_r+0x80>
 8010526:	6825      	ldr	r5, [r4, #0]
 8010528:	6909      	ldr	r1, [r1, #16]
 801052a:	eba5 0901 	sub.w	r9, r5, r1
 801052e:	6965      	ldr	r5, [r4, #20]
 8010530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010538:	3301      	adds	r3, #1
 801053a:	444b      	add	r3, r9
 801053c:	106d      	asrs	r5, r5, #1
 801053e:	429d      	cmp	r5, r3
 8010540:	bf38      	it	cc
 8010542:	461d      	movcc	r5, r3
 8010544:	0553      	lsls	r3, r2, #21
 8010546:	d531      	bpl.n	80105ac <__ssputs_r+0xa0>
 8010548:	4629      	mov	r1, r5
 801054a:	f7ff fd5d 	bl	8010008 <_malloc_r>
 801054e:	4606      	mov	r6, r0
 8010550:	b950      	cbnz	r0, 8010568 <__ssputs_r+0x5c>
 8010552:	230c      	movs	r3, #12
 8010554:	f8ca 3000 	str.w	r3, [sl]
 8010558:	89a3      	ldrh	r3, [r4, #12]
 801055a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801055e:	81a3      	strh	r3, [r4, #12]
 8010560:	f04f 30ff 	mov.w	r0, #4294967295
 8010564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010568:	6921      	ldr	r1, [r4, #16]
 801056a:	464a      	mov	r2, r9
 801056c:	f7ff fcca 	bl	800ff04 <memcpy>
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801057a:	81a3      	strh	r3, [r4, #12]
 801057c:	6126      	str	r6, [r4, #16]
 801057e:	6165      	str	r5, [r4, #20]
 8010580:	444e      	add	r6, r9
 8010582:	eba5 0509 	sub.w	r5, r5, r9
 8010586:	6026      	str	r6, [r4, #0]
 8010588:	60a5      	str	r5, [r4, #8]
 801058a:	463e      	mov	r6, r7
 801058c:	42be      	cmp	r6, r7
 801058e:	d900      	bls.n	8010592 <__ssputs_r+0x86>
 8010590:	463e      	mov	r6, r7
 8010592:	6820      	ldr	r0, [r4, #0]
 8010594:	4632      	mov	r2, r6
 8010596:	4641      	mov	r1, r8
 8010598:	f000 fd82 	bl	80110a0 <memmove>
 801059c:	68a3      	ldr	r3, [r4, #8]
 801059e:	1b9b      	subs	r3, r3, r6
 80105a0:	60a3      	str	r3, [r4, #8]
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	4433      	add	r3, r6
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	2000      	movs	r0, #0
 80105aa:	e7db      	b.n	8010564 <__ssputs_r+0x58>
 80105ac:	462a      	mov	r2, r5
 80105ae:	f000 fd91 	bl	80110d4 <_realloc_r>
 80105b2:	4606      	mov	r6, r0
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d1e1      	bne.n	801057c <__ssputs_r+0x70>
 80105b8:	6921      	ldr	r1, [r4, #16]
 80105ba:	4650      	mov	r0, sl
 80105bc:	f7ff fcb8 	bl	800ff30 <_free_r>
 80105c0:	e7c7      	b.n	8010552 <__ssputs_r+0x46>
	...

080105c4 <_svfiprintf_r>:
 80105c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c8:	4698      	mov	r8, r3
 80105ca:	898b      	ldrh	r3, [r1, #12]
 80105cc:	061b      	lsls	r3, r3, #24
 80105ce:	b09d      	sub	sp, #116	; 0x74
 80105d0:	4607      	mov	r7, r0
 80105d2:	460d      	mov	r5, r1
 80105d4:	4614      	mov	r4, r2
 80105d6:	d50e      	bpl.n	80105f6 <_svfiprintf_r+0x32>
 80105d8:	690b      	ldr	r3, [r1, #16]
 80105da:	b963      	cbnz	r3, 80105f6 <_svfiprintf_r+0x32>
 80105dc:	2140      	movs	r1, #64	; 0x40
 80105de:	f7ff fd13 	bl	8010008 <_malloc_r>
 80105e2:	6028      	str	r0, [r5, #0]
 80105e4:	6128      	str	r0, [r5, #16]
 80105e6:	b920      	cbnz	r0, 80105f2 <_svfiprintf_r+0x2e>
 80105e8:	230c      	movs	r3, #12
 80105ea:	603b      	str	r3, [r7, #0]
 80105ec:	f04f 30ff 	mov.w	r0, #4294967295
 80105f0:	e0d1      	b.n	8010796 <_svfiprintf_r+0x1d2>
 80105f2:	2340      	movs	r3, #64	; 0x40
 80105f4:	616b      	str	r3, [r5, #20]
 80105f6:	2300      	movs	r3, #0
 80105f8:	9309      	str	r3, [sp, #36]	; 0x24
 80105fa:	2320      	movs	r3, #32
 80105fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010600:	f8cd 800c 	str.w	r8, [sp, #12]
 8010604:	2330      	movs	r3, #48	; 0x30
 8010606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107b0 <_svfiprintf_r+0x1ec>
 801060a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801060e:	f04f 0901 	mov.w	r9, #1
 8010612:	4623      	mov	r3, r4
 8010614:	469a      	mov	sl, r3
 8010616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801061a:	b10a      	cbz	r2, 8010620 <_svfiprintf_r+0x5c>
 801061c:	2a25      	cmp	r2, #37	; 0x25
 801061e:	d1f9      	bne.n	8010614 <_svfiprintf_r+0x50>
 8010620:	ebba 0b04 	subs.w	fp, sl, r4
 8010624:	d00b      	beq.n	801063e <_svfiprintf_r+0x7a>
 8010626:	465b      	mov	r3, fp
 8010628:	4622      	mov	r2, r4
 801062a:	4629      	mov	r1, r5
 801062c:	4638      	mov	r0, r7
 801062e:	f7ff ff6d 	bl	801050c <__ssputs_r>
 8010632:	3001      	adds	r0, #1
 8010634:	f000 80aa 	beq.w	801078c <_svfiprintf_r+0x1c8>
 8010638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801063a:	445a      	add	r2, fp
 801063c:	9209      	str	r2, [sp, #36]	; 0x24
 801063e:	f89a 3000 	ldrb.w	r3, [sl]
 8010642:	2b00      	cmp	r3, #0
 8010644:	f000 80a2 	beq.w	801078c <_svfiprintf_r+0x1c8>
 8010648:	2300      	movs	r3, #0
 801064a:	f04f 32ff 	mov.w	r2, #4294967295
 801064e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010652:	f10a 0a01 	add.w	sl, sl, #1
 8010656:	9304      	str	r3, [sp, #16]
 8010658:	9307      	str	r3, [sp, #28]
 801065a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801065e:	931a      	str	r3, [sp, #104]	; 0x68
 8010660:	4654      	mov	r4, sl
 8010662:	2205      	movs	r2, #5
 8010664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010668:	4851      	ldr	r0, [pc, #324]	; (80107b0 <_svfiprintf_r+0x1ec>)
 801066a:	f7ef fdb9 	bl	80001e0 <memchr>
 801066e:	9a04      	ldr	r2, [sp, #16]
 8010670:	b9d8      	cbnz	r0, 80106aa <_svfiprintf_r+0xe6>
 8010672:	06d0      	lsls	r0, r2, #27
 8010674:	bf44      	itt	mi
 8010676:	2320      	movmi	r3, #32
 8010678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801067c:	0711      	lsls	r1, r2, #28
 801067e:	bf44      	itt	mi
 8010680:	232b      	movmi	r3, #43	; 0x2b
 8010682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010686:	f89a 3000 	ldrb.w	r3, [sl]
 801068a:	2b2a      	cmp	r3, #42	; 0x2a
 801068c:	d015      	beq.n	80106ba <_svfiprintf_r+0xf6>
 801068e:	9a07      	ldr	r2, [sp, #28]
 8010690:	4654      	mov	r4, sl
 8010692:	2000      	movs	r0, #0
 8010694:	f04f 0c0a 	mov.w	ip, #10
 8010698:	4621      	mov	r1, r4
 801069a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801069e:	3b30      	subs	r3, #48	; 0x30
 80106a0:	2b09      	cmp	r3, #9
 80106a2:	d94e      	bls.n	8010742 <_svfiprintf_r+0x17e>
 80106a4:	b1b0      	cbz	r0, 80106d4 <_svfiprintf_r+0x110>
 80106a6:	9207      	str	r2, [sp, #28]
 80106a8:	e014      	b.n	80106d4 <_svfiprintf_r+0x110>
 80106aa:	eba0 0308 	sub.w	r3, r0, r8
 80106ae:	fa09 f303 	lsl.w	r3, r9, r3
 80106b2:	4313      	orrs	r3, r2
 80106b4:	9304      	str	r3, [sp, #16]
 80106b6:	46a2      	mov	sl, r4
 80106b8:	e7d2      	b.n	8010660 <_svfiprintf_r+0x9c>
 80106ba:	9b03      	ldr	r3, [sp, #12]
 80106bc:	1d19      	adds	r1, r3, #4
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	9103      	str	r1, [sp, #12]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	bfbb      	ittet	lt
 80106c6:	425b      	neglt	r3, r3
 80106c8:	f042 0202 	orrlt.w	r2, r2, #2
 80106cc:	9307      	strge	r3, [sp, #28]
 80106ce:	9307      	strlt	r3, [sp, #28]
 80106d0:	bfb8      	it	lt
 80106d2:	9204      	strlt	r2, [sp, #16]
 80106d4:	7823      	ldrb	r3, [r4, #0]
 80106d6:	2b2e      	cmp	r3, #46	; 0x2e
 80106d8:	d10c      	bne.n	80106f4 <_svfiprintf_r+0x130>
 80106da:	7863      	ldrb	r3, [r4, #1]
 80106dc:	2b2a      	cmp	r3, #42	; 0x2a
 80106de:	d135      	bne.n	801074c <_svfiprintf_r+0x188>
 80106e0:	9b03      	ldr	r3, [sp, #12]
 80106e2:	1d1a      	adds	r2, r3, #4
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	9203      	str	r2, [sp, #12]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	bfb8      	it	lt
 80106ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80106f0:	3402      	adds	r4, #2
 80106f2:	9305      	str	r3, [sp, #20]
 80106f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80107c0 <_svfiprintf_r+0x1fc>
 80106f8:	7821      	ldrb	r1, [r4, #0]
 80106fa:	2203      	movs	r2, #3
 80106fc:	4650      	mov	r0, sl
 80106fe:	f7ef fd6f 	bl	80001e0 <memchr>
 8010702:	b140      	cbz	r0, 8010716 <_svfiprintf_r+0x152>
 8010704:	2340      	movs	r3, #64	; 0x40
 8010706:	eba0 000a 	sub.w	r0, r0, sl
 801070a:	fa03 f000 	lsl.w	r0, r3, r0
 801070e:	9b04      	ldr	r3, [sp, #16]
 8010710:	4303      	orrs	r3, r0
 8010712:	3401      	adds	r4, #1
 8010714:	9304      	str	r3, [sp, #16]
 8010716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801071a:	4826      	ldr	r0, [pc, #152]	; (80107b4 <_svfiprintf_r+0x1f0>)
 801071c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010720:	2206      	movs	r2, #6
 8010722:	f7ef fd5d 	bl	80001e0 <memchr>
 8010726:	2800      	cmp	r0, #0
 8010728:	d038      	beq.n	801079c <_svfiprintf_r+0x1d8>
 801072a:	4b23      	ldr	r3, [pc, #140]	; (80107b8 <_svfiprintf_r+0x1f4>)
 801072c:	bb1b      	cbnz	r3, 8010776 <_svfiprintf_r+0x1b2>
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	3307      	adds	r3, #7
 8010732:	f023 0307 	bic.w	r3, r3, #7
 8010736:	3308      	adds	r3, #8
 8010738:	9303      	str	r3, [sp, #12]
 801073a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801073c:	4433      	add	r3, r6
 801073e:	9309      	str	r3, [sp, #36]	; 0x24
 8010740:	e767      	b.n	8010612 <_svfiprintf_r+0x4e>
 8010742:	fb0c 3202 	mla	r2, ip, r2, r3
 8010746:	460c      	mov	r4, r1
 8010748:	2001      	movs	r0, #1
 801074a:	e7a5      	b.n	8010698 <_svfiprintf_r+0xd4>
 801074c:	2300      	movs	r3, #0
 801074e:	3401      	adds	r4, #1
 8010750:	9305      	str	r3, [sp, #20]
 8010752:	4619      	mov	r1, r3
 8010754:	f04f 0c0a 	mov.w	ip, #10
 8010758:	4620      	mov	r0, r4
 801075a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801075e:	3a30      	subs	r2, #48	; 0x30
 8010760:	2a09      	cmp	r2, #9
 8010762:	d903      	bls.n	801076c <_svfiprintf_r+0x1a8>
 8010764:	2b00      	cmp	r3, #0
 8010766:	d0c5      	beq.n	80106f4 <_svfiprintf_r+0x130>
 8010768:	9105      	str	r1, [sp, #20]
 801076a:	e7c3      	b.n	80106f4 <_svfiprintf_r+0x130>
 801076c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010770:	4604      	mov	r4, r0
 8010772:	2301      	movs	r3, #1
 8010774:	e7f0      	b.n	8010758 <_svfiprintf_r+0x194>
 8010776:	ab03      	add	r3, sp, #12
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	462a      	mov	r2, r5
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <_svfiprintf_r+0x1f8>)
 801077e:	a904      	add	r1, sp, #16
 8010780:	4638      	mov	r0, r7
 8010782:	f3af 8000 	nop.w
 8010786:	1c42      	adds	r2, r0, #1
 8010788:	4606      	mov	r6, r0
 801078a:	d1d6      	bne.n	801073a <_svfiprintf_r+0x176>
 801078c:	89ab      	ldrh	r3, [r5, #12]
 801078e:	065b      	lsls	r3, r3, #25
 8010790:	f53f af2c 	bmi.w	80105ec <_svfiprintf_r+0x28>
 8010794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010796:	b01d      	add	sp, #116	; 0x74
 8010798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079c:	ab03      	add	r3, sp, #12
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	462a      	mov	r2, r5
 80107a2:	4b06      	ldr	r3, [pc, #24]	; (80107bc <_svfiprintf_r+0x1f8>)
 80107a4:	a904      	add	r1, sp, #16
 80107a6:	4638      	mov	r0, r7
 80107a8:	f000 f9d4 	bl	8010b54 <_printf_i>
 80107ac:	e7eb      	b.n	8010786 <_svfiprintf_r+0x1c2>
 80107ae:	bf00      	nop
 80107b0:	08013f2c 	.word	0x08013f2c
 80107b4:	08013f36 	.word	0x08013f36
 80107b8:	00000000 	.word	0x00000000
 80107bc:	0801050d 	.word	0x0801050d
 80107c0:	08013f32 	.word	0x08013f32

080107c4 <__sfputc_r>:
 80107c4:	6893      	ldr	r3, [r2, #8]
 80107c6:	3b01      	subs	r3, #1
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	b410      	push	{r4}
 80107cc:	6093      	str	r3, [r2, #8]
 80107ce:	da08      	bge.n	80107e2 <__sfputc_r+0x1e>
 80107d0:	6994      	ldr	r4, [r2, #24]
 80107d2:	42a3      	cmp	r3, r4
 80107d4:	db01      	blt.n	80107da <__sfputc_r+0x16>
 80107d6:	290a      	cmp	r1, #10
 80107d8:	d103      	bne.n	80107e2 <__sfputc_r+0x1e>
 80107da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107de:	f000 bb39 	b.w	8010e54 <__swbuf_r>
 80107e2:	6813      	ldr	r3, [r2, #0]
 80107e4:	1c58      	adds	r0, r3, #1
 80107e6:	6010      	str	r0, [r2, #0]
 80107e8:	7019      	strb	r1, [r3, #0]
 80107ea:	4608      	mov	r0, r1
 80107ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107f0:	4770      	bx	lr

080107f2 <__sfputs_r>:
 80107f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f4:	4606      	mov	r6, r0
 80107f6:	460f      	mov	r7, r1
 80107f8:	4614      	mov	r4, r2
 80107fa:	18d5      	adds	r5, r2, r3
 80107fc:	42ac      	cmp	r4, r5
 80107fe:	d101      	bne.n	8010804 <__sfputs_r+0x12>
 8010800:	2000      	movs	r0, #0
 8010802:	e007      	b.n	8010814 <__sfputs_r+0x22>
 8010804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010808:	463a      	mov	r2, r7
 801080a:	4630      	mov	r0, r6
 801080c:	f7ff ffda 	bl	80107c4 <__sfputc_r>
 8010810:	1c43      	adds	r3, r0, #1
 8010812:	d1f3      	bne.n	80107fc <__sfputs_r+0xa>
 8010814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010818 <_vfiprintf_r>:
 8010818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081c:	460d      	mov	r5, r1
 801081e:	b09d      	sub	sp, #116	; 0x74
 8010820:	4614      	mov	r4, r2
 8010822:	4698      	mov	r8, r3
 8010824:	4606      	mov	r6, r0
 8010826:	b118      	cbz	r0, 8010830 <_vfiprintf_r+0x18>
 8010828:	6983      	ldr	r3, [r0, #24]
 801082a:	b90b      	cbnz	r3, 8010830 <_vfiprintf_r+0x18>
 801082c:	f7ff fa94 	bl	800fd58 <__sinit>
 8010830:	4b89      	ldr	r3, [pc, #548]	; (8010a58 <_vfiprintf_r+0x240>)
 8010832:	429d      	cmp	r5, r3
 8010834:	d11b      	bne.n	801086e <_vfiprintf_r+0x56>
 8010836:	6875      	ldr	r5, [r6, #4]
 8010838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801083a:	07d9      	lsls	r1, r3, #31
 801083c:	d405      	bmi.n	801084a <_vfiprintf_r+0x32>
 801083e:	89ab      	ldrh	r3, [r5, #12]
 8010840:	059a      	lsls	r2, r3, #22
 8010842:	d402      	bmi.n	801084a <_vfiprintf_r+0x32>
 8010844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010846:	f7ff fb4a 	bl	800fede <__retarget_lock_acquire_recursive>
 801084a:	89ab      	ldrh	r3, [r5, #12]
 801084c:	071b      	lsls	r3, r3, #28
 801084e:	d501      	bpl.n	8010854 <_vfiprintf_r+0x3c>
 8010850:	692b      	ldr	r3, [r5, #16]
 8010852:	b9eb      	cbnz	r3, 8010890 <_vfiprintf_r+0x78>
 8010854:	4629      	mov	r1, r5
 8010856:	4630      	mov	r0, r6
 8010858:	f000 fb4e 	bl	8010ef8 <__swsetup_r>
 801085c:	b1c0      	cbz	r0, 8010890 <_vfiprintf_r+0x78>
 801085e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010860:	07dc      	lsls	r4, r3, #31
 8010862:	d50e      	bpl.n	8010882 <_vfiprintf_r+0x6a>
 8010864:	f04f 30ff 	mov.w	r0, #4294967295
 8010868:	b01d      	add	sp, #116	; 0x74
 801086a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086e:	4b7b      	ldr	r3, [pc, #492]	; (8010a5c <_vfiprintf_r+0x244>)
 8010870:	429d      	cmp	r5, r3
 8010872:	d101      	bne.n	8010878 <_vfiprintf_r+0x60>
 8010874:	68b5      	ldr	r5, [r6, #8]
 8010876:	e7df      	b.n	8010838 <_vfiprintf_r+0x20>
 8010878:	4b79      	ldr	r3, [pc, #484]	; (8010a60 <_vfiprintf_r+0x248>)
 801087a:	429d      	cmp	r5, r3
 801087c:	bf08      	it	eq
 801087e:	68f5      	ldreq	r5, [r6, #12]
 8010880:	e7da      	b.n	8010838 <_vfiprintf_r+0x20>
 8010882:	89ab      	ldrh	r3, [r5, #12]
 8010884:	0598      	lsls	r0, r3, #22
 8010886:	d4ed      	bmi.n	8010864 <_vfiprintf_r+0x4c>
 8010888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801088a:	f7ff fb29 	bl	800fee0 <__retarget_lock_release_recursive>
 801088e:	e7e9      	b.n	8010864 <_vfiprintf_r+0x4c>
 8010890:	2300      	movs	r3, #0
 8010892:	9309      	str	r3, [sp, #36]	; 0x24
 8010894:	2320      	movs	r3, #32
 8010896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801089a:	f8cd 800c 	str.w	r8, [sp, #12]
 801089e:	2330      	movs	r3, #48	; 0x30
 80108a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a64 <_vfiprintf_r+0x24c>
 80108a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108a8:	f04f 0901 	mov.w	r9, #1
 80108ac:	4623      	mov	r3, r4
 80108ae:	469a      	mov	sl, r3
 80108b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108b4:	b10a      	cbz	r2, 80108ba <_vfiprintf_r+0xa2>
 80108b6:	2a25      	cmp	r2, #37	; 0x25
 80108b8:	d1f9      	bne.n	80108ae <_vfiprintf_r+0x96>
 80108ba:	ebba 0b04 	subs.w	fp, sl, r4
 80108be:	d00b      	beq.n	80108d8 <_vfiprintf_r+0xc0>
 80108c0:	465b      	mov	r3, fp
 80108c2:	4622      	mov	r2, r4
 80108c4:	4629      	mov	r1, r5
 80108c6:	4630      	mov	r0, r6
 80108c8:	f7ff ff93 	bl	80107f2 <__sfputs_r>
 80108cc:	3001      	adds	r0, #1
 80108ce:	f000 80aa 	beq.w	8010a26 <_vfiprintf_r+0x20e>
 80108d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108d4:	445a      	add	r2, fp
 80108d6:	9209      	str	r2, [sp, #36]	; 0x24
 80108d8:	f89a 3000 	ldrb.w	r3, [sl]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f000 80a2 	beq.w	8010a26 <_vfiprintf_r+0x20e>
 80108e2:	2300      	movs	r3, #0
 80108e4:	f04f 32ff 	mov.w	r2, #4294967295
 80108e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108ec:	f10a 0a01 	add.w	sl, sl, #1
 80108f0:	9304      	str	r3, [sp, #16]
 80108f2:	9307      	str	r3, [sp, #28]
 80108f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108f8:	931a      	str	r3, [sp, #104]	; 0x68
 80108fa:	4654      	mov	r4, sl
 80108fc:	2205      	movs	r2, #5
 80108fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010902:	4858      	ldr	r0, [pc, #352]	; (8010a64 <_vfiprintf_r+0x24c>)
 8010904:	f7ef fc6c 	bl	80001e0 <memchr>
 8010908:	9a04      	ldr	r2, [sp, #16]
 801090a:	b9d8      	cbnz	r0, 8010944 <_vfiprintf_r+0x12c>
 801090c:	06d1      	lsls	r1, r2, #27
 801090e:	bf44      	itt	mi
 8010910:	2320      	movmi	r3, #32
 8010912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010916:	0713      	lsls	r3, r2, #28
 8010918:	bf44      	itt	mi
 801091a:	232b      	movmi	r3, #43	; 0x2b
 801091c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010920:	f89a 3000 	ldrb.w	r3, [sl]
 8010924:	2b2a      	cmp	r3, #42	; 0x2a
 8010926:	d015      	beq.n	8010954 <_vfiprintf_r+0x13c>
 8010928:	9a07      	ldr	r2, [sp, #28]
 801092a:	4654      	mov	r4, sl
 801092c:	2000      	movs	r0, #0
 801092e:	f04f 0c0a 	mov.w	ip, #10
 8010932:	4621      	mov	r1, r4
 8010934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010938:	3b30      	subs	r3, #48	; 0x30
 801093a:	2b09      	cmp	r3, #9
 801093c:	d94e      	bls.n	80109dc <_vfiprintf_r+0x1c4>
 801093e:	b1b0      	cbz	r0, 801096e <_vfiprintf_r+0x156>
 8010940:	9207      	str	r2, [sp, #28]
 8010942:	e014      	b.n	801096e <_vfiprintf_r+0x156>
 8010944:	eba0 0308 	sub.w	r3, r0, r8
 8010948:	fa09 f303 	lsl.w	r3, r9, r3
 801094c:	4313      	orrs	r3, r2
 801094e:	9304      	str	r3, [sp, #16]
 8010950:	46a2      	mov	sl, r4
 8010952:	e7d2      	b.n	80108fa <_vfiprintf_r+0xe2>
 8010954:	9b03      	ldr	r3, [sp, #12]
 8010956:	1d19      	adds	r1, r3, #4
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	9103      	str	r1, [sp, #12]
 801095c:	2b00      	cmp	r3, #0
 801095e:	bfbb      	ittet	lt
 8010960:	425b      	neglt	r3, r3
 8010962:	f042 0202 	orrlt.w	r2, r2, #2
 8010966:	9307      	strge	r3, [sp, #28]
 8010968:	9307      	strlt	r3, [sp, #28]
 801096a:	bfb8      	it	lt
 801096c:	9204      	strlt	r2, [sp, #16]
 801096e:	7823      	ldrb	r3, [r4, #0]
 8010970:	2b2e      	cmp	r3, #46	; 0x2e
 8010972:	d10c      	bne.n	801098e <_vfiprintf_r+0x176>
 8010974:	7863      	ldrb	r3, [r4, #1]
 8010976:	2b2a      	cmp	r3, #42	; 0x2a
 8010978:	d135      	bne.n	80109e6 <_vfiprintf_r+0x1ce>
 801097a:	9b03      	ldr	r3, [sp, #12]
 801097c:	1d1a      	adds	r2, r3, #4
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	9203      	str	r2, [sp, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	bfb8      	it	lt
 8010986:	f04f 33ff 	movlt.w	r3, #4294967295
 801098a:	3402      	adds	r4, #2
 801098c:	9305      	str	r3, [sp, #20]
 801098e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a74 <_vfiprintf_r+0x25c>
 8010992:	7821      	ldrb	r1, [r4, #0]
 8010994:	2203      	movs	r2, #3
 8010996:	4650      	mov	r0, sl
 8010998:	f7ef fc22 	bl	80001e0 <memchr>
 801099c:	b140      	cbz	r0, 80109b0 <_vfiprintf_r+0x198>
 801099e:	2340      	movs	r3, #64	; 0x40
 80109a0:	eba0 000a 	sub.w	r0, r0, sl
 80109a4:	fa03 f000 	lsl.w	r0, r3, r0
 80109a8:	9b04      	ldr	r3, [sp, #16]
 80109aa:	4303      	orrs	r3, r0
 80109ac:	3401      	adds	r4, #1
 80109ae:	9304      	str	r3, [sp, #16]
 80109b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109b4:	482c      	ldr	r0, [pc, #176]	; (8010a68 <_vfiprintf_r+0x250>)
 80109b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109ba:	2206      	movs	r2, #6
 80109bc:	f7ef fc10 	bl	80001e0 <memchr>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d03f      	beq.n	8010a44 <_vfiprintf_r+0x22c>
 80109c4:	4b29      	ldr	r3, [pc, #164]	; (8010a6c <_vfiprintf_r+0x254>)
 80109c6:	bb1b      	cbnz	r3, 8010a10 <_vfiprintf_r+0x1f8>
 80109c8:	9b03      	ldr	r3, [sp, #12]
 80109ca:	3307      	adds	r3, #7
 80109cc:	f023 0307 	bic.w	r3, r3, #7
 80109d0:	3308      	adds	r3, #8
 80109d2:	9303      	str	r3, [sp, #12]
 80109d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d6:	443b      	add	r3, r7
 80109d8:	9309      	str	r3, [sp, #36]	; 0x24
 80109da:	e767      	b.n	80108ac <_vfiprintf_r+0x94>
 80109dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80109e0:	460c      	mov	r4, r1
 80109e2:	2001      	movs	r0, #1
 80109e4:	e7a5      	b.n	8010932 <_vfiprintf_r+0x11a>
 80109e6:	2300      	movs	r3, #0
 80109e8:	3401      	adds	r4, #1
 80109ea:	9305      	str	r3, [sp, #20]
 80109ec:	4619      	mov	r1, r3
 80109ee:	f04f 0c0a 	mov.w	ip, #10
 80109f2:	4620      	mov	r0, r4
 80109f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109f8:	3a30      	subs	r2, #48	; 0x30
 80109fa:	2a09      	cmp	r2, #9
 80109fc:	d903      	bls.n	8010a06 <_vfiprintf_r+0x1ee>
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d0c5      	beq.n	801098e <_vfiprintf_r+0x176>
 8010a02:	9105      	str	r1, [sp, #20]
 8010a04:	e7c3      	b.n	801098e <_vfiprintf_r+0x176>
 8010a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e7f0      	b.n	80109f2 <_vfiprintf_r+0x1da>
 8010a10:	ab03      	add	r3, sp, #12
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	462a      	mov	r2, r5
 8010a16:	4b16      	ldr	r3, [pc, #88]	; (8010a70 <_vfiprintf_r+0x258>)
 8010a18:	a904      	add	r1, sp, #16
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f3af 8000 	nop.w
 8010a20:	4607      	mov	r7, r0
 8010a22:	1c78      	adds	r0, r7, #1
 8010a24:	d1d6      	bne.n	80109d4 <_vfiprintf_r+0x1bc>
 8010a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a28:	07d9      	lsls	r1, r3, #31
 8010a2a:	d405      	bmi.n	8010a38 <_vfiprintf_r+0x220>
 8010a2c:	89ab      	ldrh	r3, [r5, #12]
 8010a2e:	059a      	lsls	r2, r3, #22
 8010a30:	d402      	bmi.n	8010a38 <_vfiprintf_r+0x220>
 8010a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a34:	f7ff fa54 	bl	800fee0 <__retarget_lock_release_recursive>
 8010a38:	89ab      	ldrh	r3, [r5, #12]
 8010a3a:	065b      	lsls	r3, r3, #25
 8010a3c:	f53f af12 	bmi.w	8010864 <_vfiprintf_r+0x4c>
 8010a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a42:	e711      	b.n	8010868 <_vfiprintf_r+0x50>
 8010a44:	ab03      	add	r3, sp, #12
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	462a      	mov	r2, r5
 8010a4a:	4b09      	ldr	r3, [pc, #36]	; (8010a70 <_vfiprintf_r+0x258>)
 8010a4c:	a904      	add	r1, sp, #16
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f000 f880 	bl	8010b54 <_printf_i>
 8010a54:	e7e4      	b.n	8010a20 <_vfiprintf_r+0x208>
 8010a56:	bf00      	nop
 8010a58:	08013ee8 	.word	0x08013ee8
 8010a5c:	08013f08 	.word	0x08013f08
 8010a60:	08013ec8 	.word	0x08013ec8
 8010a64:	08013f2c 	.word	0x08013f2c
 8010a68:	08013f36 	.word	0x08013f36
 8010a6c:	00000000 	.word	0x00000000
 8010a70:	080107f3 	.word	0x080107f3
 8010a74:	08013f32 	.word	0x08013f32

08010a78 <_printf_common>:
 8010a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a7c:	4616      	mov	r6, r2
 8010a7e:	4699      	mov	r9, r3
 8010a80:	688a      	ldr	r2, [r1, #8]
 8010a82:	690b      	ldr	r3, [r1, #16]
 8010a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	bfb8      	it	lt
 8010a8c:	4613      	movlt	r3, r2
 8010a8e:	6033      	str	r3, [r6, #0]
 8010a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a94:	4607      	mov	r7, r0
 8010a96:	460c      	mov	r4, r1
 8010a98:	b10a      	cbz	r2, 8010a9e <_printf_common+0x26>
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	6033      	str	r3, [r6, #0]
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	0699      	lsls	r1, r3, #26
 8010aa2:	bf42      	ittt	mi
 8010aa4:	6833      	ldrmi	r3, [r6, #0]
 8010aa6:	3302      	addmi	r3, #2
 8010aa8:	6033      	strmi	r3, [r6, #0]
 8010aaa:	6825      	ldr	r5, [r4, #0]
 8010aac:	f015 0506 	ands.w	r5, r5, #6
 8010ab0:	d106      	bne.n	8010ac0 <_printf_common+0x48>
 8010ab2:	f104 0a19 	add.w	sl, r4, #25
 8010ab6:	68e3      	ldr	r3, [r4, #12]
 8010ab8:	6832      	ldr	r2, [r6, #0]
 8010aba:	1a9b      	subs	r3, r3, r2
 8010abc:	42ab      	cmp	r3, r5
 8010abe:	dc26      	bgt.n	8010b0e <_printf_common+0x96>
 8010ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ac4:	1e13      	subs	r3, r2, #0
 8010ac6:	6822      	ldr	r2, [r4, #0]
 8010ac8:	bf18      	it	ne
 8010aca:	2301      	movne	r3, #1
 8010acc:	0692      	lsls	r2, r2, #26
 8010ace:	d42b      	bmi.n	8010b28 <_printf_common+0xb0>
 8010ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ad4:	4649      	mov	r1, r9
 8010ad6:	4638      	mov	r0, r7
 8010ad8:	47c0      	blx	r8
 8010ada:	3001      	adds	r0, #1
 8010adc:	d01e      	beq.n	8010b1c <_printf_common+0xa4>
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	68e5      	ldr	r5, [r4, #12]
 8010ae2:	6832      	ldr	r2, [r6, #0]
 8010ae4:	f003 0306 	and.w	r3, r3, #6
 8010ae8:	2b04      	cmp	r3, #4
 8010aea:	bf08      	it	eq
 8010aec:	1aad      	subeq	r5, r5, r2
 8010aee:	68a3      	ldr	r3, [r4, #8]
 8010af0:	6922      	ldr	r2, [r4, #16]
 8010af2:	bf0c      	ite	eq
 8010af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010af8:	2500      	movne	r5, #0
 8010afa:	4293      	cmp	r3, r2
 8010afc:	bfc4      	itt	gt
 8010afe:	1a9b      	subgt	r3, r3, r2
 8010b00:	18ed      	addgt	r5, r5, r3
 8010b02:	2600      	movs	r6, #0
 8010b04:	341a      	adds	r4, #26
 8010b06:	42b5      	cmp	r5, r6
 8010b08:	d11a      	bne.n	8010b40 <_printf_common+0xc8>
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	e008      	b.n	8010b20 <_printf_common+0xa8>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	4652      	mov	r2, sl
 8010b12:	4649      	mov	r1, r9
 8010b14:	4638      	mov	r0, r7
 8010b16:	47c0      	blx	r8
 8010b18:	3001      	adds	r0, #1
 8010b1a:	d103      	bne.n	8010b24 <_printf_common+0xac>
 8010b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b24:	3501      	adds	r5, #1
 8010b26:	e7c6      	b.n	8010ab6 <_printf_common+0x3e>
 8010b28:	18e1      	adds	r1, r4, r3
 8010b2a:	1c5a      	adds	r2, r3, #1
 8010b2c:	2030      	movs	r0, #48	; 0x30
 8010b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b32:	4422      	add	r2, r4
 8010b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b3c:	3302      	adds	r3, #2
 8010b3e:	e7c7      	b.n	8010ad0 <_printf_common+0x58>
 8010b40:	2301      	movs	r3, #1
 8010b42:	4622      	mov	r2, r4
 8010b44:	4649      	mov	r1, r9
 8010b46:	4638      	mov	r0, r7
 8010b48:	47c0      	blx	r8
 8010b4a:	3001      	adds	r0, #1
 8010b4c:	d0e6      	beq.n	8010b1c <_printf_common+0xa4>
 8010b4e:	3601      	adds	r6, #1
 8010b50:	e7d9      	b.n	8010b06 <_printf_common+0x8e>
	...

08010b54 <_printf_i>:
 8010b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b58:	7e0f      	ldrb	r7, [r1, #24]
 8010b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b5c:	2f78      	cmp	r7, #120	; 0x78
 8010b5e:	4691      	mov	r9, r2
 8010b60:	4680      	mov	r8, r0
 8010b62:	460c      	mov	r4, r1
 8010b64:	469a      	mov	sl, r3
 8010b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b6a:	d807      	bhi.n	8010b7c <_printf_i+0x28>
 8010b6c:	2f62      	cmp	r7, #98	; 0x62
 8010b6e:	d80a      	bhi.n	8010b86 <_printf_i+0x32>
 8010b70:	2f00      	cmp	r7, #0
 8010b72:	f000 80d8 	beq.w	8010d26 <_printf_i+0x1d2>
 8010b76:	2f58      	cmp	r7, #88	; 0x58
 8010b78:	f000 80a3 	beq.w	8010cc2 <_printf_i+0x16e>
 8010b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b84:	e03a      	b.n	8010bfc <_printf_i+0xa8>
 8010b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b8a:	2b15      	cmp	r3, #21
 8010b8c:	d8f6      	bhi.n	8010b7c <_printf_i+0x28>
 8010b8e:	a101      	add	r1, pc, #4	; (adr r1, 8010b94 <_printf_i+0x40>)
 8010b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b94:	08010bed 	.word	0x08010bed
 8010b98:	08010c01 	.word	0x08010c01
 8010b9c:	08010b7d 	.word	0x08010b7d
 8010ba0:	08010b7d 	.word	0x08010b7d
 8010ba4:	08010b7d 	.word	0x08010b7d
 8010ba8:	08010b7d 	.word	0x08010b7d
 8010bac:	08010c01 	.word	0x08010c01
 8010bb0:	08010b7d 	.word	0x08010b7d
 8010bb4:	08010b7d 	.word	0x08010b7d
 8010bb8:	08010b7d 	.word	0x08010b7d
 8010bbc:	08010b7d 	.word	0x08010b7d
 8010bc0:	08010d0d 	.word	0x08010d0d
 8010bc4:	08010c31 	.word	0x08010c31
 8010bc8:	08010cef 	.word	0x08010cef
 8010bcc:	08010b7d 	.word	0x08010b7d
 8010bd0:	08010b7d 	.word	0x08010b7d
 8010bd4:	08010d2f 	.word	0x08010d2f
 8010bd8:	08010b7d 	.word	0x08010b7d
 8010bdc:	08010c31 	.word	0x08010c31
 8010be0:	08010b7d 	.word	0x08010b7d
 8010be4:	08010b7d 	.word	0x08010b7d
 8010be8:	08010cf7 	.word	0x08010cf7
 8010bec:	682b      	ldr	r3, [r5, #0]
 8010bee:	1d1a      	adds	r2, r3, #4
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	602a      	str	r2, [r5, #0]
 8010bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e0a3      	b.n	8010d48 <_printf_i+0x1f4>
 8010c00:	6820      	ldr	r0, [r4, #0]
 8010c02:	6829      	ldr	r1, [r5, #0]
 8010c04:	0606      	lsls	r6, r0, #24
 8010c06:	f101 0304 	add.w	r3, r1, #4
 8010c0a:	d50a      	bpl.n	8010c22 <_printf_i+0xce>
 8010c0c:	680e      	ldr	r6, [r1, #0]
 8010c0e:	602b      	str	r3, [r5, #0]
 8010c10:	2e00      	cmp	r6, #0
 8010c12:	da03      	bge.n	8010c1c <_printf_i+0xc8>
 8010c14:	232d      	movs	r3, #45	; 0x2d
 8010c16:	4276      	negs	r6, r6
 8010c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c1c:	485e      	ldr	r0, [pc, #376]	; (8010d98 <_printf_i+0x244>)
 8010c1e:	230a      	movs	r3, #10
 8010c20:	e019      	b.n	8010c56 <_printf_i+0x102>
 8010c22:	680e      	ldr	r6, [r1, #0]
 8010c24:	602b      	str	r3, [r5, #0]
 8010c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010c2a:	bf18      	it	ne
 8010c2c:	b236      	sxthne	r6, r6
 8010c2e:	e7ef      	b.n	8010c10 <_printf_i+0xbc>
 8010c30:	682b      	ldr	r3, [r5, #0]
 8010c32:	6820      	ldr	r0, [r4, #0]
 8010c34:	1d19      	adds	r1, r3, #4
 8010c36:	6029      	str	r1, [r5, #0]
 8010c38:	0601      	lsls	r1, r0, #24
 8010c3a:	d501      	bpl.n	8010c40 <_printf_i+0xec>
 8010c3c:	681e      	ldr	r6, [r3, #0]
 8010c3e:	e002      	b.n	8010c46 <_printf_i+0xf2>
 8010c40:	0646      	lsls	r6, r0, #25
 8010c42:	d5fb      	bpl.n	8010c3c <_printf_i+0xe8>
 8010c44:	881e      	ldrh	r6, [r3, #0]
 8010c46:	4854      	ldr	r0, [pc, #336]	; (8010d98 <_printf_i+0x244>)
 8010c48:	2f6f      	cmp	r7, #111	; 0x6f
 8010c4a:	bf0c      	ite	eq
 8010c4c:	2308      	moveq	r3, #8
 8010c4e:	230a      	movne	r3, #10
 8010c50:	2100      	movs	r1, #0
 8010c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c56:	6865      	ldr	r5, [r4, #4]
 8010c58:	60a5      	str	r5, [r4, #8]
 8010c5a:	2d00      	cmp	r5, #0
 8010c5c:	bfa2      	ittt	ge
 8010c5e:	6821      	ldrge	r1, [r4, #0]
 8010c60:	f021 0104 	bicge.w	r1, r1, #4
 8010c64:	6021      	strge	r1, [r4, #0]
 8010c66:	b90e      	cbnz	r6, 8010c6c <_printf_i+0x118>
 8010c68:	2d00      	cmp	r5, #0
 8010c6a:	d04d      	beq.n	8010d08 <_printf_i+0x1b4>
 8010c6c:	4615      	mov	r5, r2
 8010c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c72:	fb03 6711 	mls	r7, r3, r1, r6
 8010c76:	5dc7      	ldrb	r7, [r0, r7]
 8010c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c7c:	4637      	mov	r7, r6
 8010c7e:	42bb      	cmp	r3, r7
 8010c80:	460e      	mov	r6, r1
 8010c82:	d9f4      	bls.n	8010c6e <_printf_i+0x11a>
 8010c84:	2b08      	cmp	r3, #8
 8010c86:	d10b      	bne.n	8010ca0 <_printf_i+0x14c>
 8010c88:	6823      	ldr	r3, [r4, #0]
 8010c8a:	07de      	lsls	r6, r3, #31
 8010c8c:	d508      	bpl.n	8010ca0 <_printf_i+0x14c>
 8010c8e:	6923      	ldr	r3, [r4, #16]
 8010c90:	6861      	ldr	r1, [r4, #4]
 8010c92:	4299      	cmp	r1, r3
 8010c94:	bfde      	ittt	le
 8010c96:	2330      	movle	r3, #48	; 0x30
 8010c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ca0:	1b52      	subs	r2, r2, r5
 8010ca2:	6122      	str	r2, [r4, #16]
 8010ca4:	f8cd a000 	str.w	sl, [sp]
 8010ca8:	464b      	mov	r3, r9
 8010caa:	aa03      	add	r2, sp, #12
 8010cac:	4621      	mov	r1, r4
 8010cae:	4640      	mov	r0, r8
 8010cb0:	f7ff fee2 	bl	8010a78 <_printf_common>
 8010cb4:	3001      	adds	r0, #1
 8010cb6:	d14c      	bne.n	8010d52 <_printf_i+0x1fe>
 8010cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cbc:	b004      	add	sp, #16
 8010cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc2:	4835      	ldr	r0, [pc, #212]	; (8010d98 <_printf_i+0x244>)
 8010cc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010cc8:	6829      	ldr	r1, [r5, #0]
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010cd0:	6029      	str	r1, [r5, #0]
 8010cd2:	061d      	lsls	r5, r3, #24
 8010cd4:	d514      	bpl.n	8010d00 <_printf_i+0x1ac>
 8010cd6:	07df      	lsls	r7, r3, #31
 8010cd8:	bf44      	itt	mi
 8010cda:	f043 0320 	orrmi.w	r3, r3, #32
 8010cde:	6023      	strmi	r3, [r4, #0]
 8010ce0:	b91e      	cbnz	r6, 8010cea <_printf_i+0x196>
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	f023 0320 	bic.w	r3, r3, #32
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	2310      	movs	r3, #16
 8010cec:	e7b0      	b.n	8010c50 <_printf_i+0xfc>
 8010cee:	6823      	ldr	r3, [r4, #0]
 8010cf0:	f043 0320 	orr.w	r3, r3, #32
 8010cf4:	6023      	str	r3, [r4, #0]
 8010cf6:	2378      	movs	r3, #120	; 0x78
 8010cf8:	4828      	ldr	r0, [pc, #160]	; (8010d9c <_printf_i+0x248>)
 8010cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cfe:	e7e3      	b.n	8010cc8 <_printf_i+0x174>
 8010d00:	0659      	lsls	r1, r3, #25
 8010d02:	bf48      	it	mi
 8010d04:	b2b6      	uxthmi	r6, r6
 8010d06:	e7e6      	b.n	8010cd6 <_printf_i+0x182>
 8010d08:	4615      	mov	r5, r2
 8010d0a:	e7bb      	b.n	8010c84 <_printf_i+0x130>
 8010d0c:	682b      	ldr	r3, [r5, #0]
 8010d0e:	6826      	ldr	r6, [r4, #0]
 8010d10:	6961      	ldr	r1, [r4, #20]
 8010d12:	1d18      	adds	r0, r3, #4
 8010d14:	6028      	str	r0, [r5, #0]
 8010d16:	0635      	lsls	r5, r6, #24
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	d501      	bpl.n	8010d20 <_printf_i+0x1cc>
 8010d1c:	6019      	str	r1, [r3, #0]
 8010d1e:	e002      	b.n	8010d26 <_printf_i+0x1d2>
 8010d20:	0670      	lsls	r0, r6, #25
 8010d22:	d5fb      	bpl.n	8010d1c <_printf_i+0x1c8>
 8010d24:	8019      	strh	r1, [r3, #0]
 8010d26:	2300      	movs	r3, #0
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	4615      	mov	r5, r2
 8010d2c:	e7ba      	b.n	8010ca4 <_printf_i+0x150>
 8010d2e:	682b      	ldr	r3, [r5, #0]
 8010d30:	1d1a      	adds	r2, r3, #4
 8010d32:	602a      	str	r2, [r5, #0]
 8010d34:	681d      	ldr	r5, [r3, #0]
 8010d36:	6862      	ldr	r2, [r4, #4]
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f7ef fa50 	bl	80001e0 <memchr>
 8010d40:	b108      	cbz	r0, 8010d46 <_printf_i+0x1f2>
 8010d42:	1b40      	subs	r0, r0, r5
 8010d44:	6060      	str	r0, [r4, #4]
 8010d46:	6863      	ldr	r3, [r4, #4]
 8010d48:	6123      	str	r3, [r4, #16]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d50:	e7a8      	b.n	8010ca4 <_printf_i+0x150>
 8010d52:	6923      	ldr	r3, [r4, #16]
 8010d54:	462a      	mov	r2, r5
 8010d56:	4649      	mov	r1, r9
 8010d58:	4640      	mov	r0, r8
 8010d5a:	47d0      	blx	sl
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d0ab      	beq.n	8010cb8 <_printf_i+0x164>
 8010d60:	6823      	ldr	r3, [r4, #0]
 8010d62:	079b      	lsls	r3, r3, #30
 8010d64:	d413      	bmi.n	8010d8e <_printf_i+0x23a>
 8010d66:	68e0      	ldr	r0, [r4, #12]
 8010d68:	9b03      	ldr	r3, [sp, #12]
 8010d6a:	4298      	cmp	r0, r3
 8010d6c:	bfb8      	it	lt
 8010d6e:	4618      	movlt	r0, r3
 8010d70:	e7a4      	b.n	8010cbc <_printf_i+0x168>
 8010d72:	2301      	movs	r3, #1
 8010d74:	4632      	mov	r2, r6
 8010d76:	4649      	mov	r1, r9
 8010d78:	4640      	mov	r0, r8
 8010d7a:	47d0      	blx	sl
 8010d7c:	3001      	adds	r0, #1
 8010d7e:	d09b      	beq.n	8010cb8 <_printf_i+0x164>
 8010d80:	3501      	adds	r5, #1
 8010d82:	68e3      	ldr	r3, [r4, #12]
 8010d84:	9903      	ldr	r1, [sp, #12]
 8010d86:	1a5b      	subs	r3, r3, r1
 8010d88:	42ab      	cmp	r3, r5
 8010d8a:	dcf2      	bgt.n	8010d72 <_printf_i+0x21e>
 8010d8c:	e7eb      	b.n	8010d66 <_printf_i+0x212>
 8010d8e:	2500      	movs	r5, #0
 8010d90:	f104 0619 	add.w	r6, r4, #25
 8010d94:	e7f5      	b.n	8010d82 <_printf_i+0x22e>
 8010d96:	bf00      	nop
 8010d98:	08013f3d 	.word	0x08013f3d
 8010d9c:	08013f4e 	.word	0x08013f4e

08010da0 <_putc_r>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	460d      	mov	r5, r1
 8010da4:	4614      	mov	r4, r2
 8010da6:	4606      	mov	r6, r0
 8010da8:	b118      	cbz	r0, 8010db2 <_putc_r+0x12>
 8010daa:	6983      	ldr	r3, [r0, #24]
 8010dac:	b90b      	cbnz	r3, 8010db2 <_putc_r+0x12>
 8010dae:	f7fe ffd3 	bl	800fd58 <__sinit>
 8010db2:	4b1c      	ldr	r3, [pc, #112]	; (8010e24 <_putc_r+0x84>)
 8010db4:	429c      	cmp	r4, r3
 8010db6:	d124      	bne.n	8010e02 <_putc_r+0x62>
 8010db8:	6874      	ldr	r4, [r6, #4]
 8010dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dbc:	07d8      	lsls	r0, r3, #31
 8010dbe:	d405      	bmi.n	8010dcc <_putc_r+0x2c>
 8010dc0:	89a3      	ldrh	r3, [r4, #12]
 8010dc2:	0599      	lsls	r1, r3, #22
 8010dc4:	d402      	bmi.n	8010dcc <_putc_r+0x2c>
 8010dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dc8:	f7ff f889 	bl	800fede <__retarget_lock_acquire_recursive>
 8010dcc:	68a3      	ldr	r3, [r4, #8]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	60a3      	str	r3, [r4, #8]
 8010dd4:	da05      	bge.n	8010de2 <_putc_r+0x42>
 8010dd6:	69a2      	ldr	r2, [r4, #24]
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	db1c      	blt.n	8010e16 <_putc_r+0x76>
 8010ddc:	b2eb      	uxtb	r3, r5
 8010dde:	2b0a      	cmp	r3, #10
 8010de0:	d019      	beq.n	8010e16 <_putc_r+0x76>
 8010de2:	6823      	ldr	r3, [r4, #0]
 8010de4:	1c5a      	adds	r2, r3, #1
 8010de6:	6022      	str	r2, [r4, #0]
 8010de8:	701d      	strb	r5, [r3, #0]
 8010dea:	b2ed      	uxtb	r5, r5
 8010dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dee:	07da      	lsls	r2, r3, #31
 8010df0:	d405      	bmi.n	8010dfe <_putc_r+0x5e>
 8010df2:	89a3      	ldrh	r3, [r4, #12]
 8010df4:	059b      	lsls	r3, r3, #22
 8010df6:	d402      	bmi.n	8010dfe <_putc_r+0x5e>
 8010df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dfa:	f7ff f871 	bl	800fee0 <__retarget_lock_release_recursive>
 8010dfe:	4628      	mov	r0, r5
 8010e00:	bd70      	pop	{r4, r5, r6, pc}
 8010e02:	4b09      	ldr	r3, [pc, #36]	; (8010e28 <_putc_r+0x88>)
 8010e04:	429c      	cmp	r4, r3
 8010e06:	d101      	bne.n	8010e0c <_putc_r+0x6c>
 8010e08:	68b4      	ldr	r4, [r6, #8]
 8010e0a:	e7d6      	b.n	8010dba <_putc_r+0x1a>
 8010e0c:	4b07      	ldr	r3, [pc, #28]	; (8010e2c <_putc_r+0x8c>)
 8010e0e:	429c      	cmp	r4, r3
 8010e10:	bf08      	it	eq
 8010e12:	68f4      	ldreq	r4, [r6, #12]
 8010e14:	e7d1      	b.n	8010dba <_putc_r+0x1a>
 8010e16:	4629      	mov	r1, r5
 8010e18:	4622      	mov	r2, r4
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	f000 f81a 	bl	8010e54 <__swbuf_r>
 8010e20:	4605      	mov	r5, r0
 8010e22:	e7e3      	b.n	8010dec <_putc_r+0x4c>
 8010e24:	08013ee8 	.word	0x08013ee8
 8010e28:	08013f08 	.word	0x08013f08
 8010e2c:	08013ec8 	.word	0x08013ec8

08010e30 <_read_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d07      	ldr	r5, [pc, #28]	; (8010e50 <_read_r+0x20>)
 8010e34:	4604      	mov	r4, r0
 8010e36:	4608      	mov	r0, r1
 8010e38:	4611      	mov	r1, r2
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	602a      	str	r2, [r5, #0]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	f7f0 fe26 	bl	8001a90 <_read>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	d102      	bne.n	8010e4e <_read_r+0x1e>
 8010e48:	682b      	ldr	r3, [r5, #0]
 8010e4a:	b103      	cbz	r3, 8010e4e <_read_r+0x1e>
 8010e4c:	6023      	str	r3, [r4, #0]
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}
 8010e50:	2001b2f8 	.word	0x2001b2f8

08010e54 <__swbuf_r>:
 8010e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e56:	460e      	mov	r6, r1
 8010e58:	4614      	mov	r4, r2
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	b118      	cbz	r0, 8010e66 <__swbuf_r+0x12>
 8010e5e:	6983      	ldr	r3, [r0, #24]
 8010e60:	b90b      	cbnz	r3, 8010e66 <__swbuf_r+0x12>
 8010e62:	f7fe ff79 	bl	800fd58 <__sinit>
 8010e66:	4b21      	ldr	r3, [pc, #132]	; (8010eec <__swbuf_r+0x98>)
 8010e68:	429c      	cmp	r4, r3
 8010e6a:	d12b      	bne.n	8010ec4 <__swbuf_r+0x70>
 8010e6c:	686c      	ldr	r4, [r5, #4]
 8010e6e:	69a3      	ldr	r3, [r4, #24]
 8010e70:	60a3      	str	r3, [r4, #8]
 8010e72:	89a3      	ldrh	r3, [r4, #12]
 8010e74:	071a      	lsls	r2, r3, #28
 8010e76:	d52f      	bpl.n	8010ed8 <__swbuf_r+0x84>
 8010e78:	6923      	ldr	r3, [r4, #16]
 8010e7a:	b36b      	cbz	r3, 8010ed8 <__swbuf_r+0x84>
 8010e7c:	6923      	ldr	r3, [r4, #16]
 8010e7e:	6820      	ldr	r0, [r4, #0]
 8010e80:	1ac0      	subs	r0, r0, r3
 8010e82:	6963      	ldr	r3, [r4, #20]
 8010e84:	b2f6      	uxtb	r6, r6
 8010e86:	4283      	cmp	r3, r0
 8010e88:	4637      	mov	r7, r6
 8010e8a:	dc04      	bgt.n	8010e96 <__swbuf_r+0x42>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f7ff fae2 	bl	8010458 <_fflush_r>
 8010e94:	bb30      	cbnz	r0, 8010ee4 <__swbuf_r+0x90>
 8010e96:	68a3      	ldr	r3, [r4, #8]
 8010e98:	3b01      	subs	r3, #1
 8010e9a:	60a3      	str	r3, [r4, #8]
 8010e9c:	6823      	ldr	r3, [r4, #0]
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	6022      	str	r2, [r4, #0]
 8010ea2:	701e      	strb	r6, [r3, #0]
 8010ea4:	6963      	ldr	r3, [r4, #20]
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	4283      	cmp	r3, r0
 8010eaa:	d004      	beq.n	8010eb6 <__swbuf_r+0x62>
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	07db      	lsls	r3, r3, #31
 8010eb0:	d506      	bpl.n	8010ec0 <__swbuf_r+0x6c>
 8010eb2:	2e0a      	cmp	r6, #10
 8010eb4:	d104      	bne.n	8010ec0 <__swbuf_r+0x6c>
 8010eb6:	4621      	mov	r1, r4
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f7ff facd 	bl	8010458 <_fflush_r>
 8010ebe:	b988      	cbnz	r0, 8010ee4 <__swbuf_r+0x90>
 8010ec0:	4638      	mov	r0, r7
 8010ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec4:	4b0a      	ldr	r3, [pc, #40]	; (8010ef0 <__swbuf_r+0x9c>)
 8010ec6:	429c      	cmp	r4, r3
 8010ec8:	d101      	bne.n	8010ece <__swbuf_r+0x7a>
 8010eca:	68ac      	ldr	r4, [r5, #8]
 8010ecc:	e7cf      	b.n	8010e6e <__swbuf_r+0x1a>
 8010ece:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <__swbuf_r+0xa0>)
 8010ed0:	429c      	cmp	r4, r3
 8010ed2:	bf08      	it	eq
 8010ed4:	68ec      	ldreq	r4, [r5, #12]
 8010ed6:	e7ca      	b.n	8010e6e <__swbuf_r+0x1a>
 8010ed8:	4621      	mov	r1, r4
 8010eda:	4628      	mov	r0, r5
 8010edc:	f000 f80c 	bl	8010ef8 <__swsetup_r>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0cb      	beq.n	8010e7c <__swbuf_r+0x28>
 8010ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ee8:	e7ea      	b.n	8010ec0 <__swbuf_r+0x6c>
 8010eea:	bf00      	nop
 8010eec:	08013ee8 	.word	0x08013ee8
 8010ef0:	08013f08 	.word	0x08013f08
 8010ef4:	08013ec8 	.word	0x08013ec8

08010ef8 <__swsetup_r>:
 8010ef8:	4b32      	ldr	r3, [pc, #200]	; (8010fc4 <__swsetup_r+0xcc>)
 8010efa:	b570      	push	{r4, r5, r6, lr}
 8010efc:	681d      	ldr	r5, [r3, #0]
 8010efe:	4606      	mov	r6, r0
 8010f00:	460c      	mov	r4, r1
 8010f02:	b125      	cbz	r5, 8010f0e <__swsetup_r+0x16>
 8010f04:	69ab      	ldr	r3, [r5, #24]
 8010f06:	b913      	cbnz	r3, 8010f0e <__swsetup_r+0x16>
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f7fe ff25 	bl	800fd58 <__sinit>
 8010f0e:	4b2e      	ldr	r3, [pc, #184]	; (8010fc8 <__swsetup_r+0xd0>)
 8010f10:	429c      	cmp	r4, r3
 8010f12:	d10f      	bne.n	8010f34 <__swsetup_r+0x3c>
 8010f14:	686c      	ldr	r4, [r5, #4]
 8010f16:	89a3      	ldrh	r3, [r4, #12]
 8010f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f1c:	0719      	lsls	r1, r3, #28
 8010f1e:	d42c      	bmi.n	8010f7a <__swsetup_r+0x82>
 8010f20:	06dd      	lsls	r5, r3, #27
 8010f22:	d411      	bmi.n	8010f48 <__swsetup_r+0x50>
 8010f24:	2309      	movs	r3, #9
 8010f26:	6033      	str	r3, [r6, #0]
 8010f28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f2c:	81a3      	strh	r3, [r4, #12]
 8010f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f32:	e03e      	b.n	8010fb2 <__swsetup_r+0xba>
 8010f34:	4b25      	ldr	r3, [pc, #148]	; (8010fcc <__swsetup_r+0xd4>)
 8010f36:	429c      	cmp	r4, r3
 8010f38:	d101      	bne.n	8010f3e <__swsetup_r+0x46>
 8010f3a:	68ac      	ldr	r4, [r5, #8]
 8010f3c:	e7eb      	b.n	8010f16 <__swsetup_r+0x1e>
 8010f3e:	4b24      	ldr	r3, [pc, #144]	; (8010fd0 <__swsetup_r+0xd8>)
 8010f40:	429c      	cmp	r4, r3
 8010f42:	bf08      	it	eq
 8010f44:	68ec      	ldreq	r4, [r5, #12]
 8010f46:	e7e6      	b.n	8010f16 <__swsetup_r+0x1e>
 8010f48:	0758      	lsls	r0, r3, #29
 8010f4a:	d512      	bpl.n	8010f72 <__swsetup_r+0x7a>
 8010f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f4e:	b141      	cbz	r1, 8010f62 <__swsetup_r+0x6a>
 8010f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f54:	4299      	cmp	r1, r3
 8010f56:	d002      	beq.n	8010f5e <__swsetup_r+0x66>
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f7fe ffe9 	bl	800ff30 <_free_r>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	6363      	str	r3, [r4, #52]	; 0x34
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f68:	81a3      	strh	r3, [r4, #12]
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	6063      	str	r3, [r4, #4]
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	89a3      	ldrh	r3, [r4, #12]
 8010f74:	f043 0308 	orr.w	r3, r3, #8
 8010f78:	81a3      	strh	r3, [r4, #12]
 8010f7a:	6923      	ldr	r3, [r4, #16]
 8010f7c:	b94b      	cbnz	r3, 8010f92 <__swsetup_r+0x9a>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f88:	d003      	beq.n	8010f92 <__swsetup_r+0x9a>
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f000 f847 	bl	8011020 <__smakebuf_r>
 8010f92:	89a0      	ldrh	r0, [r4, #12]
 8010f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f98:	f010 0301 	ands.w	r3, r0, #1
 8010f9c:	d00a      	beq.n	8010fb4 <__swsetup_r+0xbc>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60a3      	str	r3, [r4, #8]
 8010fa2:	6963      	ldr	r3, [r4, #20]
 8010fa4:	425b      	negs	r3, r3
 8010fa6:	61a3      	str	r3, [r4, #24]
 8010fa8:	6923      	ldr	r3, [r4, #16]
 8010faa:	b943      	cbnz	r3, 8010fbe <__swsetup_r+0xc6>
 8010fac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010fb0:	d1ba      	bne.n	8010f28 <__swsetup_r+0x30>
 8010fb2:	bd70      	pop	{r4, r5, r6, pc}
 8010fb4:	0781      	lsls	r1, r0, #30
 8010fb6:	bf58      	it	pl
 8010fb8:	6963      	ldrpl	r3, [r4, #20]
 8010fba:	60a3      	str	r3, [r4, #8]
 8010fbc:	e7f4      	b.n	8010fa8 <__swsetup_r+0xb0>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	e7f7      	b.n	8010fb2 <__swsetup_r+0xba>
 8010fc2:	bf00      	nop
 8010fc4:	20000250 	.word	0x20000250
 8010fc8:	08013ee8 	.word	0x08013ee8
 8010fcc:	08013f08 	.word	0x08013f08
 8010fd0:	08013ec8 	.word	0x08013ec8

08010fd4 <__swhatbuf_r>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	460e      	mov	r6, r1
 8010fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fdc:	2900      	cmp	r1, #0
 8010fde:	b096      	sub	sp, #88	; 0x58
 8010fe0:	4614      	mov	r4, r2
 8010fe2:	461d      	mov	r5, r3
 8010fe4:	da08      	bge.n	8010ff8 <__swhatbuf_r+0x24>
 8010fe6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010fea:	2200      	movs	r2, #0
 8010fec:	602a      	str	r2, [r5, #0]
 8010fee:	061a      	lsls	r2, r3, #24
 8010ff0:	d410      	bmi.n	8011014 <__swhatbuf_r+0x40>
 8010ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ff6:	e00e      	b.n	8011016 <__swhatbuf_r+0x42>
 8010ff8:	466a      	mov	r2, sp
 8010ffa:	f000 f89b 	bl	8011134 <_fstat_r>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	dbf1      	blt.n	8010fe6 <__swhatbuf_r+0x12>
 8011002:	9a01      	ldr	r2, [sp, #4]
 8011004:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011008:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801100c:	425a      	negs	r2, r3
 801100e:	415a      	adcs	r2, r3
 8011010:	602a      	str	r2, [r5, #0]
 8011012:	e7ee      	b.n	8010ff2 <__swhatbuf_r+0x1e>
 8011014:	2340      	movs	r3, #64	; 0x40
 8011016:	2000      	movs	r0, #0
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	b016      	add	sp, #88	; 0x58
 801101c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011020 <__smakebuf_r>:
 8011020:	898b      	ldrh	r3, [r1, #12]
 8011022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011024:	079d      	lsls	r5, r3, #30
 8011026:	4606      	mov	r6, r0
 8011028:	460c      	mov	r4, r1
 801102a:	d507      	bpl.n	801103c <__smakebuf_r+0x1c>
 801102c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011030:	6023      	str	r3, [r4, #0]
 8011032:	6123      	str	r3, [r4, #16]
 8011034:	2301      	movs	r3, #1
 8011036:	6163      	str	r3, [r4, #20]
 8011038:	b002      	add	sp, #8
 801103a:	bd70      	pop	{r4, r5, r6, pc}
 801103c:	ab01      	add	r3, sp, #4
 801103e:	466a      	mov	r2, sp
 8011040:	f7ff ffc8 	bl	8010fd4 <__swhatbuf_r>
 8011044:	9900      	ldr	r1, [sp, #0]
 8011046:	4605      	mov	r5, r0
 8011048:	4630      	mov	r0, r6
 801104a:	f7fe ffdd 	bl	8010008 <_malloc_r>
 801104e:	b948      	cbnz	r0, 8011064 <__smakebuf_r+0x44>
 8011050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011054:	059a      	lsls	r2, r3, #22
 8011056:	d4ef      	bmi.n	8011038 <__smakebuf_r+0x18>
 8011058:	f023 0303 	bic.w	r3, r3, #3
 801105c:	f043 0302 	orr.w	r3, r3, #2
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	e7e3      	b.n	801102c <__smakebuf_r+0xc>
 8011064:	4b0d      	ldr	r3, [pc, #52]	; (801109c <__smakebuf_r+0x7c>)
 8011066:	62b3      	str	r3, [r6, #40]	; 0x28
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	6020      	str	r0, [r4, #0]
 801106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	9b00      	ldr	r3, [sp, #0]
 8011074:	6163      	str	r3, [r4, #20]
 8011076:	9b01      	ldr	r3, [sp, #4]
 8011078:	6120      	str	r0, [r4, #16]
 801107a:	b15b      	cbz	r3, 8011094 <__smakebuf_r+0x74>
 801107c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011080:	4630      	mov	r0, r6
 8011082:	f000 f869 	bl	8011158 <_isatty_r>
 8011086:	b128      	cbz	r0, 8011094 <__smakebuf_r+0x74>
 8011088:	89a3      	ldrh	r3, [r4, #12]
 801108a:	f023 0303 	bic.w	r3, r3, #3
 801108e:	f043 0301 	orr.w	r3, r3, #1
 8011092:	81a3      	strh	r3, [r4, #12]
 8011094:	89a0      	ldrh	r0, [r4, #12]
 8011096:	4305      	orrs	r5, r0
 8011098:	81a5      	strh	r5, [r4, #12]
 801109a:	e7cd      	b.n	8011038 <__smakebuf_r+0x18>
 801109c:	0800fcf1 	.word	0x0800fcf1

080110a0 <memmove>:
 80110a0:	4288      	cmp	r0, r1
 80110a2:	b510      	push	{r4, lr}
 80110a4:	eb01 0402 	add.w	r4, r1, r2
 80110a8:	d902      	bls.n	80110b0 <memmove+0x10>
 80110aa:	4284      	cmp	r4, r0
 80110ac:	4623      	mov	r3, r4
 80110ae:	d807      	bhi.n	80110c0 <memmove+0x20>
 80110b0:	1e43      	subs	r3, r0, #1
 80110b2:	42a1      	cmp	r1, r4
 80110b4:	d008      	beq.n	80110c8 <memmove+0x28>
 80110b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110be:	e7f8      	b.n	80110b2 <memmove+0x12>
 80110c0:	4402      	add	r2, r0
 80110c2:	4601      	mov	r1, r0
 80110c4:	428a      	cmp	r2, r1
 80110c6:	d100      	bne.n	80110ca <memmove+0x2a>
 80110c8:	bd10      	pop	{r4, pc}
 80110ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110d2:	e7f7      	b.n	80110c4 <memmove+0x24>

080110d4 <_realloc_r>:
 80110d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110d8:	4680      	mov	r8, r0
 80110da:	4614      	mov	r4, r2
 80110dc:	460e      	mov	r6, r1
 80110de:	b921      	cbnz	r1, 80110ea <_realloc_r+0x16>
 80110e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110e4:	4611      	mov	r1, r2
 80110e6:	f7fe bf8f 	b.w	8010008 <_malloc_r>
 80110ea:	b92a      	cbnz	r2, 80110f8 <_realloc_r+0x24>
 80110ec:	f7fe ff20 	bl	800ff30 <_free_r>
 80110f0:	4625      	mov	r5, r4
 80110f2:	4628      	mov	r0, r5
 80110f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110f8:	f000 f83e 	bl	8011178 <_malloc_usable_size_r>
 80110fc:	4284      	cmp	r4, r0
 80110fe:	4607      	mov	r7, r0
 8011100:	d802      	bhi.n	8011108 <_realloc_r+0x34>
 8011102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011106:	d812      	bhi.n	801112e <_realloc_r+0x5a>
 8011108:	4621      	mov	r1, r4
 801110a:	4640      	mov	r0, r8
 801110c:	f7fe ff7c 	bl	8010008 <_malloc_r>
 8011110:	4605      	mov	r5, r0
 8011112:	2800      	cmp	r0, #0
 8011114:	d0ed      	beq.n	80110f2 <_realloc_r+0x1e>
 8011116:	42bc      	cmp	r4, r7
 8011118:	4622      	mov	r2, r4
 801111a:	4631      	mov	r1, r6
 801111c:	bf28      	it	cs
 801111e:	463a      	movcs	r2, r7
 8011120:	f7fe fef0 	bl	800ff04 <memcpy>
 8011124:	4631      	mov	r1, r6
 8011126:	4640      	mov	r0, r8
 8011128:	f7fe ff02 	bl	800ff30 <_free_r>
 801112c:	e7e1      	b.n	80110f2 <_realloc_r+0x1e>
 801112e:	4635      	mov	r5, r6
 8011130:	e7df      	b.n	80110f2 <_realloc_r+0x1e>
	...

08011134 <_fstat_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4d07      	ldr	r5, [pc, #28]	; (8011154 <_fstat_r+0x20>)
 8011138:	2300      	movs	r3, #0
 801113a:	4604      	mov	r4, r0
 801113c:	4608      	mov	r0, r1
 801113e:	4611      	mov	r1, r2
 8011140:	602b      	str	r3, [r5, #0]
 8011142:	f7f0 fcce 	bl	8001ae2 <_fstat>
 8011146:	1c43      	adds	r3, r0, #1
 8011148:	d102      	bne.n	8011150 <_fstat_r+0x1c>
 801114a:	682b      	ldr	r3, [r5, #0]
 801114c:	b103      	cbz	r3, 8011150 <_fstat_r+0x1c>
 801114e:	6023      	str	r3, [r4, #0]
 8011150:	bd38      	pop	{r3, r4, r5, pc}
 8011152:	bf00      	nop
 8011154:	2001b2f8 	.word	0x2001b2f8

08011158 <_isatty_r>:
 8011158:	b538      	push	{r3, r4, r5, lr}
 801115a:	4d06      	ldr	r5, [pc, #24]	; (8011174 <_isatty_r+0x1c>)
 801115c:	2300      	movs	r3, #0
 801115e:	4604      	mov	r4, r0
 8011160:	4608      	mov	r0, r1
 8011162:	602b      	str	r3, [r5, #0]
 8011164:	f7f0 fccd 	bl	8001b02 <_isatty>
 8011168:	1c43      	adds	r3, r0, #1
 801116a:	d102      	bne.n	8011172 <_isatty_r+0x1a>
 801116c:	682b      	ldr	r3, [r5, #0]
 801116e:	b103      	cbz	r3, 8011172 <_isatty_r+0x1a>
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	bd38      	pop	{r3, r4, r5, pc}
 8011174:	2001b2f8 	.word	0x2001b2f8

08011178 <_malloc_usable_size_r>:
 8011178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801117c:	1f18      	subs	r0, r3, #4
 801117e:	2b00      	cmp	r3, #0
 8011180:	bfbc      	itt	lt
 8011182:	580b      	ldrlt	r3, [r1, r0]
 8011184:	18c0      	addlt	r0, r0, r3
 8011186:	4770      	bx	lr

08011188 <_init>:
 8011188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801118a:	bf00      	nop
 801118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801118e:	bc08      	pop	{r3}
 8011190:	469e      	mov	lr, r3
 8011192:	4770      	bx	lr

08011194 <_fini>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	bf00      	nop
 8011198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801119a:	bc08      	pop	{r3}
 801119c:	469e      	mov	lr, r3
 801119e:	4770      	bx	lr
